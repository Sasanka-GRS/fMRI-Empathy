#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {}
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; }
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; }
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr;
  size_t sz0, sz1;
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {}
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T>
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow;
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline int      safe_add(int32_t a, int32_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int64_t a, int64_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int32_t a, int64_t b) { return safe_add_<int64_t>(a,b); }
static inline int64_t  safe_add(int64_t a, int32_t b) { return safe_add_<int64_t>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow;
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int64_t a, int64_t b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int a, int64_t b) { return safe_mul_<int64_t>(a,b); }
static inline int64_t safe_mul(int64_t a, int b) { return safe_mul_<int64_t>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::DJCDomainType val)
{
  switch (val)
  {
    case DJCDomainType::EqualTo: os << "DJCDomainType::EqualTo"; break;
    case DJCDomainType::LessThan: os << "DJCDomainType::LessThan"; break;
    case DJCDomainType::GreaterThan: os << "DJCDomainType::GreaterThan"; break;
    case DJCDomainType::IsFree: os << "DJCDomainType::IsFree"; break;
    case DJCDomainType::InRange: os << "DJCDomainType::InRange"; break;
    case DJCDomainType::InQCone: os << "DJCDomainType::InQCone"; break;
    case DJCDomainType::InRotatedQCone: os << "DJCDomainType::InRotatedQCone"; break;
    case DJCDomainType::InPExpCone: os << "DJCDomainType::InPExpCone"; break;
    case DJCDomainType::InPPowCone: os << "DJCDomainType::InPPowCone"; break;
    case DJCDomainType::InDExpCone: os << "DJCDomainType::InDExpCone"; break;
    case DJCDomainType::InDPowCone: os << "DJCDomainType::InDPowCone"; break;
    case DJCDomainType::InOneNormCone: os << "DJCDomainType::InOneNormCone"; break;
    case DJCDomainType::InInfNormCone: os << "DJCDomainType::InInfNormCone"; break;
    case DJCDomainType::InPGeoMeanCone: os << "DJCDomainType::InPGeoMeanCone"; break;
    case DJCDomainType::InDGeoMeanCone: os << "DJCDomainType::InDGeoMeanCone"; break;
    case DJCDomainType::InPSDCone: os << "DJCDomainType::InPSDCone"; break;
    default: os << "DJCDomainType.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val)
{
  switch (val)
  {
    case StatusKey::Unknown: os << "StatusKey::Unknown"; break;
    case StatusKey::Basic: os << "StatusKey::Basic"; break;
    case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;
    case StatusKey::OnBound: os << "StatusKey::OnBound"; break;
    case StatusKey::Infinity: os << "StatusKey::Infinity"; break;
    default: os << "StatusKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val)
{
  switch (val)
  {
    case SolutionType::Default: os << "SolutionType::Default"; break;
    case SolutionType::Basic: os << "SolutionType::Basic"; break;
    case SolutionType::Interior: os << "SolutionType::Interior"; break;
    case SolutionType::Integer: os << "SolutionType::Integer"; break;
    default: os << "SolutionType.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolverStatus val)
{
  switch (val)
  {
    case SolverStatus::OK: os << "SolverStatus::OK"; break;
    case SolverStatus::Error: os << "SolverStatus::Error"; break;
    case SolverStatus::LostRace: os << "SolverStatus::LostRace"; break;
    default: os << "SolverStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val)
{
  switch (val)
  {
    case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;
    case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;
    case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;
    case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;
    case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;
    case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;
    case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;
    case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;
    case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;
    default: os << "ProblemStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val)
{
  switch (val)
  {
    case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;
    case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;
    case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;
    case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;
    default: os << "AccSolutionStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val)
{
  switch (val)
  {
    case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;
    case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;
    case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;
    case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;
    case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;
    case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;
    default: os << "SolutionStatus.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val)
{
  switch (val)
  {
    case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;
    case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;
    case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;
    default: os << "ObjectiveSense.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val)
{
  switch (val)
  {
    case QConeKey::InQCone: os << "QConeKey::InQCone"; break;
    case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;
    case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;
    case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;
    case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;
    case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;
    case QConeKey::InPGeoMeanCone: os << "QConeKey::InPGeoMeanCone"; break;
    case QConeKey::InDGeoMeanCone: os << "QConeKey::InDGeoMeanCone"; break;
    case QConeKey::Positive: os << "QConeKey::Positive"; break;
    case QConeKey::Negative: os << "QConeKey::Negative"; break;
    case QConeKey::Unbounded: os << "QConeKey::Unbounded"; break;
    case QConeKey::Zero: os << "QConeKey::Zero"; break;
    case QConeKey::InPSDCone: os << "QConeKey::InPSDCone"; break;
    case QConeKey::InSVecPSDCone: os << "QConeKey::InSVecPSDCone"; break;
    default: os << "QConeKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val)
{
  switch (val)
  {
    case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;
    case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;
    default: os << "PSDKey.<invalid>"; break;
  }
  return os;
}
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val)
{
  switch (val)
  {
    case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;
    case RelationKey::LessThan: os << "RelationKey::LessThan"; break;
    case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;
    case RelationKey::IsFree: os << "RelationKey::IsFree"; break;
    case RelationKey::InRange: os << "RelationKey::InRange"; break;
    default: os << "RelationKey.<invalid>"; break;
  }
  return os;
}
// class Disjunction { // @ src/fusion/Disjunction.mbi:270:4-275:5
mosek::fusion::Disjunction::Disjunction(mosek::fusion::p_Disjunction *_impl) : _impl(_impl) { /*std::cout << "Disjunction() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Disjunction::~Disjunction() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Disjunction::p_Disjunction
  (::mosek::fusion::Disjunction * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Disjunction.ctor @ src/fusion/Disjunction.mbi:272:6-274:7
mosek::fusion::Disjunction::t mosek::fusion::p_Disjunction::_new_Disjunction
  (int64_t _7_id)
{ return new mosek::fusion::Disjunction(_7_id); }
mosek::fusion::Disjunction::Disjunction
  (int64_t _7_id) : 
   Disjunction(new mosek::fusion::p_Disjunction(this))
{ mosek::fusion::p_Disjunction::_get_impl(this)->_initialize(_7_id); }
void mosek::fusion::p_Disjunction::_initialize  (int64_t _7_id)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Disjunction::_get_impl(::mosek::fusion::Disjunction::t(_pubthis))->id = _7_id;
  }
}
// mosek.fusion.Disjunction.ctor

void mosek::fusion::p_Disjunction::destroy()
{
}
void mosek::fusion::Disjunction::destroy() { mosek::fusion::p_Disjunction::_get_impl(this)->destroy(); }
// } class Disjunction
// class Term { // @ src/fusion/Disjunction.mbi:214:4-264:5
mosek::fusion::Term::Term(mosek::fusion::p_Term *_impl) : _impl(_impl) { /*std::cout << "Term() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Term::~Term() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Term::p_Term
  (::mosek::fusion::Term * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Term.ctor @ src/fusion/Disjunction.mbi:217:6-51
mosek::fusion::Term::t mosek::fusion::p_Term::_new_Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _8_t)
{ return new mosek::fusion::Term(_8_t); }
mosek::fusion::Term::Term
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _8_t) : 
   Term(new mosek::fusion::p_Term(this))
{ mosek::fusion::p_Term::_get_impl(this)->_initialize(_8_t); }
void mosek::fusion::p_Term::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _8_t)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    terms = _8_t;
  }
}
// mosek.fusion.Term.ctor

// Begin mosek.fusion.Term.numaccterms
// Method mosek.fusion.Term.numaccterms @ src/fusion/Disjunction.mbi:263:6-124
int32_t mosek::fusion::p_Term::numaccterms()
{
  int32_t _9_n = (int)0;
  int32_t _8978_ = (int)0;
  int32_t _8979_ = (int)((terms)->size(0));
  for (int32_t _10_i = _8978_; _10_i < _8979_; ++_10_i)
  {
    {
      _9_n += mosek::fusion::p_SimpleTerm::_get_impl(((*terms)(_10_i)).get())->numaccterms();
    }
  }
  return _9_n;
}
// End mosek.fusion.Term.numaccterms

// Begin mosek.fusion.Term.numaccrows
// Method mosek.fusion.Term.numaccrows @ src/fusion/Disjunction.mbi:262:6-123
int32_t mosek::fusion::p_Term::numaccrows()
{
  int32_t _11_n = (int)0;
  int32_t _8980_ = (int)0;
  int32_t _8981_ = (int)((terms)->size(0));
  for (int32_t _12_i = _8980_; _12_i < _8981_; ++_12_i)
  {
    {
      _11_n += mosek::fusion::p_SimpleTerm::_get_impl(((*terms)(_12_i)).get())->numaccrows();
    }
  }
  return _11_n;
}
// End mosek.fusion.Term.numaccrows

// Begin mosek.fusion.Term.num
// Method mosek.fusion.Term.num @ src/fusion/Disjunction.mbi:261:6-65
int32_t mosek::fusion::p_Term::num()
{
  return (int)((terms)->size(0));
}
// End mosek.fusion.Term.num

// Begin mosek.fusion.Term.size
// Method mosek.fusion.Term.size @ src/fusion/Disjunction.mbi:260:6-117
int32_t mosek::fusion::Term :: size() { return mosek::fusion::p_Term::_get_impl(this)->size(); }
int32_t mosek::fusion::p_Term::size()
{
  int32_t _13_s = (int)0;
  int32_t _8982_ = (int)0;
  int32_t _8983_ = (int)((terms)->size(0));
  for (int32_t _14_i = _8982_; _14_i < _8983_; ++_14_i)
  {
    {
      _13_s += ((*terms)(_14_i))->size();
    }
  }
  return _13_s;
}
// End mosek.fusion.Term.size

void mosek::fusion::p_Term::destroy()
{
  terms.reset();
}
void mosek::fusion::Term::destroy() { mosek::fusion::p_Term::_get_impl(this)->destroy(); }
// } class Term
// class SimpleTerm { // @ src/fusion/Disjunction.mbi:193:4-201:5
mosek::fusion::SimpleTerm::SimpleTerm(mosek::fusion::p_SimpleTerm *_impl) : mosek::fusion::Term(_impl) { /*std::cout << "SimpleTerm()" << this << std::endl; */ }
mosek::fusion::SimpleTerm::~SimpleTerm() {  /* std::cout << "~SimpleTerm()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SimpleTerm::p_SimpleTerm
  (::mosek::fusion::SimpleTerm * _pubthis) :     mosek::fusion::p_Term(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SimpleTerm.ctor @ src/fusion/Disjunction.mbi:196:6-117
mosek::fusion::SimpleTerm::t mosek::fusion::p_SimpleTerm::_new_SimpleTerm
  (monty::rc_ptr< ::mosek::fusion::Expression > _15_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _16_d)
{ return new mosek::fusion::SimpleTerm(_15_e,_16_d); }
mosek::fusion::SimpleTerm::SimpleTerm
  (monty::rc_ptr< ::mosek::fusion::Expression > _15_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _16_d) : 
   SimpleTerm(new mosek::fusion::p_SimpleTerm(this))
{ mosek::fusion::p_SimpleTerm::_get_impl(this)->_initialize(_15_e,_16_d); }
void mosek::fusion::p_SimpleTerm::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _15_e,
    monty::rc_ptr< ::mosek::fusion::DJCDomain > _16_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Term::_initialize(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(/*nullptr*/)}));
    ((*terms)((int)0)) = ::mosek::fusion::SimpleTerm::t(_pubthis);
    expr = _15_e;
    dom = _16_d;
  }
}
// mosek.fusion.SimpleTerm.ctor

// Begin mosek.fusion.SimpleTerm.numaccterms
// Method mosek.fusion.SimpleTerm.numaccterms @ src/fusion/Disjunction.mbi:200:6-72
int32_t mosek::fusion::p_SimpleTerm::numaccterms()
{
  return mosek::fusion::p_DJCDomain::_get_impl(dom.get())->numaccterms();
}
// End mosek.fusion.SimpleTerm.numaccterms

// Begin mosek.fusion.SimpleTerm.numaccrows
// Method mosek.fusion.SimpleTerm.numaccrows @ src/fusion/Disjunction.mbi:199:6-70
int32_t mosek::fusion::p_SimpleTerm::numaccrows()
{
  return mosek::fusion::p_DJCDomain::_get_impl(dom.get())->numaccrows();
}
// End mosek.fusion.SimpleTerm.numaccrows

// Begin mosek.fusion.SimpleTerm.size
// Method mosek.fusion.SimpleTerm.size @ src/fusion/Disjunction.mbi:198:6-55
int32_t mosek::fusion::SimpleTerm :: size() { return mosek::fusion::p_SimpleTerm::_get_impl(this)->size(); }
int32_t mosek::fusion::p_SimpleTerm::size()
{
  return dom->size();
}
// End mosek.fusion.SimpleTerm.size

void mosek::fusion::p_SimpleTerm::destroy()
{
  dom.reset();
  expr.reset();
}
void mosek::fusion::SimpleTerm::destroy() { mosek::fusion::p_SimpleTerm::_get_impl(this)->destroy(); }
// } class SimpleTerm
// class DJCDomain { // @ src/fusion/Disjunction.mbi:136:4-182:5
mosek::fusion::DJCDomain::DJCDomain(mosek::fusion::p_DJCDomain *_impl) : _impl(_impl) { /*std::cout << "DJCDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::DJCDomain::~DJCDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_DJCDomain::p_DJCDomain
  (::mosek::fusion::DJCDomain * _pubthis) :     _pubthis(_pubthis)
{}
mosek::fusion::DJCDomainType mosek::fusion::DJCDomain::get_dom() { return _impl->dom; }
void mosek::fusion::DJCDomain::set_dom(mosek::fusion::DJCDomainType _val) { _impl->dom = _val; }
int32_t mosek::fusion::DJCDomain::get_conedim() { return _impl->conedim; }
void mosek::fusion::DJCDomain::set_conedim(int32_t _val) { _impl->conedim = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::DJCDomain::get_shape() { return _impl->shape; }
void mosek::fusion::DJCDomain::set_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->shape = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DJCDomain::get_par() { return _impl->par; }
void mosek::fusion::DJCDomain::set_par(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->par = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DJCDomain::get_b() { return _impl->b; }
void mosek::fusion::DJCDomain::set_b(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->b = _val; }
// mosek.fusion.DJCDomain.ctor @ src/fusion/Disjunction.mbi:155:6-164:7
mosek::fusion::DJCDomain::t mosek::fusion::p_DJCDomain::_new_DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _17_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _18_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _19_shape_,
    mosek::fusion::DJCDomainType _20_dom_)
{ return new mosek::fusion::DJCDomain(_17_b_,_18_par_,_19_shape_,_20_dom_); }
mosek::fusion::DJCDomain::DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _17_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _18_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _19_shape_,
    mosek::fusion::DJCDomainType _20_dom_) : 
   DJCDomain(new mosek::fusion::p_DJCDomain(this))
{ mosek::fusion::p_DJCDomain::_get_impl(this)->_initialize(_17_b_,_18_par_,_19_shape_,_20_dom_); }
void mosek::fusion::p_DJCDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _17_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _18_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _19_shape_,
    mosek::fusion::DJCDomainType _20_dom_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__17_b_(_17_b_ ? _17_b_->raw() : nullptr, _17_b_ ? _17_b_->size(0) : 0);
    _checked_ptr_1<double> _ptr__18_par_(_18_par_ ? _18_par_->raw() : nullptr, _18_par_ ? _18_par_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__19_shape_(_19_shape_ ? _19_shape_->raw() : nullptr, _19_shape_ ? _19_shape_->size(0) : 0);
    b = _17_b_;
    par = _18_par_;
    shape = _19_shape_;
    dom = _20_dom_;
    conedim = ((int)((_19_shape_)->size(0)) - (int)1);
  }
}
// mosek.fusion.DJCDomain.ctor

// mosek.fusion.DJCDomain.ctor @ src/fusion/Disjunction.mbi:143:6-153:7
mosek::fusion::DJCDomain::t mosek::fusion::p_DJCDomain::_new_DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _21_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _22_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _23_shape_,
    int32_t _24_conedim_,
    mosek::fusion::DJCDomainType _25_dom_)
{ return new mosek::fusion::DJCDomain(_21_b_,_22_par_,_23_shape_,_24_conedim_,_25_dom_); }
mosek::fusion::DJCDomain::DJCDomain
  (std::shared_ptr< monty::ndarray< double,1 > > _21_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _22_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _23_shape_,
    int32_t _24_conedim_,
    mosek::fusion::DJCDomainType _25_dom_) : 
   DJCDomain(new mosek::fusion::p_DJCDomain(this))
{ mosek::fusion::p_DJCDomain::_get_impl(this)->_initialize(_21_b_,_22_par_,_23_shape_,_24_conedim_,_25_dom_); }
void mosek::fusion::p_DJCDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _21_b_,
    std::shared_ptr< monty::ndarray< double,1 > > _22_par_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _23_shape_,
    int32_t _24_conedim_,
    mosek::fusion::DJCDomainType _25_dom_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__21_b_(_21_b_ ? _21_b_->raw() : nullptr, _21_b_ ? _21_b_->size(0) : 0);
    _checked_ptr_1<double> _ptr__22_par_(_22_par_ ? _22_par_->raw() : nullptr, _22_par_ ? _22_par_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__23_shape_(_23_shape_ ? _23_shape_->raw() : nullptr, _23_shape_ ? _23_shape_->size(0) : 0);
    b = _21_b_;
    par = _22_par_;
    shape = _23_shape_;
    dom = _25_dom_;
    conedim = _24_conedim_;
  }
}
// mosek.fusion.DJCDomain.ctor

// Begin mosek.fusion.DJCDomain.numaccterms
// Method mosek.fusion.DJCDomain.numaccterms @ src/fusion/Disjunction.mbi:176:6-181:7
int32_t mosek::fusion::p_DJCDomain::numaccterms()
{
  if ((dom == ::mosek::fusion::DJCDomainType::InRange))
  {
    {
      return (int)2;
    }
  }
  else
  {
    {
      return (int)1;
    }
  }
}
// End mosek.fusion.DJCDomain.numaccterms

// Begin mosek.fusion.DJCDomain.numaccrows
// Method mosek.fusion.DJCDomain.numaccrows @ src/fusion/Disjunction.mbi:170:6-175:7
int32_t mosek::fusion::p_DJCDomain::numaccrows()
{
  if ((dom == ::mosek::fusion::DJCDomainType::InRange))
  {
    {
      return safe_mul( _pubthis->size(),(int)2 );
    }
  }
  else
  {
    {
      return _pubthis->size();
    }
  }
}
// End mosek.fusion.DJCDomain.numaccrows

// Begin mosek.fusion.DJCDomain.size
// Method mosek.fusion.DJCDomain.size @ src/fusion/Disjunction.mbi:166:6-169:7
int32_t mosek::fusion::DJCDomain :: size() { return mosek::fusion::p_DJCDomain::_get_impl(this)->size(); }
int32_t mosek::fusion::p_DJCDomain::size()
{
  int32_t _26_s = (int)1;
  int32_t _8984_ = (int)0;
  int32_t _8985_ = (int)((shape)->size(0));
  for (int32_t _27_i = _8984_; _27_i < _8985_; ++_27_i)
  {
    {
      _26_s *= ((*shape)(_27_i));
    }
  }
  return _26_s;
}
// End mosek.fusion.DJCDomain.size

void mosek::fusion::p_DJCDomain::destroy()
{
  shape.reset();
  par.reset();
  b.reset();
}
void mosek::fusion::DJCDomain::destroy() { mosek::fusion::p_DJCDomain::_get_impl(this)->destroy(); }
// } class DJCDomain
// class DJC { // @ src/fusion/Disjunction.mbi:32:4-104:5
mosek::fusion::DJC::DJC(mosek::fusion::p_DJC *_impl) : _impl(_impl) { /*std::cout << "DJC() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::DJC::~DJC() { delete _impl; _impl = nullptr; }
mosek::fusion::p_DJC::p_DJC
  (::mosek::fusion::DJC * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:103:6-114
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _28_s1,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _29_s2,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _30_s3) { return mosek::fusion::p_DJC::AND(_28_s1,_29_s2,_30_s3); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _28_s1,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _29_s2,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _30_s3)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_28_s1.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_29_s2.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_30_s3.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:102:6-96
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _31_s1,
    monty::rc_ptr< ::mosek::fusion::SimpleTerm > _32_s2) { return mosek::fusion::p_DJC::AND(_31_s1,_32_s2); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _31_s1,monty::rc_ptr< ::mosek::fusion::SimpleTerm > _32_s2)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_31_s1.get()),::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_32_s2.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:101:6-78
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( monty::rc_ptr< ::mosek::fusion::SimpleTerm > _33_s1) { return mosek::fusion::p_DJC::AND(_33_s1); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(monty::rc_ptr< ::mosek::fusion::SimpleTerm > _33_s1)
{
  return ::mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 >{::monty::rc_ptr<::mosek::fusion::SimpleTerm>(_33_s1.get())}));
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.AND
// Method mosek.fusion.DJC.AND @ src/fusion/Disjunction.mbi:100:6-84
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::DJC::AND
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _34_slist) { return mosek::fusion::p_DJC::AND(_34_slist); }
monty::rc_ptr< ::mosek::fusion::Term > mosek::fusion::p_DJC::AND(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SimpleTerm >,1 > > _34_slist)
{
  return ::mosek::fusion::p_Term::_new_Term(_34_slist);
}
// End mosek.fusion.DJC.AND

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:69:6-98:7
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Expression > _35_expr,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _36_dom) { return mosek::fusion::p_DJC::term(_35_expr,_36_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Expression > _35_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _36_dom)
{
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_36_dom)->sparsity.get()))
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Sparse domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_36_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _37_domlb = mosek::fusion::p_RangeDomain::_get_impl(_36_dom)->lb;
  _checked_ptr_1<double> _ptr__37_domlb(_37_domlb ? _37_domlb->raw() : nullptr,_37_domlb ? _37_domlb->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _38_domub = mosek::fusion::p_RangeDomain::_get_impl(_36_dom)->ub;
  _checked_ptr_1<double> _ptr__38_domub(_38_domub ? _38_domub->raw() : nullptr,_38_domub ? _38_domub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _39_eshape = _35_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__39_eshape(_39_eshape ? _39_eshape->raw() : nullptr,_39_eshape ? _39_eshape->size(0) : 0);
  int64_t _40_esize = _35_expr->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _41_shape = mosek::fusion::p_RangeDomain::_get_impl(_36_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__41_shape(_41_shape ? _41_shape->raw() : nullptr,_41_shape ? _41_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _42_bl;
  _checked_ptr_1<double> _ptr__42_bl(_42_bl ? _42_bl->raw() : nullptr,_42_bl ? _42_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _43_bu;
  _checked_ptr_1<double> _ptr__43_bu(_43_bu ? _43_bu->raw() : nullptr,_43_bu ? _43_bu->size(0) : 0);
  if ((NULL == _41_shape.get()))
  {
    {
      _41_shape = _39_eshape;
      _ptr__41_shape.update(_41_shape ? _41_shape->raw() : nullptr, _41_shape ? _41_shape->size(0) : 0);
    }
  }
  else
  {
    {
      if (((int)((_41_shape)->size(0)) != (int)((_39_eshape)->size(0))))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
        }
      }
      else
      {
        {
          int32_t _8986_ = (int)0;
          int32_t _8987_ = (int)((_41_shape)->size(0));
          for (int32_t _44_i = _8986_; _44_i < _8987_; ++_44_i)
          {
            {
              if ((_ptr__41_shape[_44_i] != _ptr__39_eshape[_44_i]))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if (mosek::fusion::p_RangeDomain::_get_impl(_36_dom)->scalable)
  {
    {
      std::vector<double> _8988_;
      for (int64_t _45_i = (int)0, _8989_ = _40_esize; _45_i < _8989_ ; ++_45_i)
      {
        _8988_.push_back(_ptr__37_domlb[(int)0]);
      }
      auto _8990_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8988_.size()),_8988_.begin(),_8988_.end()));
      _42_bl = _8990_;
      _ptr__42_bl.update(_42_bl ? _42_bl->raw() : nullptr, _42_bl ? _42_bl->size(0) : 0);
      std::vector<double> _8991_;
      for (int64_t _46_i = (int)0, _8992_ = _40_esize; _46_i < _8992_ ; ++_46_i)
      {
        _8991_.push_back(_ptr__38_domub[(int)0]);
      }
      auto _8993_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8991_.size()),_8991_.begin(),_8991_.end()));
      _43_bu = _8993_;
      _ptr__43_bu.update(_43_bu ? _43_bu->raw() : nullptr, _43_bu ? _43_bu->size(0) : 0);
    }
  }
  else
  {
    {
      _42_bl = _37_domlb;
      _ptr__42_bl.update(_42_bl ? _42_bl->raw() : nullptr, _42_bl ? _42_bl->size(0) : 0);
      _43_bu = _38_domub;
      _ptr__43_bu.update(_43_bu ? _43_bu->raw() : nullptr, _43_bu ? _43_bu->size(0) : 0);
    }
  }
  return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_35_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_42_bl,_43_bu,_41_shape,::mosek::fusion::DJCDomainType::InRange));
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:68:6-105
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Variable > _47_x,
    monty::rc_ptr< ::mosek::fusion::RangeDomain > _48_dom) { return mosek::fusion::p_DJC::term(_47_x,_48_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Variable > _47_x,monty::rc_ptr< ::mosek::fusion::RangeDomain > _48_dom)
{
  return ::mosek::fusion::p_DJC::term(_47_x->__mosek_2fusion_2Variable__asExpr(),_48_dom);
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:34:6-66:7
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Expression > _49_expr,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _50_dom) { return mosek::fusion::p_DJC::term(_49_expr,_50_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Expression > _49_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _50_dom)
{
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->sparsity.get()))
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Sparse domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain is not acceptable in disjunctive constraints"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _51_dombnd = mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->bnd;
  _checked_ptr_1<double> _ptr__51_dombnd(_51_dombnd ? _51_dombnd->raw() : nullptr,_51_dombnd ? _51_dombnd->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _52_eshape = _49_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__52_eshape(_52_eshape ? _52_eshape->raw() : nullptr,_52_eshape ? _52_eshape->size(0) : 0);
  int64_t _53_esize = _49_expr->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _54_shape = mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__54_shape(_54_shape ? _54_shape->raw() : nullptr,_54_shape ? _54_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _55_b;
  _checked_ptr_1<double> _ptr__55_b(_55_b ? _55_b->raw() : nullptr,_55_b ? _55_b->size(0) : 0);
  if ((NULL == _54_shape.get()))
  {
    {
      _54_shape = _52_eshape;
      _ptr__54_shape.update(_54_shape ? _54_shape->raw() : nullptr, _54_shape ? _54_shape->size(0) : 0);
    }
  }
  else
  {
    {
      if (((int)((_54_shape)->size(0)) != (int)((_52_eshape)->size(0))))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
        }
      }
      else
      {
        {
          int32_t _8994_ = (int)0;
          int32_t _8995_ = (int)((_54_shape)->size(0));
          for (int32_t _56_i = _8994_; _56_i < _8995_; ++_56_i)
          {
            {
              if ((_ptr__54_shape[_56_i] != _ptr__52_eshape[_56_i]))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Mismatching shapes"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((NULL == mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->bnd.get()))
  {
    {
      _55_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_53_esize)));
      _ptr__55_b.update(_55_b ? _55_b->raw() : nullptr, _55_b ? _55_b->size(0) : 0);
    }
  }
  else if(mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->scalable)
  {
    {
      std::vector<double> _8996_;
      for (int64_t _57_i = (int)0, _8997_ = _53_esize; _57_i < _8997_ ; ++_57_i)
      {
        _8996_.push_back(_ptr__51_dombnd[(int)0]);
      }
      auto _8998_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8996_.size()),_8996_.begin(),_8996_.end()));
      _55_b = _8998_;
      _ptr__55_b.update(_55_b ? _55_b->raw() : nullptr, _55_b ? _55_b->size(0) : 0);
    }
  }
  else if(mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->empty)
  {
    {
      _55_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_53_esize)));
      _ptr__55_b.update(_55_b ? _55_b->raw() : nullptr, _55_b ? _55_b->size(0) : 0);
    }
  }
  else
  {
    {
      _55_b = _51_dombnd;
      _ptr__55_b.update(_55_b ? _55_b->raw() : nullptr, _55_b ? _55_b->size(0) : 0);
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_49_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_55_b,nullptr,_54_shape,::mosek::fusion::DJCDomainType::EqualTo));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_49_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_55_b,nullptr,_54_shape,::mosek::fusion::DJCDomainType::LessThan));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_49_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_55_b,nullptr,_54_shape,::mosek::fusion::DJCDomainType::GreaterThan));
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_50_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      return ::mosek::fusion::p_SimpleTerm::_new_SimpleTerm(_49_expr,::mosek::fusion::p_DJCDomain::_new_DJCDomain(_55_b,nullptr,_54_shape,::mosek::fusion::DJCDomainType::IsFree));
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Invalid linear domain"));
    }
  }
}
// End mosek.fusion.DJC.term

// Begin mosek.fusion.DJC.term
// Method mosek.fusion.DJC.term @ src/fusion/Disjunction.mbi:33:6-105
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::DJC::term
  ( monty::rc_ptr< ::mosek::fusion::Variable > _58_x,
    monty::rc_ptr< ::mosek::fusion::LinearDomain > _59_dom) { return mosek::fusion::p_DJC::term(_58_x,_59_dom); }
monty::rc_ptr< ::mosek::fusion::SimpleTerm > mosek::fusion::p_DJC::term(monty::rc_ptr< ::mosek::fusion::Variable > _58_x,monty::rc_ptr< ::mosek::fusion::LinearDomain > _59_dom)
{
  return ::mosek::fusion::p_DJC::term(_58_x->__mosek_2fusion_2Variable__asExpr(),_59_dom);
}
// End mosek.fusion.DJC.term

void mosek::fusion::p_DJC::destroy()
{
}
void mosek::fusion::DJC::destroy() { mosek::fusion::p_DJC::_get_impl(this)->destroy(); }
// } class DJC
// class Sort { // @ src/fusion/Sort.mbi:6:4-262:5
mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Sort::p_Sort
  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Sort.argTransposeSort
// Method mosek.fusion.Sort.argTransposeSort @ src/fusion/Sort.mbi:249:6-261:7
void mosek::fusion::Sort::argTransposeSort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _265_perm,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _266_ptrb,
    int32_t _267_m,
    int32_t _268_n,
    int32_t _269_p,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _270_val) { mosek::fusion::p_Sort::argTransposeSort(_265_perm,_266_ptrb,_267_m,_268_n,_269_p,_270_val); }
void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< int64_t,1 > > _265_perm,std::shared_ptr< monty::ndarray< int64_t,1 > > _266_ptrb,int32_t _267_m,int32_t _268_n,int32_t _269_p,std::shared_ptr< monty::ndarray< int64_t,1 > > _270_val)
{
  _checked_ptr_1<int64_t> _ptr__265_perm(_265_perm ? _265_perm->raw() : nullptr, _265_perm ? _265_perm->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__266_ptrb(_266_ptrb ? _266_ptrb->raw() : nullptr, _266_ptrb ? _266_ptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__270_val(_270_val ? _270_val->raw() : nullptr, _270_val ? _270_val->size(0) : 0);
  int32_t _8999_ = (int)0;
  int32_t _9000_ = safe_add( safe_mul( _267_m,_269_p ),(int)1 );
  for (int32_t _271_q = _8999_; _271_q < _9000_; ++_271_q)
  {
    {
      _ptr__266_ptrb[_271_q] = (int)0;
    }
  }
  int32_t _9001_ = (int)0;
  int32_t _9002_ = (int)((_270_val)->size(0));
  for (int32_t _272_q = _9001_; _272_q < _9002_; ++_272_q)
  {
    {
      ++ _ptr__266_ptrb[safe_add( safe_add( safe_mul( (_ptr__270_val[_ptr__265_perm[_272_q]] / safe_mul( _268_n,_269_p )),_269_p ),(_ptr__270_val[_ptr__265_perm[_272_q]] % _269_p) ),(int)1 )];
    }
  }
  int32_t _9003_ = (int)0;
  int32_t _9004_ = safe_mul( _267_m,_269_p );
  for (int32_t _273_i = _9003_; _273_i < _9004_; ++_273_i)
  {
    {
      _ptr__266_ptrb[safe_add( _273_i,(int)1 )] = safe_add( _ptr__266_ptrb[safe_add( _273_i,(int)1 )],_ptr__266_ptrb[_273_i] );
    }
  }
  std::vector<int64_t> _9005_;
  for (int32_t _275_i = (int)0, _9006_ = (int)((_265_perm)->size(0)); _275_i < _9006_ ; ++_275_i)
  {
    _9005_.push_back(_ptr__265_perm[_275_i]);
  }
  auto _9007_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9005_.size()),_9005_.begin(),_9005_.end()));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _274_per2 = _9007_;
  _checked_ptr_1<int64_t> _ptr__274_per2(_274_per2 ? _274_per2->raw() : nullptr,_274_per2 ? _274_per2->size(0) : 0);
  int64_t _9008_ = (int64_t)0;
  int64_t _9009_ = (int64_t)((_270_val)->size(0));
  for (int64_t _276_q = _9008_; _276_q < _9009_; ++_276_q)
  {
    {
      int64_t _277_k = safe_add( safe_mul( (_ptr__270_val[_ptr__274_per2[_276_q]] / safe_mul( _268_n,_269_p )),_269_p ),(_ptr__270_val[_ptr__274_per2[_276_q]] % _269_p) );
      _ptr__265_perm[_ptr__266_ptrb[_277_k]] = _ptr__274_per2[_276_q];
      ++ _ptr__266_ptrb[_277_k];
    }
  }
}
// End mosek.fusion.Sort.argTransposeSort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:207:6-210:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _278_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _279_vals1) { mosek::fusion::p_Sort::argsort(_278_idx,_279_vals1); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _278_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _279_vals1)
{
  _checked_ptr_1<int64_t> _ptr__278_idx(_278_idx ? _278_idx->raw() : nullptr, _278_idx ? _278_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__279_vals1(_279_vals1 ? _279_vals1->raw() : nullptr, _279_vals1 ? _279_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_278_idx,_279_vals1,(int64_t)((int)0),(int64_t)((int)((_278_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:202:6-205:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _280_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _281_vals1) { mosek::fusion::p_Sort::argsort(_280_idx,_281_vals1); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _280_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _281_vals1)
{
  _checked_ptr_1<int64_t> _ptr__280_idx(_280_idx ? _280_idx->raw() : nullptr, _280_idx ? _280_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__281_vals1(_281_vals1 ? _281_vals1->raw() : nullptr, _281_vals1 ? _281_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_280_idx,_281_vals1,(int64_t)((int)0),(int64_t)((int)((_280_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:197:6-200:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _282_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _283_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _284_vals2) { mosek::fusion::p_Sort::argsort(_282_idx,_283_vals1,_284_vals2); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _282_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _283_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _284_vals2)
{
  _checked_ptr_1<int64_t> _ptr__282_idx(_282_idx ? _282_idx->raw() : nullptr, _282_idx ? _282_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__283_vals1(_283_vals1 ? _283_vals1->raw() : nullptr, _283_vals1 ? _283_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__284_vals2(_284_vals2 ? _284_vals2->raw() : nullptr, _284_vals2 ? _284_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_282_idx,_283_vals1,_284_vals2,(int64_t)((int)0),(int64_t)((int)((_282_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:193:6-196:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _285_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _286_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _287_vals2) { mosek::fusion::p_Sort::argsort(_285_idx,_286_vals1,_287_vals2); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _285_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _286_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _287_vals2)
{
  _checked_ptr_1<int64_t> _ptr__285_idx(_285_idx ? _285_idx->raw() : nullptr, _285_idx ? _285_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__286_vals1(_286_vals1 ? _286_vals1->raw() : nullptr, _286_vals1 ? _286_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__287_vals2(_287_vals2 ? _287_vals2->raw() : nullptr, _287_vals2 ? _287_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_285_idx,_286_vals1,_287_vals2,(int64_t)((int)0),(int64_t)((int)((_285_idx)->size(0))),false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:188:6-191:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _288_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _289_vals1,
    int64_t _290_first,
    int64_t _291_last) { mosek::fusion::p_Sort::argsort(_288_idx,_289_vals1,_290_first,_291_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _288_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _289_vals1,int64_t _290_first,int64_t _291_last)
{
  _checked_ptr_1<int64_t> _ptr__288_idx(_288_idx ? _288_idx->raw() : nullptr, _288_idx ? _288_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__289_vals1(_289_vals1 ? _289_vals1->raw() : nullptr, _289_vals1 ? _289_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_288_idx,_289_vals1,_290_first,_291_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:183:6-186:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _292_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _293_vals1,
    int64_t _294_first,
    int64_t _295_last) { mosek::fusion::p_Sort::argsort(_292_idx,_293_vals1,_294_first,_295_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _292_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _293_vals1,int64_t _294_first,int64_t _295_last)
{
  _checked_ptr_1<int64_t> _ptr__292_idx(_292_idx ? _292_idx->raw() : nullptr, _292_idx ? _292_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__293_vals1(_293_vals1 ? _293_vals1->raw() : nullptr, _293_vals1 ? _293_vals1->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_292_idx,_293_vals1,_294_first,_295_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:178:6-181:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _296_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _297_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _298_vals2,
    int64_t _299_first,
    int64_t _300_last) { mosek::fusion::p_Sort::argsort(_296_idx,_297_vals1,_298_vals2,_299_first,_300_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _296_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _297_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _298_vals2,int64_t _299_first,int64_t _300_last)
{
  _checked_ptr_1<int64_t> _ptr__296_idx(_296_idx ? _296_idx->raw() : nullptr, _296_idx ? _296_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__297_vals1(_297_vals1 ? _297_vals1->raw() : nullptr, _297_vals1 ? _297_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__298_vals2(_298_vals2 ? _298_vals2->raw() : nullptr, _298_vals2 ? _298_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_296_idx,_297_vals1,_298_vals2,_299_first,_300_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:174:6-177:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _301_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _302_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _303_vals2,
    int64_t _304_first,
    int64_t _305_last) { mosek::fusion::p_Sort::argsort(_301_idx,_302_vals1,_303_vals2,_304_first,_305_last); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _301_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _302_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _303_vals2,int64_t _304_first,int64_t _305_last)
{
  _checked_ptr_1<int64_t> _ptr__301_idx(_301_idx ? _301_idx->raw() : nullptr, _301_idx ? _301_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__302_vals1(_302_vals1 ? _302_vals1->raw() : nullptr, _302_vals1 ? _302_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__303_vals2(_303_vals2 ? _303_vals2->raw() : nullptr, _303_vals2 ? _303_vals2->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_301_idx,_302_vals1,_303_vals2,_304_first,_305_last,false);
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:156:6-171:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _306_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _307_vals1,
    int64_t _308_first,
    int64_t _309_last,
    bool _310_check) { mosek::fusion::p_Sort::argsort(_306_idx,_307_vals1,_308_first,_309_last,_310_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _306_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _307_vals1,int64_t _308_first,int64_t _309_last,bool _310_check)
{
  _checked_ptr_1<int64_t> _ptr__306_idx(_306_idx ? _306_idx->raw() : nullptr, _306_idx ? _306_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__307_vals1(_307_vals1 ? _307_vals1->raw() : nullptr, _307_vals1 ? _307_vals1->size(0) : 0);
  if (((!_310_check) || ((_309_last - _308_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_306_idx,_307_vals1,_308_first,_309_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_306_idx,_307_vals1,_308_first,_309_last,_310_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _311_minmax = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int64_t> _ptr__311_minmax(_311_minmax ? _311_minmax->raw() : nullptr,_311_minmax ? _311_minmax->size(0) : 0);
      int32_t _312_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_306_idx,_307_vals1,nullptr,_308_first,_309_last,_311_minmax);
      if (((_ptr__311_minmax[(int)1] - _ptr__311_minmax[(int)0]) < safe_mul( _312_scale,(_309_last - _308_first) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_306_idx,_307_vals1,_308_first,_309_last,_ptr__311_minmax[(int)0],_ptr__311_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_306_idx,_307_vals1,_308_first,_309_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:137:6-154:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _313_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _314_vals1,
    int64_t _315_first,
    int64_t _316_last,
    bool _317_check) { mosek::fusion::p_Sort::argsort(_313_idx,_314_vals1,_315_first,_316_last,_317_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _313_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _314_vals1,int64_t _315_first,int64_t _316_last,bool _317_check)
{
  _checked_ptr_1<int64_t> _ptr__313_idx(_313_idx ? _313_idx->raw() : nullptr, _313_idx ? _313_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__314_vals1(_314_vals1 ? _314_vals1->raw() : nullptr, _314_vals1 ? _314_vals1->size(0) : 0);
  if (((!_317_check) || ((_316_last - _315_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_313_idx,_314_vals1,_315_first,_316_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_313_idx,_314_vals1,_315_first,_316_last,_317_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _318_minmax = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int32_t> _ptr__318_minmax(_318_minmax ? _318_minmax->raw() : nullptr,_318_minmax ? _318_minmax->size(0) : 0);
      int32_t _319_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_313_idx,_314_vals1,nullptr,_315_first,_316_last,_318_minmax);
      if (((_ptr__318_minmax[(int)1] - _ptr__318_minmax[(int)0]) < safe_mul( _319_scale,(_316_last - _315_first) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_313_idx,_314_vals1,_315_first,_316_last,_ptr__318_minmax[(int)0],_ptr__318_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_313_idx,_314_vals1,_315_first,_316_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:116:6-135:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _320_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _321_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _322_vals2,
    int64_t _323_first,
    int64_t _324_last,
    bool _325_check) { mosek::fusion::p_Sort::argsort(_320_idx,_321_vals1,_322_vals2,_323_first,_324_last,_325_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _320_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _321_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _322_vals2,int64_t _323_first,int64_t _324_last,bool _325_check)
{
  _checked_ptr_1<int64_t> _ptr__320_idx(_320_idx ? _320_idx->raw() : nullptr, _320_idx ? _320_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__321_vals1(_321_vals1 ? _321_vals1->raw() : nullptr, _321_vals1 ? _321_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__322_vals2(_322_vals2 ? _322_vals2->raw() : nullptr, _322_vals2 ? _322_vals2->size(0) : 0);
  if (((!_325_check) || ((_324_last - _323_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_320_idx,_321_vals1,_322_vals2,_323_first,_324_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_320_idx,_321_vals1,_322_vals2,_323_first,_324_last,_325_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _326_minmax = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int64_t> _ptr__326_minmax(_326_minmax ? _326_minmax->raw() : nullptr,_326_minmax ? _326_minmax->size(0) : 0);
      int32_t _327_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_320_idx,_321_vals1,_322_vals2,_323_first,_324_last,_326_minmax);
      if ((((_ptr__326_minmax[(int)1] - _ptr__326_minmax[(int)0]) < safe_mul( _327_scale,(_324_last - _323_first) )) && ((_ptr__326_minmax[(int)3] - _ptr__326_minmax[(int)2]) < safe_mul( _327_scale,(_324_last - _323_first) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_320_idx,_322_vals2,_323_first,_324_last,_ptr__326_minmax[(int)2],_ptr__326_minmax[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_320_idx,_321_vals1,_323_first,_324_last,_ptr__326_minmax[(int)0],_ptr__326_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_320_idx,_321_vals1,_322_vals2,_323_first,_324_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argsort
// Method mosek.fusion.Sort.argsort @ src/fusion/Sort.mbi:95:6-114:7
void mosek::fusion::Sort::argsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _328_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _329_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _330_vals2,
    int64_t _331_first,
    int64_t _332_last,
    bool _333_check) { mosek::fusion::p_Sort::argsort(_328_idx,_329_vals1,_330_vals2,_331_first,_332_last,_333_check); }
void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _328_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _329_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _330_vals2,int64_t _331_first,int64_t _332_last,bool _333_check)
{
  _checked_ptr_1<int64_t> _ptr__328_idx(_328_idx ? _328_idx->raw() : nullptr, _328_idx ? _328_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__329_vals1(_329_vals1 ? _329_vals1->raw() : nullptr, _329_vals1 ? _329_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__330_vals2(_330_vals2 ? _330_vals2->raw() : nullptr, _330_vals2 ? _330_vals2->size(0) : 0);
  if (((!_333_check) || ((_332_last - _331_first) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_328_idx,_329_vals1,_330_vals2,_331_first,_332_last);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_328_idx,_329_vals1,_330_vals2,_331_first,_332_last,_333_check)))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _334_minmax = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)4)));
      _checked_ptr_1<int32_t> _ptr__334_minmax(_334_minmax ? _334_minmax->raw() : nullptr,_334_minmax ? _334_minmax->size(0) : 0);
      int32_t _335_scale = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_328_idx,_329_vals1,_330_vals2,_331_first,_332_last,_334_minmax);
      if ((((_ptr__334_minmax[(int)1] - _ptr__334_minmax[(int)0]) < safe_mul( _335_scale,(_332_last - _331_first) )) && ((_ptr__334_minmax[(int)3] - _ptr__334_minmax[(int)2]) < safe_mul( _335_scale,(_332_last - _331_first) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_328_idx,_330_vals2,_331_first,_332_last,_ptr__334_minmax[(int)2],_ptr__334_minmax[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_328_idx,_329_vals1,_331_first,_332_last,_ptr__334_minmax[(int)0],_ptr__334_minmax[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_328_idx,_329_vals1,_330_vals2,_331_first,_332_last);
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.argsort

// Begin mosek.fusion.Sort.argbucketsort
// Method mosek.fusion.Sort.argbucketsort @ src/fusion/Sort.mbi:90:6-93:7
void mosek::fusion::Sort::argbucketsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _336_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _337_vals,
    int64_t _338_first,
    int64_t _339_last,
    int64_t _340_minv,
    int64_t _341_maxv) { mosek::fusion::p_Sort::argbucketsort(_336_idx,_337_vals,_338_first,_339_last,_340_minv,_341_maxv); }
void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _336_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _337_vals,int64_t _338_first,int64_t _339_last,int64_t _340_minv,int64_t _341_maxv)
{
  _checked_ptr_1<int64_t> _ptr__336_idx(_336_idx ? _336_idx->raw() : nullptr, _336_idx ? _336_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__337_vals(_337_vals ? _337_vals->raw() : nullptr, _337_vals ? _337_vals->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_336_idx,_338_first,_339_last,_337_vals,_340_minv,_341_maxv);
}
// End mosek.fusion.Sort.argbucketsort

// Begin mosek.fusion.Sort.argbucketsort
// Method mosek.fusion.Sort.argbucketsort @ src/fusion/Sort.mbi:85:6-88:7
void mosek::fusion::Sort::argbucketsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _342_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _343_vals,
    int64_t _344_first,
    int64_t _345_last,
    int32_t _346_minv,
    int32_t _347_maxv) { mosek::fusion::p_Sort::argbucketsort(_342_idx,_343_vals,_344_first,_345_last,_346_minv,_347_maxv); }
void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _342_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _343_vals,int64_t _344_first,int64_t _345_last,int32_t _346_minv,int32_t _347_maxv)
{
  _checked_ptr_1<int64_t> _ptr__342_idx(_342_idx ? _342_idx->raw() : nullptr, _342_idx ? _342_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__343_vals(_343_vals ? _343_vals->raw() : nullptr, _343_vals ? _343_vals->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_342_idx,_344_first,_345_last,_343_vals,_346_minv,_347_maxv);
}
// End mosek.fusion.Sort.argbucketsort

// Begin mosek.fusion.Sort.getminmax
// Method mosek.fusion.Sort.getminmax @ src/fusion/Sort.mbi:61:6-80:7
void mosek::fusion::Sort::getminmax
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _348_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _349_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _350_vals2,
    int64_t _351_first,
    int64_t _352_last,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _353_res) { mosek::fusion::p_Sort::getminmax(_348_idx,_349_vals1,_350_vals2,_351_first,_352_last,_353_res); }
void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< int64_t,1 > > _348_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _349_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _350_vals2,int64_t _351_first,int64_t _352_last,std::shared_ptr< monty::ndarray< int64_t,1 > > _353_res)
{
  _checked_ptr_1<int64_t> _ptr__348_idx(_348_idx ? _348_idx->raw() : nullptr, _348_idx ? _348_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__349_vals1(_349_vals1 ? _349_vals1->raw() : nullptr, _349_vals1 ? _349_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__350_vals2(_350_vals2 ? _350_vals2->raw() : nullptr, _350_vals2 ? _350_vals2->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__353_res(_353_res ? _353_res->raw() : nullptr, _353_res ? _353_res->size(0) : 0);
  _ptr__353_res[(int)0] = _ptr__349_vals1[_ptr__348_idx[_351_first]];
  _ptr__353_res[(int)1] = _ptr__349_vals1[_ptr__348_idx[_351_first]];
  int64_t _9010_ = safe_add( _351_first,(int)1 );
  int64_t _9011_ = _352_last;
  for (int64_t _354_i = _9010_; _354_i < _9011_; ++_354_i)
  {
    {
      if ((_ptr__353_res[(int)0] > _ptr__349_vals1[_ptr__348_idx[_354_i]]))
      {
        {
          _ptr__353_res[(int)0] = _ptr__349_vals1[_ptr__348_idx[_354_i]];
        }
      }
      {}
      if ((_ptr__353_res[(int)1] < _ptr__349_vals1[_ptr__348_idx[_354_i]]))
      {
        {
          _ptr__353_res[(int)1] = _ptr__349_vals1[_ptr__348_idx[_354_i]];
        }
      }
      {}
    }
  }
  if ((NULL != _350_vals2.get()))
  {
    {
      _ptr__353_res[(int)2] = _ptr__350_vals2[_ptr__348_idx[_351_first]];
      _ptr__353_res[(int)3] = _ptr__350_vals2[_ptr__348_idx[_351_first]];
      int64_t _9012_ = safe_add( _351_first,(int)1 );
      int64_t _9013_ = _352_last;
      for (int64_t _355_i = _9012_; _355_i < _9013_; ++_355_i)
      {
        {
          if ((_ptr__353_res[(int)2] > _ptr__350_vals2[_ptr__348_idx[_355_i]]))
          {
            {
              _ptr__353_res[(int)2] = _ptr__350_vals2[_ptr__348_idx[_355_i]];
            }
          }
          {}
          if ((_ptr__353_res[(int)3] < _ptr__350_vals2[_ptr__348_idx[_355_i]]))
          {
            {
              _ptr__353_res[(int)3] = _ptr__350_vals2[_ptr__348_idx[_355_i]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.getminmax

// Begin mosek.fusion.Sort.getminmax
// Method mosek.fusion.Sort.getminmax @ src/fusion/Sort.mbi:40:6-59:7
void mosek::fusion::Sort::getminmax
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _356_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _357_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _358_vals2,
    int64_t _359_first,
    int64_t _360_last,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _361_res) { mosek::fusion::p_Sort::getminmax(_356_idx,_357_vals1,_358_vals2,_359_first,_360_last,_361_res); }
void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< int64_t,1 > > _356_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _357_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _358_vals2,int64_t _359_first,int64_t _360_last,std::shared_ptr< monty::ndarray< int32_t,1 > > _361_res)
{
  _checked_ptr_1<int64_t> _ptr__356_idx(_356_idx ? _356_idx->raw() : nullptr, _356_idx ? _356_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__357_vals1(_357_vals1 ? _357_vals1->raw() : nullptr, _357_vals1 ? _357_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__358_vals2(_358_vals2 ? _358_vals2->raw() : nullptr, _358_vals2 ? _358_vals2->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__361_res(_361_res ? _361_res->raw() : nullptr, _361_res ? _361_res->size(0) : 0);
  _ptr__361_res[(int)0] = _ptr__357_vals1[_ptr__356_idx[_359_first]];
  _ptr__361_res[(int)1] = _ptr__357_vals1[_ptr__356_idx[_359_first]];
  int64_t _9014_ = safe_add( _359_first,(int)1 );
  int64_t _9015_ = _360_last;
  for (int64_t _362_i = _9014_; _362_i < _9015_; ++_362_i)
  {
    {
      if ((_ptr__361_res[(int)0] > _ptr__357_vals1[_ptr__356_idx[_362_i]]))
      {
        {
          _ptr__361_res[(int)0] = _ptr__357_vals1[_ptr__356_idx[_362_i]];
        }
      }
      {}
      if ((_ptr__361_res[(int)1] < _ptr__357_vals1[_ptr__356_idx[_362_i]]))
      {
        {
          _ptr__361_res[(int)1] = _ptr__357_vals1[_ptr__356_idx[_362_i]];
        }
      }
      {}
    }
  }
  if ((NULL != _358_vals2.get()))
  {
    {
      _ptr__361_res[(int)2] = _ptr__358_vals2[_ptr__356_idx[_359_first]];
      _ptr__361_res[(int)3] = _ptr__358_vals2[_ptr__356_idx[_359_first]];
      int64_t _9016_ = safe_add( _359_first,(int)1 );
      int64_t _9017_ = _360_last;
      for (int64_t _363_i = _9016_; _363_i < _9017_; ++_363_i)
      {
        {
          if ((_ptr__361_res[(int)2] > _ptr__358_vals2[_ptr__356_idx[_363_i]]))
          {
            {
              _ptr__361_res[(int)2] = _ptr__358_vals2[_ptr__356_idx[_363_i]];
            }
          }
          {}
          if ((_ptr__361_res[(int)3] < _ptr__358_vals2[_ptr__356_idx[_363_i]]))
          {
            {
              _ptr__361_res[(int)3] = _ptr__358_vals2[_ptr__356_idx[_363_i]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Sort.getminmax

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:32:6-38:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _364_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _365_vals1,
    int64_t _366_first,
    int64_t _367_last,
    bool _368_check) { return mosek::fusion::p_Sort::issorted(_364_idx,_365_vals1,_366_first,_367_last,_368_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _364_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _365_vals1,int64_t _366_first,int64_t _367_last,bool _368_check)
{
  _checked_ptr_1<int64_t> _ptr__364_idx(_364_idx ? _364_idx->raw() : nullptr, _364_idx ? _364_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__365_vals1(_365_vals1 ? _365_vals1->raw() : nullptr, _365_vals1 ? _365_vals1->size(0) : 0);
  int64_t _9018_ = _366_first;
  int64_t _9019_ = (_367_last - (int)1);
  for (int64_t _369_i = _9018_; _369_i < _9019_; ++_369_i)
  {
    {
      if ((_ptr__365_vals1[_ptr__364_idx[_369_i]] > _ptr__365_vals1[_ptr__364_idx[safe_add( _369_i,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:24:6-30:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _370_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _371_vals1,
    int64_t _372_first,
    int64_t _373_last,
    bool _374_check) { return mosek::fusion::p_Sort::issorted(_370_idx,_371_vals1,_372_first,_373_last,_374_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _370_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _371_vals1,int64_t _372_first,int64_t _373_last,bool _374_check)
{
  _checked_ptr_1<int64_t> _ptr__370_idx(_370_idx ? _370_idx->raw() : nullptr, _370_idx ? _370_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__371_vals1(_371_vals1 ? _371_vals1->raw() : nullptr, _371_vals1 ? _371_vals1->size(0) : 0);
  int64_t _9020_ = _372_first;
  int64_t _9021_ = (_373_last - (int)1);
  for (int64_t _375_i = _9020_; _375_i < _9021_; ++_375_i)
  {
    {
      if ((_ptr__371_vals1[_ptr__370_idx[_375_i]] > _ptr__371_vals1[_ptr__370_idx[safe_add( _375_i,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:16:6-22:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _376_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _377_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _378_vals2,
    int64_t _379_first,
    int64_t _380_last,
    bool _381_check) { return mosek::fusion::p_Sort::issorted(_376_idx,_377_vals1,_378_vals2,_379_first,_380_last,_381_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _376_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _377_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _378_vals2,int64_t _379_first,int64_t _380_last,bool _381_check)
{
  _checked_ptr_1<int64_t> _ptr__376_idx(_376_idx ? _376_idx->raw() : nullptr, _376_idx ? _376_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__377_vals1(_377_vals1 ? _377_vals1->raw() : nullptr, _377_vals1 ? _377_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__378_vals2(_378_vals2 ? _378_vals2->raw() : nullptr, _378_vals2 ? _378_vals2->size(0) : 0);
  int64_t _9022_ = _379_first;
  int64_t _9023_ = (_380_last - (int)1);
  for (int64_t _382_i = _9022_; _382_i < _9023_; ++_382_i)
  {
    {
      if (((_ptr__377_vals1[_ptr__376_idx[_382_i]] > _ptr__377_vals1[_ptr__376_idx[safe_add( _382_i,(int)1 )]]) || ((_ptr__377_vals1[_ptr__376_idx[safe_add( _382_i,(int)1 )]] == _ptr__377_vals1[_ptr__376_idx[_382_i]]) && (_ptr__378_vals2[_ptr__376_idx[_382_i]] > _ptr__378_vals2[_ptr__376_idx[safe_add( _382_i,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

// Begin mosek.fusion.Sort.issorted
// Method mosek.fusion.Sort.issorted @ src/fusion/Sort.mbi:8:6-14:7
bool mosek::fusion::Sort::issorted
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _383_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _384_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _385_vals2,
    int64_t _386_first,
    int64_t _387_last,
    bool _388_check) { return mosek::fusion::p_Sort::issorted(_383_idx,_384_vals1,_385_vals2,_386_first,_387_last,_388_check); }
bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< int64_t,1 > > _383_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _384_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _385_vals2,int64_t _386_first,int64_t _387_last,bool _388_check)
{
  _checked_ptr_1<int64_t> _ptr__383_idx(_383_idx ? _383_idx->raw() : nullptr, _383_idx ? _383_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__384_vals1(_384_vals1 ? _384_vals1->raw() : nullptr, _384_vals1 ? _384_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__385_vals2(_385_vals2 ? _385_vals2->raw() : nullptr, _385_vals2 ? _385_vals2->size(0) : 0);
  int64_t _9024_ = _386_first;
  int64_t _9025_ = (_387_last - (int)1);
  for (int64_t _389_i = _9024_; _389_i < _9025_; ++_389_i)
  {
    {
      if (((_ptr__384_vals1[_ptr__383_idx[_389_i]] > _ptr__384_vals1[_ptr__383_idx[safe_add( _389_i,(int)1 )]]) || ((_ptr__384_vals1[_ptr__383_idx[_389_i]] == _ptr__384_vals1[_ptr__383_idx[safe_add( _389_i,(int)1 )]]) && (_ptr__385_vals2[_ptr__383_idx[_389_i]] > _ptr__385_vals2[_ptr__383_idx[safe_add( _389_i,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Sort.issorted

void mosek::fusion::p_Sort::destroy()
{
}
void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }
// } class Sort
// class IndexCounter { // @ src/fusion/CommonUtil.mbi:448:4-525:5
mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }
mosek::fusion::p_IndexCounter::p_IndexCounter
  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.IndexCounter.ctor @ src/fusion/CommonUtil.mbi:488:6-498:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _390_shape)
{ return new mosek::fusion::IndexCounter(_390_shape); }
mosek::fusion::IndexCounter::IndexCounter
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _390_shape) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_390_shape); }
void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _390_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__390_shape(_390_shape ? _390_shape->raw() : nullptr, _390_shape ? _390_shape->size(0) : 0);
    n = (int)((_390_shape)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    start = (int64_t)0;
    strides = ::mosek::fusion::p_Set::strides(_390_shape);
    std::vector<int32_t> _9026_;
    for (int32_t _391_i = (int)0, _9027_ = (int)((_390_shape)->size(0)); _391_i < _9027_ ; ++_391_i)
    {
      _9026_.push_back(_ptr__390_shape[_391_i]);
    }
    auto _9028_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9026_.size()),_9026_.begin(),_9026_.end()));
    dims = _9028_;
  }
}
// mosek.fusion.IndexCounter.ctor

// mosek.fusion.IndexCounter.ctor @ src/fusion/CommonUtil.mbi:473:6-486:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (int64_t _392_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _393_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _394_shape)
{ return new mosek::fusion::IndexCounter(_392_start_,_393_dims_,_394_shape); }
mosek::fusion::IndexCounter::IndexCounter
  (int64_t _392_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _393_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _394_shape) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_392_start_,_393_dims_,_394_shape); }
void mosek::fusion::p_IndexCounter::_initialize  (int64_t _392_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _393_dims_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _394_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__393_dims_(_393_dims_ ? _393_dims_->raw() : nullptr, _393_dims_ ? _393_dims_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__394_shape(_394_shape ? _394_shape->raw() : nullptr, _394_shape ? _394_shape->size(0) : 0);
    int32_t _395_nd = (int)((_394_shape)->size(0));
    n = (int)((_393_dims_)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    int32_t _9029_ = (int)0;
    int32_t _9030_ = n;
    for (int32_t _396_i = _9029_; _396_i < _9030_; ++_396_i)
    {
      {
        ((*st)(_396_i)) = _392_start_;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_394_shape);
    dims = _393_dims_;
    start = _392_start_;
  }
}
// mosek.fusion.IndexCounter.ctor

// mosek.fusion.IndexCounter.ctor @ src/fusion/CommonUtil.mbi:459:6-471:7
mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter
  (int64_t _397_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _398_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _399_strides_)
{ return new mosek::fusion::IndexCounter(_397_start_,_398_dims_,_399_strides_); }
mosek::fusion::IndexCounter::IndexCounter
  (int64_t _397_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _398_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _399_strides_) : 
   IndexCounter(new mosek::fusion::p_IndexCounter(this))
{ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_397_start_,_398_dims_,_399_strides_); }
void mosek::fusion::p_IndexCounter::_initialize  (int64_t _397_start_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _398_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _399_strides_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__398_dims_(_398_dims_ ? _398_dims_->raw() : nullptr, _398_dims_ ? _398_dims_->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__399_strides_(_399_strides_ ? _399_strides_->raw() : nullptr, _399_strides_ ? _399_strides_->size(0) : 0);
    n = (int)((_398_dims_)->size(0));
    ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
    int32_t _9031_ = (int)0;
    int32_t _9032_ = n;
    for (int32_t _400_i = _9031_; _400_i < _9032_; ++_400_i)
    {
      {
        ((*st)(_400_i)) = _397_start_;
      }
    }
    strides = _399_strides_;
    dims = _398_dims_;
    start = _397_start_;
  }
}
// mosek.fusion.IndexCounter.ctor

// Begin mosek.fusion.IndexCounter.atEnd
// Method mosek.fusion.IndexCounter.atEnd @ src/fusion/CommonUtil.mbi:524:6-66
bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }
bool mosek::fusion::p_IndexCounter::atEnd()
{
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
// End mosek.fusion.IndexCounter.atEnd

// Begin mosek.fusion.IndexCounter.getIndex
// Method mosek.fusion.IndexCounter.getIndex @ src/fusion/CommonUtil.mbi:522:6-54
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_IndexCounter::getIndex()
{
  return ii;
}
// End mosek.fusion.IndexCounter.getIndex

// Begin mosek.fusion.IndexCounter.next
// Method mosek.fusion.IndexCounter.next @ src/fusion/CommonUtil.mbi:521:6-68
int64_t mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }
int64_t mosek::fusion::p_IndexCounter::next()
{
  int64_t _401_r = _pubthis->get();
  _pubthis->inc();
  return _401_r;
}
// End mosek.fusion.IndexCounter.next

// Begin mosek.fusion.IndexCounter.get
// Method mosek.fusion.IndexCounter.get @ src/fusion/CommonUtil.mbi:519:6-49
int64_t mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }
int64_t mosek::fusion::p_IndexCounter::get()
{
  return ((*st)((int)0));
}
// End mosek.fusion.IndexCounter.get

// Begin mosek.fusion.IndexCounter.inc
// Method mosek.fusion.IndexCounter.inc @ src/fusion/CommonUtil.mbi:505:6-517:7
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }
void mosek::fusion::p_IndexCounter::inc()
{
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int32_t _402_i;
  {
    _402_i = (int)0;
    for(;((_402_i < (n - (int)1)) && (((*ii)(_402_i)) == ((*dims)(((n - _402_i) - (int)1)))));++ _402_i)
    {
      {
        ((*ii)(_402_i)) = (int)0;
        ++ ((*ii)(safe_add( _402_i,(int)1 )));
        ((*st)(safe_add( _402_i,(int)1 ))) = safe_add( ((*st)(safe_add( _402_i,(int)1 ))),((*strides)(((n - _402_i) - (int)2))) );
      }
    }
  }
  int32_t _9033_ = (int)0;
  int32_t _9034_ = _402_i;
  for (int32_t _403_j = _9033_; _403_j < _9034_; ++_403_j)
  {
    {
      ((*st)(_403_j)) = ((*st)(_402_i));
    }
  }
}
// End mosek.fusion.IndexCounter.inc

// Begin mosek.fusion.IndexCounter.reset
// Method mosek.fusion.IndexCounter.reset @ src/fusion/CommonUtil.mbi:500:6-503:7
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }
void mosek::fusion::p_IndexCounter::reset()
{
  st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(n)));
  int32_t _9035_ = (int)0;
  int32_t _9036_ = n;
  for (int32_t _404_i = _9035_; _404_i < _9036_; ++_404_i)
  {
    {
      ((*st)(_404_i)) = start;
    }
  }
}
// End mosek.fusion.IndexCounter.reset

void mosek::fusion::p_IndexCounter::destroy()
{
  dims.reset();
  strides.reset();
  st.reset();
  ii.reset();
}
void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }
// } class IndexCounter
// class CommonTools { // @ src/fusion/CommonUtil.mbi:6:4-445:5
mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }
mosek::fusion::p_CommonTools::p_CommonTools
  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ src/fusion/CommonUtil.mbi:433:6-444:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _405_values,
    int32_t _406_newsize) { return mosek::fusion::p_CommonTools::resize(_405_values,_406_newsize); }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int64_t,1 > > _405_values,int32_t _406_newsize)
{
  _checked_ptr_1<int64_t> _ptr__405_values(_405_values ? _405_values->raw() : nullptr, _405_values ? _405_values->size(0) : 0);
  if ((_406_newsize == (int)((_405_values)->size(0))))
  {
    {
      return _405_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _407_newvals = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_406_newsize)));
      _checked_ptr_1<int64_t> _ptr__407_newvals(_407_newvals ? _407_newvals->raw() : nullptr,_407_newvals ? _407_newvals->size(0) : 0);
      if ((_406_newsize > (int)((_405_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_405_values,(int)0,_407_newvals,(int)0,(int)((_405_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_405_values,(int)0,_407_newvals,(int)0,_406_newsize);
        }
      }
      return _407_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ src/fusion/CommonUtil.mbi:421:6-432:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _408_values,
    int32_t _409_newsize) { return mosek::fusion::p_CommonTools::resize(_408_values,_409_newsize); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int32_t,1 > > _408_values,int32_t _409_newsize)
{
  _checked_ptr_1<int32_t> _ptr__408_values(_408_values ? _408_values->raw() : nullptr, _408_values ? _408_values->size(0) : 0);
  if ((_409_newsize == (int)((_408_values)->size(0))))
  {
    {
      return _408_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _410_newvals = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_409_newsize)));
      _checked_ptr_1<int32_t> _ptr__410_newvals(_410_newvals ? _410_newvals->raw() : nullptr,_410_newvals ? _410_newvals->size(0) : 0);
      if ((_409_newsize > (int)((_408_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_408_values,(int)0,_410_newvals,(int)0,(int)((_408_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_408_values,(int)0,_410_newvals,(int)0,_409_newsize);
        }
      }
      return _410_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.resize
// Method mosek.fusion.CommonTools.resize @ src/fusion/CommonUtil.mbi:409:6-420:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize
  ( std::shared_ptr< monty::ndarray< double,1 > > _411_values,
    int32_t _412_newsize) { return mosek::fusion::p_CommonTools::resize(_411_values,_412_newsize); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _411_values,int32_t _412_newsize)
{
  _checked_ptr_1<double> _ptr__411_values(_411_values ? _411_values->raw() : nullptr, _411_values ? _411_values->size(0) : 0);
  if ((_412_newsize == (int)((_411_values)->size(0))))
  {
    {
      return _411_values;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _413_newvals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_412_newsize)));
      _checked_ptr_1<double> _ptr__413_newvals(_413_newvals ? _413_newvals->raw() : nullptr,_413_newvals ? _413_newvals->size(0) : 0);
      if ((_412_newsize > (int)((_411_values)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_411_values,(int)0,_413_newvals,(int)0,(int)((_411_values)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_411_values,(int)0,_413_newvals,(int)0,_412_newsize);
        }
      }
      return _413_newvals;
    }
  }
}
// End mosek.fusion.CommonTools.resize

// Begin mosek.fusion.CommonTools.binarySearch
// Method mosek.fusion.CommonTools.binarySearch @ src/fusion/CommonUtil.mbi:391:6-407:7
int32_t mosek::fusion::CommonTools::binarySearch
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _414_values,
    int32_t _415_target) { return mosek::fusion::p_CommonTools::binarySearch(_414_values,_415_target); }
int32_t mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int32_t,1 > > _414_values,int32_t _415_target)
{
  _checked_ptr_1<int32_t> _ptr__414_values(_414_values ? _414_values->raw() : nullptr, _414_values ? _414_values->size(0) : 0);
  int32_t _416_i0 = (int)0;
  int32_t _417_i1 = (int)((_414_values)->size(0));
  if ((_ptr__414_values[_416_i0] == _415_target))
  {
    {
      return _416_i0;
    }
  }
  else if((_ptr__414_values[(_417_i1 - (int)1)] == _415_target))
  {
    {
      return (_417_i1 - (int)1);
    }
  }
  {}
  while ( (_416_i0 < (_417_i1 - (int)1)) )
  {
    {
      int32_t _418_p = ((_417_i1 - _416_i0) / (int)2);
      if ((_415_target < _ptr__414_values[_418_p]))
      {
        {
          _416_i0 = safe_add( _418_p,(int)1 );
        }
      }
      else if((_415_target > _ptr__414_values[_418_p]))
      {
        {
          _417_i1 = _418_p;
        }
      }
      else
      {
        {
          return _418_p;
        }
      }
    }
  }
  return (-(int)1);
}
// End mosek.fusion.CommonTools.binarySearch

// Begin mosek.fusion.CommonTools.binarySearch
// Method mosek.fusion.CommonTools.binarySearch @ src/fusion/CommonUtil.mbi:383:6-389:7
int32_t mosek::fusion::CommonTools::binarySearch
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _419_values,
    int64_t _420_target) { return mosek::fusion::p_CommonTools::binarySearch(_419_values,_420_target); }
int32_t mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int64_t,1 > > _419_values,int64_t _420_target)
{
  _checked_ptr_1<int64_t> _ptr__419_values(_419_values ? _419_values->raw() : nullptr, _419_values ? _419_values->size(0) : 0);
  int32_t _421_i = ::mosek::fusion::p_CommonTools::binarySearchL(_419_values,_420_target);
  if (((_421_i < (int)((_419_values)->size(0))) && (_ptr__419_values[_421_i] == _420_target)))
  {
    {
      return _421_i;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
// End mosek.fusion.CommonTools.binarySearch

// Begin mosek.fusion.CommonTools.binarySearchR
// Method mosek.fusion.CommonTools.binarySearchR @ src/fusion/CommonUtil.mbi:367:6-381:7
int32_t mosek::fusion::CommonTools::binarySearchR
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _422_values,
    int64_t _423_target) { return mosek::fusion::p_CommonTools::binarySearchR(_422_values,_423_target); }
int32_t mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< int64_t,1 > > _422_values,int64_t _423_target)
{
  _checked_ptr_1<int64_t> _ptr__422_values(_422_values ? _422_values->raw() : nullptr, _422_values ? _422_values->size(0) : 0);
  int32_t _424_i0 = (int)0;
  int32_t _425_i1 = (int)((_422_values)->size(0));
  if ((_ptr__422_values[_424_i0] > _423_target))
  {
    {
      return _424_i0;
    }
  }
  {}
  while ( (_424_i0 < (_425_i1 - (int)1)) )
  {
    {
      int32_t _426_p = (safe_add( _425_i1,_424_i0 ) / (int)2);
      if ((_423_target >= _ptr__422_values[_426_p]))
      {
        {
          _424_i0 = _426_p;
        }
      }
      else
      {
        {
          _425_i1 = _426_p;
        }
      }
    }
  }
  return _425_i1;
}
// End mosek.fusion.CommonTools.binarySearchR

// Begin mosek.fusion.CommonTools.binarySearchL
// Method mosek.fusion.CommonTools.binarySearchL @ src/fusion/CommonUtil.mbi:350:6-364:7
int32_t mosek::fusion::CommonTools::binarySearchL
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _427_values,
    int64_t _428_target) { return mosek::fusion::p_CommonTools::binarySearchL(_427_values,_428_target); }
int32_t mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< int64_t,1 > > _427_values,int64_t _428_target)
{
  _checked_ptr_1<int64_t> _ptr__427_values(_427_values ? _427_values->raw() : nullptr, _427_values ? _427_values->size(0) : 0);
  int32_t _429_i0 = (int)0;
  int32_t _430_i1 = (int)((_427_values)->size(0));
  if ((_428_target <= _ptr__427_values[_429_i0]))
  {
    {
      return _429_i0;
    }
  }
  {}
  while ( (_429_i0 < (_430_i1 - (int)1)) )
  {
    {
      int32_t _431_p = (safe_add( _430_i1,_429_i0 ) / (int)2);
      if ((_ptr__427_values[_431_p] < _428_target))
      {
        {
          _429_i0 = _431_p;
        }
      }
      else
      {
        {
          _430_i1 = _431_p;
        }
      }
    }
  }
  return _430_i1;
}
// End mosek.fusion.CommonTools.binarySearchL

// Begin mosek.fusion.CommonTools.ndIncr
// Method mosek.fusion.CommonTools.ndIncr @ src/fusion/CommonUtil.mbi:337:6-346:7
void mosek::fusion::CommonTools::ndIncr
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _432_ndidx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _433_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _434_last) { mosek::fusion::p_CommonTools::ndIncr(_432_ndidx,_433_first,_434_last); }
void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int32_t,1 > > _432_ndidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _433_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _434_last)
{
  _checked_ptr_1<int32_t> _ptr__432_ndidx(_432_ndidx ? _432_ndidx->raw() : nullptr, _432_ndidx ? _432_ndidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__433_first(_433_first ? _433_first->raw() : nullptr, _433_first ? _433_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__434_last(_434_last ? _434_last->raw() : nullptr, _434_last ? _434_last->size(0) : 0);
  int32_t _435_i = ((int)((_432_ndidx)->size(0)) - (int)1);
  ++ _ptr__432_ndidx[_435_i];
  while ( ((_435_i > (int)0) && (_ptr__432_ndidx[_435_i] >= _ptr__434_last[_435_i])) )
  {
    {
      _ptr__432_ndidx[_435_i] = _ptr__433_first[_435_i];
      ++ _ptr__432_ndidx[(_435_i - (int)1)];
    }
  }
}
// End mosek.fusion.CommonTools.ndIncr

// Begin mosek.fusion.CommonTools.transposeTriplets
// Method mosek.fusion.CommonTools.transposeTriplets @ src/fusion/CommonUtil.mbi:290:6-335:7
void mosek::fusion::CommonTools::transposeTriplets
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _436_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _437_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _438_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _439_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _440_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _441_tval_,
    int64_t _442_nelm,
    int32_t _443_dimi,
    int32_t _444_dimj) { mosek::fusion::p_CommonTools::transposeTriplets(_436_subi,_437_subj,_438_val,_439_tsubi_,_440_tsubj_,_441_tval_,_442_nelm,_443_dimi,_444_dimj); }
void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _436_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _437_subj,std::shared_ptr< monty::ndarray< double,1 > > _438_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _439_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int64_t,1 > >,1 > > _440_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _441_tval_,int64_t _442_nelm,int32_t _443_dimi,int32_t _444_dimj)
{
  _checked_ptr_1<int32_t> _ptr__436_subi(_436_subi ? _436_subi->raw() : nullptr, _436_subi ? _436_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__437_subj(_437_subj ? _437_subj->raw() : nullptr, _437_subj ? _437_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__438_val(_438_val ? _438_val->raw() : nullptr, _438_val ? _438_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _445_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _443_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__445_rptrb(_445_rptrb ? _445_rptrb->raw() : nullptr,_445_rptrb ? _445_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _446_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _444_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__446_cptrb(_446_cptrb ? _446_cptrb->raw() : nullptr,_446_cptrb ? _446_cptrb->size(0) : 0);
  {
    int64_t _447_i = (int64_t)0;
    for(;(_447_i < _442_nelm);++ _447_i)
    {
      {
        _ptr__446_cptrb[safe_add( _ptr__437_subj[_447_i],(int)2 )] = safe_add( _ptr__446_cptrb[safe_add( _ptr__437_subj[_447_i],(int)2 )],(int)1 );
        _ptr__445_rptrb[safe_add( _ptr__436_subi[_447_i],(int)2 )] = safe_add( _ptr__445_rptrb[safe_add( _ptr__436_subi[_447_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _448_i = (int)1;
    for(;(_448_i < _443_dimi);++ _448_i)
    {
      {
        _ptr__445_rptrb[safe_add( _448_i,(int)1 )] = safe_add( _ptr__445_rptrb[safe_add( _448_i,(int)1 )],_ptr__445_rptrb[_448_i] );
      }
    }
  }
  {
    int32_t _449_i = (int)1;
    for(;(_449_i < _444_dimj);++ _449_i)
    {
      {
        _ptr__446_cptrb[safe_add( _449_i,(int)1 )] = safe_add( _ptr__446_cptrb[safe_add( _449_i,(int)1 )],_ptr__446_cptrb[_449_i] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _450_tsubi = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_442_nelm)));
  _checked_ptr_1<int64_t> _ptr__450_tsubi(_450_tsubi ? _450_tsubi->raw() : nullptr,_450_tsubi ? _450_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _451_tsubj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_442_nelm)));
  _checked_ptr_1<int64_t> _ptr__451_tsubj(_451_tsubj ? _451_tsubj->raw() : nullptr,_451_tsubj ? _451_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _452_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442_nelm)));
  _checked_ptr_1<double> _ptr__452_tval(_452_tval ? _452_tval->raw() : nullptr,_452_tval ? _452_tval->size(0) : 0);
  int32_t _9037_ = (int)0;
  int32_t _9038_ = _443_dimi;
  for (int32_t _453_i = _9037_; _453_i < _9038_; ++_453_i)
  {
    {
      {
        int64_t _454_k = _ptr__445_rptrb[_453_i];
        for(;(_454_k < _ptr__445_rptrb[safe_add( _453_i,(int)1 )]);++ _454_k)
        {
          {
            int32_t _455_j = _ptr__437_subj[_454_k];
            int64_t _456_cidx = _ptr__446_cptrb[_455_j];
            _ptr__450_tsubi[_456_cidx] = _453_i;
            _ptr__451_tsubj[_456_cidx] = _455_j;
            _ptr__452_tval[_456_cidx] = _ptr__438_val[_454_k];
            _ptr__446_cptrb[_455_j] = safe_add( _456_cidx,(int)1 );
          }
        }
      }
    }
  }
  ((*_439_tsubi_)((int)0)) = _451_tsubj;
  ((*_440_tsubj_)((int)0)) = _450_tsubi;
  ((*_441_tval_)((int)0)) = _452_tval;
}
// End mosek.fusion.CommonTools.transposeTriplets

// Begin mosek.fusion.CommonTools.transposeTriplets
// Method mosek.fusion.CommonTools.transposeTriplets @ src/fusion/CommonUtil.mbi:242:6-287:7
void mosek::fusion::CommonTools::transposeTriplets
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _457_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _458_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _459_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _460_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _461_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _462_tval_,
    int64_t _463_nelm,
    int32_t _464_dimi,
    int32_t _465_dimj) { mosek::fusion::p_CommonTools::transposeTriplets(_457_subi,_458_subj,_459_val,_460_tsubi_,_461_tsubj_,_462_tval_,_463_nelm,_464_dimi,_465_dimj); }
void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _457_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _458_subj,std::shared_ptr< monty::ndarray< double,1 > > _459_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _460_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _461_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _462_tval_,int64_t _463_nelm,int32_t _464_dimi,int32_t _465_dimj)
{
  _checked_ptr_1<int32_t> _ptr__457_subi(_457_subi ? _457_subi->raw() : nullptr, _457_subi ? _457_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__458_subj(_458_subj ? _458_subj->raw() : nullptr, _458_subj ? _458_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__459_val(_459_val ? _459_val->raw() : nullptr, _459_val ? _459_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _466_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _464_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__466_rptrb(_466_rptrb ? _466_rptrb->raw() : nullptr,_466_rptrb ? _466_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _467_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _465_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__467_cptrb(_467_cptrb ? _467_cptrb->raw() : nullptr,_467_cptrb ? _467_cptrb->size(0) : 0);
  {
    int64_t _468_i = (int64_t)0;
    for(;(_468_i < _463_nelm);++ _468_i)
    {
      {
        _ptr__467_cptrb[safe_add( _ptr__458_subj[_468_i],(int)2 )] = safe_add( _ptr__467_cptrb[safe_add( _ptr__458_subj[_468_i],(int)2 )],(int)1 );
        _ptr__466_rptrb[safe_add( _ptr__457_subi[_468_i],(int)2 )] = safe_add( _ptr__466_rptrb[safe_add( _ptr__457_subi[_468_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _469_i = (int)1;
    for(;(_469_i < _464_dimi);++ _469_i)
    {
      {
        _ptr__466_rptrb[safe_add( _469_i,(int)1 )] = safe_add( _ptr__466_rptrb[safe_add( _469_i,(int)1 )],_ptr__466_rptrb[_469_i] );
      }
    }
  }
  {
    int32_t _470_i = (int)1;
    for(;(_470_i < _465_dimj);++ _470_i)
    {
      {
        _ptr__467_cptrb[safe_add( _470_i,(int)1 )] = safe_add( _ptr__467_cptrb[safe_add( _470_i,(int)1 )],_ptr__467_cptrb[_470_i] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _471_tsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_463_nelm)));
  _checked_ptr_1<int32_t> _ptr__471_tsubi(_471_tsubi ? _471_tsubi->raw() : nullptr,_471_tsubi ? _471_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _472_tsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_463_nelm)));
  _checked_ptr_1<int32_t> _ptr__472_tsubj(_472_tsubj ? _472_tsubj->raw() : nullptr,_472_tsubj ? _472_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _473_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_463_nelm)));
  _checked_ptr_1<double> _ptr__473_tval(_473_tval ? _473_tval->raw() : nullptr,_473_tval ? _473_tval->size(0) : 0);
  {
    int32_t _474_i = (int)0;
    for(;(_474_i < _464_dimi);++ _474_i)
    {
      {
        int64_t _9039_ = _ptr__466_rptrb[_474_i];
        int64_t _9040_ = _ptr__466_rptrb[safe_add( _474_i,(int)1 )];
        for (int64_t _475_k = _9039_; _475_k < _9040_; ++_475_k)
        {
          {
            int32_t _476_j = _ptr__458_subj[_475_k];
            int64_t _477_cidx = _ptr__467_cptrb[_476_j];
            _ptr__471_tsubi[_477_cidx] = _474_i;
            _ptr__472_tsubj[_477_cidx] = _476_j;
            _ptr__473_tval[_477_cidx] = _ptr__459_val[_475_k];
            _ptr__467_cptrb[_476_j] = safe_add( _477_cidx,(int)1 );
          }
        }
      }
    }
  }
  ((*_460_tsubi_)((int)0)) = _472_tsubj;
  ((*_461_tsubj_)((int)0)) = _471_tsubi;
  ((*_462_tval_)((int)0)) = _473_tval;
}
// End mosek.fusion.CommonTools.transposeTriplets

// Begin mosek.fusion.CommonTools.tripletSort
// Method mosek.fusion.CommonTools.tripletSort @ src/fusion/CommonUtil.mbi:115:6-214:7
void mosek::fusion::CommonTools::tripletSort
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _478_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _479_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _480_val,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _481_tsubi_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _482_tsubj_,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _483_tval_,
    int64_t _484_nelm,
    int32_t _485_dimi,
    int32_t _486_dimj) { mosek::fusion::p_CommonTools::tripletSort(_478_subi,_479_subj,_480_val,_481_tsubi_,_482_tsubj_,_483_tval_,_484_nelm,_485_dimi,_486_dimj); }
void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int32_t,1 > > _478_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _479_subj,std::shared_ptr< monty::ndarray< double,1 > > _480_val,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _481_tsubi_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _482_tsubj_,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _483_tval_,int64_t _484_nelm,int32_t _485_dimi,int32_t _486_dimj)
{
  _checked_ptr_1<int32_t> _ptr__478_subi(_478_subi ? _478_subi->raw() : nullptr, _478_subi ? _478_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__479_subj(_479_subj ? _479_subj->raw() : nullptr, _479_subj ? _479_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__480_val(_480_val ? _480_val->raw() : nullptr, _480_val ? _480_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _487_cols = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_484_nelm)));
  _checked_ptr_1<int32_t> _ptr__487_cols(_487_cols ? _487_cols->raw() : nullptr,_487_cols ? _487_cols->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _488_cptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _486_dimj,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__488_cptrb(_488_cptrb ? _488_cptrb->raw() : nullptr,_488_cptrb ? _488_cptrb->size(0) : 0);
  int64_t _9041_ = (int64_t)0;
  int64_t _9042_ = _484_nelm;
  for (int64_t _489_i = _9041_; _489_i < _9042_; ++_489_i)
  {
    {
      _ptr__488_cptrb[safe_add( _ptr__479_subj[_489_i],(int)2 )] = safe_add( _ptr__488_cptrb[safe_add( _ptr__479_subj[_489_i],(int)2 )],(int)1 );
    }
  }
  int32_t _9043_ = (int)1;
  int32_t _9044_ = _486_dimj;
  for (int32_t _490_i = _9043_; _490_i < _9044_; ++_490_i)
  {
    {
      _ptr__488_cptrb[safe_add( _490_i,(int)1 )] = safe_add( _ptr__488_cptrb[safe_add( _490_i,(int)1 )],_ptr__488_cptrb[_490_i] );
    }
  }
  int32_t _9045_ = (int)0;
  int32_t _9046_ = (int32_t)_484_nelm;
  for (int32_t _491_i = _9045_; _491_i < _9046_; ++_491_i)
  {
    {
      int32_t _492_cidx = _ptr__479_subj[_491_i];
      _ptr__487_cols[_ptr__488_cptrb[safe_add( _492_cidx,(int)1 )]] = _491_i;
      _ptr__488_cptrb[safe_add( _492_cidx,(int)1 )] = safe_add( _ptr__488_cptrb[safe_add( _492_cidx,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _493_rptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _485_dimi,(int)2 ))));
  _checked_ptr_1<int64_t> _ptr__493_rptrb(_493_rptrb ? _493_rptrb->raw() : nullptr,_493_rptrb ? _493_rptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _494_rows = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_484_nelm)));
  _checked_ptr_1<int32_t> _ptr__494_rows(_494_rows ? _494_rows->raw() : nullptr,_494_rows ? _494_rows->size(0) : 0);
  {
    int32_t _495_i = (int)0;
    for(;(_495_i < _484_nelm);++ _495_i)
    {
      {
        _ptr__493_rptrb[safe_add( _ptr__478_subi[_495_i],(int)2 )] = safe_add( _ptr__493_rptrb[safe_add( _ptr__478_subi[_495_i],(int)2 )],(int)1 );
      }
    }
  }
  {
    int32_t _496_i = (int)1;
    for(;(_496_i < _485_dimi);++ _496_i)
    {
      {
        _ptr__493_rptrb[safe_add( _496_i,(int)1 )] = safe_add( _ptr__493_rptrb[safe_add( _496_i,(int)1 )],_ptr__493_rptrb[_496_i] );
      }
    }
  }
  {
    int32_t _497_j = (int)0;
    for(;(_497_j < _486_dimj);++ _497_j)
    {
      {
        {
          int64_t _498_i = _ptr__488_cptrb[_497_j];
          for(;(_498_i < _ptr__488_cptrb[safe_add( _497_j,(int)1 )]);++ _498_i)
          {
            {
              int32_t _499_ridx = _ptr__478_subi[_ptr__487_cols[_498_i]];
              _ptr__494_rows[_ptr__493_rptrb[safe_add( _499_ridx,(int)1 )]] = _ptr__487_cols[_498_i];
              _ptr__493_rptrb[safe_add( _499_ridx,(int)1 )] = safe_add( _ptr__493_rptrb[safe_add( _499_ridx,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int32_t _500_nunique = (int)1;
  {
    int32_t _501_si = _ptr__478_subi[_ptr__494_rows[(int)0]];
    int32_t _502_sj = _ptr__479_subj[_ptr__494_rows[(int)0]];
    {
      int32_t _503_i = (int)1;
      for(;(_503_i < _484_nelm);++ _503_i)
      {
        {
          int32_t _504_idx = _ptr__494_rows[_503_i];
          if (((_501_si != _ptr__478_subi[_504_idx]) || (_502_sj != _ptr__479_subj[_504_idx])))
          {
            {
              _501_si = _ptr__478_subi[_504_idx];
              _502_sj = _ptr__479_subj[_504_idx];
              ++ _500_nunique;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _505_tsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_500_nunique)));
  _checked_ptr_1<int32_t> _ptr__505_tsubi(_505_tsubi ? _505_tsubi->raw() : nullptr,_505_tsubi ? _505_tsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _506_tsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_500_nunique)));
  _checked_ptr_1<int32_t> _ptr__506_tsubj(_506_tsubj ? _506_tsubj->raw() : nullptr,_506_tsubj ? _506_tsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _507_tval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_500_nunique)));
  _checked_ptr_1<double> _ptr__507_tval(_507_tval ? _507_tval->raw() : nullptr,_507_tval ? _507_tval->size(0) : 0);
  {
    int32_t _508_idx = _ptr__494_rows[(int)0];
    _ptr__505_tsubi[(int)0] = _ptr__478_subi[_508_idx];
    _ptr__506_tsubj[(int)0] = _ptr__479_subj[_508_idx];
    _ptr__507_tval[(int)0] = _ptr__480_val[_508_idx];
  }
  int32_t _509_di = (int)1;
  int32_t _9047_ = (int)1;
  int64_t _9048_ = _484_nelm;
  for (int64_t _510_i = _9047_; _510_i < _9048_; ++_510_i)
  {
    {
      int32_t _511_idx = _ptr__494_rows[_510_i];
      if (((_ptr__505_tsubi[(_509_di - (int)1)] == _ptr__478_subi[_511_idx]) && (_ptr__506_tsubj[(_509_di - (int)1)] == _ptr__479_subj[_511_idx])))
      {
        {
          _ptr__507_tval[(_509_di - (int)1)] = (_ptr__507_tval[(_509_di - (int)1)] + _ptr__480_val[_511_idx]);
        }
      }
      else
      {
        {
          _ptr__505_tsubi[_509_di] = _ptr__478_subi[_511_idx];
          _ptr__506_tsubj[_509_di] = _ptr__479_subj[_511_idx];
          _ptr__507_tval[_509_di] = _ptr__480_val[_511_idx];
          ++ _509_di;
        }
      }
    }
  }
  ((*_481_tsubi_)((int)0)) = _505_tsubi;
  ((*_482_tsubj_)((int)0)) = _506_tsubj;
  ((*_483_tval_)((int)0)) = _507_tval;
}
// End mosek.fusion.CommonTools.tripletSort

// Begin mosek.fusion.CommonTools.argMSort
// Method mosek.fusion.CommonTools.argMSort @ src/fusion/CommonUtil.mbi:67:6-87:7
void mosek::fusion::CommonTools::argMSort
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _512_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _513_vals) { mosek::fusion::p_CommonTools::argMSort(_512_idx,_513_vals); }
void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int32_t,1 > > _512_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _513_vals)
{
  _checked_ptr_1<int32_t> _ptr__512_idx(_512_idx ? _512_idx->raw() : nullptr, _512_idx ? _512_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__513_vals(_513_vals ? _513_vals->raw() : nullptr, _513_vals ? _513_vals->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _514_temp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_512_idx)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__514_temp(_514_temp ? _514_temp->raw() : nullptr,_514_temp ? _514_temp->size(0) : 0);
  bool _515_alt = false;
  {
    int32_t _516_intvlen = (int)1;
    for(;(_516_intvlen < (int)((_512_idx)->size(0)));_516_intvlen *= (int)2)
    {
      {
        _515_alt = (!_515_alt);
        int32_t _9049_ = (int)0;
        int32_t _9050_ = (int)((_512_idx)->size(0));
        int32_t _9051_ = safe_mul( _516_intvlen,(int)2 );
        for (int32_t _517_i = _9049_; _517_i < _9050_; _517_i += _9051_)
        {
          {
            if (_515_alt)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_512_idx,_514_temp,_513_vals,_517_i,safe_add( _517_i,_516_intvlen ),safe_add( _517_i,safe_mul( (int)2,_516_intvlen ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_514_temp,_512_idx,_513_vals,_517_i,safe_add( _517_i,_516_intvlen ),safe_add( _517_i,safe_mul( (int)2,_516_intvlen ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_515_alt)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_514_temp,(int)0,_512_idx,(int)0,(int)((_512_idx)->size(0)));
    }
  }
  {}
}
// End mosek.fusion.CommonTools.argMSort

// Begin mosek.fusion.CommonTools.mergeInto
// Method mosek.fusion.CommonTools.mergeInto @ src/fusion/CommonUtil.mbi:29:6-54:7
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int32_t,1 > > _518_src,std::shared_ptr< monty::ndarray< int32_t,1 > > _519_tgt,std::shared_ptr< monty::ndarray< int32_t,1 > > _520_vals,int32_t _521_si0,int32_t _522_si1_,int32_t _523_si2_)
{
  _checked_ptr_1<int32_t> _ptr__518_src(_518_src ? _518_src->raw() : nullptr, _518_src ? _518_src->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__519_tgt(_519_tgt ? _519_tgt->raw() : nullptr, _519_tgt ? _519_tgt->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__520_vals(_520_vals ? _520_vals->raw() : nullptr, _520_vals ? _520_vals->size(0) : 0);
  int32_t _9052_;
  bool _9053_ = (_523_si2_ > (int)((_518_src)->size(0)));
  if (_9053_)
  {
    _9052_ = (int)((_518_src)->size(0));
  }
  else
  {
    _9052_ = _523_si2_;
  }
  int32_t _524_si2 = _9052_;
  int32_t _9054_;
  bool _9055_ = (_522_si1_ > _524_si2);
  if (_9055_)
  {
    _9054_ = _524_si2;
  }
  else
  {
    _9054_ = _522_si1_;
  }
  int32_t _525_si1 = _9054_;
  if ((_525_si1 == _524_si2))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_518_src,_521_si0,_519_tgt,_521_si0,(_525_si1 - _521_si0));
    }
  }
  else
  {
    {
      int32_t _526_i0 = _521_si0;
      int32_t _527_i1 = _525_si1;
      int32_t _528_i;
      {
        _528_i = _521_si0;
        for(;((_526_i0 < _525_si1) && (_527_i1 < _524_si2));++ _528_i)
        {
          {
            if ((_ptr__520_vals[_ptr__518_src[_526_i0]] < _ptr__520_vals[_ptr__518_src[_527_i1]]))
            {
              {
                _ptr__519_tgt[_528_i] = _ptr__518_src[_526_i0];
                ++ _526_i0;
              }
            }
            else
            {
              {
                _ptr__519_tgt[_528_i] = _ptr__518_src[_527_i1];
                ++ _527_i1;
              }
            }
          }
        }
      }
      while ( (_526_i0 < _525_si1) )
      {
        {
          _ptr__519_tgt[_528_i] = _ptr__518_src[_526_i0];
          ++ _526_i0;
          ++ _528_i;
        }
      }
      while ( (_527_i1 < _524_si2) )
      {
        {
          _ptr__519_tgt[_528_i] = _ptr__518_src[_527_i1];
          ++ _527_i1;
          ++ _528_i;
        }
      }
    }
  }
}
// End mosek.fusion.CommonTools.mergeInto

// Begin mosek.fusion.CommonTools.argQsort
// Method mosek.fusion.CommonTools.argQsort @ src/fusion/CommonUtil.mbi:16:6-22:7
void mosek::fusion::CommonTools::argQsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _529_idx,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _530_vals1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _531_vals2,
    int64_t _532_first,
    int64_t _533_last) { mosek::fusion::p_CommonTools::argQsort(_529_idx,_530_vals1,_531_vals2,_532_first,_533_last); }
void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _529_idx,std::shared_ptr< monty::ndarray< int64_t,1 > > _530_vals1,std::shared_ptr< monty::ndarray< int64_t,1 > > _531_vals2,int64_t _532_first,int64_t _533_last)
{
  _checked_ptr_1<int64_t> _ptr__529_idx(_529_idx ? _529_idx->raw() : nullptr, _529_idx ? _529_idx->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__530_vals1(_530_vals1 ? _530_vals1->raw() : nullptr, _530_vals1 ? _530_vals1->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__531_vals2(_531_vals2 ? _531_vals2->raw() : nullptr, _531_vals2 ? _531_vals2->size(0) : 0);
  if ((NULL == _531_vals2.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_529_idx,_530_vals1,_532_first,_533_last);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_529_idx,_530_vals1,_531_vals2,_532_first,_533_last);
    }
  }
}
// End mosek.fusion.CommonTools.argQsort

// Begin mosek.fusion.CommonTools.argQsort
// Method mosek.fusion.CommonTools.argQsort @ src/fusion/CommonUtil.mbi:8:6-14:7
void mosek::fusion::CommonTools::argQsort
  ( std::shared_ptr< monty::ndarray< int64_t,1 > > _534_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _535_vals1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _536_vals2,
    int64_t _537_first,
    int64_t _538_last) { mosek::fusion::p_CommonTools::argQsort(_534_idx,_535_vals1,_536_vals2,_537_first,_538_last); }
void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< int64_t,1 > > _534_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _535_vals1,std::shared_ptr< monty::ndarray< int32_t,1 > > _536_vals2,int64_t _537_first,int64_t _538_last)
{
  _checked_ptr_1<int64_t> _ptr__534_idx(_534_idx ? _534_idx->raw() : nullptr, _534_idx ? _534_idx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__535_vals1(_535_vals1 ? _535_vals1->raw() : nullptr, _535_vals1 ? _535_vals1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__536_vals2(_536_vals2 ? _536_vals2->raw() : nullptr, _536_vals2 ? _536_vals2->size(0) : 0);
  if ((NULL == _536_vals2.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_534_idx,_535_vals1,_537_first,_538_last);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_534_idx,_535_vals1,_536_vals2,_537_first,_538_last);
    }
  }
}
// End mosek.fusion.CommonTools.argQsort

void mosek::fusion::p_CommonTools::destroy()
{
}
void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }
// } class CommonTools
// class SolutionStruct { // @ src/fusion/Model.mbi:5319:4-5654:5
mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SolutionStruct::p_SolutionStruct
  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis)
{}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_accy() { return _impl->accy; }
void mosek::fusion::SolutionStruct::set_accy(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->accy = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_accx() { return _impl->accx; }
void mosek::fusion::SolutionStruct::set_accx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->accx = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::SolutionStruct::get_accptr() { return _impl->accptr; }
void mosek::fusion::SolutionStruct::set_accptr(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->accptr = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int32_t _val) { _impl->sol_numbarvar = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numaccelm() { return _impl->sol_numaccelm; }
void mosek::fusion::SolutionStruct::set_sol_numaccelm(int32_t _val) { _impl->sol_numaccelm = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numacc() { return _impl->sol_numacc; }
void mosek::fusion::SolutionStruct::set_sol_numacc(int32_t _val) { _impl->sol_numacc = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int32_t _val) { _impl->sol_numvar = _val; }
int32_t mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int32_t _val) { _impl->sol_numcon = _val; }
// mosek.fusion.SolutionStruct.ctor @ src/fusion/Model.mbi:5594:6-5653:7
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct
  (int32_t _539_numvar,
    int32_t _540_numcon,
    int32_t _541_numbarvar,
    int32_t _542_numacc,
    int32_t _543_numaccelm)
{ return new mosek::fusion::SolutionStruct(_539_numvar,_540_numcon,_541_numbarvar,_542_numacc,_543_numaccelm); }
mosek::fusion::SolutionStruct::SolutionStruct
  (int32_t _539_numvar,
    int32_t _540_numcon,
    int32_t _541_numbarvar,
    int32_t _542_numacc,
    int32_t _543_numaccelm) : 
   SolutionStruct(new mosek::fusion::p_SolutionStruct(this))
{ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_539_numvar,_540_numcon,_541_numbarvar,_542_numacc,_543_numaccelm); }
void mosek::fusion::p_SolutionStruct::_initialize  (int32_t _539_numvar,
    int32_t _540_numcon,
    int32_t _541_numbarvar,
    int32_t _542_numacc,
    int32_t _543_numaccelm)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _539_numvar;
    sol_numcon = _540_numcon;
    sol_numbarvar = _541_numbarvar;
    sol_numacc = _542_numacc;
    sol_numaccelm = _543_numaccelm;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    barx = nullptr;
    bars = nullptr;
    accx = nullptr;
    accy = nullptr;
    accptr = nullptr;
    if ((_539_numvar > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_539_numvar)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_539_numvar)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_539_numvar)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_539_numvar)));
      }
    }
    {}
    if ((_541_numbarvar > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_541_numbarvar)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_541_numbarvar)));
      }
    }
    {}
    if ((_540_numcon > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_540_numcon)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_540_numcon)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_540_numcon)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_540_numcon)));
      }
    }
    {}
    if ((_542_numacc > (int)0))
    {
      {
        accx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_543_numaccelm)));
        accy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_543_numaccelm)));
        accptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _542_numacc,(int)1 ))));
      }
    }
    {}
  }
}
// mosek.fusion.SolutionStruct.ctor

// mosek.fusion.SolutionStruct.ctor @ src/fusion/Model.mbi:5561:6-5591:7
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct
  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _544_that)
{ return new mosek::fusion::SolutionStruct(_544_that); }
mosek::fusion::SolutionStruct::SolutionStruct
  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _544_that) : 
   SolutionStruct(new mosek::fusion::p_SolutionStruct(this))
{ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_544_that); }
void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _544_that)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->sol_numvar;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->sol_numbarvar;
    sol_numacc = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->sol_numacc;
    sol_numaccelm = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->sol_numaccelm;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _9056_;
    bool _9057_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->xc.get());
    if (_9057_)
    {
      _9056_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->xc);
    }
    else
    {
      _9056_ = nullptr;
    }
    xc = _9056_;
    std::shared_ptr< monty::ndarray< double,1 > > _9058_;
    bool _9059_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->xx.get());
    if (_9059_)
    {
      _9058_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->xx);
    }
    else
    {
      _9058_ = nullptr;
    }
    xx = _9058_;
    std::shared_ptr< monty::ndarray< double,1 > > _9060_;
    bool _9061_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->yx.get());
    if (_9061_)
    {
      _9060_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->yx);
    }
    else
    {
      _9060_ = nullptr;
    }
    yx = _9060_;
    std::shared_ptr< monty::ndarray< double,1 > > _9062_;
    bool _9063_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->slc.get());
    if (_9063_)
    {
      _9062_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->slc);
    }
    else
    {
      _9062_ = nullptr;
    }
    slc = _9062_;
    std::shared_ptr< monty::ndarray< double,1 > > _9064_;
    bool _9065_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->suc.get());
    if (_9065_)
    {
      _9064_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->suc);
    }
    else
    {
      _9064_ = nullptr;
    }
    suc = _9064_;
    std::shared_ptr< monty::ndarray< double,1 > > _9066_;
    bool _9067_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->y.get());
    if (_9067_)
    {
      _9066_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->y);
    }
    else
    {
      _9066_ = nullptr;
    }
    y = _9066_;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _9068_;
    bool _9069_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->slx.get());
    if (_9069_)
    {
      _9068_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->slx);
    }
    else
    {
      _9068_ = nullptr;
    }
    slx = _9068_;
    std::shared_ptr< monty::ndarray< double,1 > > _9070_;
    bool _9071_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->sux.get());
    if (_9071_)
    {
      _9070_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->sux);
    }
    else
    {
      _9070_ = nullptr;
    }
    sux = _9070_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9072_;
    bool _9073_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->accptr.get());
    if (_9073_)
    {
      _9072_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->accptr);
    }
    else
    {
      _9072_ = nullptr;
    }
    accptr = _9072_;
    std::shared_ptr< monty::ndarray< double,1 > > _9074_;
    bool _9075_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->accx.get());
    if (_9075_)
    {
      _9074_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->accx);
    }
    else
    {
      _9074_ = nullptr;
    }
    accx = _9074_;
    std::shared_ptr< monty::ndarray< double,1 > > _9076_;
    bool _9077_ = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->accy.get());
    if (_9077_)
    {
      _9076_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_544_that)->accy);
    }
    else
    {
      _9076_ = nullptr;
    }
    accy = _9076_;
  }
}
// mosek.fusion.SolutionStruct.ctor

// Begin mosek.fusion.SolutionStruct.clone
// Method mosek.fusion.SolutionStruct.clone @ src/fusion/Model.mbi:5592:6-79
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone()
{
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
// End mosek.fusion.SolutionStruct.clone

// Begin mosek.fusion.SolutionStruct.resize
// Method mosek.fusion.SolutionStruct.resize @ src/fusion/Model.mbi:5386:6-5556:7
void mosek::fusion::SolutionStruct :: resize(int32_t _545_numvar,int32_t _546_numcon,int32_t _547_numbarvar,int32_t _548_numacc,int32_t _549_numaccelm) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_545_numvar,_546_numcon,_547_numbarvar,_548_numacc,_549_numaccelm); }
void mosek::fusion::p_SolutionStruct::resize(int32_t _545_numvar,int32_t _546_numcon,int32_t _547_numbarvar,int32_t _548_numacc,int32_t _549_numaccelm)
{
  if ((_548_numacc <= (int)0))
  {
    {
      sol_numacc = (int)0;
    }
  }
  else if((_548_numacc <= ((int)((accptr)->size(0)) - (int)1)))
  {
    {
      sol_numacc = _548_numacc;
    }
  }
  else
  {
    {
      int32_t _550_newnum = safe_mul( ((int)((accptr)->size(0)) - (int)1),(int)2 );
      if ((_550_newnum < _548_numacc))
      {
        {
          _550_newnum = _548_numacc;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,1 > > _551_new_accptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _550_newnum,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__551_new_accptr(_551_new_accptr ? _551_new_accptr->raw() : nullptr,_551_new_accptr ? _551_new_accptr->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(accptr,(int)0,_551_new_accptr,(int)0,safe_add( _548_numacc,(int)1 ));
      accptr = _551_new_accptr;
      sol_numacc = _548_numacc;
    }
  }
  if ((_549_numaccelm <= (int)0))
  {
    {
      sol_numaccelm = (int)0;
    }
  }
  else if((_549_numaccelm > (int)((accx)->size(0))))
  {
    {
      sol_numaccelm = _549_numaccelm;
    }
  }
  else
  {
    {
      int32_t _552_newnum = safe_mul( (int)((accx)->size(0)),(int)2 );
      if ((_552_newnum < _549_numaccelm))
      {
        {
          _552_newnum = _549_numaccelm;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< double,1 > > _553_new_accx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_552_newnum)));
      _checked_ptr_1<double> _ptr__553_new_accx(_553_new_accx ? _553_new_accx->raw() : nullptr,_553_new_accx ? _553_new_accx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _554_new_accy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_552_newnum)));
      _checked_ptr_1<double> _ptr__554_new_accy(_554_new_accy ? _554_new_accy->raw() : nullptr,_554_new_accy ? _554_new_accy->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(accx,(int)0,_553_new_accx,(int)0,_549_numaccelm);
      ::mosek::fusion::Utils::Tools::arraycopy(accy,(int)0,_554_new_accy,(int)0,_549_numaccelm);
      accx = _553_new_accx;
      accy = _554_new_accy;
      sol_numaccelm = _549_numaccelm;
    }
  }
  if ((_547_numbarvar < (int)0))
  {
    {
    }
  }
  else if((_547_numbarvar <= sol_numbarvar))
  {
    {
      sol_numbarvar = _547_numbarvar;
    }
  }
  else if((_547_numbarvar <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int32_t _555_newsize;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _547_numbarvar,(int)100 )))
      {
        {
          _555_newsize = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _555_newsize = safe_add( _547_numbarvar,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_555_newsize);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_555_newsize);
      sol_numbarvar = _555_newsize;
    }
  }
  if ((_545_numvar < (int)0))
  {
    {
    }
  }
  else if((_545_numvar <= sol_numvar))
  {
    {
      sol_numvar = _545_numvar;
    }
  }
  else if((_545_numvar <= (int)((xx)->size(0))))
  {
    {
      int32_t _9078_ = sol_numvar;
      int32_t _9079_ = _545_numvar;
      for (int32_t _556_i = _9078_; _556_i < _9079_; ++_556_i)
      {
        {
          ((*slx)(_556_i)) = 0.0;
          ((*sux)(_556_i)) = 0.0;
          ((*xx)(_556_i)) = 0.0;
          ((*yx)(_556_i)) = 0.0;
        }
      }
      sol_numvar = _545_numvar;
    }
  }
  else
  {
    {
      int32_t _557_newsize;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _545_numvar,(int)100 )))
      {
        {
          _557_newsize = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _557_newsize = safe_add( _545_numvar,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _558_newslx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_557_newsize)));
      _checked_ptr_1<double> _ptr__558_newslx(_558_newslx ? _558_newslx->raw() : nullptr,_558_newslx ? _558_newslx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_558_newslx,(int)0,(int)((slx)->size(0)));
      slx = _558_newslx;
      std::shared_ptr< monty::ndarray< double,1 > > _559_newsux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_557_newsize)));
      _checked_ptr_1<double> _ptr__559_newsux(_559_newsux ? _559_newsux->raw() : nullptr,_559_newsux ? _559_newsux->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_559_newsux,(int)0,(int)((sux)->size(0)));
      sux = _559_newsux;
      std::shared_ptr< monty::ndarray< double,1 > > _560_newxx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_557_newsize)));
      _checked_ptr_1<double> _ptr__560_newxx(_560_newxx ? _560_newxx->raw() : nullptr,_560_newxx ? _560_newxx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_560_newxx,(int)0,(int)((xx)->size(0)));
      xx = _560_newxx;
      std::shared_ptr< monty::ndarray< double,1 > > _561_newyx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_557_newsize)));
      _checked_ptr_1<double> _ptr__561_newyx(_561_newyx ? _561_newyx->raw() : nullptr,_561_newyx ? _561_newyx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_561_newyx,(int)0,(int)((yx)->size(0)));
      yx = _561_newyx;
      {
        int32_t _562_i = sol_numvar;
        for(;(_562_i < _545_numvar);++ _562_i)
        {
          {
            ((*slx)(_562_i)) = 0.0;
            ((*sux)(_562_i)) = 0.0;
            ((*xx)(_562_i)) = 0.0;
          }
        }
      }
      sol_numvar = _545_numvar;
    }
  }
  if ((_546_numcon < (int)0))
  {
    {
    }
  }
  else if((_546_numcon <= sol_numcon))
  {
    {
      sol_numcon = _546_numcon;
    }
  }
  else if((_546_numcon <= (int)((xx)->size(0))))
  {
    {
      int32_t _9080_ = sol_numcon;
      int32_t _9081_ = _546_numcon;
      for (int32_t _563_i = _9080_; _563_i < _9081_; ++_563_i)
      {
        {
          ((*slc)(_563_i)) = 0.0;
          ((*suc)(_563_i)) = 0.0;
          ((*xc)(_563_i)) = 0.0;
          ((*y)(_563_i)) = 0.0;
        }
      }
      sol_numcon = _546_numcon;
    }
  }
  else
  {
    {
      int32_t _564_newsize;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _546_numcon,(int)100 )))
      {
        {
          _564_newsize = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _564_newsize = safe_add( _546_numcon,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _565_newslc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_564_newsize)));
      _checked_ptr_1<double> _ptr__565_newslc(_565_newslc ? _565_newslc->raw() : nullptr,_565_newslc ? _565_newslc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_565_newslc,(int)0,(int)((slc)->size(0)));
      slc = _565_newslc;
      std::shared_ptr< monty::ndarray< double,1 > > _566_newsuc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_564_newsize)));
      _checked_ptr_1<double> _ptr__566_newsuc(_566_newsuc ? _566_newsuc->raw() : nullptr,_566_newsuc ? _566_newsuc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_566_newsuc,(int)0,(int)((suc)->size(0)));
      suc = _566_newsuc;
      std::shared_ptr< monty::ndarray< double,1 > > _567_newxc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_564_newsize)));
      _checked_ptr_1<double> _ptr__567_newxc(_567_newxc ? _567_newxc->raw() : nullptr,_567_newxc ? _567_newxc->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_567_newxc,(int)0,(int)((xc)->size(0)));
      xc = _567_newxc;
      std::shared_ptr< monty::ndarray< double,1 > > _568_newy = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_564_newsize)));
      _checked_ptr_1<double> _ptr__568_newy(_568_newy ? _568_newy->raw() : nullptr,_568_newy ? _568_newy->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_568_newy,(int)0,(int)((y)->size(0)));
      y = _568_newy;
      int32_t _9082_ = sol_numcon;
      int32_t _9083_ = _546_numcon;
      for (int32_t _569_i = _9082_; _569_i < _9083_; ++_569_i)
      {
        {
          ((*slc)(_569_i)) = 0.0;
          ((*suc)(_569_i)) = 0.0;
          ((*xc)(_569_i)) = 0.0;
          ((*y)(_569_i)) = 0.0;
        }
      }
      sol_numcon = _546_numcon;
    }
  }
}
// End mosek.fusion.SolutionStruct.resize

// Begin mosek.fusion.SolutionStruct.isDualAcceptable
// Method mosek.fusion.SolutionStruct.isDualAcceptable @ src/fusion/Model.mbi:5381:6-5384:7
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _570_acceptable_sol) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_570_acceptable_sol); }
bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _570_acceptable_sol)
{
  return isAcceptable(dstatus,_570_acceptable_sol);
}
// End mosek.fusion.SolutionStruct.isDualAcceptable

// Begin mosek.fusion.SolutionStruct.isPrimalAcceptable
// Method mosek.fusion.SolutionStruct.isPrimalAcceptable @ src/fusion/Model.mbi:5376:6-5379:7
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _571_acceptable_sol) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_571_acceptable_sol); }
bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _571_acceptable_sol)
{
  return isAcceptable(pstatus,_571_acceptable_sol);
}
// End mosek.fusion.SolutionStruct.isPrimalAcceptable

// Begin mosek.fusion.SolutionStruct.isAcceptable
// Method mosek.fusion.SolutionStruct.isAcceptable @ src/fusion/Model.mbi:5350:6-5374:7
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _572_stat,mosek::fusion::AccSolutionStatus _573_accstat)
{
  if ((_573_accstat == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_573_accstat == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_572_stat == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_573_accstat == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_572_stat == ::mosek::fusion::SolutionStatus::Optimal) || (_572_stat == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_573_accstat == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_572_stat == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
// End mosek.fusion.SolutionStruct.isAcceptable

void mosek::fusion::p_SolutionStruct::destroy()
{
  accy.reset();
  accx.reset();
  accptr.reset();
  yx.reset();
  sux.reset();
  slx.reset();
  bars.reset();
  barx.reset();
  y.reset();
  suc.reset();
  slc.reset();
  xx.reset();
  xc.reset();
}
void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }
// } class SolutionStruct
// class RowBlockManager { // @ src/fusion/Model.mbi:4904:4-5314:5
mosek::fusion::RowBlockManager::RowBlockManager(mosek::fusion::p_RowBlockManager *_impl) : _impl(_impl) { /*std::cout << "RowBlockManager() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::RowBlockManager::~RowBlockManager() { delete _impl; _impl = nullptr; }
mosek::fusion::p_RowBlockManager::p_RowBlockManager
  (::mosek::fusion::RowBlockManager * _pubthis) :     _pubthis(_pubthis)
{}
int32_t mosek::fusion::RowBlockManager::get_varidx_used() { return _impl->varidx_used; }
void mosek::fusion::RowBlockManager::set_varidx_used(int32_t _val) { _impl->varidx_used = _val; }
int32_t mosek::fusion::RowBlockManager::get_code_used() { return _impl->code_used; }
void mosek::fusion::RowBlockManager::set_code_used(int32_t _val) { _impl->code_used = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::RowBlockManager::get_cconst() { return _impl->cconst; }
void mosek::fusion::RowBlockManager::set_cconst(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cconst = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_code() { return _impl->code; }
void mosek::fusion::RowBlockManager::set_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->code = _val; }
int32_t mosek::fusion::RowBlockManager::get_first_free_codeitem() { return _impl->first_free_codeitem; }
void mosek::fusion::RowBlockManager::set_first_free_codeitem(int32_t _val) { _impl->first_free_codeitem = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_param_code_sizes() { return _impl->param_code_sizes; }
void mosek::fusion::RowBlockManager::set_param_code_sizes(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->param_code_sizes = _val; }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::RowBlockManager::get_param_varidx() { return _impl->param_varidx; }
void mosek::fusion::RowBlockManager::set_param_varidx(std::shared_ptr< monty::ndarray< int64_t,1 > > _val) { _impl->param_varidx = _val; }
int32_t mosek::fusion::RowBlockManager::get_first_free_entry() { return _impl->first_free_entry; }
void mosek::fusion::RowBlockManager::set_first_free_entry(int32_t _val) { _impl->first_free_entry = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_code_ptr() { return _impl->row_code_ptr; }
void mosek::fusion::RowBlockManager::set_row_code_ptr(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_code_ptr = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_param_ptre() { return _impl->row_param_ptre; }
void mosek::fusion::RowBlockManager::set_row_param_ptre(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_param_ptre = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::RowBlockManager::get_row_param_ptrb() { return _impl->row_param_ptrb; }
void mosek::fusion::RowBlockManager::set_row_param_ptrb(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->row_param_ptrb = _val; }
monty::rc_ptr< ::mosek::fusion::LinkedBlocks > mosek::fusion::RowBlockManager::get_blocks() { return _impl->blocks; }
void mosek::fusion::RowBlockManager::set_blocks(monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _val) { _impl->blocks = _val; }
// mosek.fusion.RowBlockManager.ctor @ src/fusion/Model.mbi:4967:6-4983:7
mosek::fusion::RowBlockManager::t mosek::fusion::p_RowBlockManager::_new_RowBlockManager
  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _574_that)
{ return new mosek::fusion::RowBlockManager(_574_that); }
mosek::fusion::RowBlockManager::RowBlockManager
  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _574_that) : 
   RowBlockManager(new mosek::fusion::p_RowBlockManager(this))
{ mosek::fusion::p_RowBlockManager::_get_impl(this)->_initialize(_574_that); }
void mosek::fusion::p_RowBlockManager::_initialize  (monty::rc_ptr< ::mosek::fusion::RowBlockManager > _574_that)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    blocks = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->blocks);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9084_;
    bool _9085_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->row_param_ptrb.get());
    if (_9085_)
    {
      _9084_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->row_param_ptrb);
    }
    else
    {
      _9084_ = nullptr;
    }
    row_param_ptrb = _9084_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9086_;
    bool _9087_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->row_param_ptre.get());
    if (_9087_)
    {
      _9086_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->row_param_ptre);
    }
    else
    {
      _9086_ = nullptr;
    }
    row_param_ptre = _9086_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9088_;
    bool _9089_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->row_code_ptr.get());
    if (_9089_)
    {
      _9088_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->row_code_ptr);
    }
    else
    {
      _9088_ = nullptr;
    }
    row_code_ptr = _9088_;
    first_free_entry = mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->first_free_entry;
    std::shared_ptr< monty::ndarray< int64_t,1 > > _9090_;
    bool _9091_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->param_varidx.get());
    if (_9091_)
    {
      _9090_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->param_varidx);
    }
    else
    {
      _9090_ = nullptr;
    }
    param_varidx = _9090_;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9092_;
    bool _9093_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->param_code_sizes.get());
    if (_9093_)
    {
      _9092_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->param_code_sizes);
    }
    else
    {
      _9092_ = nullptr;
    }
    param_code_sizes = _9092_;
    first_free_codeitem = mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->first_free_codeitem;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _9094_;
    bool _9095_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->code.get());
    if (_9095_)
    {
      _9094_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->code);
    }
    else
    {
      _9094_ = nullptr;
    }
    code = _9094_;
    std::shared_ptr< monty::ndarray< double,1 > > _9096_;
    bool _9097_ = (NULL != mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->cconst.get());
    if (_9097_)
    {
      _9096_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->cconst);
    }
    else
    {
      _9096_ = nullptr;
    }
    cconst = _9096_;
    code_used = mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->code_used;
    varidx_used = mosek::fusion::p_RowBlockManager::_get_impl(_574_that)->varidx_used;
  }
}
// mosek.fusion.RowBlockManager.ctor

// mosek.fusion.RowBlockManager.ctor @ src/fusion/Model.mbi:4951:6-4965:7
mosek::fusion::RowBlockManager::t mosek::fusion::p_RowBlockManager::_new_RowBlockManager
  ()
{ return new mosek::fusion::RowBlockManager(); }
mosek::fusion::RowBlockManager::RowBlockManager
  () : 
   RowBlockManager(new mosek::fusion::p_RowBlockManager(this))
{ mosek::fusion::p_RowBlockManager::_get_impl(this)->_initialize(); }
void mosek::fusion::p_RowBlockManager::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    blocks = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    row_param_ptrb = nullptr;
    row_param_ptre = nullptr;
    row_code_ptr = nullptr;
    first_free_entry = (int)0;
    param_varidx = nullptr;
    param_code_sizes = nullptr;
    first_free_codeitem = (int)0;
    code = nullptr;
    cconst = nullptr;
    code_used = (int)0;
    varidx_used = (int)0;
  }
}
// mosek.fusion.RowBlockManager.ctor

// Begin mosek.fusion.RowBlockManager.num_parameterized
// Method mosek.fusion.RowBlockManager.num_parameterized @ src/fusion/Model.mbi:5313:6-69
int32_t mosek::fusion::RowBlockManager :: num_parameterized() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->num_parameterized(); }
int32_t mosek::fusion::p_RowBlockManager::num_parameterized()
{
  return varidx_used;
}
// End mosek.fusion.RowBlockManager.num_parameterized

// Begin mosek.fusion.RowBlockManager.is_parameterized
// Method mosek.fusion.RowBlockManager.is_parameterized @ src/fusion/Model.mbi:5312:6-69
bool mosek::fusion::RowBlockManager :: is_parameterized() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->is_parameterized(); }
bool mosek::fusion::p_RowBlockManager::is_parameterized()
{
  return (code_used > (int)0);
}
// End mosek.fusion.RowBlockManager.is_parameterized

// Begin mosek.fusion.RowBlockManager.blocksize
// Method mosek.fusion.RowBlockManager.blocksize @ src/fusion/Model.mbi:5311:6-79
int32_t mosek::fusion::RowBlockManager :: blocksize(int32_t _575_id) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->blocksize(_575_id); }
int32_t mosek::fusion::p_RowBlockManager::blocksize(int32_t _575_id)
{
  return blocks->blocksize(_575_id);
}
// End mosek.fusion.RowBlockManager.blocksize

// Begin mosek.fusion.RowBlockManager.block_capacity
// Method mosek.fusion.RowBlockManager.block_capacity @ src/fusion/Model.mbi:5310:6-79
int32_t mosek::fusion::RowBlockManager :: block_capacity() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->block_capacity(); }
int32_t mosek::fusion::p_RowBlockManager::block_capacity()
{
  return blocks->block_capacity();
}
// End mosek.fusion.RowBlockManager.block_capacity

// Begin mosek.fusion.RowBlockManager.capacity
// Method mosek.fusion.RowBlockManager.capacity @ src/fusion/Model.mbi:5309:6-67
int32_t mosek::fusion::RowBlockManager :: capacity() { return mosek::fusion::p_RowBlockManager::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_RowBlockManager::capacity()
{
  return blocks->capacity();
}
// End mosek.fusion.RowBlockManager.capacity

// Begin mosek.fusion.RowBlockManager.get
// Method mosek.fusion.RowBlockManager.get @ src/fusion/Model.mbi:5308:6-102
void mosek::fusion::RowBlockManager :: get(int32_t _576_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _577_target,int32_t _578_offset) { mosek::fusion::p_RowBlockManager::_get_impl(this)->get(_576_id,_577_target,_578_offset); }
void mosek::fusion::p_RowBlockManager::get(int32_t _576_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _577_target,int32_t _578_offset)
{
  _checked_ptr_1<int32_t> _ptr__577_target(_577_target ? _577_target->raw() : nullptr, _577_target ? _577_target->size(0) : 0);
  blocks->get(_576_id,_577_target,_578_offset);
}
// End mosek.fusion.RowBlockManager.get

// Begin mosek.fusion.RowBlockManager.evaluate
// Method mosek.fusion.RowBlockManager.evaluate @ src/fusion/Model.mbi:5240:6-5306:7
void mosek::fusion::RowBlockManager :: evaluate(monty::rc_ptr< ::mosek::fusion::WorkStack > _579_xs,std::shared_ptr< monty::ndarray< double,1 > > _580_param_value,std::shared_ptr< monty::ndarray< int32_t,1 > > _581_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _582_subj,std::shared_ptr< monty::ndarray< double,1 > > _583_val) { mosek::fusion::p_RowBlockManager::_get_impl(this)->evaluate(_579_xs,_580_param_value,_581_subi,_582_subj,_583_val); }
void mosek::fusion::p_RowBlockManager::evaluate(monty::rc_ptr< ::mosek::fusion::WorkStack > _579_xs,std::shared_ptr< monty::ndarray< double,1 > > _580_param_value,std::shared_ptr< monty::ndarray< int32_t,1 > > _581_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _582_subj,std::shared_ptr< monty::ndarray< double,1 > > _583_val)
{
  _checked_ptr_1<double> _ptr__580_param_value(_580_param_value ? _580_param_value->raw() : nullptr, _580_param_value ? _580_param_value->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__581_subi(_581_subi ? _581_subi->raw() : nullptr, _581_subi ? _581_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__582_subj(_582_subj ? _582_subj->raw() : nullptr, _582_subj ? _582_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__583_val(_583_val ? _583_val->raw() : nullptr, _583_val ? _583_val->size(0) : 0);
  int32_t _584_stack = _579_xs->allocf64(code_used);
  int32_t _585_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _586_xf64 = mosek::fusion::p_WorkStack::_get_impl(_579_xs)->f64;
  _checked_ptr_1<double> _ptr__586_xf64(_586_xf64 ? _586_xf64->raw() : nullptr,_586_xf64 ? _586_xf64->size(0) : 0);
  int32_t _587_idx = (int)0;
  int32_t _9098_ = (int)0;
  int32_t _9099_ = (int)((row_param_ptrb)->size(0));
  for (int32_t _588_i = _9098_; _588_i < _9099_; ++_588_i)
  {
    {
      if ((((*row_param_ptrb)(_588_i)) < ((*row_param_ptre)(_588_i))))
      {
        {
          int32_t _589_k = ((*row_code_ptr)(_588_i));
          int32_t _9100_ = ((*row_param_ptrb)(_588_i));
          int32_t _9101_ = ((*row_param_ptre)(_588_i));
          for (int32_t _590_j = _9100_; _590_j < _9101_; ++_590_j)
          {
            {
              int32_t _9102_ = (int)0;
              int32_t _9103_ = ((*param_code_sizes)(_590_j));
              for (int32_t _591_l = _9102_; _591_l < _9103_; ++_591_l)
              {
                {
                  if ((((*code)(_589_k)) == 0))
                  {
                    {
                    }
                  }
                  else
                  {
                    {
                      if ((((*code)(_589_k)) == 1))
                      {
                        {
                          _ptr__586_xf64[safe_add( _584_stack,_585_stackp )] = _ptr__580_param_value[(int32_t)((*cconst)(_589_k))];
                          ++ _585_stackp;
                        }
                      }
                      else
                      {
                        {
                          if ((((*code)(_589_k)) == 2))
                          {
                            {
                              _ptr__586_xf64[safe_add( _584_stack,_585_stackp )] = ((*cconst)(_589_k));
                              ++ _585_stackp;
                            }
                          }
                          else
                          {
                            {
                              if ((((*code)(_589_k)) == 3))
                              {
                                {
                                  _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)2)] += _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)1)];
                                  -- _585_stackp;
                                }
                              }
                              else
                              {
                                {
                                  if ((((*code)(_589_k)) == 4))
                                  {
                                    {
                                      _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)1)] = (-_ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)1)]);
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((((*code)(_589_k)) == 5))
                                      {
                                        {
                                          _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)2)] *= _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)1)];
                                          -- _585_stackp;
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((((*code)(_589_k)) == 6))
                                          {
                                            {
                                              _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)1)] = (1.0 / _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)1)]);
                                            }
                                          }
                                          else
                                          {
                                            {
                                              if ((((*code)(_589_k)) == 8))
                                              {
                                                {
                                                  double _592_v = 0.0;
                                                  int32_t _9104_ = (int)0;
                                                  int32_t _9105_ = (int32_t)((*cconst)(_589_k));
                                                  for (int32_t _593_i = _9104_; _593_i < _9105_; ++_593_i)
                                                  {
                                                    {
                                                      _592_v += _ptr__586_xf64[(safe_add( _584_stack,_585_stackp ) - (int)1)];
                                                      -- _585_stackp;
                                                    }
                                                  }
                                                  _ptr__586_xf64[safe_add( _584_stack,_585_stackp )] = _592_v;
                                                  ++ _585_stackp;
                                                }
                                              }
                                              else
                                              {
                                                {
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  ++ _589_k;
                }
              }
              _ptr__581_subi[_587_idx] = _588_i;
              _ptr__582_subj[_587_idx] = (int32_t)((*param_varidx)(_590_j));
              _ptr__583_val[_587_idx] = _ptr__586_xf64[_584_stack];
              _585_stackp = (int)0;
              ++ _587_idx;
            }
          }
        }
      }
      {}
    }
  }
  _579_xs->popf64(code_used);
}
// End mosek.fusion.RowBlockManager.evaluate

// Begin mosek.fusion.RowBlockManager.replace_row_code
// Method mosek.fusion.RowBlockManager.replace_row_code @ src/fusion/Model.mbi:5127:6-5238:7
void mosek::fusion::RowBlockManager :: replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _594_rs,std::shared_ptr< monty::ndarray< int32_t,1 > > _595_nativeidxs,int32_t _596_ptr,int32_t _597_nidxs,int32_t _598_codeptr,int32_t _599_code_p,int32_t _600_cconst_p) { mosek::fusion::p_RowBlockManager::_get_impl(this)->replace_row_code(_594_rs,_595_nativeidxs,_596_ptr,_597_nidxs,_598_codeptr,_599_code_p,_600_cconst_p); }
void mosek::fusion::p_RowBlockManager::replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _594_rs,std::shared_ptr< monty::ndarray< int32_t,1 > > _595_nativeidxs,int32_t _596_ptr,int32_t _597_nidxs,int32_t _598_codeptr,int32_t _599_code_p,int32_t _600_cconst_p)
{
  _checked_ptr_1<int32_t> _ptr__595_nativeidxs(_595_nativeidxs ? _595_nativeidxs->raw() : nullptr, _595_nativeidxs ? _595_nativeidxs->size(0) : 0);
  int32_t _601_nelem = (int)((_595_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _602_ri32 = mosek::fusion::p_WorkStack::_get_impl(_594_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__602_ri32(_602_ri32 ? _602_ri32->raw() : nullptr,_602_ri32 ? _602_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _603_ri64 = mosek::fusion::p_WorkStack::_get_impl(_594_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__603_ri64(_603_ri64 ? _603_ri64->raw() : nullptr,_603_ri64 ? _603_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _604_rf64 = mosek::fusion::p_WorkStack::_get_impl(_594_rs)->f64;
  _checked_ptr_1<double> _ptr__604_rf64(_604_rf64 ? _604_rf64->raw() : nullptr,_604_rf64 ? _604_rf64->size(0) : 0);
  bool _605_ok = true;
  {
    int32_t _606_numop = (int)0;
    int32_t _607_nentry = (int)0;
    {
      int32_t _9106_ = (int)0;
      int32_t _9107_ = _601_nelem;
      for (int32_t _608_i = _9106_; _608_i < _9107_; ++_608_i)
      {
        {
          int32_t _9108_ = _ptr__602_ri32[safe_add( _596_ptr,_608_i )];
          int32_t _9109_ = _ptr__602_ri32[safe_add( safe_add( _596_ptr,_608_i ),(int)1 )];
          for (int32_t _609_j = _9108_; _609_j < _9109_; ++_609_j)
          {
            {
              if ((((_ptr__602_ri32[safe_add( safe_add( _598_codeptr,_609_j ),(int)1 )] - _ptr__602_ri32[safe_add( _598_codeptr,_609_j )]) == (int)1) && ((_ptr__602_ri32[safe_add( _599_code_p,_ptr__602_ri32[safe_add( _598_codeptr,_609_j )] )] == 10) || (_ptr__602_ri32[safe_add( _599_code_p,_ptr__602_ri32[safe_add( _598_codeptr,_609_j )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _607_nentry;
                  _606_numop += (_ptr__602_ri32[safe_add( safe_add( _598_codeptr,_609_j ),(int)1 )] - _ptr__602_ri32[safe_add( _598_codeptr,_609_j )]);
                }
              }
            }
          }
        }
      }
      _pubthis->clear_row_code(_595_nativeidxs);
    }
    ensure_code_cap(_607_nentry,_606_numop);
    code_used += _606_numop;
    varidx_used += _607_nentry;
  }
  if ((first_free_codeitem > safe_mul( code_used,(int)2 )))
  {
    {
      compress();
    }
  }
  {}
  {
    int32_t _9110_ = (int)0;
    int32_t _9111_ = _601_nelem;
    for (int32_t _610_i = _9110_; _610_i < _9111_; ++_610_i)
    {
      {
        int32_t _611_subi = _ptr__595_nativeidxs[_610_i];
        int32_t _612_cnnz = (int)0;
        int32_t _613_rncodeatom = (int)0;
        int32_t _9112_ = _ptr__602_ri32[safe_add( _596_ptr,_610_i )];
        int32_t _9113_ = _ptr__602_ri32[safe_add( safe_add( _596_ptr,_610_i ),(int)1 )];
        for (int32_t _614_j = _9112_; _614_j < _9113_; ++_614_j)
        {
          {
            if ((((_ptr__602_ri32[safe_add( safe_add( _598_codeptr,_614_j ),(int)1 )] - _ptr__602_ri32[safe_add( _598_codeptr,_614_j )]) == (int)1) && ((_ptr__602_ri32[safe_add( _599_code_p,_ptr__602_ri32[safe_add( _598_codeptr,_614_j )] )] == 10) || (_ptr__602_ri32[safe_add( _599_code_p,_ptr__602_ri32[safe_add( _598_codeptr,_614_j )] )] == 2))))
            {
              {
              }
            }
            else
            {
              {
                ++ _612_cnnz;
                _613_rncodeatom += (_ptr__602_ri32[safe_add( safe_add( _598_codeptr,_614_j ),(int)1 )] - _ptr__602_ri32[safe_add( _598_codeptr,_614_j )]);
              }
            }
          }
        }
        int32_t _615_ni = _ptr__595_nativeidxs[_610_i];
        int32_t _616_n = (((*row_param_ptre)(_615_ni)) - ((*row_param_ptrb)(_615_ni)));
        if ((_612_cnnz > (int)0))
        {
          {
            ((*row_param_ptrb)(_611_subi)) = first_free_entry;
            ((*row_param_ptre)(_611_subi)) = safe_add( first_free_entry,_612_cnnz );
            ((*row_code_ptr)(_611_subi)) = first_free_codeitem;
            first_free_entry += _612_cnnz;
            first_free_codeitem += _613_rncodeatom;
          }
        }
        {}
      }
    }
  }
  int32_t _9114_ = (int)0;
  int32_t _9115_ = _601_nelem;
  for (int32_t _617_i = _9114_; _617_i < _9115_; ++_617_i)
  {
    {
      int32_t _618_subi = _ptr__595_nativeidxs[_617_i];
      int32_t _619_codei = ((*row_code_ptr)(_618_subi));
      int32_t _620_elmi = ((*row_param_ptrb)(_618_subi));
      int32_t _9116_ = _ptr__602_ri32[safe_add( _596_ptr,_617_i )];
      int32_t _9117_ = _ptr__602_ri32[safe_add( safe_add( _596_ptr,_617_i ),(int)1 )];
      for (int32_t _621_j = _9116_; _621_j < _9117_; ++_621_j)
      {
        {
          if ((((_ptr__602_ri32[safe_add( safe_add( _598_codeptr,_621_j ),(int)1 )] - _ptr__602_ri32[safe_add( _598_codeptr,_621_j )]) == (int)1) && ((_ptr__602_ri32[safe_add( _599_code_p,_ptr__602_ri32[safe_add( _598_codeptr,_621_j )] )] == 10) || (_ptr__602_ri32[safe_add( _599_code_p,_ptr__602_ri32[safe_add( _598_codeptr,_621_j )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              int32_t _9118_ = _ptr__602_ri32[safe_add( _598_codeptr,_621_j )];
              int32_t _9119_ = _ptr__602_ri32[safe_add( safe_add( _598_codeptr,_621_j ),(int)1 )];
              for (int32_t _622_k = _9118_; _622_k < _9119_; ++_622_k)
              {
                {
                  ((*code)(_619_codei)) = _ptr__602_ri32[safe_add( _599_code_p,_622_k )];
                  ((*cconst)(_619_codei)) = _ptr__604_rf64[safe_add( _600_cconst_p,_622_k )];
                  ++ _619_codei;
                }
              }
              ((*param_code_sizes)(_620_elmi)) = (_ptr__602_ri32[safe_add( safe_add( _598_codeptr,_621_j ),(int)1 )] - _ptr__602_ri32[safe_add( _598_codeptr,_621_j )]);
              ((*param_varidx)(_620_elmi)) = _ptr__603_ri64[safe_add( _597_nidxs,_621_j )];
              _605_ok = (_ptr__603_ri64[safe_add( _597_nidxs,_621_j )] >= (int)0);
              ++ _620_elmi;
            }
          }
        }
      }
    }
  }
  if ((!_605_ok))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.replace_row_code

// Begin mosek.fusion.RowBlockManager.clear_row_code
// Method mosek.fusion.RowBlockManager.clear_row_code @ src/fusion/Model.mbi:5100:6-5116:7
void mosek::fusion::RowBlockManager :: clear_row_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _623_nativeidxs) { mosek::fusion::p_RowBlockManager::_get_impl(this)->clear_row_code(_623_nativeidxs); }
void mosek::fusion::p_RowBlockManager::clear_row_code(std::shared_ptr< monty::ndarray< int32_t,1 > > _623_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__623_nativeidxs(_623_nativeidxs ? _623_nativeidxs->raw() : nullptr, _623_nativeidxs ? _623_nativeidxs->size(0) : 0);
  if ((NULL != row_param_ptrb.get()))
  {
    {
      int32_t _9120_ = (int)0;
      int32_t _9121_ = (int)((_623_nativeidxs)->size(0));
      for (int32_t _624_i = _9120_; _624_i < _9121_; ++_624_i)
      {
        {
          int32_t _9122_ = ((*row_param_ptrb)(_ptr__623_nativeidxs[_624_i]));
          int32_t _9123_ = ((*row_param_ptre)(_ptr__623_nativeidxs[_624_i]));
          for (int32_t _625_j = _9122_; _625_j < _9123_; ++_625_j)
          {
            {
              code_used -= ((*param_code_sizes)(_625_j));
            }
          }
          varidx_used -= (((*row_param_ptre)(_ptr__623_nativeidxs[_624_i])) - ((*row_param_ptrb)(_ptr__623_nativeidxs[_624_i])));
          ((*row_param_ptrb)(_ptr__623_nativeidxs[_624_i])) = (int)0;
          ((*row_param_ptre)(_ptr__623_nativeidxs[_624_i])) = (int)0;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.clear_row_code

// Begin mosek.fusion.RowBlockManager.compress
// Method mosek.fusion.RowBlockManager.compress @ src/fusion/Model.mbi:5056:6-5098:7
void mosek::fusion::p_RowBlockManager::compress()
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _626_newcode = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(code_used)));
  _checked_ptr_1<int32_t> _ptr__626_newcode(_626_newcode ? _626_newcode->raw() : nullptr,_626_newcode ? _626_newcode->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _627_newcconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(code_used)));
  _checked_ptr_1<double> _ptr__627_newcconst(_627_newcconst ? _627_newcconst->raw() : nullptr,_627_newcconst ? _627_newcconst->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _628_newvaridx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(first_free_entry)));
  _checked_ptr_1<int64_t> _ptr__628_newvaridx(_628_newvaridx ? _628_newvaridx->raw() : nullptr,_628_newvaridx ? _628_newvaridx->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _629_newcodesizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(first_free_entry)));
  _checked_ptr_1<int32_t> _ptr__629_newcodesizes(_629_newcodesizes ? _629_newcodesizes->raw() : nullptr,_629_newcodesizes ? _629_newcodesizes->size(0) : 0);
  int32_t _630_tgtptr = (int)0;
  int32_t _631_tgtcptr = (int)0;
  int32_t _9124_ = (int)0;
  int32_t _9125_ = (int)((row_param_ptrb)->size(0));
  for (int32_t _632_i = _9124_; _632_i < _9125_; ++_632_i)
  {
    {
      int32_t _633_codesize = (int)0;
      int32_t _634_n = (((*row_param_ptre)(_632_i)) - ((*row_param_ptrb)(_632_i)));
      ::mosek::fusion::Utils::Tools::arraycopy(param_varidx,((*row_param_ptrb)(_632_i)),_628_newvaridx,_630_tgtptr,_634_n);
      ::mosek::fusion::Utils::Tools::arraycopy(param_code_sizes,((*row_param_ptrb)(_632_i)),_629_newcodesizes,_630_tgtptr,_634_n);
      int32_t _9126_ = ((*row_param_ptrb)(_632_i));
      int32_t _9127_ = ((*row_param_ptre)(_632_i));
      for (int32_t _635_j = _9126_; _635_j < _9127_; ++_635_j)
      {
        {
          _633_codesize += ((*param_code_sizes)(_635_j));
        }
      }
      ::mosek::fusion::Utils::Tools::arraycopy(code,((*row_code_ptr)(_632_i)),_626_newcode,_631_tgtcptr,_633_codesize);
      ::mosek::fusion::Utils::Tools::arraycopy(cconst,((*row_code_ptr)(_632_i)),_627_newcconst,_631_tgtcptr,_633_codesize);
      ((*row_param_ptrb)(_632_i)) = _630_tgtptr;
      ((*row_param_ptre)(_632_i)) = safe_add( _630_tgtptr,_634_n );
      ((*row_code_ptr)(_632_i)) = _631_tgtcptr;
      _631_tgtcptr += _633_codesize;
      _630_tgtptr += _634_n;
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_628_newvaridx,(int)0,param_varidx,(int)0,_630_tgtptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_629_newcodesizes,(int)0,param_code_sizes,(int)0,_630_tgtptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_626_newcode,(int)0,code,(int)0,_631_tgtcptr);
  ::mosek::fusion::Utils::Tools::arraycopy(_627_newcconst,(int)0,cconst,(int)0,_631_tgtcptr);
  first_free_codeitem = _631_tgtcptr;
  first_free_entry = _630_tgtptr;
}
// End mosek.fusion.RowBlockManager.compress

// Begin mosek.fusion.RowBlockManager.ensure_code_cap
// Method mosek.fusion.RowBlockManager.ensure_code_cap @ src/fusion/Model.mbi:5020:6-5054:7
void mosek::fusion::p_RowBlockManager::ensure_code_cap(int32_t _636_nentry,int32_t _637_codesize)
{
  if ((NULL == row_code_ptr.get()))
  {
    {
      int32_t _638_n = (int)1024;
      while ( (_638_n < _636_nentry) )
      {
        {
          _638_n *= (int)2;
        }
      }
      int32_t _639_m = (int)1024;
      while ( (_639_m < _637_codesize) )
      {
        {
          _639_m *= (int)2;
        }
      }
      row_param_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      row_param_ptre = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      row_code_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      param_varidx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_638_n)));
      param_code_sizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_638_n)));
      code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_639_m)));
      cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_639_m)));
    }
  }
  else
  {
    {
      if ((_636_nentry > ((int)((param_varidx)->size(0)) - first_free_entry)))
      {
        {
          int32_t _640_n = (int)((param_varidx)->size(0));
          while ( ((_640_n - first_free_entry) < _636_nentry) )
          {
            {
              _640_n *= (int)2;
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _641_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_640_n)));
          _checked_ptr_1<int32_t> _ptr__641_ptr(_641_ptr ? _641_ptr->raw() : nullptr,_641_ptr ? _641_ptr->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _642_varidx = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_640_n)));
          _checked_ptr_1<int64_t> _ptr__642_varidx(_642_varidx ? _642_varidx->raw() : nullptr,_642_varidx ? _642_varidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _643_code_sizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_640_n)));
          _checked_ptr_1<int32_t> _ptr__643_code_sizes(_643_code_sizes ? _643_code_sizes->raw() : nullptr,_643_code_sizes ? _643_code_sizes->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(param_varidx,(int)0,_642_varidx,(int)0,first_free_entry);
          ::mosek::fusion::Utils::Tools::arraycopy(param_code_sizes,(int)0,_643_code_sizes,(int)0,first_free_entry);
          param_varidx = _642_varidx;
          param_code_sizes = _643_code_sizes;
        }
      }
      {}
      if ((_637_codesize > ((int)((code)->size(0)) - first_free_codeitem)))
      {
        {
          int32_t _644_n = (int)((code)->size(0));
          while ( (_637_codesize > (_644_n - first_free_codeitem)) )
          {
            {
              _644_n *= (int)2;
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _645_tcode = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_644_n)));
          _checked_ptr_1<int32_t> _ptr__645_tcode(_645_tcode ? _645_tcode->raw() : nullptr,_645_tcode ? _645_tcode->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(code,(int)0,_645_tcode,(int)0,first_free_codeitem);
          std::shared_ptr< monty::ndarray< double,1 > > _646_tcconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_644_n)));
          _checked_ptr_1<double> _ptr__646_tcconst(_646_tcconst ? _646_tcconst->raw() : nullptr,_646_tcconst ? _646_tcconst->size(0) : 0);
          ::mosek::fusion::Utils::Tools::arraycopy(cconst,(int)0,_646_tcconst,(int)0,first_free_codeitem);
          code = _645_tcode;
          cconst = _646_tcconst;
        }
      }
      {}
    }
  }
}
// End mosek.fusion.RowBlockManager.ensure_code_cap

// Begin mosek.fusion.RowBlockManager.release
// Method mosek.fusion.RowBlockManager.release @ src/fusion/Model.mbi:5007:6-5018:7
void mosek::fusion::RowBlockManager :: release(int32_t _647_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _648_nativeidxs) { mosek::fusion::p_RowBlockManager::_get_impl(this)->release(_647_id,_648_nativeidxs); }
void mosek::fusion::p_RowBlockManager::release(int32_t _647_id,std::shared_ptr< monty::ndarray< int32_t,1 > > _648_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__648_nativeidxs(_648_nativeidxs ? _648_nativeidxs->raw() : nullptr, _648_nativeidxs ? _648_nativeidxs->size(0) : 0);
  int32_t _649_num = blocks->blocksize(_647_id);
  blocks->get(_647_id,_648_nativeidxs,(int)0);
  blocks->free(_647_id);
  if ((NULL != row_code_ptr.get()))
  {
    {
      int32_t _9128_ = (int)0;
      int32_t _9129_ = _649_num;
      for (int32_t _650_i = _9128_; _650_i < _9129_; ++_650_i)
      {
        {
          int32_t _651_ni = _ptr__648_nativeidxs[_650_i];
          code_used -= (((*row_param_ptre)(_651_ni)) - ((*row_param_ptrb)(_651_ni)));
          ((*row_param_ptre)(_651_ni)) = (int)0;
          ((*row_param_ptrb)(_651_ni)) = (int)0;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.RowBlockManager.release

// Begin mosek.fusion.RowBlockManager.allocate
// Method mosek.fusion.RowBlockManager.allocate @ src/fusion/Model.mbi:4989:6-5005:7
int32_t mosek::fusion::RowBlockManager :: allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _652_nativeidxs) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->allocate(_652_nativeidxs); }
int32_t mosek::fusion::p_RowBlockManager::allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _652_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__652_nativeidxs(_652_nativeidxs ? _652_nativeidxs->raw() : nullptr, _652_nativeidxs ? _652_nativeidxs->size(0) : 0);
  int32_t _653_num = (int)((_652_nativeidxs)->size(0));
  int32_t _654_id = blocks->alloc(_653_num);
  blocks->get(_654_id,_652_nativeidxs,(int)0);
  if (((NULL != row_code_ptr.get()) && (blocks->capacity() > (int)((row_param_ptrb)->size(0)))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _655_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__655_ptrb(_655_ptrb ? _655_ptrb->raw() : nullptr,_655_ptrb ? _655_ptrb->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_param_ptrb,(int)0,_655_ptrb,(int)0,(int)((row_param_ptrb)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _656_ptre = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__656_ptre(_656_ptre ? _656_ptre->raw() : nullptr,_656_ptre ? _656_ptre->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_param_ptre,(int)0,_656_ptre,(int)0,(int)((row_param_ptre)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _657_cptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__657_cptr(_657_cptr ? _657_cptr->raw() : nullptr,_657_cptr ? _657_cptr->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(row_code_ptr,(int)0,_657_cptr,(int)0,(int)((row_code_ptr)->size(0)));
      row_param_ptrb = _655_ptrb;
      row_param_ptre = _656_ptre;
      row_code_ptr = _657_cptr;
    }
  }
  {}
  return _654_id;
}
// End mosek.fusion.RowBlockManager.allocate

// Begin mosek.fusion.RowBlockManager.row_is_parameterized
// Method mosek.fusion.RowBlockManager.row_is_parameterized @ src/fusion/Model.mbi:4985:6-4987:7
bool mosek::fusion::RowBlockManager :: row_is_parameterized(int32_t _658_i) { return mosek::fusion::p_RowBlockManager::_get_impl(this)->row_is_parameterized(_658_i); }
bool mosek::fusion::p_RowBlockManager::row_is_parameterized(int32_t _658_i)
{
  return ((NULL != row_param_ptrb.get()) && (((*row_param_ptrb)(_658_i)) < ((*row_param_ptre)(_658_i))));
}
// End mosek.fusion.RowBlockManager.row_is_parameterized

void mosek::fusion::p_RowBlockManager::destroy()
{
  cconst.reset();
  code.reset();
  param_code_sizes.reset();
  param_varidx.reset();
  row_code_ptr.reset();
  row_param_ptre.reset();
  row_param_ptrb.reset();
  blocks.reset();
}
void mosek::fusion::RowBlockManager::destroy() { mosek::fusion::p_RowBlockManager::_get_impl(this)->destroy(); }
// } class RowBlockManager
// class Model { // @ src/fusion/Model.mbi:342:4-4901:5
mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }
mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }
mosek::fusion::p_Model::p_Model
  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:568:6-635:7
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (monty::rc_ptr< ::mosek::fusion::Model > _659_m)
{ return new mosek::fusion::Model(_659_m); }
mosek::fusion::Model::Model
  (monty::rc_ptr< ::mosek::fusion::Model > _659_m) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_659_m); }
void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _659_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseModel::_initialize(_659_m);
    monty::rc_ptr< ::mosek::fusion::Model > _660_self = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_659_m)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_659_m)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_659_m)->solutionptr;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9130_;
    bool _9131_ = (NULL != mosek::fusion::p_Model::_get_impl(_659_m)->sol_itr.get());
    if (_9131_)
    {
      _9130_ = mosek::fusion::p_Model::_get_impl(_659_m)->sol_itr->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9130_ = nullptr;
    }
    sol_itr = _9130_;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9132_;
    bool _9133_ = (NULL != mosek::fusion::p_Model::_get_impl(_659_m)->sol_itg.get());
    if (_9133_)
    {
      _9132_ = mosek::fusion::p_Model::_get_impl(_659_m)->sol_itg->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9132_ = nullptr;
    }
    sol_itg = _9132_;
    monty::rc_ptr< ::mosek::fusion::SolutionStruct > _9134_;
    bool _9135_ = (NULL != mosek::fusion::p_Model::_get_impl(_659_m)->sol_bas.get());
    if (_9135_)
    {
      _9134_ = mosek::fusion::p_Model::_get_impl(_659_m)->sol_bas->__mosek_2fusion_2SolutionStruct__clone();
    }
    else
    {
      _9134_ = nullptr;
    }
    sol_bas = _9134_;
    num_task_afe = mosek::fusion::p_Model::_get_impl(_659_m)->num_task_afe;
    num_task_con = mosek::fusion::p_Model::_get_impl(_659_m)->num_task_con;
    num_task_acc = mosek::fusion::p_Model::_get_impl(_659_m)->num_task_acc;
    con_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_659_m)->con_blocks);
    afe_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_659_m)->afe_blocks);
    obj_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager(mosek::fusion::p_Model::_get_impl(_659_m)->obj_blocks);
    acc_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_659_m)->acc_block_map);
    acon_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_659_m)->acon_block_map);
    acon_acc = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->acon_acc);
    acon_afe = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->acon_afe);
    acon_elm_accid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->acon_elm_accid);
    acon_elm_scale = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->acon_elm_scale);
    acon_elm_ofs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->acon_elm_ofs);
    acon_elm_afe = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->acon_elm_afe);
    task_numaferow = mosek::fusion::p_Model::_get_impl(_659_m)->task_numaferow;
    var_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_659_m)->var_block_map);
    var_block_acc_id = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->var_block_acc_id);
    var_elm_acc_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->var_elm_acc_idx);
    var_elm_acc_ofs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->var_elm_acc_ofs);
    barvar_num = (int)0;
    barvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->barvar_dim);
    barvar_block_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->barvar_block_ptr);
    barvar_block_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->barvar_block_dim);
    barvar_block_elm_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->barvar_block_elm_ptr);
    barvar_block_elm_barj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->barvar_block_elm_barj);
    barvar_block_elm_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->barvar_block_elm_i);
    barvar_block_elm_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->barvar_block_elm_j);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9136_;
    for (int32_t _661_i = (int)0, _9137_ = (int)((mosek::fusion::p_Model::_get_impl(_659_m)->vars)->size(0)); _661_i < _9137_ ; ++_661_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _9138_;
      bool _9139_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_659_m)->vars)(_661_i)).get());
      if (_9139_)
      {
        _9138_ = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_659_m)->vars)(_661_i)).get())->__mosek_2fusion_2ModelVariable__clone(_660_self);
      }
      else
      {
        _9138_ = nullptr;
      }
      _9136_.push_back(_9138_);
    }
    auto _9140_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9136_.size()),_9136_.begin(),_9136_.end()));
    vars = _9140_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9141_;
    for (int32_t _662_i = (int)0, _9142_ = (int)((mosek::fusion::p_Model::_get_impl(_659_m)->barvars)->size(0)); _662_i < _9142_ ; ++_662_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _9143_;
      bool _9144_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_659_m)->barvars)(_662_i)).get());
      if (_9144_)
      {
        _9143_ = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_659_m)->barvars)(_662_i)).get())->__mosek_2fusion_2ModelVariable__clone(_660_self);
      }
      else
      {
        _9143_ = nullptr;
      }
      _9141_.push_back(_9143_);
    }
    auto _9145_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9141_.size()),_9141_.begin(),_9141_.end()));
    barvars = _9145_;
    var_map = mosek::fusion::p_Model::_get_impl(_659_m)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9146_;
    for (int32_t _663_i = (int)0, _9147_ = (int)((mosek::fusion::p_Model::_get_impl(_659_m)->cons)->size(0)); _663_i < _9147_ ; ++_663_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9148_;
      bool _9149_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_659_m)->cons)(_663_i)).get());
      if (_9149_)
      {
        _9148_ = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_659_m)->cons)(_663_i)).get())->__mosek_2fusion_2ModelConstraint__clone(_660_self);
      }
      else
      {
        _9148_ = nullptr;
      }
      _9146_.push_back(_9148_);
    }
    auto _9150_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9146_.size()),_9146_.begin(),_9146_.end()));
    cons = _9150_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9151_;
    for (int32_t _664_i = (int)0, _9152_ = (int)((mosek::fusion::p_Model::_get_impl(_659_m)->acons)->size(0)); _664_i < _9152_ ; ++_664_i)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9153_;
      bool _9154_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_659_m)->acons)(_664_i)).get());
      if (_9154_)
      {
        _9153_ = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_659_m)->acons)(_664_i)).get())->__mosek_2fusion_2ModelConstraint__clone(_660_self);
      }
      else
      {
        _9153_ = nullptr;
      }
      _9151_.push_back(_9153_);
    }
    auto _9155_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9151_.size()),_9151_.begin(),_9151_.end()));
    acons = _9155_;
    con_map = mosek::fusion::p_Model::_get_impl(_659_m)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    numparameter = mosek::fusion::p_Model::_get_impl(_659_m)->numparameter;
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _9156_;
    bool _9157_ = (NULL == mosek::fusion::p_Model::_get_impl(_659_m)->parameters.get());
    if (_9157_)
    {
      _9156_ = nullptr;
    }
    else
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _9158_;
      for (int32_t _665_i = (int)0, _9159_ = (int)((mosek::fusion::p_Model::_get_impl(_659_m)->parameters)->size(0)); _665_i < _9159_ ; ++_665_i)
      {
        monty::rc_ptr< ::mosek::fusion::Parameter > _9160_;
        bool _9161_ = (NULL != ((*mosek::fusion::p_Model::_get_impl(_659_m)->parameters)(_665_i)).get());
        if (_9161_)
        {
          _9160_ = ((*mosek::fusion::p_Model::_get_impl(_659_m)->parameters)(_665_i))->__mosek_2fusion_2Parameter__clone(_660_self);
        }
        else
        {
          _9160_ = nullptr;
        }
        _9158_.push_back(_9160_);
      }
      auto _9162_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_9158_.size()),_9158_.begin(),_9158_.end()));
      _9156_ = _9162_;
    }
    parameters = _9156_;
    par_map = mosek::fusion::p_Model::_get_impl(_659_m)->par_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    param_num = mosek::fusion::p_Model::_get_impl(_659_m)->param_num;
    std::shared_ptr< monty::ndarray< double,1 > > _9163_;
    bool _9164_ = (NULL != mosek::fusion::p_Model::_get_impl(_659_m)->param_value.get());
    if (_9164_)
    {
      _9163_ = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_659_m)->param_value);
    }
    else
    {
      _9163_ = nullptr;
    }
    param_value = _9163_;
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_659_m)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:490:6-565:7
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (const std::string &  _666_name,
    int32_t _667_basesize)
{ return new mosek::fusion::Model(_666_name,_667_basesize); }
mosek::fusion::Model::Model
  (const std::string &  _666_name,
    int32_t _667_basesize) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_666_name,_667_basesize); }
void mosek::fusion::p_Model::_initialize  (const std::string &  _666_name,
    int32_t _667_basesize)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseModel::_initialize(_666_name,std::string (""));
    model_name = _666_name;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    sol_itr = nullptr;
    sol_itg = nullptr;
    sol_bas = nullptr;
    num_task_afe = (int)0;
    num_task_con = (int)0;
    num_task_acc = (int)0;
    con_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    afe_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    obj_blocks = ::mosek::fusion::p_RowBlockManager::_new_RowBlockManager();
    acc_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    acon_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    task_numaferow = (int)0;
    acon_acc = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->block_capacity())));
    acon_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->block_capacity())));
    acon_elm_accid = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    std::vector<double> _9165_;
    for (int32_t _668_i = (int)0, _9166_ = acon_block_map->capacity(); _668_i < _9166_ ; ++_668_i)
    {
      _9165_.push_back(1.0);
    }
    auto _9167_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9165_.size()),_9165_.begin(),_9165_.end()));
    acon_elm_scale = _9167_;
    acon_elm_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    acon_elm_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(acon_block_map->capacity())));
    var_block_map = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    var_block_acc_id = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->block_capacity())));
    var_elm_acc_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->capacity())));
    var_elm_acc_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(var_block_map->capacity())));
    barvar_num = (int)0;
    barvar_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_667_basesize)));
    barvar_block_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _667_basesize,(int)1 ))));
    barvar_block_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_667_basesize)));
    barvar_block_elm_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _667_basesize,(int)1 ))));
    barvar_block_elm_barj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_667_basesize)));
    barvar_block_elm_i = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_667_basesize)));
    barvar_block_elm_j = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_667_basesize)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9168_;
    for (int32_t _669_i = (int)0, _9169_ = safe_mul( _667_basesize,(int)8 ); _669_i < _9169_ ; ++_669_i)
    {
      _9168_.push_back(nullptr);
    }
    auto _9170_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9168_.size()),_9168_.begin(),_9168_.end()));
    vars = _9170_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9171_;
    for (int32_t _670_i = (int)0, _9172_ = _667_basesize; _670_i < _9172_ ; ++_670_i)
    {
      _9171_.push_back(nullptr);
    }
    auto _9173_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9171_.size()),_9171_.begin(),_9171_.end()));
    barvars = _9173_;
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9174_;
    for (int32_t _671_i = (int)0, _9175_ = safe_mul( _667_basesize,(int)8 ); _671_i < _9175_ ; ++_671_i)
    {
      _9174_.push_back(nullptr);
    }
    auto _9176_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9174_.size()),_9174_.begin(),_9174_.end()));
    cons = _9176_;
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9177_;
    for (int32_t _672_i = (int)0, _9178_ = safe_mul( _667_basesize,(int)8 ); _672_i < _9178_ ; ++_672_i)
    {
      _9177_.push_back(nullptr);
    }
    auto _9179_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9177_.size()),_9177_.begin(),_9177_.end()));
    acons = _9179_;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    numparameter = (int)0;
    parameters = nullptr;
    par_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    param_num = (int)0;
    param_value = nullptr;
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _673_natvarbfixidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)1)));
      _checked_ptr_1<int32_t> _ptr__673_natvarbfixidx(_673_natvarbfixidx ? _673_natvarbfixidx->raw() : nullptr,_673_natvarbfixidx ? _673_natvarbfixidx->size(0) : 0);
      int32_t _674_bfixvarid = linearvar_alloc((int)1,_673_natvarbfixidx);
      bfixidx = _ptr__673_natvarbfixidx[(int)0];
    }
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    task_append_domain_empty();
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:482:6-58
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (int32_t _675_basesize)
{ return new mosek::fusion::Model(_675_basesize); }
mosek::fusion::Model::Model
  (int32_t _675_basesize) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_675_basesize); }
void mosek::fusion::p_Model::_initialize  (int32_t _675_basesize)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(std::string (""),_675_basesize);
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:476:6-52
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  (const std::string &  _676_name)
{ return new mosek::fusion::Model(_676_name); }
mosek::fusion::Model::Model
  (const std::string &  _676_name) : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(_676_name); }
void mosek::fusion::p_Model::_initialize  (const std::string &  _676_name)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(_676_name,(int)128);
  }
}
// mosek.fusion.Model.ctor

// mosek.fusion.Model.ctor @ src/fusion/Model.mbi:470:6-33
mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model
  ()
{ return new mosek::fusion::Model(); }
mosek::fusion::Model::Model
  () : 
   Model(new mosek::fusion::p_Model(this))
{ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }
void mosek::fusion::p_Model::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}
// mosek.fusion.Model.ctor

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4782:6-4900:7
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _677_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _678_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_677_name,_678_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _677_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _678_terms) { return __mosek_2fusion_2Model__disjunction(_677_name,_678_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _677_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _678_terms)
{
  int32_t _679_n = (int)((_678_terms)->size(0));
  int32_t _680_nrows = (int)0;
  int32_t _681_nterms = (int)0;
  int32_t _682_naccterms = (int)0;
  int32_t _683_naccrows = (int)0;
  int32_t _9180_ = (int)0;
  int32_t _9181_ = _679_n;
  for (int32_t _684_i = _9180_; _684_i < _9181_; ++_684_i)
  {
    {
      _680_nrows += ((*_678_terms)(_684_i))->size();
      _681_nterms += mosek::fusion::p_Term::_get_impl(((*_678_terms)(_684_i)).get())->num();
      _683_naccrows += mosek::fusion::p_Term::_get_impl(((*_678_terms)(_684_i)).get())->numaccrows();
      _682_naccterms += mosek::fusion::p_Term::_get_impl(((*_678_terms)(_684_i)).get())->numaccterms();
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _685_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_680_nrows)));
  _checked_ptr_1<int32_t> _ptr__685_afeidxs(_685_afeidxs ? _685_afeidxs->raw() : nullptr,_685_afeidxs ? _685_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _686_accafeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_683_naccrows)));
  _checked_ptr_1<int32_t> _ptr__686_accafeidxs(_686_accafeidxs ? _686_accafeidxs->raw() : nullptr,_686_accafeidxs ? _686_accafeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _687_accb = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_683_naccrows)));
  _checked_ptr_1<double> _ptr__687_accb(_687_accb ? _687_accb->raw() : nullptr,_687_accb ? _687_accb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _688_domidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_682_naccterms)));
  _checked_ptr_1<int64_t> _ptr__688_domidxs(_688_domidxs ? _688_domidxs->raw() : nullptr,_688_domidxs ? _688_domidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _689_termsize = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_679_n)));
  _checked_ptr_1<int64_t> _ptr__689_termsize(_689_termsize ? _689_termsize->raw() : nullptr,_689_termsize ? _689_termsize->size(0) : 0);
  int32_t _690_afeblockid = afe_allocate(_685_afeidxs);
  int32_t _691_term_index = (int)0;
  int32_t _692_acctermptr = (int)0;
  int32_t _693_afetgtptr = (int)0;
  int32_t _694_afeptr = (int)0;
  int32_t _9182_ = (int)0;
  int32_t _9183_ = _679_n;
  for (int32_t _695_term_i = _9182_; _695_term_i < _9183_; ++_695_term_i)
  {
    {
      int32_t _9184_ = (int)0;
      int32_t _9185_ = mosek::fusion::p_Term::_get_impl(((*_678_terms)(_695_term_i)).get())->num();
      for (int32_t _696_simpterm_i = _9184_; _696_simpterm_i < _9185_; ++_696_simpterm_i)
      {
        {
          monty::rc_ptr< ::mosek::fusion::DJCDomain > _697_dom = mosek::fusion::p_SimpleTerm::_get_impl(((*mosek::fusion::p_Term::_get_impl(((*_678_terms)(_695_term_i)))->terms)(_696_simpterm_i)))->dom;
          monty::rc_ptr< ::mosek::fusion::ExprDense > _698_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(mosek::fusion::p_SimpleTerm::_get_impl(((*mosek::fusion::p_Term::_get_impl(((*_678_terms)(_695_term_i)))->terms)(_696_simpterm_i)))->expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
          _698_e->eval(rs,ws,xs);
          rs->pop_expr();
          std::shared_ptr< monty::ndarray< int32_t,1 > > _699_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
          _checked_ptr_1<int32_t> _ptr__699_ri32(_699_ri32 ? _699_ri32->raw() : nullptr,_699_ri32 ? _699_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _700_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
          _checked_ptr_1<int64_t> _ptr__700_ri64(_700_ri64 ? _700_ri64->raw() : nullptr,_700_ri64 ? _700_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _701_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
          _checked_ptr_1<double> _ptr__701_rf64(_701_rf64 ? _701_rf64->raw() : nullptr,_701_rf64 ? _701_rf64->size(0) : 0);
          int32_t _702_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
          int32_t _703_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
          int32_t _704_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
          int32_t _705_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
          int32_t _706_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
          bool _707_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
          int32_t _708_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
          int32_t _709_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
          int32_t _710_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
          int32_t _711_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
          int32_t _712_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
          int32_t _713_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
          std::vector<int32_t> _9186_;
          for (int32_t _715_i = (int)0, _9187_ = _702_nd; _715_i < _9187_ ; ++_715_i)
          {
            _9186_.push_back(_ptr__699_ri32[safe_add( _703_shape_base,_715_i )]);
          }
          auto _9188_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9186_.size()),_9186_.begin(),_9186_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _714_shape = _9188_;
          _checked_ptr_1<int32_t> _ptr__714_shape(_714_shape ? _714_shape->raw() : nullptr,_714_shape ? _714_shape->size(0) : 0);
          putfrows(_685_afeidxs,_694_afeptr,rs,_704_nelem,_705_nnz,_708_ptr_base,_709_nidxs_base,_710_cof_base);
          if ((mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::InRange))
          {
            {
              std::shared_ptr< monty::ndarray< double,1 > > _716_lb = mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->b;
              _checked_ptr_1<double> _ptr__716_lb(_716_lb ? _716_lb->raw() : nullptr,_716_lb ? _716_lb->size(0) : 0);
              std::shared_ptr< monty::ndarray< double,1 > > _717_ub = mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->par;
              _checked_ptr_1<double> _ptr__717_ub(_717_ub ? _717_ub->raw() : nullptr,_717_ub ? _717_ub->size(0) : 0);
              int32_t _9189_ = (int)0;
              int32_t _9190_ = _704_nelem;
              for (int32_t _718_i = _9189_; _718_i < _9190_; ++_718_i)
              {
                {
                  _ptr__686_accafeidxs[safe_add( _693_afetgtptr,_718_i )] = _ptr__685_afeidxs[safe_add( _694_afeptr,_718_i )];
                  _ptr__686_accafeidxs[safe_add( safe_add( _693_afetgtptr,_704_nelem ),_718_i )] = _ptr__685_afeidxs[safe_add( _694_afeptr,_718_i )];
                  _ptr__687_accb[safe_add( _693_afetgtptr,_718_i )] = _ptr__716_lb[_718_i];
                  _ptr__687_accb[safe_add( safe_add( _693_afetgtptr,_704_nelem ),_718_i )] = _ptr__717_ub[_718_i];
                }
              }
              _ptr__688_domidxs[_692_acctermptr] = task_append_domain_rpos(_704_nelem);
              _ptr__688_domidxs[safe_add( _692_acctermptr,(int)1 )] = task_append_domain_rneg(_704_nelem);
              _ptr__689_termsize[_695_term_i] += (int)2;
              _692_acctermptr += (int)2;
              _693_afetgtptr += safe_mul( _704_nelem,(int)2 );
            }
          }
          else if(((mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::EqualTo) || ((mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::LessThan) || ((mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::GreaterThan) || (mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::IsFree)))))
          {
            {
              std::shared_ptr< monty::ndarray< double,1 > > _719_b = mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->b;
              _checked_ptr_1<double> _ptr__719_b(_719_b ? _719_b->raw() : nullptr,_719_b ? _719_b->size(0) : 0);
              int32_t _9191_ = (int)0;
              int32_t _9192_ = _704_nelem;
              for (int32_t _720_i = _9191_; _720_i < _9192_; ++_720_i)
              {
                {
                  _ptr__686_accafeidxs[safe_add( _693_afetgtptr,_720_i )] = _ptr__685_afeidxs[safe_add( _694_afeptr,_720_i )];
                  _ptr__687_accb[safe_add( _693_afetgtptr,_720_i )] = _ptr__719_b[_720_i];
                }
              }
              if ((mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::EqualTo))
              {
                {
                  _ptr__688_domidxs[_692_acctermptr] = task_append_domain_rzero(_704_nelem);
                }
              }
              else if((mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::LessThan))
              {
                {
                  _ptr__688_domidxs[_692_acctermptr] = task_append_domain_rneg(_704_nelem);
                }
              }
              else if((mosek::fusion::p_DJCDomain::_get_impl(_697_dom)->dom == ::mosek::fusion::DJCDomainType::GreaterThan))
              {
                {
                  _ptr__688_domidxs[_692_acctermptr] = task_append_domain_rpos(_704_nelem);
                }
              }
              else
              {
                {
                  _ptr__688_domidxs[_692_acctermptr] = task_append_domain_r(_704_nelem);
                }
              }
              _ptr__689_termsize[_695_term_i] += (int)1;
              _692_acctermptr += (int)1;
              _693_afetgtptr += _704_nelem;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Not implemented: Non-linear conic DJC constraints"));
            }
          }
          _694_afeptr += _704_nelem;
          if ((_706_ncodeatom > (int)0))
          {
            {
              afe_blocks->replace_row_code(rs,_685_afeidxs,_708_ptr_base,_709_nidxs_base,_712_codeptr,_711_code,_713_cconst);
            }
          }
          {}
          ++ _691_term_index;
        }
      }
    }
  }
  int64_t _721_djcidx = task_append_djc((int64_t)((int)1));
  std::vector<int64_t> _9193_;
  for (int32_t _722_i = (int)0, _9194_ = (int)((_686_accafeidxs)->size(0)); _722_i < _9194_ ; ++_722_i)
  {
    _9193_.push_back(_ptr__686_accafeidxs[_722_i]);
  }
  auto _9195_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9193_.size()),_9193_.begin(),_9193_.end()));
  task_putdjcslice(_721_djcidx,safe_add( _721_djcidx,(int)1 ),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >{(int64_t)((int64_t)_679_n)}),_689_termsize,_688_domidxs,_9195_,_687_accb);
  if (((int)((_677_name).size()) > (int)0))
  {
    {
      task_djc_name(_721_djcidx,::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_677_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
    }
  }
  {}
  return ::mosek::fusion::p_Disjunction::_new_Disjunction(_721_djcidx);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4781:6-92
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _723_terms) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_723_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _723_terms) { return __mosek_2fusion_2Model__disjunction(_723_terms); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > > _723_terms)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),_723_terms);
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4779:6-115
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _724_t1,monty::rc_ptr< ::mosek::fusion::Term > _725_t2,monty::rc_ptr< ::mosek::fusion::Term > _726_t3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_724_t1,_725_t2,_726_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _724_t1,monty::rc_ptr< ::mosek::fusion::Term > _725_t2,monty::rc_ptr< ::mosek::fusion::Term > _726_t3) { return __mosek_2fusion_2Model__disjunction(_724_t1,_725_t2,_726_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _724_t1,monty::rc_ptr< ::mosek::fusion::Term > _725_t2,monty::rc_ptr< ::mosek::fusion::Term > _726_t3)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_724_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_725_t2.get()),::monty::rc_ptr<::mosek::fusion::Term>(_726_t3.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4778:6-103
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _727_t1,monty::rc_ptr< ::mosek::fusion::Term > _728_t2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_727_t1,_728_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _727_t1,monty::rc_ptr< ::mosek::fusion::Term > _728_t2) { return __mosek_2fusion_2Model__disjunction(_727_t1,_728_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _727_t1,monty::rc_ptr< ::mosek::fusion::Term > _728_t2)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_727_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_728_t2.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4777:6-91
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _729_t1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_729_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(monty::rc_ptr< ::mosek::fusion::Term > _729_t1) { return __mosek_2fusion_2Model__disjunction(_729_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(monty::rc_ptr< ::mosek::fusion::Term > _729_t1)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(std::string (""),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_729_t1.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4775:6-129
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _730_name,monty::rc_ptr< ::mosek::fusion::Term > _731_t1,monty::rc_ptr< ::mosek::fusion::Term > _732_t2,monty::rc_ptr< ::mosek::fusion::Term > _733_t3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_730_name,_731_t1,_732_t2,_733_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _730_name,monty::rc_ptr< ::mosek::fusion::Term > _731_t1,monty::rc_ptr< ::mosek::fusion::Term > _732_t2,monty::rc_ptr< ::mosek::fusion::Term > _733_t3) { return __mosek_2fusion_2Model__disjunction(_730_name,_731_t1,_732_t2,_733_t3); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _730_name,monty::rc_ptr< ::mosek::fusion::Term > _731_t1,monty::rc_ptr< ::mosek::fusion::Term > _732_t2,monty::rc_ptr< ::mosek::fusion::Term > _733_t3)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_730_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_731_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_732_t2.get()),::monty::rc_ptr<::mosek::fusion::Term>(_733_t3.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4774:6-117
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _734_name,monty::rc_ptr< ::mosek::fusion::Term > _735_t1,monty::rc_ptr< ::mosek::fusion::Term > _736_t2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_734_name,_735_t1,_736_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _734_name,monty::rc_ptr< ::mosek::fusion::Term > _735_t1,monty::rc_ptr< ::mosek::fusion::Term > _736_t2) { return __mosek_2fusion_2Model__disjunction(_734_name,_735_t1,_736_t2); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _734_name,monty::rc_ptr< ::mosek::fusion::Term > _735_t1,monty::rc_ptr< ::mosek::fusion::Term > _736_t2)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_734_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_735_t1.get()),::monty::rc_ptr<::mosek::fusion::Term>(_736_t2.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.disjunction
// Method mosek.fusion.Model.disjunction @ src/fusion/Model.mbi:4773:6-105
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model :: __mosek_2fusion_2Model__disjunction(const std::string & _737_name,monty::rc_ptr< ::mosek::fusion::Term > _738_t1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__disjunction(_737_name,_738_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::Model::disjunction(const std::string &  _737_name,monty::rc_ptr< ::mosek::fusion::Term > _738_t1) { return __mosek_2fusion_2Model__disjunction(_737_name,_738_t1); }
monty::rc_ptr< ::mosek::fusion::Disjunction > mosek::fusion::p_Model::__mosek_2fusion_2Model__disjunction(const std::string & _737_name,monty::rc_ptr< ::mosek::fusion::Term > _738_t1)
{
  return _pubthis->__mosek_2fusion_2Model__disjunction(_737_name,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Term >,1 >{::monty::rc_ptr<::mosek::fusion::Term>(_738_t1.get())}));
}
// End mosek.fusion.Model.disjunction

// Begin mosek.fusion.Model.formstConstr
// Method mosek.fusion.Model.formstConstr @ src/fusion/Model.mbi:4765:6-4768:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _739_sb,std::shared_ptr< monty::ndarray< int32_t,1 > > _740_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _741_idxs)
{
  _checked_ptr_1<int32_t> _ptr__740_shape(_740_shape ? _740_shape->raw() : nullptr, _740_shape ? _740_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__741_idxs(_741_idxs ? _741_idxs->raw() : nullptr, _741_idxs ? _741_idxs->size(0) : 0);
  return _739_sb;
}
// End mosek.fusion.Model.formstConstr

// Begin mosek.fusion.Model.acon_release
// Method mosek.fusion.Model.acon_release @ src/fusion/Model.mbi:4655:6-4674:7
void mosek::fusion::p_Model::acon_release(int32_t _742_id)
{
  int32_t _743_num = acon_block_map->blocksize(_742_id);
  if ((_743_num >= (int)0))
  {
    {
      int32_t _744_numcone = acc_block_map->blocksize(((*acon_acc)(_742_id)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _745_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_744_numcone)));
      _checked_ptr_1<int32_t> _ptr__745_accidxs(_745_accidxs ? _745_accidxs->raw() : nullptr,_745_accidxs ? _745_accidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _746_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_743_num)));
      _checked_ptr_1<int32_t> _ptr__746_afeidxs(_746_afeidxs ? _746_afeidxs->raw() : nullptr,_746_afeidxs ? _746_afeidxs->size(0) : 0);
      acc_block_map->get(((*acon_acc)(_742_id)),_745_accidxs,(int)0);
      acc_block_map->free(((*acon_acc)(_742_id)));
      afe_blocks->get(((*acon_afe)(_742_id)),_746_afeidxs,(int)0);
      afe_release(((*acon_afe)(_742_id)));
      acon_block_map->free(_742_id);
      std::vector<int64_t> _9196_;
      for (int32_t _747_i = (int)0, _9197_ = _743_num; _747_i < _9197_ ; ++_747_i)
      {
        _9196_.push_back(_ptr__746_afeidxs[_747_i]);
      }
      auto _9198_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9196_.size()),_9196_.begin(),_9196_.end()));
      task_clearafelist(_9198_);
      std::vector<int64_t> _9199_;
      for (int32_t _748_i = (int)0, _9200_ = _744_numcone; _748_i < _9200_ ; ++_748_i)
      {
        _9199_.push_back(_ptr__745_accidxs[_748_i]);
      }
      auto _9201_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9199_.size()),_9199_.begin(),_9199_.end()));
      std::vector<int64_t> _9202_;
      for (int32_t _749_i = (int)0, _9203_ = _744_numcone; _749_i < _9203_ ; ++_749_i)
      {
        _9202_.push_back((int)0);
      }
      auto _9204_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9202_.size()),_9202_.begin(),_9202_.end()));
      task_putacclist(_9201_,_9204_,std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))));
    }
  }
  {}
}
// End mosek.fusion.Model.acon_release

// Begin mosek.fusion.Model.acon_allocate
// Method mosek.fusion.Model.acon_allocate @ src/fusion/Model.mbi:4576:6-4653:7
int32_t mosek::fusion::p_Model::acon_allocate(int64_t _750_domidx,int32_t _751_conesize,int32_t _752_numcone,std::shared_ptr< monty::ndarray< double,1 > > _753_g,std::shared_ptr< monty::ndarray< int32_t,1 > > _754_afeidxs,std::shared_ptr< monty::ndarray< int32_t,1 > > _755_accidxs)
{
  _checked_ptr_1<double> _ptr__753_g(_753_g ? _753_g->raw() : nullptr, _753_g ? _753_g->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__754_afeidxs(_754_afeidxs ? _754_afeidxs->raw() : nullptr, _754_afeidxs ? _754_afeidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__755_accidxs(_755_accidxs ? _755_accidxs->raw() : nullptr, _755_accidxs ? _755_accidxs->size(0) : 0);
  int32_t _756_n = safe_mul( _752_numcone,_751_conesize );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _757_aconidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_756_n)));
  _checked_ptr_1<int32_t> _ptr__757_aconidxs(_757_aconidxs ? _757_aconidxs->raw() : nullptr,_757_aconidxs ? _757_aconidxs->size(0) : 0);
  int32_t _758_aconid = acon_block_map->alloc(_756_n);
  int32_t _759_accid = acc_block_map->alloc(_752_numcone);
  int32_t _760_afeid = afe_allocate(_754_afeidxs);
  acon_block_map->get(_758_aconid,_757_aconidxs,(int)0);
  acc_block_map->get(_759_accid,_755_accidxs,(int)0);
  int32_t _761_acon_block_cap = acon_block_map->block_capacity();
  int32_t _762_acon_cap = acon_block_map->capacity();
  if ((_761_acon_block_cap > (int)((acon_acc)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _763_tmpacc = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_761_acon_block_cap)));
      _checked_ptr_1<int32_t> _ptr__763_tmpacc(_763_tmpacc ? _763_tmpacc->raw() : nullptr,_763_tmpacc ? _763_tmpacc->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _764_tmpafe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_761_acon_block_cap)));
      _checked_ptr_1<int32_t> _ptr__764_tmpafe(_764_tmpafe ? _764_tmpafe->raw() : nullptr,_764_tmpafe ? _764_tmpafe->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(acon_acc,(int)0,_763_tmpacc,(int)0,(int)((acon_acc)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_afe,(int)0,_764_tmpafe,(int)0,(int)((acon_afe)->size(0)));
      acon_acc = _763_tmpacc;
      acon_afe = _764_tmpafe;
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9205_;
      for (int32_t _766_i = (int)0, _9206_ = safe_mul( (int)((acons)->size(0)),(int)2 ); _766_i < _9206_ ; ++_766_i)
      {
        _9205_.push_back(nullptr);
      }
      auto _9207_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9205_.size()),_9205_.begin(),_9205_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _765_newcons = _9207_;
      int32_t _9208_ = (int)0;
      int32_t _9209_ = (int)((acons)->size(0));
      for (int32_t _767_i = _9208_; _767_i < _9209_; ++_767_i)
      {
        {
          ((*_765_newcons)(_767_i)) = ((*acons)(_767_i));
        }
      }
      acons = _765_newcons;
    }
  }
  {}
  ((*acon_acc)(_758_aconid)) = _759_accid;
  ((*acon_afe)(_758_aconid)) = _760_afeid;
  if ((_762_acon_cap > (int)((acon_elm_accid)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _768_tmp_accid = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_762_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__768_tmp_accid(_768_tmp_accid ? _768_tmp_accid->raw() : nullptr,_768_tmp_accid ? _768_tmp_accid->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _769_tmp_scale = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_762_acon_cap)));
      _checked_ptr_1<double> _ptr__769_tmp_scale(_769_tmp_scale ? _769_tmp_scale->raw() : nullptr,_769_tmp_scale ? _769_tmp_scale->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _770_tmp_ofs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_762_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__770_tmp_ofs(_770_tmp_ofs ? _770_tmp_ofs->raw() : nullptr,_770_tmp_ofs ? _770_tmp_ofs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _771_tmp_afe = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_762_acon_cap)));
      _checked_ptr_1<int32_t> _ptr__771_tmp_afe(_771_tmp_afe ? _771_tmp_afe->raw() : nullptr,_771_tmp_afe ? _771_tmp_afe->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_accid,(int)0,_768_tmp_accid,(int)0,(int)((acon_elm_accid)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_scale,(int)0,_769_tmp_scale,(int)0,(int)((acon_elm_scale)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_ofs,(int)0,_770_tmp_ofs,(int)0,(int)((acon_elm_ofs)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(acon_elm_afe,(int)0,_771_tmp_afe,(int)0,(int)((acon_elm_afe)->size(0)));
      acon_elm_accid = _768_tmp_accid;
      acon_elm_ofs = _770_tmp_ofs;
      acon_elm_afe = _771_tmp_afe;
      acon_elm_scale = _769_tmp_scale;
    }
  }
  {}
  int32_t _772_maxaccidx = (int)0;
  int32_t _9210_ = (int)0;
  int32_t _9211_ = (int)((_755_accidxs)->size(0));
  for (int32_t _773_i = _9210_; _773_i < _9211_; ++_773_i)
  {
    {
      if ((_ptr__755_accidxs[_773_i] > _772_maxaccidx))
      {
        {
          _772_maxaccidx = _ptr__755_accidxs[_773_i];
        }
      }
      {}
    }
  }
  _772_maxaccidx += (int)1;
  int32_t _774_nacc = task_numacc();
  if ((_774_nacc < _772_maxaccidx))
  {
    {
      task_append_accs((int64_t)0,(_772_maxaccidx - _774_nacc),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))));
    }
  }
  {}
  std::vector<int64_t> _9212_;
  for (int32_t _775_i = (int)0, _9213_ = (int)((_755_accidxs)->size(0)); _775_i < _9213_ ; ++_775_i)
  {
    _9212_.push_back(_ptr__755_accidxs[_775_i]);
  }
  auto _9214_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9212_.size()),_9212_.begin(),_9212_.end()));
  std::vector<int64_t> _9215_;
  for (int32_t _776_i = (int)0, _9216_ = (int)((_755_accidxs)->size(0)); _776_i < _9216_ ; ++_776_i)
  {
    _9215_.push_back(_750_domidx);
  }
  auto _9217_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9215_.size()),_9215_.begin(),_9215_.end()));
  std::vector<int64_t> _9218_;
  for (int32_t _777_i = (int)0, _9219_ = (int)((_754_afeidxs)->size(0)); _777_i < _9219_ ; ++_777_i)
  {
    _9218_.push_back(_ptr__754_afeidxs[_777_i]);
  }
  auto _9220_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9218_.size()),_9218_.begin(),_9218_.end()));
  task_putacclist(_9214_,_9217_,_9220_,_753_g);
  {
    int32_t _778_k = (int)0;
    int32_t _9221_ = (int)0;
    int32_t _9222_ = _752_numcone;
    for (int32_t _779_i = _9221_; _779_i < _9222_; ++_779_i)
    {
      {
        int32_t _9223_ = (int)0;
        int32_t _9224_ = _751_conesize;
        for (int32_t _780_j = _9223_; _780_j < _9224_; ++_780_j)
        {
          {
            ((*acon_elm_accid)(_ptr__757_aconidxs[_778_k])) = _ptr__755_accidxs[_779_i];
            ((*acon_elm_ofs)(_ptr__757_aconidxs[_778_k])) = _780_j;
            ((*acon_elm_afe)(_ptr__757_aconidxs[_778_k])) = _ptr__754_afeidxs[_778_k];
            ((*acon_elm_scale)(_ptr__757_aconidxs[_778_k])) = 1.0;
            ++ _778_k;
          }
        }
      }
    }
  }
  return _758_aconid;
}
// End mosek.fusion.Model.acon_allocate

// Begin mosek.fusion.Model.afe_release
// Method mosek.fusion.Model.afe_release @ src/fusion/Model.mbi:4568:6-4574:7
void mosek::fusion::p_Model::afe_release(int32_t _781_id)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _782_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(afe_blocks->blocksize(_781_id))));
  _checked_ptr_1<int32_t> _ptr__782_nidxs(_782_nidxs ? _782_nidxs->raw() : nullptr,_782_nidxs ? _782_nidxs->size(0) : 0);
  afe_blocks->release(_781_id,_782_nidxs);
  std::vector<int64_t> _9225_;
  for (int32_t _783_i = (int)0, _9226_ = (int)((_782_nidxs)->size(0)); _783_i < _9226_ ; ++_783_i)
  {
    _9225_.push_back(_ptr__782_nidxs[_783_i]);
  }
  auto _9227_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9225_.size()),_9225_.begin(),_9225_.end()));
  task_clearafelist(_9227_);
}
// End mosek.fusion.Model.afe_release

// Begin mosek.fusion.Model.afe_allocate
// Method mosek.fusion.Model.afe_allocate @ src/fusion/Model.mbi:4553:6-4566:7
int32_t mosek::fusion::p_Model::afe_allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _784_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__784_nativeidxs(_784_nativeidxs ? _784_nativeidxs->raw() : nullptr, _784_nativeidxs ? _784_nativeidxs->size(0) : 0);
  int32_t _785_afeid = afe_blocks->allocate(_784_nativeidxs);
  if (((int)((_784_nativeidxs)->size(0)) > (int)0))
  {
    {
      int32_t _786_tasknum = task_numafe();
      int32_t _787_maxidx = _ptr__784_nativeidxs[(int)0];
      int32_t _9228_ = (int)1;
      int32_t _9229_ = (int)((_784_nativeidxs)->size(0));
      for (int32_t _788_i = _9228_; _788_i < _9229_; ++_788_i)
      {
        {
          if ((_ptr__784_nativeidxs[_788_i] > _787_maxidx))
          {
            {
              _787_maxidx = _ptr__784_nativeidxs[_788_i];
            }
          }
          {}
        }
      }
      if ((safe_add( _787_maxidx,(int)1 ) > _786_tasknum))
      {
        {
          int32_t _789_n = (safe_add( _787_maxidx,(int)1 ) - _786_tasknum);
          task_append_afes((int64_t)(_789_n));
          task_numaferow += _789_n;
        }
      }
      {}
    }
  }
  {}
  return _785_afeid;
}
// End mosek.fusion.Model.afe_allocate

// Begin mosek.fusion.Model.con_release
// Method mosek.fusion.Model.con_release @ src/fusion/Model.mbi:4538:6-4548:7
void mosek::fusion::p_Model::con_release(int32_t _790_id)
{
  int32_t _791_num = con_blocks->blocksize(_790_id);
  if ((_791_num >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _792_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_791_num)));
      _checked_ptr_1<int32_t> _ptr__792_nativeidxs(_792_nativeidxs ? _792_nativeidxs->raw() : nullptr,_792_nativeidxs ? _792_nativeidxs->size(0) : 0);
      con_blocks->release(_790_id,_792_nativeidxs);
      ((*cons)(_790_id)) = nullptr;
      task_con_putboundlist_fr(_792_nativeidxs);
    }
  }
  {}
}
// End mosek.fusion.Model.con_release

// Begin mosek.fusion.Model.con_allocate
// Method mosek.fusion.Model.con_allocate @ src/fusion/Model.mbi:4518:6-4536:7
int32_t mosek::fusion::p_Model::con_allocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _793_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__793_nativeidxs(_793_nativeidxs ? _793_nativeidxs->raw() : nullptr, _793_nativeidxs ? _793_nativeidxs->size(0) : 0);
  int32_t _794_conid = con_blocks->allocate(_793_nativeidxs);
  if (((int)((_793_nativeidxs)->size(0)) > (int)0))
  {
    {
      int32_t _795_maxidx = _ptr__793_nativeidxs[(int)0];
      int32_t _9230_ = (int)1;
      int32_t _9231_ = (int)((_793_nativeidxs)->size(0));
      for (int32_t _796_i = _9230_; _796_i < _9231_; ++_796_i)
      {
        {
          if ((_ptr__793_nativeidxs[_796_i] > _795_maxidx))
          {
            {
              _795_maxidx = _ptr__793_nativeidxs[_796_i];
            }
          }
          {}
        }
      }
      if ((safe_add( _795_maxidx,(int)1 ) > num_task_con))
      {
        {
          int32_t _797_n = (safe_add( _795_maxidx,(int)1 ) - num_task_con);
          task_append_con(_797_n);
          num_task_con += _797_n;
        }
      }
      {}
    }
  }
  {}
  if ((_794_conid >= (int)((cons)->size(0))))
  {
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _9232_;
      for (int32_t _799_i = (int)0, _9233_ = safe_mul( (int)((cons)->size(0)),(int)2 ); _799_i < _9233_ ; ++_799_i)
      {
        _9232_.push_back(nullptr);
      }
      auto _9234_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_9232_.size()),_9232_.begin(),_9232_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _798_newcons = _9234_;
      int32_t _9235_ = (int)0;
      int32_t _9236_ = (int)((cons)->size(0));
      for (int32_t _800_i = _9235_; _800_i < _9236_; ++_800_i)
      {
        {
          ((*_798_newcons)(_800_i)) = ((*cons)(_800_i));
        }
      }
      cons = _798_newcons;
    }
  }
  {}
  return _794_conid;
}
// End mosek.fusion.Model.con_allocate

// Begin mosek.fusion.Model.barvar_alloc
// Method mosek.fusion.Model.barvar_alloc @ src/fusion/Model.mbi:4411:6-4512:7
int32_t mosek::fusion::p_Model::barvar_alloc(int32_t _801_conedim,int32_t _802_numcone,std::shared_ptr< monty::ndarray< int32_t,1 > > _803_barvaridxs,std::shared_ptr< monty::ndarray< int64_t,1 > > _804_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__803_barvaridxs(_803_barvaridxs ? _803_barvaridxs->raw() : nullptr, _803_barvaridxs ? _803_barvaridxs->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__804_nativeidxs(_804_nativeidxs ? _804_nativeidxs->raw() : nullptr, _804_nativeidxs ? _804_nativeidxs->size(0) : 0);
  int32_t _805_barvarid = barvar_num;
  ++ barvar_num;
  int32_t _806_conesize = (safe_mul( _801_conedim,safe_add( _801_conedim,(int)1 ) ) / (int)2);
  int32_t _807_domsize = safe_mul( _806_conesize,_802_numcone );
  int32_t _808_block_num = ((*barvar_block_ptr)(_805_barvarid));
  int32_t _809_block_cap = (int)((barvar_block_dim)->size(0));
  int32_t _810_block_elm_num = ((*barvar_block_elm_ptr)(_805_barvarid));
  int32_t _811_block_elm_cap = (int)((barvar_block_elm_barj)->size(0));
  if ((_809_block_cap < safe_add( _808_block_num,(int)1 )))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _812_new_barvar_block_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ))));
      _checked_ptr_1<int32_t> _ptr__812_new_barvar_block_dim(_812_new_barvar_block_dim ? _812_new_barvar_block_dim->raw() : nullptr,_812_new_barvar_block_dim ? _812_new_barvar_block_dim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _813_new_barvar_block_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__813_new_barvar_block_ptr(_813_new_barvar_block_ptr ? _813_new_barvar_block_ptr->raw() : nullptr,_813_new_barvar_block_ptr ? _813_new_barvar_block_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _814_new_barvar_block_elm_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__814_new_barvar_block_elm_ptr(_814_new_barvar_block_elm_ptr ? _814_new_barvar_block_elm_ptr->raw() : nullptr,_814_new_barvar_block_elm_ptr ? _814_new_barvar_block_elm_ptr->size(0) : 0);
      std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _9237_;
      for (int32_t _816_i = (int)0, _9238_ = safe_add( safe_mul( (int)((barvar_block_dim)->size(0)),(int)2 ),(int)1 ); _816_i < _9238_ ; ++_816_i)
      {
        _9237_.push_back(nullptr);
      }
      auto _9239_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_9237_.size()),_9237_.begin(),_9237_.end()));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _815_new_barvars = _9239_;
      int32_t _9240_ = (int)0;
      int32_t _9241_ = barvar_num;
      for (int32_t _817_i = _9240_; _817_i < _9241_; ++_817_i)
      {
        {
          ((*_815_new_barvars)(_817_i)) = ((*barvars)(_817_i));
        }
      }
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_dim,(int)0,_812_new_barvar_block_dim,(int)0,(int)((barvar_block_dim)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_ptr,(int)0,_813_new_barvar_block_ptr,(int)0,(int)((barvar_block_ptr)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_ptr,(int)0,_814_new_barvar_block_elm_ptr,(int)0,(int)((barvar_block_elm_ptr)->size(0)));
      barvar_block_dim = _812_new_barvar_block_dim;
      barvar_block_ptr = _813_new_barvar_block_ptr;
      barvar_block_elm_ptr = _814_new_barvar_block_elm_ptr;
      barvars = _815_new_barvars;
    }
  }
  {}
  if ((_811_block_elm_cap < safe_add( _810_block_elm_num,_807_domsize )))
  {
    {
      int32_t _818_addnum = (safe_add( _811_block_elm_cap,_807_domsize ) - _810_block_elm_num);
      if ((_818_addnum < _811_block_elm_cap))
      {
        {
          _818_addnum = _811_block_elm_cap;
        }
      }
      {}
      int32_t _819_newlen = safe_add( _811_block_elm_cap,_818_addnum );
      std::shared_ptr< monty::ndarray< int32_t,1 > > _820_new_barvar_block_elm_barj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_819_newlen)));
      _checked_ptr_1<int32_t> _ptr__820_new_barvar_block_elm_barj(_820_new_barvar_block_elm_barj ? _820_new_barvar_block_elm_barj->raw() : nullptr,_820_new_barvar_block_elm_barj ? _820_new_barvar_block_elm_barj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _821_new_barvar_block_elm_i = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_819_newlen)));
      _checked_ptr_1<int32_t> _ptr__821_new_barvar_block_elm_i(_821_new_barvar_block_elm_i ? _821_new_barvar_block_elm_i->raw() : nullptr,_821_new_barvar_block_elm_i ? _821_new_barvar_block_elm_i->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _822_new_barvar_block_elm_j = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_819_newlen)));
      _checked_ptr_1<int32_t> _ptr__822_new_barvar_block_elm_j(_822_new_barvar_block_elm_j ? _822_new_barvar_block_elm_j->raw() : nullptr,_822_new_barvar_block_elm_j ? _822_new_barvar_block_elm_j->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_barj,(int)0,_820_new_barvar_block_elm_barj,(int)0,(int)((barvar_block_elm_barj)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_i,(int)0,_821_new_barvar_block_elm_i,(int)0,(int)((barvar_block_elm_i)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_block_elm_j,(int)0,_822_new_barvar_block_elm_j,(int)0,(int)((barvar_block_elm_j)->size(0)));
      barvar_block_elm_barj = _820_new_barvar_block_elm_barj;
      barvar_block_elm_i = _821_new_barvar_block_elm_i;
      barvar_block_elm_j = _822_new_barvar_block_elm_j;
    }
  }
  {}
  int32_t _823_firstcone = task_numbarvar();
  int32_t _9242_ = (int)0;
  int32_t _9243_ = _802_numcone;
  for (int32_t _824_i = _9242_; _824_i < _9243_; ++_824_i)
  {
    {
      _ptr__803_barvaridxs[_824_i] = safe_add( _823_firstcone,_824_i );
    }
  }
  if ((safe_add( _823_firstcone,_802_numcone ) >= (int)((barvar_dim)->size(0))))
  {
    {
      int32_t _825_addnum = (safe_add( _823_firstcone,_802_numcone ) - (int)((barvar_dim)->size(0)));
      if ((_825_addnum < (int)((barvar_dim)->size(0))))
      {
        {
          _825_addnum = (int)((barvar_dim)->size(0));
        }
      }
      {}
      int32_t _826_newnum = safe_add( _825_addnum,(int)((barvar_dim)->size(0)) );
      std::shared_ptr< monty::ndarray< int32_t,1 > > _827_new_barvar_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_826_newnum)));
      _checked_ptr_1<int32_t> _ptr__827_new_barvar_dim(_827_new_barvar_dim ? _827_new_barvar_dim->raw() : nullptr,_827_new_barvar_dim ? _827_new_barvar_dim->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(barvar_dim,(int)0,_827_new_barvar_dim,(int)0,(int)((barvar_dim)->size(0)));
      barvar_dim = _827_new_barvar_dim;
    }
  }
  {}
  ((*barvar_block_dim)(_805_barvarid)) = _801_conedim;
  ((*barvar_block_ptr)(safe_add( _805_barvarid,(int)1 ))) = safe_add( ((*barvar_block_ptr)(_805_barvarid)),_802_numcone );
  ((*barvar_block_elm_ptr)(safe_add( _805_barvarid,(int)1 ))) = safe_add( ((*barvar_block_elm_ptr)(_805_barvarid)),_807_domsize );
  {
    int32_t _828_k = (int)0;
    int32_t _829_b = ((*barvar_block_elm_ptr)(_805_barvarid));
    int32_t _9244_ = (int)0;
    int32_t _9245_ = _802_numcone;
    for (int32_t _830_i = _9244_; _830_i < _9245_; ++_830_i)
    {
      {
        int32_t _9246_ = (int)0;
        int32_t _9247_ = _801_conedim;
        for (int32_t _831_j1 = _9246_; _831_j1 < _9247_; ++_831_j1)
        {
          {
            int32_t _9248_ = _831_j1;
            int32_t _9249_ = _801_conedim;
            for (int32_t _832_j0 = _9248_; _832_j0 < _9249_; ++_832_j0)
            {
              {
                ((*barvar_block_elm_barj)(safe_add( _829_b,_828_k ))) = safe_add( _823_firstcone,_830_i );
                ((*barvar_block_elm_i)(safe_add( _829_b,_828_k ))) = _832_j0;
                ((*barvar_block_elm_j)(safe_add( _829_b,_828_k ))) = _831_j1;
                _ptr__804_nativeidxs[_828_k] = safe_add( _829_b,_828_k );
                ++ _828_k;
              }
            }
          }
        }
      }
    }
    int32_t _9250_ = (int)0;
    int32_t _9251_ = _802_numcone;
    for (int32_t _833_i = _9250_; _833_i < _9251_; ++_833_i)
    {
      {
        ((*barvar_dim)(safe_add( _823_firstcone,_833_i ))) = _801_conedim;
      }
    }
  }
  int32_t _834_barvaridx = task_append_barvar(_801_conedim,_802_numcone);
  return _805_barvarid;
}
// End mosek.fusion.Model.barvar_alloc

// Begin mosek.fusion.Model.conicvar_alloc
// Method mosek.fusion.Model.conicvar_alloc @ src/fusion/Model.mbi:4378:6-4409:7
int32_t mosek::fusion::p_Model::conicvar_alloc(int64_t _835_domidx,int32_t _836_conesize,int32_t _837_numcone,std::shared_ptr< monty::ndarray< int32_t,1 > > _838_accidxs,std::shared_ptr< monty::ndarray< int32_t,1 > > _839_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__838_accidxs(_838_accidxs ? _838_accidxs->raw() : nullptr, _838_accidxs ? _838_accidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__839_nativeidxs(_839_nativeidxs ? _839_nativeidxs->raw() : nullptr, _839_nativeidxs ? _839_nativeidxs->size(0) : 0);
  int32_t _840_n = safe_mul( _836_conesize,_837_numcone );
  int32_t _841_varid = linearvar_alloc(_840_n,_839_nativeidxs);
  std::shared_ptr< monty::ndarray< double,1 > > _842_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_840_n)));
  _checked_ptr_1<double> _ptr__842_g(_842_g ? _842_g->raw() : nullptr,_842_g ? _842_g->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _843_conelmidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_840_n)));
  _checked_ptr_1<int32_t> _ptr__843_conelmidx(_843_conelmidx ? _843_conelmidx->raw() : nullptr,_843_conelmidx ? _843_conelmidx->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _844_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_840_n)));
  _checked_ptr_1<int32_t> _ptr__844_afeidxs(_844_afeidxs ? _844_afeidxs->raw() : nullptr,_844_afeidxs ? _844_afeidxs->size(0) : 0);
  int32_t _845_conid = acon_allocate(_835_domidx,_836_conesize,_837_numcone,_842_g,_844_afeidxs,_838_accidxs);
  ((*var_block_acc_id)(_841_varid)) = _845_conid;
  int32_t _9252_ = (int)0;
  int32_t _9253_ = _840_n;
  for (int32_t _846_i = _9252_; _846_i < _9253_; ++_846_i)
  {
    {
      ((*var_elm_acc_idx)(_ptr__839_nativeidxs[_846_i])) = _ptr__838_accidxs[(_846_i / _836_conesize)];
      ((*var_elm_acc_ofs)(_ptr__839_nativeidxs[_846_i])) = (_846_i % _836_conesize);
    }
  }
  std::vector<int64_t> _9254_;
  for (int32_t _847_i = (int)0, _9255_ = (int)((_844_afeidxs)->size(0)); _847_i < _9255_ ; ++_847_i)
  {
    _9254_.push_back(_ptr__844_afeidxs[_847_i]);
  }
  auto _9256_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9254_.size()),_9254_.begin(),_9254_.end()));
  std::vector<int32_t> _9257_;
  for (int32_t _848_i = (int)0, _9258_ = safe_add( _840_n,(int)1 ); _848_i < _9258_ ; ++_848_i)
  {
    _9257_.push_back(_848_i);
  }
  auto _9259_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9257_.size()),_9257_.begin(),_9257_.end()));
  std::vector<double> _9260_;
  for (int32_t _849_i = (int)0, _9261_ = _840_n; _849_i < _9261_ ; ++_849_i)
  {
    _9260_.push_back(1.0);
  }
  auto _9262_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9260_.size()),_9260_.begin(),_9260_.end()));
  std::vector<double> _9263_;
  for (int32_t _850_i = (int)0, _9264_ = _840_n; _850_i < _9264_ ; ++_850_i)
  {
    _9263_.push_back(0.0);
  }
  auto _9265_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9263_.size()),_9263_.begin(),_9263_.end()));
  task_putafeflist(_9256_,_9259_,_839_nativeidxs,_9262_,_9265_);
  return _841_varid;
}
// End mosek.fusion.Model.conicvar_alloc

// Begin mosek.fusion.Model.linearvar_alloc
// Method mosek.fusion.Model.linearvar_alloc @ src/fusion/Model.mbi:4350:6-4376:7
int32_t mosek::fusion::p_Model::linearvar_alloc(int32_t _851_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _852_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__852_nativeidxs(_852_nativeidxs ? _852_nativeidxs->raw() : nullptr, _852_nativeidxs ? _852_nativeidxs->size(0) : 0);
  int32_t _853_varid = var_block_map->alloc(_851_n);
  int32_t _854_maxvaridx = safe_add( var_block_map->maxidx(_853_varid),(int)1 );
  int32_t _855_cap = var_block_map->capacity();
  int32_t _856_numblocks = var_block_map->block_capacity();
  var_block_map->get(_853_varid,_852_nativeidxs,(int)0);
  if ((task_numvar() < _854_maxvaridx))
  {
    {
      task_append_var((_854_maxvaridx - task_numvar()));
    }
  }
  {}
  if ((_856_numblocks > (int)((var_block_acc_id)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _857_new_var_block_acc_id = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_856_numblocks)));
      _checked_ptr_1<int32_t> _ptr__857_new_var_block_acc_id(_857_new_var_block_acc_id ? _857_new_var_block_acc_id->raw() : nullptr,_857_new_var_block_acc_id ? _857_new_var_block_acc_id->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_block_acc_id,(int)0,_857_new_var_block_acc_id,(int)0,(int)((var_block_acc_id)->size(0)));
      var_block_acc_id = _857_new_var_block_acc_id;
    }
  }
  {}
  if ((_855_cap > (int)((var_elm_acc_idx)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _858_new_var_elm_acc_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_855_cap)));
      _checked_ptr_1<int32_t> _ptr__858_new_var_elm_acc_idx(_858_new_var_elm_acc_idx ? _858_new_var_elm_acc_idx->raw() : nullptr,_858_new_var_elm_acc_idx ? _858_new_var_elm_acc_idx->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(var_elm_acc_idx,(int)0,_858_new_var_elm_acc_idx,(int)0,(int)((var_elm_acc_idx)->size(0)));
      var_elm_acc_idx = _858_new_var_elm_acc_idx;
    }
  }
  {}
  ((*var_block_acc_id)(_853_varid)) = (-(int)1);
  int32_t _9266_ = (int)0;
  int32_t _9267_ = _851_n;
  for (int32_t _859_i = _9266_; _859_i < _9267_; ++_859_i)
  {
    {
      ((*var_elm_acc_idx)(_ptr__852_nativeidxs[_859_i])) = (-(int)1);
    }
  }
  return _853_varid;
}
// End mosek.fusion.Model.linearvar_alloc

// Begin mosek.fusion.Model.make_continuous
// Method mosek.fusion.Model.make_continuous @ src/fusion/Model.mbi:4336:6-4347:7
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _860_idxs)
{
  _checked_ptr_1<int64_t> _ptr__860_idxs(_860_idxs ? _860_idxs->raw() : nullptr, _860_idxs ? _860_idxs->size(0) : 0);
  int32_t _861_count = (int)0;
  int32_t _9268_ = (int)0;
  int32_t _9269_ = (int)((_860_idxs)->size(0));
  for (int32_t _862_i = _9268_; _862_i < _9269_; ++_862_i)
  {
    {
      if ((_ptr__860_idxs[_862_i] > (int)0))
      {
        {
          ++ _861_count;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _863_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_861_count)));
  _checked_ptr_1<int32_t> _ptr__863_nativeidxs(_863_nativeidxs ? _863_nativeidxs->raw() : nullptr,_863_nativeidxs ? _863_nativeidxs->size(0) : 0);
  int32_t _864_k = (int)0;
  int32_t _9270_ = (int)0;
  int32_t _9271_ = (int)((_860_idxs)->size(0));
  for (int32_t _865_i = _9270_; _865_i < _9271_; ++_865_i)
  {
    {
      if ((_ptr__860_idxs[_865_i] > (int)0))
      {
        {
          _ptr__863_nativeidxs[_864_k] = (int32_t)_ptr__860_idxs[_865_i];
          ++ _864_k;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_863_nativeidxs);
}
// End mosek.fusion.Model.make_continuous

// Begin mosek.fusion.Model.make_integer
// Method mosek.fusion.Model.make_integer @ src/fusion/Model.mbi:4324:6-4334:7
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _866_idxs)
{
  _checked_ptr_1<int64_t> _ptr__866_idxs(_866_idxs ? _866_idxs->raw() : nullptr, _866_idxs ? _866_idxs->size(0) : 0);
  int32_t _867_count = (int)0;
  int32_t _9272_ = (int)0;
  int32_t _9273_ = (int)((_866_idxs)->size(0));
  for (int32_t _868_i = _9272_; _868_i < _9273_; ++_868_i)
  {
    {
      if ((_ptr__866_idxs[_868_i] > (int)0))
      {
        {
          ++ _867_count;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _869_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_867_count)));
  _checked_ptr_1<int32_t> _ptr__869_nativeidxs(_869_nativeidxs ? _869_nativeidxs->raw() : nullptr,_869_nativeidxs ? _869_nativeidxs->size(0) : 0);
  int32_t _870_k = (int)0;
  int32_t _9274_ = (int)0;
  int32_t _9275_ = (int)((_866_idxs)->size(0));
  for (int32_t _871_i = _9274_; _871_i < _9275_; ++_871_i)
  {
    {
      if ((_ptr__866_idxs[_871_i] > (int)0))
      {
        {
          _ptr__869_nativeidxs[_870_k] = (int32_t)_ptr__866_idxs[_871_i];
          ++ _870_k;
        }
      }
      {}
    }
  }
  task_var_putintlist(_869_nativeidxs);
}
// End mosek.fusion.Model.make_integer

// Begin mosek.fusion.Model.putlicensewait
// Method mosek.fusion.Model.putlicensewait @ src/fusion/Model.mbi:4322:6-87
void mosek::fusion::Model::putlicensewait
  ( bool _872_wait) { mosek::fusion::p_Model::putlicensewait(_872_wait); }
void mosek::fusion::p_Model::putlicensewait(bool _872_wait)
{
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_872_wait);
}
// End mosek.fusion.Model.putlicensewait

// Begin mosek.fusion.Model.putlicensepath
// Method mosek.fusion.Model.putlicensepath @ src/fusion/Model.mbi:4319:6-90
void mosek::fusion::Model::putlicensepath
  ( const std::string & _873_licfile) { mosek::fusion::p_Model::putlicensepath(_873_licfile); }
void mosek::fusion::p_Model::putlicensepath(const std::string & _873_licfile)
{
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_873_licfile);
}
// End mosek.fusion.Model.putlicensepath

// Begin mosek.fusion.Model.putlicensecode
// Method mosek.fusion.Model.putlicensecode @ src/fusion/Model.mbi:4317:6-87
void mosek::fusion::Model::putlicensecode
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _874_code) { mosek::fusion::p_Model::putlicensecode(_874_code); }
void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int32_t,1 > > _874_code)
{
  _checked_ptr_1<int32_t> _ptr__874_code(_874_code ? _874_code->raw() : nullptr, _874_code ? _874_code->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_874_code);
}
// End mosek.fusion.Model.putlicensecode

// Begin mosek.fusion.Model.dispose
// Method mosek.fusion.Model.dispose @ src/fusion/Model.mbi:4305:6-4313:7
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }
void mosek::fusion::p_Model::dispose()
{
  int32_t _9276_ = (int)0;
  int32_t _9277_ = (int)((vars)->size(0));
  for (int32_t _875_i = _9276_; _875_i < _9277_; ++_875_i)
  {
    {
      ((*vars)(_875_i)) = nullptr;
    }
  }
  int32_t _9278_ = (int)0;
  int32_t _9279_ = (int)((cons)->size(0));
  for (int32_t _876_i = _9278_; _876_i < _9279_; ++_876_i)
  {
    {
      ((*cons)(_876_i)) = nullptr;
    }
  }
  int32_t _9280_ = (int)0;
  int32_t _9281_ = (int)((barvars)->size(0));
  for (int32_t _877_i = _9280_; _877_i < _9281_; ++_877_i)
  {
    {
      ((*barvars)(_877_i)) = nullptr;
    }
  }
  if ((NULL != parameters.get()))
  {
    {
      int32_t _9282_ = (int)0;
      int32_t _9283_ = (int)((parameters)->size(0));
      for (int32_t _878_i = _9282_; _878_i < _9283_; ++_878_i)
      {
        {
          ((*parameters)(_878_i)) = nullptr;
        }
      }
    }
  }
  {}
  ::mosek::fusion::p_BaseModel::dispose();
}
// End mosek.fusion.Model.dispose

// Begin mosek.fusion.Model.getTask
// Method mosek.fusion.Model.getTask @ src/fusion/Model.mbi:4285:6-64
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask()
{
  return __mosek_2fusion_2BaseModel__task_get();
}
// End mosek.fusion.Model.getTask

// Begin mosek.fusion.Model.getConstraintDuals
// Method mosek.fusion.Model.getConstraintDuals @ src/fusion/Model.mbi:4259:6-4274:7
void mosek::fusion::Model :: getConstraintDuals(bool _879_lower,std::shared_ptr< monty::ndarray< int32_t,1 > > _880_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _881_res,int32_t _882_offset) { mosek::fusion::p_Model::_get_impl(this)->getConstraintDuals(_879_lower,_880_nativeidxs,_881_res,_882_offset); }
void mosek::fusion::p_Model::getConstraintDuals(bool _879_lower,std::shared_ptr< monty::ndarray< int32_t,1 > > _880_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _881_res,int32_t _882_offset)
{
  _checked_ptr_1<int32_t> _ptr__880_nativeidxs(_880_nativeidxs ? _880_nativeidxs->raw() : nullptr, _880_nativeidxs ? _880_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__881_res(_881_res ? _881_res->raw() : nullptr, _881_res ? _881_res->size(0) : 0);
  int32_t _883_n = (int)((_880_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _884_slc = getSolution_slc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__884_slc(_884_slc ? _884_slc->raw() : nullptr,_884_slc ? _884_slc->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _885_suc = getSolution_suc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__885_suc(_885_suc ? _885_suc->raw() : nullptr,_885_suc ? _885_suc->size(0) : 0);
  int32_t _9284_ = (int)0;
  int32_t _9285_ = _883_n;
  for (int32_t _886_p = _9284_; _886_p < _9285_; ++_886_p)
  {
    {
      if ((_ptr__880_nativeidxs[_886_p] >= (int)0))
      {
        {
          if (_879_lower)
          {
            {
              _ptr__881_res[safe_add( _882_offset,_886_p )] = _ptr__884_slc[_ptr__880_nativeidxs[_886_p]];
            }
          }
          else
          {
            {
              _ptr__881_res[safe_add( _882_offset,_886_p )] = (-_ptr__885_suc[_ptr__880_nativeidxs[_886_p]]);
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::SolutionError(std::string ("Requested invalid solution item"));
        }
      }
    }
  }
}
// End mosek.fusion.Model.getConstraintDuals

// Begin mosek.fusion.Model.getConstraintValues
// Method mosek.fusion.Model.getConstraintValues @ src/fusion/Model.mbi:4225:6-4256:7
void mosek::fusion::Model :: getConstraintValues(bool _887_primal,std::shared_ptr< monty::ndarray< int32_t,1 > > _888_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _889_res,int32_t _890_offset) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_887_primal,_888_nativeidxs,_889_res,_890_offset); }
void mosek::fusion::p_Model::getConstraintValues(bool _887_primal,std::shared_ptr< monty::ndarray< int32_t,1 > > _888_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _889_res,int32_t _890_offset)
{
  _checked_ptr_1<int32_t> _ptr__888_nativeidxs(_888_nativeidxs ? _888_nativeidxs->raw() : nullptr, _888_nativeidxs ? _888_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__889_res(_889_res ? _889_res->raw() : nullptr, _889_res ? _889_res->size(0) : 0);
  int32_t _891_n = (int)((_888_nativeidxs)->size(0));
  if (_887_primal)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _892_xc = getSolution_xc(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__892_xc(_892_xc ? _892_xc->raw() : nullptr,_892_xc ? _892_xc->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _893_accx = getSolution_accx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__893_accx(_893_accx ? _893_accx->raw() : nullptr,_893_accx ? _893_accx->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _894_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__894_accptr(_894_accptr ? _894_accptr->raw() : nullptr,_894_accptr ? _894_accptr->size(0) : 0);
      int32_t _9286_ = (int)0;
      int32_t _9287_ = _891_n;
      for (int32_t _895_p = _9286_; _895_p < _9287_; ++_895_p)
      {
        {
          if ((_ptr__888_nativeidxs[_895_p] >= (int)0))
          {
            {
              _ptr__889_res[safe_add( _890_offset,_895_p )] = _ptr__892_xc[_ptr__888_nativeidxs[_895_p]];
            }
          }
          else
          {
            {
              int32_t _896_i = (-safe_add( (int)1,_ptr__888_nativeidxs[_895_p] ));
              _ptr__889_res[safe_add( _890_offset,_895_p )] = (_ptr__893_accx[safe_add( _ptr__894_accptr[((*acon_elm_accid)(_896_i))],((*acon_elm_ofs)(_896_i)) )] * ((*acon_elm_scale)(_896_i)));
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _897_y = getSolution_y(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__897_y(_897_y ? _897_y->raw() : nullptr,_897_y ? _897_y->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _898_accy = getSolution_accy(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__898_accy(_898_accy ? _898_accy->raw() : nullptr,_898_accy ? _898_accy->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _899_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__899_accptr(_899_accptr ? _899_accptr->raw() : nullptr,_899_accptr ? _899_accptr->size(0) : 0);
      int32_t _9288_ = (int)0;
      int32_t _9289_ = _891_n;
      for (int32_t _900_p = _9288_; _900_p < _9289_; ++_900_p)
      {
        {
          if ((_ptr__888_nativeidxs[_900_p] >= (int)0))
          {
            {
              _ptr__889_res[safe_add( _890_offset,_900_p )] = _ptr__897_y[_ptr__888_nativeidxs[_900_p]];
            }
          }
          else
          {
            {
              int32_t _901_i = (-safe_add( (int)1,_ptr__888_nativeidxs[_900_p] ));
              _ptr__889_res[safe_add( _890_offset,_900_p )] = (_ptr__898_accy[safe_add( _ptr__899_accptr[((*acon_elm_accid)(_901_i))],((*acon_elm_ofs)(_901_i)) )] * ((*acon_elm_scale)(_901_i)));
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getConstraintValues

// Begin mosek.fusion.Model.getVariableDuals
// Method mosek.fusion.Model.getVariableDuals @ src/fusion/Model.mbi:4195:6-4222:7
void mosek::fusion::Model :: getVariableDuals(bool _902_lower,std::shared_ptr< monty::ndarray< int64_t,1 > > _903_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _904_res,int32_t _905_offset) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_902_lower,_903_nativeidxs,_904_res,_905_offset); }
void mosek::fusion::p_Model::getVariableDuals(bool _902_lower,std::shared_ptr< monty::ndarray< int64_t,1 > > _903_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _904_res,int32_t _905_offset)
{
  _checked_ptr_1<int64_t> _ptr__903_nativeidxs(_903_nativeidxs ? _903_nativeidxs->raw() : nullptr, _903_nativeidxs ? _903_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__904_res(_904_res ? _904_res->raw() : nullptr, _904_res ? _904_res->size(0) : 0);
  int32_t _906_n = (int)((_903_nativeidxs)->size(0));
  if (_902_lower)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _907_xx = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__907_xx(_907_xx ? _907_xx->raw() : nullptr,_907_xx ? _907_xx->size(0) : 0);
      int32_t _9290_ = (int)0;
      int32_t _9291_ = _906_n;
      for (int32_t _908_p = _9290_; _908_p < _9291_; ++_908_p)
      {
        {
          if ((_ptr__903_nativeidxs[_908_p] > (int)0))
          {
            {
              _ptr__904_res[safe_add( _905_offset,_908_p )] = _ptr__907_xx[_ptr__903_nativeidxs[_908_p]];
            }
          }
          else
          {
            {
              _ptr__904_res[safe_add( _905_offset,_908_p )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _909_xx = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__909_xx(_909_xx ? _909_xx->raw() : nullptr,_909_xx ? _909_xx->size(0) : 0);
      int32_t _9292_ = (int)0;
      int32_t _9293_ = _906_n;
      for (int32_t _910_p = _9292_; _910_p < _9293_; ++_910_p)
      {
        {
          if ((_ptr__903_nativeidxs[_910_p] > (int)0))
          {
            {
              _ptr__904_res[safe_add( _905_offset,_910_p )] = (-_ptr__909_xx[_ptr__903_nativeidxs[_910_p]]);
            }
          }
          else
          {
            {
              _ptr__904_res[safe_add( _905_offset,_910_p )] = (int)0;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getVariableDuals

// Begin mosek.fusion.Model.getVariableValues
// Method mosek.fusion.Model.getVariableValues @ src/fusion/Model.mbi:4154:6-4191:7
void mosek::fusion::Model :: getVariableValues(bool _911_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _912_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _913_res,int32_t _914_offset) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_911_primal,_912_nativeidxs,_913_res,_914_offset); }
void mosek::fusion::p_Model::getVariableValues(bool _911_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _912_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _913_res,int32_t _914_offset)
{
  _checked_ptr_1<int64_t> _ptr__912_nativeidxs(_912_nativeidxs ? _912_nativeidxs->raw() : nullptr, _912_nativeidxs ? _912_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__913_res(_913_res ? _913_res->raw() : nullptr, _913_res ? _913_res->size(0) : 0);
  int32_t _915_n = (int)((_912_nativeidxs)->size(0));
  barvar_num = task_numbarvar();
  if (_911_primal)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _916_xx = getSolution_xx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__916_xx(_916_xx ? _916_xx->raw() : nullptr,_916_xx ? _916_xx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _9294_;
      bool _9295_ = (barvar_num > (int)0);
      if (_9295_)
      {
        _9294_ = getSolution_barx(::mosek::fusion::SolutionType::Default);
      }
      else
      {
        _9294_ = nullptr;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _917_barx = _9294_;
      _checked_ptr_1<double> _ptr__917_barx(_917_barx ? _917_barx->raw() : nullptr,_917_barx ? _917_barx->size(0) : 0);
      int32_t _9296_ = (int)0;
      int32_t _9297_ = _915_n;
      for (int32_t _918_p = _9296_; _918_p < _9297_; ++_918_p)
      {
        {
          if ((_ptr__912_nativeidxs[_918_p] > (int)0))
          {
            {
              _ptr__913_res[safe_add( _914_offset,_918_p )] = _ptr__916_xx[_ptr__912_nativeidxs[_918_p]];
            }
          }
          else if((_ptr__912_nativeidxs[_918_p] < (int)0))
          {
            {
              int64_t _919_idx = (-safe_add( _ptr__912_nativeidxs[_918_p],(int)1 ));
              _ptr__913_res[safe_add( _914_offset,_918_p )] = _ptr__917_barx[_919_idx];
            }
          }
          else
          {
            {
              _ptr__913_res[safe_add( _914_offset,_918_p )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _920_yx = getSolution_yx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__920_yx(_920_yx ? _920_yx->raw() : nullptr,_920_yx ? _920_yx->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _9298_;
      bool _9299_ = (barvar_num > (int)0);
      if (_9299_)
      {
        _9298_ = getSolution_bars(::mosek::fusion::SolutionType::Default);
      }
      else
      {
        _9298_ = nullptr;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _921_bars = _9298_;
      _checked_ptr_1<double> _ptr__921_bars(_921_bars ? _921_bars->raw() : nullptr,_921_bars ? _921_bars->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _922_accy = getSolution_accy(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__922_accy(_922_accy ? _922_accy->raw() : nullptr,_922_accy ? _922_accy->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _923_accptr = getSolution_accptr(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<int32_t> _ptr__923_accptr(_923_accptr ? _923_accptr->raw() : nullptr,_923_accptr ? _923_accptr->size(0) : 0);
      int32_t _9300_ = (int)0;
      int32_t _9301_ = _915_n;
      for (int32_t _924_p = _9300_; _924_p < _9301_; ++_924_p)
      {
        {
          if ((_ptr__912_nativeidxs[_924_p] < (int)0))
          {
            {
              int64_t _925_idx = (-safe_add( _ptr__912_nativeidxs[_924_p],(int)1 ));
              _ptr__913_res[safe_add( _914_offset,_924_p )] = _ptr__921_bars[_925_idx];
            }
          }
          else if((_ptr__912_nativeidxs[_924_p] == (int)0))
          {
            {
              _ptr__913_res[safe_add( _914_offset,_924_p )] = (int)0;
            }
          }
          else if((((*var_elm_acc_idx)(_ptr__912_nativeidxs[_924_p])) >= (int)0))
          {
            {
              _ptr__913_res[safe_add( _914_offset,_924_p )] = _ptr__922_accy[safe_add( _ptr__923_accptr[((*var_elm_acc_idx)(_ptr__912_nativeidxs[_924_p]))],((*var_elm_acc_ofs)(_ptr__912_nativeidxs[_924_p])) )];
            }
          }
          else
          {
            {
              _ptr__913_res[safe_add( _914_offset,_924_p )] = _ptr__920_yx[_ptr__912_nativeidxs[_924_p]];
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.Model.getVariableValues

// Begin mosek.fusion.Model.setVariableValues
// Method mosek.fusion.Model.setVariableValues @ src/fusion/Model.mbi:4131:6-4151:7
void mosek::fusion::Model :: setVariableValues(bool _926_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _927_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _928_values) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_926_primal,_927_nativeidxs,_928_values); }
void mosek::fusion::p_Model::setVariableValues(bool _926_primal,std::shared_ptr< monty::ndarray< int64_t,1 > > _927_nativeidxs,std::shared_ptr< monty::ndarray< double,1 > > _928_values)
{
  _checked_ptr_1<int64_t> _ptr__927_nativeidxs(_927_nativeidxs ? _927_nativeidxs->raw() : nullptr, _927_nativeidxs ? _927_nativeidxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__928_values(_928_values ? _928_values->raw() : nullptr, _928_values ? _928_values->size(0) : 0);
  if (_926_primal)
  {
    {
      int32_t _929_numnz = (int)0;
      int32_t _9302_ = (int)0;
      int32_t _9303_ = (int)((_927_nativeidxs)->size(0));
      for (int32_t _930_i = _9302_; _930_i < _9303_; ++_930_i)
      {
        {
          if ((_ptr__927_nativeidxs[_930_i] >= (int)0))
          {
            {
              ++ _929_numnz;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _931_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_929_numnz)));
      _checked_ptr_1<int32_t> _ptr__931_subj(_931_subj ? _931_subj->raw() : nullptr,_931_subj ? _931_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _932_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_929_numnz)));
      _checked_ptr_1<double> _ptr__932_val(_932_val ? _932_val->raw() : nullptr,_932_val ? _932_val->size(0) : 0);
      int32_t _933_k = (int)0;
      int32_t _9304_ = (int)0;
      int32_t _9305_ = (int)((_927_nativeidxs)->size(0));
      for (int32_t _934_i = _9304_; _934_i < _9305_; ++_934_i)
      {
        {
          if ((_ptr__927_nativeidxs[_934_i] >= (int)0))
          {
            {
              _ptr__931_subj[_933_k] = (int32_t)_ptr__927_nativeidxs[_934_i];
              _ptr__932_val[_933_k] = _ptr__928_values[_934_i];
              ++ _933_k;
            }
          }
          {}
        }
      }
      setSolution_xx(_931_subj,_932_val);
    }
  }
  else
  {
    {
    }
  }
}
// End mosek.fusion.Model.setVariableValues

// Begin mosek.fusion.Model.flushNames
// Method mosek.fusion.Model.flushNames @ src/fusion/Model.mbi:4109:6-4123:7
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }
void mosek::fusion::p_Model::flushNames()
{
  int32_t _9306_ = (int)0;
  int32_t _9307_ = (int)((vars)->size(0));
  for (int32_t _935_i = _9306_; _935_i < _9307_; ++_935_i)
  {
    {
      if ((NULL != ((*vars)(_935_i)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_935_i)).get())->flushNames();
        }
      }
      {}
    }
  }
  int32_t _9308_ = (int)0;
  int32_t _9309_ = (int)((barvars)->size(0));
  for (int32_t _936_i = _9308_; _936_i < _9309_; ++_936_i)
  {
    {
      if ((NULL != ((*barvars)(_936_i)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_936_i)).get())->flushNames();
        }
      }
      {}
    }
  }
  int32_t _9310_ = (int)0;
  int32_t _9311_ = (int)((cons)->size(0));
  for (int32_t _937_i = _9310_; _937_i < _9311_; ++_937_i)
  {
    {
      if ((NULL != ((*cons)(_937_i)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_937_i)).get())->flushNames();
        }
      }
      {}
    }
  }
  int32_t _9312_ = (int)0;
  int32_t _9313_ = (int)((acons)->size(0));
  for (int32_t _938_i = _9312_; _938_i < _9313_; ++_938_i)
  {
    {
      if ((NULL != ((*acons)(_938_i)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*acons)(_938_i)).get())->flushNames();
        }
      }
      {}
    }
  }
}
// End mosek.fusion.Model.flushNames

// Begin mosek.fusion.Model.writeTaskNoFlush
// Method mosek.fusion.Model.writeTaskNoFlush @ src/fusion/Model.mbi:4100:6-4104:7
void mosek::fusion::Model :: writeTaskNoFlush(const std::string & _939_filename) { mosek::fusion::p_Model::_get_impl(this)->writeTaskNoFlush(_939_filename); }
void mosek::fusion::p_Model::writeTaskNoFlush(const std::string & _939_filename)
{
  _pubthis->flushNames();
  task_write(_939_filename);
}
// End mosek.fusion.Model.writeTaskNoFlush

// Begin mosek.fusion.Model.writeTaskStream
// Method mosek.fusion.Model.writeTaskStream @ src/fusion/Model.mbi:4092:6-4097:7
void mosek::fusion::Model :: writeTaskStream(const std::string & _940_ext,std::ostream& _941_stream) { mosek::fusion::p_Model::_get_impl(this)->writeTaskStream(_940_ext,_941_stream); }
void mosek::fusion::p_Model::writeTaskStream(const std::string & _940_ext,std::ostream& _941_stream)
{
  _pubthis->flushNames();
  flush_parameters();
  task_write_stream(_940_ext,_941_stream);
}
// End mosek.fusion.Model.writeTaskStream

// Begin mosek.fusion.Model.writeTask
// Method mosek.fusion.Model.writeTask @ src/fusion/Model.mbi:4058:6-4063:7
void mosek::fusion::Model :: writeTask(const std::string & _942_filename) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_942_filename); }
void mosek::fusion::p_Model::writeTask(const std::string & _942_filename)
{
  _pubthis->flushNames();
  flush_parameters();
  task_write(_942_filename);
}
// End mosek.fusion.Model.writeTask

// Begin mosek.fusion.Model.getSolverLIntInfo
// Method mosek.fusion.Model.getSolverLIntInfo @ src/fusion/Model.mbi:4050:6-93
int64_t mosek::fusion::Model :: getSolverLIntInfo(const std::string & _943_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_943_name); }
int64_t mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _943_name)
{
  return task_get_liinf(_943_name);
}
// End mosek.fusion.Model.getSolverLIntInfo

// Begin mosek.fusion.Model.getSolverIntInfo
// Method mosek.fusion.Model.getSolverIntInfo @ src/fusion/Model.mbi:4040:6-92
int32_t mosek::fusion::Model :: getSolverIntInfo(const std::string & _944_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_944_name); }
int32_t mosek::fusion::p_Model::getSolverIntInfo(const std::string & _944_name)
{
  return task_get_iinf(_944_name);
}
// End mosek.fusion.Model.getSolverIntInfo

// Begin mosek.fusion.Model.getSolverDoubleInfo
// Method mosek.fusion.Model.getSolverDoubleInfo @ src/fusion/Model.mbi:4030:6-92
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _945_name) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_945_name); }
double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _945_name)
{
  return task_get_dinf(_945_name);
}
// End mosek.fusion.Model.getSolverDoubleInfo

// Begin mosek.fusion.Model.setCallbackHandler
// Method mosek.fusion.Model.setCallbackHandler @ src/fusion/Model.mbi:4020:6-110
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _946_h) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_946_h); }
void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _946_h)
{
  task_setCallbackHandler(_946_h);
}
// End mosek.fusion.Model.setCallbackHandler

// Begin mosek.fusion.Model.setDataCallbackHandler
// Method mosek.fusion.Model.setDataCallbackHandler @ src/fusion/Model.mbi:3999:6-114
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _947_h) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_947_h); }
void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _947_h)
{
  task_setDataCallbackHandler(_947_h);
}
// End mosek.fusion.Model.setDataCallbackHandler

// Begin mosek.fusion.Model.setLogHandler
// Method mosek.fusion.Model.setLogHandler @ src/fusion/Model.mbi:3977:6-89
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _948_h) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_948_h); }
void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _948_h)
{
  task_setLogHandler(_948_h);
}
// End mosek.fusion.Model.setLogHandler

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ src/fusion/Model.mbi:3937:6-132
void mosek::fusion::Model :: setSolverParam(const std::string & _949_name,double _950_floatval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_949_name,_950_floatval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _949_name,double _950_floatval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_949_name,_950_floatval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ src/fusion/Model.mbi:3925:6-128
void mosek::fusion::Model :: setSolverParam(const std::string & _951_name,int32_t _952_intval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_951_name,_952_intval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _951_name,int32_t _952_intval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_951_name,_952_intval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.setSolverParam
// Method mosek.fusion.Model.setSolverParam @ src/fusion/Model.mbi:3913:6-128
void mosek::fusion::Model :: setSolverParam(const std::string & _953_name,const std::string & _954_strval) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_953_name,_954_strval); }
void mosek::fusion::p_Model::setSolverParam(const std::string & _953_name,const std::string & _954_strval)
{
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_953_name,_954_strval);
}
// End mosek.fusion.Model.setSolverParam

// Begin mosek.fusion.Model.breakSolver
// Method mosek.fusion.Model.breakSolver @ src/fusion/Model.mbi:3897:6-3900:7
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }
void mosek::fusion::p_Model::breakSolver()
{
  task_break_solve();
}
// End mosek.fusion.Model.breakSolver

// Begin mosek.fusion.Model.optserverHost
// Method mosek.fusion.Model.optserverHost @ src/fusion/Model.mbi:3883:6-3886:7
void mosek::fusion::Model :: optserverHost(const std::string & _955_addr) { mosek::fusion::p_Model::_get_impl(this)->optserverHost(_955_addr); }
void mosek::fusion::p_Model::optserverHost(const std::string & _955_addr)
{
  task_putoptserver_host(_955_addr);
}
// End mosek.fusion.Model.optserverHost

// Begin mosek.fusion.Model.report_solution
// Method mosek.fusion.Model.report_solution @ src/fusion/Model.mbi:3802:6-3878:7
void mosek::fusion::p_Model::report_solution(mosek::fusion::SolutionType _956_soltype,mosek::fusion::ProblemStatus _957_prosta,mosek::fusion::SolutionStatus _958_psolsta,mosek::fusion::SolutionStatus _959_dsolsta,double _960_pobj,double _961_dobj,int32_t _962_numvar,int32_t _963_numcon,int32_t _964_numbarelm,int32_t _965_numacc,int32_t _966_numaccelm,bool _967_hasprimal,bool _968_hasdual)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _969_sol;
  if ((_956_soltype == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _969_sol = sol_itr;
    }
  }
  else if((_956_soltype == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _969_sol = sol_bas;
    }
  }
  else if((_956_soltype == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _969_sol = sol_itg;
    }
  }
  else
  {
    {
      _969_sol = nullptr;
    }
  }
  if ((NULL == _969_sol.get()))
  {
    {
      _969_sol = ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(_962_numvar,_963_numcon,_964_numbarelm,_965_numacc,_966_numaccelm);
    }
  }
  else
  {
    {
      _969_sol->resize(_962_numvar,_963_numcon,_964_numbarelm,_965_numacc,_966_numaccelm);
    }
  }
  mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->pobj = _960_pobj;
  mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->dobj = _961_dobj;
  mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->pstatus = _958_psolsta;
  mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->dstatus = _959_dsolsta;
  mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->probstatus = _957_prosta;
  if ((_962_numvar > (int)0))
  {
    {
      if (_967_hasprimal)
      {
        {
          report_solution_get_xx(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->xx);
        }
      }
      {}
      if (_968_hasdual)
      {
        {
          report_solution_get_slx(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->slx);
          report_solution_get_sux(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->sux);
          std::shared_ptr< monty::ndarray< double,1 > > _970_yx = mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->yx;
          _checked_ptr_1<double> _ptr__970_yx(_970_yx ? _970_yx->raw() : nullptr,_970_yx ? _970_yx->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _971_slx = mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->slx;
          _checked_ptr_1<double> _ptr__971_slx(_971_slx ? _971_slx->raw() : nullptr,_971_slx ? _971_slx->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _972_sux = mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->sux;
          _checked_ptr_1<double> _ptr__972_sux(_972_sux ? _972_sux->raw() : nullptr,_972_sux ? _972_sux->size(0) : 0);
          int32_t _9314_ = (int)0;
          int32_t _9315_ = _962_numvar;
          for (int32_t _973_i = _9314_; _973_i < _9315_; ++_973_i)
          {
            {
              _ptr__970_yx[_973_i] = (_ptr__971_slx[_973_i] - _ptr__972_sux[_973_i]);
            }
          }
        }
      }
      {}
    }
  }
  {}
  if ((_963_numcon > (int)0))
  {
    {
      if (_967_hasprimal)
      {
        {
          report_solution_get_xc(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->xc);
        }
      }
      {}
      if (_968_hasdual)
      {
        {
          report_solution_get_slc(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->slc);
          report_solution_get_suc(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->suc);
          std::shared_ptr< monty::ndarray< double,1 > > _974_y = mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->y;
          _checked_ptr_1<double> _ptr__974_y(_974_y ? _974_y->raw() : nullptr,_974_y ? _974_y->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _975_slc = mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->slc;
          _checked_ptr_1<double> _ptr__975_slc(_975_slc ? _975_slc->raw() : nullptr,_975_slc ? _975_slc->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _976_suc = mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->suc;
          _checked_ptr_1<double> _ptr__976_suc(_976_suc ? _976_suc->raw() : nullptr,_976_suc ? _976_suc->size(0) : 0);
          int32_t _9316_ = (int)0;
          int32_t _9317_ = _963_numcon;
          for (int32_t _977_i = _9316_; _977_i < _9317_; ++_977_i)
          {
            {
              _ptr__974_y[_977_i] = (_ptr__975_slc[_977_i] - _ptr__976_suc[_977_i]);
            }
          }
        }
      }
      {}
    }
  }
  {}
  if ((_964_numbarelm > (int)0))
  {
    {
      if (_967_hasprimal)
      {
        {
          report_solution_get_barx(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->barx);
        }
      }
      {}
      if (_968_hasdual)
      {
        {
          report_solution_get_bars(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->bars);
        }
      }
      {}
    }
  }
  {}
  if ((task_numacc() > (int)0))
  {
    {
      report_solution_get_accptr(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->accptr);
      if (_967_hasprimal)
      {
        {
          report_solution_get_accx(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->accx);
        }
      }
      {}
      if (_968_hasdual)
      {
        {
          report_solution_get_accy(mosek::fusion::p_SolutionStruct::_get_impl(_969_sol)->accy);
        }
      }
      {}
    }
  }
  {}
  if ((_956_soltype == ::mosek::fusion::SolutionType::Interior))
  {
    {
      sol_itr = _969_sol;
    }
  }
  else if((_956_soltype == ::mosek::fusion::SolutionType::Basic))
  {
    {
      sol_bas = _969_sol;
    }
  }
  else if((_956_soltype == ::mosek::fusion::SolutionType::Integer))
  {
    {
      sol_itg = _969_sol;
    }
  }
  {}
}
// End mosek.fusion.Model.report_solution

// Begin mosek.fusion.Model.clear_solutions
// Method mosek.fusion.Model.clear_solutions @ src/fusion/Model.mbi:3796:6-3800:7
void mosek::fusion::p_Model::clear_solutions()
{
  sol_itr = nullptr;
  sol_itg = nullptr;
  sol_bas = nullptr;
}
// End mosek.fusion.Model.clear_solutions

// Begin mosek.fusion.Model.solveBatch
// Method mosek.fusion.Model.solveBatch @ src/fusion/Model.mbi:3771:6-3794:7
std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > mosek::fusion::Model::solveBatch
  ( bool _978_israce,
    double _979_maxtime,
    int32_t _980_numthreads,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Model >,1 > > _981_models) { return mosek::fusion::p_Model::solveBatch(_978_israce,_979_maxtime,_980_numthreads,_981_models); }
std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > mosek::fusion::p_Model::solveBatch(bool _978_israce,double _979_maxtime,int32_t _980_numthreads,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Model >,1 > > _981_models)
{
  int32_t _982_n = (int)((_981_models)->size(0));
  int32_t _9318_ = (int)0;
  int32_t _9319_ = _982_n;
  for (int32_t _983_i = _9318_; _983_i < _9319_; ++_983_i)
  {
    {
      if ((NULL == ((*_981_models)(_983_i)).get()))
      {
        {
          throw ::mosek::fusion::OptimizeError(std::string ("One of the models is a null object"));
        }
      }
      {}
    }
  }
  int32_t _9320_ = (int)0;
  int32_t _9321_ = _982_n;
  for (int32_t _984_i = _9320_; _984_i < _9321_; ++_984_i)
  {
    {
      ((*_981_models)(_984_i))->flushSolutions();
      mosek::fusion::p_Model::_get_impl(((*_981_models)(_984_i)).get())->flush_parameters();
    }
  }
  std::shared_ptr< monty::ndarray< mosek::fusion::SolverStatus,1 > > _985_wasOK = ::mosek::fusion::p_BaseModel::env_solve_batch(_978_israce,_979_maxtime,_980_numthreads,_981_models);
  int32_t _9322_ = (int)0;
  int32_t _9323_ = _982_n;
  for (int32_t _986_i = _9322_; _986_i < _9323_; ++_986_i)
  {
    {
      mosek::fusion::p_Model::_get_impl(((*_981_models)(_986_i)).get())->task_post_solve();
    }
  }
  return _985_wasOK;
}
// End mosek.fusion.Model.solveBatch

// Begin mosek.fusion.Model.solve
// Method mosek.fusion.Model.solve @ src/fusion/Model.mbi:3762:6-3769:7
void mosek::fusion::Model :: solve(const std::string & _987_addr,const std::string & _988_accesstoken) { mosek::fusion::p_Model::_get_impl(this)->solve(_987_addr,_988_accesstoken); }
void mosek::fusion::p_Model::solve(const std::string & _987_addr,const std::string & _988_accesstoken)
{
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(true,_987_addr,_988_accesstoken);
  task_post_solve();
}
// End mosek.fusion.Model.solve

// Begin mosek.fusion.Model.solve
// Method mosek.fusion.Model.solve @ src/fusion/Model.mbi:3753:6-3760:7
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }
void mosek::fusion::p_Model::solve()
{
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(false,std::string (""),std::string (""));
  task_post_solve();
}
// End mosek.fusion.Model.solve

// Begin mosek.fusion.Model.flush_parameters
// Method mosek.fusion.Model.flush_parameters @ src/fusion/Model.mbi:3674:6-3721:7
void mosek::fusion::p_Model::flush_parameters()
{
  int32_t _989_num_con_param_nz = con_blocks->num_parameterized();
  int32_t _990_num_afe_param_nz = afe_blocks->num_parameterized();
  int32_t _991_num_obj_param_nz = obj_blocks->num_parameterized();
  if ((_989_num_con_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _992_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_989_num_con_param_nz)));
      _checked_ptr_1<int32_t> _ptr__992_subi(_992_subi ? _992_subi->raw() : nullptr,_992_subi ? _992_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _993_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_989_num_con_param_nz)));
      _checked_ptr_1<int32_t> _ptr__993_subj(_993_subj ? _993_subj->raw() : nullptr,_993_subj ? _993_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _994_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_989_num_con_param_nz)));
      _checked_ptr_1<double> _ptr__994_val(_994_val ? _994_val->raw() : nullptr,_994_val ? _994_val->size(0) : 0);
      con_blocks->evaluate(xs,param_value,_992_subi,_993_subj,_994_val);
      task_putaijlist(_992_subi,_993_subj,_994_val,(int64_t)(_989_num_con_param_nz));
    }
  }
  {}
  if ((_990_num_afe_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _995_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_990_num_afe_param_nz)));
      _checked_ptr_1<int32_t> _ptr__995_subi(_995_subi ? _995_subi->raw() : nullptr,_995_subi ? _995_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _996_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_990_num_afe_param_nz)));
      _checked_ptr_1<int32_t> _ptr__996_subj(_996_subj ? _996_subj->raw() : nullptr,_996_subj ? _996_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _997_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_990_num_afe_param_nz)));
      _checked_ptr_1<double> _ptr__997_val(_997_val ? _997_val->raw() : nullptr,_997_val ? _997_val->size(0) : 0);
      afe_blocks->evaluate(xs,param_value,_995_subi,_996_subj,_997_val);
      task_putafefijlist(_995_subi,_996_subj,_997_val);
    }
  }
  {}
  if ((_991_num_obj_param_nz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _998_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_991_num_obj_param_nz)));
      _checked_ptr_1<int32_t> _ptr__998_subi(_998_subi ? _998_subi->raw() : nullptr,_998_subi ? _998_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _999_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_991_num_obj_param_nz)));
      _checked_ptr_1<int32_t> _ptr__999_subj(_999_subj ? _999_subj->raw() : nullptr,_999_subj ? _999_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1000_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_991_num_obj_param_nz)));
      _checked_ptr_1<double> _ptr__1000_val(_1000_val ? _1000_val->raw() : nullptr,_1000_val ? _1000_val->size(0) : 0);
      obj_blocks->evaluate(xs,param_value,_998_subi,_999_subj,_1000_val);
      task_putclist(_999_subj,_1000_val);
    }
  }
  {}
}
// End mosek.fusion.Model.flush_parameters

// Begin mosek.fusion.Model.flushParameters
// Method mosek.fusion.Model.flushParameters @ src/fusion/Model.mbi:3672:6-61
void mosek::fusion::Model :: flushParameters() { mosek::fusion::p_Model::_get_impl(this)->flushParameters(); }
void mosek::fusion::p_Model::flushParameters()
{
  flush_parameters();
}
// End mosek.fusion.Model.flushParameters

// Begin mosek.fusion.Model.evaluate_parameterized
// Method mosek.fusion.Model.evaluate_parameterized @ src/fusion/Model.mbi:3603:6-3666:7
void mosek::fusion::p_Model::evaluate_parameterized(monty::rc_ptr< ::mosek::fusion::WorkStack > _1001_xs,int32_t _1002_numrow,std::shared_ptr< monty::ndarray< int32_t,1 > > _1003_rowptrb,std::shared_ptr< monty::ndarray< int32_t,1 > > _1004_rowptre,std::shared_ptr< monty::ndarray< int64_t,1 > > _1005_codenidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _1006_codeptr,std::shared_ptr< monty::ndarray< int32_t,1 > > _1007_codesizes,std::shared_ptr< monty::ndarray< int32_t,1 > > _1008_code,std::shared_ptr< monty::ndarray< double,1 > > _1009_cconst,std::shared_ptr< monty::ndarray< int32_t,1 > > _1010_subj,std::shared_ptr< monty::ndarray< double,1 > > _1011_val)
{
  _checked_ptr_1<int32_t> _ptr__1003_rowptrb(_1003_rowptrb ? _1003_rowptrb->raw() : nullptr, _1003_rowptrb ? _1003_rowptrb->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1004_rowptre(_1004_rowptre ? _1004_rowptre->raw() : nullptr, _1004_rowptre ? _1004_rowptre->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1005_codenidx(_1005_codenidx ? _1005_codenidx->raw() : nullptr, _1005_codenidx ? _1005_codenidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1006_codeptr(_1006_codeptr ? _1006_codeptr->raw() : nullptr, _1006_codeptr ? _1006_codeptr->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1007_codesizes(_1007_codesizes ? _1007_codesizes->raw() : nullptr, _1007_codesizes ? _1007_codesizes->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1008_code(_1008_code ? _1008_code->raw() : nullptr, _1008_code ? _1008_code->size(0) : 0);
  _checked_ptr_1<double> _ptr__1009_cconst(_1009_cconst ? _1009_cconst->raw() : nullptr, _1009_cconst ? _1009_cconst->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1010_subj(_1010_subj ? _1010_subj->raw() : nullptr, _1010_subj ? _1010_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__1011_val(_1011_val ? _1011_val->raw() : nullptr, _1011_val ? _1011_val->size(0) : 0);
  int32_t _1012_stack = _1001_xs->allocf64((int)((_1008_code)->size(0)));
  int32_t _1013_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _1014_xf64 = mosek::fusion::p_WorkStack::_get_impl(_1001_xs)->f64;
  _checked_ptr_1<double> _ptr__1014_xf64(_1014_xf64 ? _1014_xf64->raw() : nullptr,_1014_xf64 ? _1014_xf64->size(0) : 0);
  int32_t _1015_idx = (int)0;
  int32_t _9324_ = (int)0;
  int32_t _9325_ = _1002_numrow;
  for (int32_t _1016_i = _9324_; _1016_i < _9325_; ++_1016_i)
  {
    {
      int32_t _1017_k = _ptr__1006_codeptr[_1016_i];
      int32_t _9326_ = _ptr__1003_rowptrb[_1016_i];
      int32_t _9327_ = _ptr__1004_rowptre[_1016_i];
      for (int32_t _1018_j = _9326_; _1018_j < _9327_; ++_1018_j)
      {
        {
          int32_t _9328_ = (int)0;
          int32_t _9329_ = _ptr__1007_codesizes[_1018_j];
          for (int32_t _1019_l = _9328_; _1019_l < _9329_; ++_1019_l)
          {
            {
              if ((_ptr__1008_code[_1017_k] == 0))
              {
                {
                }
              }
              else
              {
                {
                  if ((_ptr__1008_code[_1017_k] == 1))
                  {
                    {
                      _ptr__1014_xf64[safe_add( _1012_stack,_1013_stackp )] = ((*param_value)((int32_t)_ptr__1009_cconst[_1017_k]));
                      ++ _1013_stackp;
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__1008_code[_1017_k] == 2))
                      {
                        {
                          _ptr__1014_xf64[safe_add( _1012_stack,_1013_stackp )] = _ptr__1009_cconst[_1017_k];
                          ++ _1013_stackp;
                        }
                      }
                      else
                      {
                        {
                          if ((_ptr__1008_code[_1017_k] == 3))
                          {
                            {
                              _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)2)] += _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)1)];
                              -- _1013_stackp;
                            }
                          }
                          else
                          {
                            {
                              if ((_ptr__1008_code[_1017_k] == 4))
                              {
                                {
                                  _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)1)] = (-_ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)1)]);
                                }
                              }
                              else
                              {
                                {
                                  if ((_ptr__1008_code[_1017_k] == 5))
                                  {
                                    {
                                      _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)2)] *= _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)1)];
                                      -- _1013_stackp;
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((_ptr__1008_code[_1017_k] == 6))
                                      {
                                        {
                                          _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)1)] = (1.0 / _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)1)]);
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((_ptr__1008_code[_1017_k] == 8))
                                          {
                                            {
                                              double _1020_v = 0.0;
                                              int32_t _9330_ = (int)0;
                                              int32_t _9331_ = (int32_t)_ptr__1009_cconst[_1017_k];
                                              for (int32_t _1021_i = _9330_; _1021_i < _9331_; ++_1021_i)
                                              {
                                                {
                                                  _1020_v += _ptr__1014_xf64[(safe_add( _1012_stack,_1013_stackp ) - (int)1)];
                                                  -- _1013_stackp;
                                                }
                                              }
                                              _ptr__1014_xf64[safe_add( _1012_stack,_1013_stackp )] = _1020_v;
                                              ++ _1013_stackp;
                                            }
                                          }
                                          else
                                          {
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++ _1017_k;
            }
          }
          _ptr__1010_subj[_1015_idx] = (int32_t)_ptr__1005_codenidx[_1018_j];
          _ptr__1011_val[_1015_idx] = _ptr__1014_xf64[_1012_stack];
          _1013_stackp = (int)0;
          ++ _1015_idx;
        }
      }
    }
  }
  _1001_xs->popf64((int)((_1008_code)->size(0)));
}
// End mosek.fusion.Model.evaluate_parameterized

// Begin mosek.fusion.Model.flushSolutions
// Method mosek.fusion.Model.flushSolutions @ src/fusion/Model.mbi:3596:6-3601:7
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }
void mosek::fusion::p_Model::flushSolutions()
{
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
// End mosek.fusion.Model.flushSolutions

// Begin mosek.fusion.Model.flush_initsol
// Method mosek.fusion.Model.flush_initsol @ src/fusion/Model.mbi:3570:6-3592:7
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _1022_which)
{
  if ((NULL != initsol_xx.get()))
  {
    {
      int32_t _1023_numvar = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _1024_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1023_numvar)));
      _checked_ptr_1<double> _ptr__1024_xx(_1024_xx ? _1024_xx->raw() : nullptr,_1024_xx ? _1024_xx->size(0) : 0);
      /* Try @ src/fusion/Model.mbi:3575:10-3581:11 */
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1026_sol = __mosek_2fusion_2Model__get_sol_cache(_1022_which,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_1026_sol)->xx.get()))
          {
            {
              int32_t _9332_;
              bool _9333_ = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_1026_sol)->xx)->size(0)) <= _1023_numvar);
              if (_9333_)
              {
                _9332_ = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_1026_sol)->xx)->size(0));
              }
              else
              {
                _9332_ = _1023_numvar;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_1026_sol)->xx,(int)0,_1024_xx,(int)0,_9332_);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _1025_e)
      {
        {
        }
      }
      int32_t _9334_;
      bool _9335_ = ((int)((initsol_xx)->size(0)) <= _1023_numvar);
      if (_9335_)
      {
        _9334_ = (int)((initsol_xx)->size(0));
      }
      else
      {
        _9334_ = _1023_numvar;
      }
      int32_t _1027_n = _9334_;
      int32_t _9336_ = (int)0;
      int32_t _9337_ = _1027_n;
      for (int32_t _1028_i = _9336_; _1028_i < _9337_; ++_1028_i)
      {
        {
          if (((*initsol_xx_flag)(_1028_i)))
          {
            {
              _ptr__1024_xx[_1028_i] = ((*initsol_xx)(_1028_i));
            }
          }
          {}
        }
      }
      _ptr__1024_xx[bfixidx] = 1.0;
      task_putxx_slice(_1022_which,(int)0,_1023_numvar,_1024_xx);
    }
  }
  {}
}
// End mosek.fusion.Model.flush_initsol

// Begin mosek.fusion.Model.getDualSolutionStatus
// Method mosek.fusion.Model.getDualSolutionStatus @ src/fusion/Model.mbi:3565:6-3568:7
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus()
{
  return _pubthis->getDualSolutionStatus(solutionptr);
}
// End mosek.fusion.Model.getDualSolutionStatus

// Begin mosek.fusion.Model.getProblemStatus
// Method mosek.fusion.Model.getProblemStatus @ src/fusion/Model.mbi:3559:6-3562:7
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }
mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus()
{
  return _pubthis->getProblemStatus(solutionptr);
}
// End mosek.fusion.Model.getProblemStatus

// Begin mosek.fusion.Model.getPrimalSolutionStatus
// Method mosek.fusion.Model.getPrimalSolutionStatus @ src/fusion/Model.mbi:3552:6-3555:7
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus()
{
  return getPrimalSolutionStatus(solutionptr);
}
// End mosek.fusion.Model.getPrimalSolutionStatus

// Begin mosek.fusion.Model.dualObjValue
// Method mosek.fusion.Model.dualObjValue @ src/fusion/Model.mbi:3545:6-3548:7
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }
double mosek::fusion::p_Model::dualObjValue()
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
// End mosek.fusion.Model.dualObjValue

// Begin mosek.fusion.Model.primalObjValue
// Method mosek.fusion.Model.primalObjValue @ src/fusion/Model.mbi:3539:6-3542:7
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }
double mosek::fusion::p_Model::primalObjValue()
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
// End mosek.fusion.Model.primalObjValue

// Begin mosek.fusion.Model.get_sol_cache
// Method mosek.fusion.Model.get_sol_cache @ src/fusion/Model.mbi:3468:6-3536:7
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _1029_which_,bool _1030_primal,bool _1031_nothrow)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1032_res = nullptr;
  mosek::fusion::SolutionType _1033_which = _1029_which_;
  if ((_1033_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      _1033_which = solutionptr;
    }
  }
  {}
  if ((_1033_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _1032_res = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _1032_res = sol_bas;
        }
      }
      else
      {
        {
          _1032_res = sol_itr;
        }
      }
    }
  }
  else if((_1033_which == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _1032_res = sol_itr;
    }
  }
  else if((_1033_which == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _1032_res = sol_bas;
    }
  }
  else if((_1033_which == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _1032_res = sol_itg;
    }
  }
  {}
  if ((NULL == _1032_res.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_1031_nothrow || ((_1030_primal && _1032_res->isPrimalAcceptable(acceptable_sol)) || ((!_1030_primal) && _1032_res->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _1032_res;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1034_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _1035_solsta = mosek::fusion::p_SolutionStruct::_get_impl(_1032_res)->pstatus;
          mosek::fusion::ProblemStatus _1036_probsta = mosek::fusion::p_SolutionStruct::_get_impl(_1032_res)->probstatus;
          if ((!_1030_primal))
          {
            {
              _1035_solsta = mosek::fusion::p_SolutionStruct::_get_impl(_1032_res)->dstatus;
            }
          }
          {}
          _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_1035_solsta == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_1035_solsta == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_1035_solsta == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_1035_solsta == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_1035_solsta == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_1035_solsta == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("at least Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_1032_res == sol_itr))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_1032_res == sol_bas))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_1032_res == sol_itg))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_1036_probsta == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_1036_probsta == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _1034_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_1034_sb->toString());
        }
      }
    }
  }
}
// End mosek.fusion.Model.get_sol_cache

// Begin mosek.fusion.Model.get_sol_cache
// Method mosek.fusion.Model.get_sol_cache @ src/fusion/Model.mbi:3461:6-3466:7
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _1037_which_,bool _1038_primal)
{
  return __mosek_2fusion_2Model__get_sol_cache(_1037_which_,_1038_primal,false);
}
// End mosek.fusion.Model.get_sol_cache

// Begin mosek.fusion.Model.setSolution_xx
// Method mosek.fusion.Model.setSolution_xx @ src/fusion/Model.mbi:3446:6-3454:7
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int32_t,1 > > _1039_subj,std::shared_ptr< monty::ndarray< double,1 > > _1040_val)
{
  _checked_ptr_1<int32_t> _ptr__1039_subj(_1039_subj ? _1039_subj->raw() : nullptr, _1039_subj ? _1039_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__1040_val(_1040_val ? _1040_val->raw() : nullptr, _1040_val ? _1040_val->size(0) : 0);
  ensure_initsol_xx();
  int32_t _9338_ = (int)0;
  int32_t _9339_ = (int)((_1039_subj)->size(0));
  for (int32_t _1041_i = _9338_; _1041_i < _9339_; ++_1041_i)
  {
    {
      ((*initsol_xx)(_ptr__1039_subj[_1041_i])) = _ptr__1040_val[_1041_i];
      ((*initsol_xx_flag)(_ptr__1039_subj[_1041_i])) = true;
    }
  }
}
// End mosek.fusion.Model.setSolution_xx

// Begin mosek.fusion.Model.ensure_initsol_xx
// Method mosek.fusion.Model.ensure_initsol_xx @ src/fusion/Model.mbi:3429:6-3444:7
void mosek::fusion::p_Model::ensure_initsol_xx()
{
  int32_t _1042_natvarmap_num = task_numvar();
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1042_natvarmap_num)));
      std::vector<bool> _9340_;
      for (int32_t _1043_i = (int)0, _9341_ = _1042_natvarmap_num; _1043_i < _9341_ ; ++_1043_i)
      {
        _9340_.push_back(false);
      }
      auto _9342_ = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_9340_.size()),_9340_.begin(),_9340_.end()));
      initsol_xx_flag = _9342_;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _1042_natvarmap_num))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _1044_tmp = initsol_xx;
      _checked_ptr_1<double> _ptr__1044_tmp(_1044_tmp ? _1044_tmp->raw() : nullptr,_1044_tmp ? _1044_tmp->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _1045_tmp_flag = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1042_natvarmap_num)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_1042_natvarmap_num)));
      ::mosek::fusion::Utils::Tools::arraycopy(_1044_tmp,(int)0,initsol_xx,(int)0,(int)((_1044_tmp)->size(0)));
      int32_t _9343_ = (int)0;
      int32_t _9344_ = (int)((_1044_tmp)->size(0));
      for (int32_t _1046_i = _9343_; _1046_i < _9344_; ++_1046_i)
      {
        {
          ((*initsol_xx_flag)(_1046_i)) = ((*_1045_tmp_flag)(_1046_i));
        }
      }
    }
  }
  {}
}
// End mosek.fusion.Model.ensure_initsol_xx

// Begin mosek.fusion.Model.getSolution_accptr
// Method mosek.fusion.Model.getSolution_accptr @ src/fusion/Model.mbi:3422:6-3426:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Model::getSolution_accptr(mosek::fusion::SolutionType _1047_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1047_which,true,true))->accptr;
}
// End mosek.fusion.Model.getSolution_accptr

// Begin mosek.fusion.Model.getSolution_accy
// Method mosek.fusion.Model.getSolution_accy @ src/fusion/Model.mbi:3416:6-3420:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_accy(mosek::fusion::SolutionType _1048_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1048_which,false))->accy;
}
// End mosek.fusion.Model.getSolution_accy

// Begin mosek.fusion.Model.getSolution_accx
// Method mosek.fusion.Model.getSolution_accx @ src/fusion/Model.mbi:3410:6-3414:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_accx(mosek::fusion::SolutionType _1049_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1049_which,true))->accx;
}
// End mosek.fusion.Model.getSolution_accx

// Begin mosek.fusion.Model.getSolution_bars
// Method mosek.fusion.Model.getSolution_bars @ src/fusion/Model.mbi:3403:6-3407:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _1050_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1050_which,false))->bars;
}
// End mosek.fusion.Model.getSolution_bars

// Begin mosek.fusion.Model.getSolution_barx
// Method mosek.fusion.Model.getSolution_barx @ src/fusion/Model.mbi:3397:6-3401:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _1051_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1051_which,true))->barx;
}
// End mosek.fusion.Model.getSolution_barx

// Begin mosek.fusion.Model.getSolution_y
// Method mosek.fusion.Model.getSolution_y @ src/fusion/Model.mbi:3391:6-3395:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _1052_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1052_which,false))->y;
}
// End mosek.fusion.Model.getSolution_y

// Begin mosek.fusion.Model.getSolution_xc
// Method mosek.fusion.Model.getSolution_xc @ src/fusion/Model.mbi:3385:6-3389:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _1053_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1053_which,true))->xc;
}
// End mosek.fusion.Model.getSolution_xc

// Begin mosek.fusion.Model.getSolution_suc
// Method mosek.fusion.Model.getSolution_suc @ src/fusion/Model.mbi:3379:6-3383:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _1054_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1054_which,false))->suc;
}
// End mosek.fusion.Model.getSolution_suc

// Begin mosek.fusion.Model.getSolution_slc
// Method mosek.fusion.Model.getSolution_slc @ src/fusion/Model.mbi:3373:6-3377:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _1055_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1055_which,false))->slc;
}
// End mosek.fusion.Model.getSolution_slc

// Begin mosek.fusion.Model.getSolution_sux
// Method mosek.fusion.Model.getSolution_sux @ src/fusion/Model.mbi:3367:6-3371:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _1056_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1056_which,false))->sux;
}
// End mosek.fusion.Model.getSolution_sux

// Begin mosek.fusion.Model.getSolution_slx
// Method mosek.fusion.Model.getSolution_slx @ src/fusion/Model.mbi:3361:6-3365:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _1057_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1057_which,false))->slx;
}
// End mosek.fusion.Model.getSolution_slx

// Begin mosek.fusion.Model.getSolution_yx
// Method mosek.fusion.Model.getSolution_yx @ src/fusion/Model.mbi:3355:6-3359:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _1058_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1058_which,false))->yx;
}
// End mosek.fusion.Model.getSolution_yx

// Begin mosek.fusion.Model.getSolution_xx
// Method mosek.fusion.Model.getSolution_xx @ src/fusion/Model.mbi:3350:6-3354:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _1059_which)
{
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_1059_which,true))->xx;
}
// End mosek.fusion.Model.getSolution_xx

// Begin mosek.fusion.Model.selectedSolution
// Method mosek.fusion.Model.selectedSolution @ src/fusion/Model.mbi:3345:6-3348:7
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _1060_soltype) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_1060_soltype); }
void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _1060_soltype)
{
  solutionptr = _1060_soltype;
}
// End mosek.fusion.Model.selectedSolution

// Begin mosek.fusion.Model.getAcceptedSolutionStatus
// Method mosek.fusion.Model.getAcceptedSolutionStatus @ src/fusion/Model.mbi:3336:6-3339:7
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }
mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus()
{
  return acceptable_sol;
}
// End mosek.fusion.Model.getAcceptedSolutionStatus

// Begin mosek.fusion.Model.acceptedSolutionStatus
// Method mosek.fusion.Model.acceptedSolutionStatus @ src/fusion/Model.mbi:3330:6-3333:7
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _1061_what) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_1061_what); }
void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _1061_what)
{
  acceptable_sol = _1061_what;
}
// End mosek.fusion.Model.acceptedSolutionStatus

// Begin mosek.fusion.Model.getProblemStatus
// Method mosek.fusion.Model.getProblemStatus @ src/fusion/Model.mbi:3299:6-3317:7
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _1062_which) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_1062_which); }
mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _1062_which)
{
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1063_res = nullptr;
  if ((_1062_which == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _1063_res = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _1063_res = sol_bas;
        }
      }
      else
      {
        {
          _1063_res = sol_itr;
        }
      }
    }
  }
  else if((_1062_which == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _1063_res = sol_itr;
    }
  }
  else if((_1062_which == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _1063_res = sol_bas;
    }
  }
  else if((_1062_which == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _1063_res = sol_itg;
    }
  }
  {}
  if ((NULL == _1063_res.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_1063_res)->probstatus;
    }
  }
}
// End mosek.fusion.Model.getProblemStatus

// Begin mosek.fusion.Model.getDualSolutionStatus
// Method mosek.fusion.Model.getDualSolutionStatus @ src/fusion/Model.mbi:3293:6-122
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _1064_which) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_1064_which); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _1064_which)
{
  return getSolutionStatus(_1064_which,false);
}
// End mosek.fusion.Model.getDualSolutionStatus

// Begin mosek.fusion.Model.getPrimalSolutionStatus
// Method mosek.fusion.Model.getPrimalSolutionStatus @ src/fusion/Model.mbi:3287:6-128
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _1065_which) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_1065_which); }
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _1065_which)
{
  return getSolutionStatus(_1065_which,true);
}
// End mosek.fusion.Model.getPrimalSolutionStatus

// Begin mosek.fusion.Model.getSolutionStatus
// Method mosek.fusion.Model.getSolutionStatus @ src/fusion/Model.mbi:3270:6-3281:7
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _1066_which,bool _1067_primal)
{
  /* Try @ src/fusion/Model.mbi:3271:8-3280:9 */
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _1069_sol = __mosek_2fusion_2Model__get_sol_cache(_1066_which,_1067_primal,true);
      if (_1067_primal)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_1069_sol)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_1069_sol)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _1068_e)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
// End mosek.fusion.Model.getSolutionStatus

// Begin mosek.fusion.Model.update
// Method mosek.fusion.Model.update @ src/fusion/Model.mbi:3132:6-3266:7
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int32_t,1 > > _1070_conidxs,monty::rc_ptr< ::mosek::fusion::Expression > _1071_expr)
{
  _checked_ptr_1<int32_t> _ptr__1070_conidxs(_1070_conidxs ? _1070_conidxs->raw() : nullptr, _1070_conidxs ? _1070_conidxs->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1071_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int32_t _1072_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1073_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1074_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1075_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1076_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1077_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1078_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1079_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1080_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1081_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1082_code = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1083_codeptr = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1084_cconst = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1085_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1085_wi32(_1085_wi32 ? _1085_wi32->raw() : nullptr,_1085_wi32 ? _1085_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1086_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1086_wi64(_1086_wi64 ? _1086_wi64->raw() : nullptr,_1086_wi64 ? _1086_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1087_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1087_wf64(_1087_wf64 ? _1087_wf64->raw() : nullptr,_1087_wf64 ? _1087_wf64->size(0) : 0);
  int32_t _1088_num_lincon = (int)0;
  int32_t _9345_ = (int)0;
  int32_t _9346_ = _1074_nelem;
  for (int32_t _1089_i = _9345_; _1089_i < _9346_; ++_1089_i)
  {
    {
      if ((_ptr__1070_conidxs[_1089_i] >= (int)0))
      {
        {
          ++ _1088_num_lincon;
        }
      }
      {}
    }
  }
  int32_t _1090_num_concon = (_1074_nelem - _1088_num_lincon);
  if ((_1088_num_lincon == _1074_nelem))
  {
    {
      putarows(_1070_conidxs,ws,_1074_nelem,_1075_nnz,_1078_ptr_base,_1080_nidxs_base,_1081_cof_base);
      if ((_1077_ncodeatom > (int)0))
      {
        {
          con_blocks->replace_row_code(rs,_1070_conidxs,_1078_ptr_base,_1080_nidxs_base,_1083_codeptr,_1082_code,_1084_cconst);
        }
      }
      else
      {
        {
          con_blocks->clear_row_code(_1070_conidxs);
        }
      }
    }
  }
  else if((_1090_num_concon == _1074_nelem))
  {
    {
      std::vector<int32_t> _9347_;
      for (int32_t _1091_i = (int)0, _9348_ = _1074_nelem; _1091_i < _9348_ ; ++_1091_i)
      {
        _9347_.push_back((-safe_add( (int)1,_ptr__1070_conidxs[_1091_i] )));
      }
      auto _9349_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9347_.size()),_9347_.begin(),_9347_.end()));
      putfrows(_9349_,(int)0,ws,_1074_nelem,_1075_nnz,_1078_ptr_base,_1080_nidxs_base,_1081_cof_base);
      if ((_1077_ncodeatom > (int)0))
      {
        {
          std::vector<int32_t> _9350_;
          for (int32_t _1092_i = (int)0, _9351_ = _1074_nelem; _1092_i < _9351_ ; ++_1092_i)
          {
            _9350_.push_back((-safe_add( (int)1,_ptr__1070_conidxs[_1092_i] )));
          }
          auto _9352_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9350_.size()),_9350_.begin(),_9350_.end()));
          afe_blocks->replace_row_code(rs,_9352_,_1078_ptr_base,_1080_nidxs_base,_1083_codeptr,_1082_code,_1084_cconst);
        }
      }
      else
      {
        {
          std::vector<int32_t> _9353_;
          for (int32_t _1093_i = (int)0, _9354_ = _1074_nelem; _1093_i < _9354_ ; ++_1093_i)
          {
            _9353_.push_back((-safe_add( (int)1,_ptr__1070_conidxs[_1093_i] )));
          }
          auto _9355_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9353_.size()),_9353_.begin(),_9353_.end()));
          afe_blocks->clear_row_code(_9355_);
        }
      }
    }
  }
  else
  {
    {
      int32_t _1094_cncodeelm = (int)0;
      int32_t _1095_lncodeelm = (int)0;
      int32_t _1096_cnnz = (int)0;
      int32_t _1097_lnnz = (int)0;
      int32_t _9356_ = (int)0;
      int32_t _9357_ = _1074_nelem;
      for (int32_t _1098_i = _9356_; _1098_i < _9357_; ++_1098_i)
      {
        {
          if ((_ptr__1070_conidxs[_1098_i] >= (int)0))
          {
            {
              _1097_lnnz += (_ptr__1085_wi32[safe_add( safe_add( _1078_ptr_base,_1098_i ),(int)1 )] - _ptr__1085_wi32[safe_add( _1078_ptr_base,_1098_i )]);
            }
          }
          else
          {
            {
              _1096_cnnz += (_ptr__1085_wi32[safe_add( safe_add( _1078_ptr_base,_1098_i ),(int)1 )] - _ptr__1085_wi32[safe_add( _1078_ptr_base,_1098_i )]);
            }
          }
        }
      }
      int32_t _1099_lrowidx = xs->alloci32(_1088_num_lincon);
      int32_t _1100_crowidx = xs->alloci32(_1090_num_concon);
      int32_t _1101_lptr = xs->alloci32(safe_add( _1088_num_lincon,(int)1 ));
      int32_t _1102_cptr = xs->alloci32(safe_add( _1090_num_concon,(int)1 ));
      int32_t _1103_lnidxs = xs->alloci64(_1097_lnnz);
      int32_t _1104_cnidxs = xs->alloci64(_1096_cnnz);
      int32_t _1105_lcof = xs->allocf64(_1097_lnnz);
      int32_t _1106_ccof = xs->allocf64(_1096_cnnz);
      std::shared_ptr< monty::ndarray< double,1 > > _1107_xf64 = mosek::fusion::p_WorkStack::_get_impl(xs)->f64;
      _checked_ptr_1<double> _ptr__1107_xf64(_1107_xf64 ? _1107_xf64->raw() : nullptr,_1107_xf64 ? _1107_xf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1108_xi64 = mosek::fusion::p_WorkStack::_get_impl(xs)->i64;
      _checked_ptr_1<int64_t> _ptr__1108_xi64(_1108_xi64 ? _1108_xi64->raw() : nullptr,_1108_xi64 ? _1108_xi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1109_xi32 = mosek::fusion::p_WorkStack::_get_impl(xs)->i32;
      _checked_ptr_1<int32_t> _ptr__1109_xi32(_1109_xi32 ? _1109_xi32->raw() : nullptr,_1109_xi32 ? _1109_xi32->size(0) : 0);
      _ptr__1109_xi32[_1101_lptr] = (int)0;
      _ptr__1109_xi32[_1102_cptr] = (int)0;
      int32_t _1110_ci = (int)0;
      int32_t _1111_li = (int)0;
      int32_t _1112_cnzi = (int)0;
      int32_t _1113_lnzi = (int)0;
      int32_t _9358_ = (int)0;
      int32_t _9359_ = _1074_nelem;
      for (int32_t _1114_i = _9358_; _1114_i < _9359_; ++_1114_i)
      {
        {
          int32_t _1115_pb = _ptr__1085_wi32[safe_add( _1078_ptr_base,_1114_i )];
          int32_t _1116_pe = _ptr__1085_wi32[safe_add( safe_add( _1078_ptr_base,_1114_i ),(int)1 )];
          if ((_ptr__1070_conidxs[_1114_i] >= (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1086_wi64,safe_add( _1080_nidxs_base,_1115_pb ),_1108_xi64,safe_add( _1103_lnidxs,_1113_lnzi ),(_1116_pe - _1115_pb));
              ::mosek::fusion::Utils::Tools::arraycopy(_1087_wf64,safe_add( _1081_cof_base,_1115_pb ),_1107_xf64,safe_add( _1105_lcof,_1113_lnzi ),(_1116_pe - _1115_pb));
              _1113_lnzi += (_1116_pe - _1115_pb);
              _ptr__1109_xi32[safe_add( _1099_lrowidx,_1111_li )] = _ptr__1070_conidxs[_1114_i];
              _ptr__1109_xi32[safe_add( safe_add( _1101_lptr,_1111_li ),(int)1 )] = _1113_lnzi;
              ++ _1111_li;
            }
          }
          else
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1086_wi64,safe_add( _1080_nidxs_base,_1115_pb ),_1108_xi64,safe_add( _1104_cnidxs,_1112_cnzi ),(_1116_pe - _1115_pb));
              ::mosek::fusion::Utils::Tools::arraycopy(_1087_wf64,safe_add( _1081_cof_base,_1115_pb ),_1107_xf64,safe_add( _1106_ccof,_1112_cnzi ),(_1116_pe - _1115_pb));
              _1112_cnzi += (_1116_pe - _1115_pb);
              _ptr__1109_xi32[safe_add( _1100_crowidx,_1110_ci )] = (-safe_add( (int)1,_ptr__1070_conidxs[_1114_i] ));
              _ptr__1109_xi32[safe_add( safe_add( _1102_cptr,_1110_ci ),(int)1 )] = _1112_cnzi;
              ++ _1110_ci;
            }
          }
        }
      }
      std::vector<int32_t> _9360_;
      for (int32_t _1117_i = (int)0, _9361_ = _1088_num_lincon; _1117_i < _9361_ ; ++_1117_i)
      {
        _9360_.push_back(_ptr__1109_xi32[safe_add( _1099_lrowidx,_1117_i )]);
      }
      auto _9362_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9360_.size()),_9360_.begin(),_9360_.end()));
      putarows(_9362_,xs,_1088_num_lincon,_1097_lnnz,_1101_lptr,_1103_lnidxs,_1105_lcof);
      putfrows(_1109_xi32,_1100_crowidx,xs,_1090_num_concon,_1096_cnnz,_1102_cptr,_1104_cnidxs,_1106_ccof);
      if ((_1077_ncodeatom > (int)0))
      {
        {
          int32_t _9363_ = (int)0;
          int32_t _9364_ = _1074_nelem;
          for (int32_t _1118_i = _9363_; _1118_i < _9364_; ++_1118_i)
          {
            {
              if ((_ptr__1070_conidxs[_1118_i] >= (int)0))
              {
                {
                  _1095_lncodeelm += (_ptr__1085_wi32[safe_add( _1083_codeptr,_ptr__1085_wi32[safe_add( safe_add( _1078_ptr_base,_1118_i ),(int)1 )] )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_ptr__1085_wi32[safe_add( _1078_ptr_base,_1118_i )] )]);
                }
              }
              else
              {
                {
                  _1094_cncodeelm += (_ptr__1085_wi32[safe_add( _1083_codeptr,_ptr__1085_wi32[safe_add( safe_add( _1078_ptr_base,_1118_i ),(int)1 )] )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_ptr__1085_wi32[safe_add( _1078_ptr_base,_1118_i )] )]);
                }
              }
            }
          }
          int32_t _1119_lcodeptr = xs->alloci32(safe_add( _1097_lnnz,(int)1 ));
          int32_t _1120_ccodeptr = xs->alloci32(safe_add( _1096_cnnz,(int)1 ));
          int32_t _1121_lcode = xs->alloci32(_1095_lncodeelm);
          int32_t _1122_ccode = xs->alloci32(_1094_cncodeelm);
          int32_t _1123_lcconst = xs->allocf64(_1095_lncodeelm);
          int32_t _1124_ccconst = xs->allocf64(_1094_cncodeelm);
          _ptr__1109_xi32[_1119_lcodeptr] = (int)0;
          _ptr__1109_xi32[_1120_ccodeptr] = (int)0;
          int32_t _1125_ccodei = (int)0;
          int32_t _1126_lcodei = (int)0;
          int32_t _1127_rnzi = (int)0;
          int32_t _1128_lnzi = (int)0;
          int32_t _9365_ = (int)0;
          int32_t _9366_ = _1074_nelem;
          for (int32_t _1129_i = _9365_; _1129_i < _9366_; ++_1129_i)
          {
            {
              int32_t _1130_pb = _ptr__1085_wi32[safe_add( _1078_ptr_base,_1129_i )];
              int32_t _1131_pe = _ptr__1085_wi32[safe_add( safe_add( _1078_ptr_base,_1129_i ),(int)1 )];
              if ((_ptr__1070_conidxs[_1129_i] >= (int)0))
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1085_wi32,safe_add( _1082_code,_ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )] ),_1109_xi32,safe_add( _1121_lcode,_1126_lcodei ),(_ptr__1085_wi32[safe_add( _1083_codeptr,_1131_pe )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1087_wf64,safe_add( _1084_cconst,_ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )] ),_1107_xf64,safe_add( _1123_lcconst,_1126_lcodei ),(_ptr__1085_wi32[safe_add( _1083_codeptr,_1131_pe )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )]));
                  int32_t _9367_ = _1130_pb;
                  int32_t _9368_ = _1131_pe;
                  for (int32_t _1132_j = _9367_; _1132_j < _9368_; ++_1132_j)
                  {
                    {
                      _1126_lcodei += (_ptr__1085_wi32[safe_add( safe_add( _1083_codeptr,_1132_j ),(int)1 )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_1132_j )]);
                      _ptr__1109_xi32[safe_add( safe_add( _1119_lcodeptr,_1128_lnzi ),(int)1 )] = _1126_lcodei;
                      ++ _1128_lnzi;
                    }
                  }
                }
              }
              else
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1085_wi32,safe_add( _1082_code,_ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )] ),_1109_xi32,safe_add( _1122_ccode,_1125_ccodei ),(_ptr__1085_wi32[safe_add( _1083_codeptr,_1131_pe )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1087_wf64,safe_add( _1084_cconst,_ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )] ),_1107_xf64,safe_add( _1124_ccconst,_1125_ccodei ),(_ptr__1085_wi32[safe_add( _1083_codeptr,_1131_pe )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_1130_pb )]));
                  int32_t _9369_ = _1130_pb;
                  int32_t _9370_ = _1131_pe;
                  for (int32_t _1133_j = _9369_; _1133_j < _9370_; ++_1133_j)
                  {
                    {
                      _1125_ccodei += (_ptr__1085_wi32[safe_add( safe_add( _1083_codeptr,_1133_j ),(int)1 )] - _ptr__1085_wi32[safe_add( _1083_codeptr,_1133_j )]);
                      _ptr__1109_xi32[safe_add( safe_add( _1120_ccodeptr,_1112_cnzi ),(int)1 )] = _1125_ccodei;
                      ++ _1112_cnzi;
                    }
                  }
                }
              }
            }
          }
          std::vector<int32_t> _9371_;
          for (int32_t _1134_i = (int)0, _9372_ = _1088_num_lincon; _1134_i < _9372_ ; ++_1134_i)
          {
            _9371_.push_back(_ptr__1109_xi32[safe_add( _1099_lrowidx,_1134_i )]);
          }
          auto _9373_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9371_.size()),_9371_.begin(),_9371_.end()));
          con_blocks->replace_row_code(xs,_9373_,_1101_lptr,_1103_lnidxs,_1119_lcodeptr,_1121_lcode,_1123_lcconst);
          std::vector<int32_t> _9374_;
          for (int32_t _1135_i = (int)0, _9375_ = _1090_num_concon; _1135_i < _9375_ ; ++_1135_i)
          {
            _9374_.push_back((int32_t)_ptr__1108_xi64[safe_add( _1100_crowidx,_1135_i )]);
          }
          auto _9376_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9374_.size()),_9374_.begin(),_9374_.end()));
          afe_blocks->replace_row_code(xs,_9376_,_1102_cptr,_1104_cnidxs,_1120_ccodeptr,_1122_ccode,_1124_ccconst);
        }
      }
      else
      {
        {
          std::vector<int32_t> _9377_;
          for (int32_t _1136_i = (int)0, _9378_ = _1088_num_lincon; _1136_i < _9378_ ; ++_1136_i)
          {
            _9377_.push_back(_ptr__1109_xi32[safe_add( _1099_lrowidx,_1136_i )]);
          }
          auto _9379_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9377_.size()),_9377_.begin(),_9377_.end()));
          con_blocks->clear_row_code(_9379_);
          std::vector<int32_t> _9380_;
          for (int32_t _1137_i = (int)0, _9381_ = _1090_num_concon; _1137_i < _9381_ ; ++_1137_i)
          {
            _9380_.push_back((int32_t)_ptr__1108_xi64[safe_add( _1100_crowidx,_1137_i )]);
          }
          auto _9382_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9380_.size()),_9380_.begin(),_9380_.end()));
          afe_blocks->clear_row_code(_9382_);
        }
      }
    }
  }
  xs->clear();
}
// End mosek.fusion.Model.update

// Begin mosek.fusion.Model.update
// Method mosek.fusion.Model.update @ src/fusion/Model.mbi:2917:6-3128:7
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int32_t,1 > > _1138_conidxs,monty::rc_ptr< ::mosek::fusion::Expression > _1139_expr,std::shared_ptr< monty::ndarray< int32_t,1 > > _1140_varidxs)
{
  _checked_ptr_1<int32_t> _ptr__1138_conidxs(_1138_conidxs ? _1138_conidxs->raw() : nullptr, _1138_conidxs ? _1138_conidxs->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1140_varidxs(_1140_varidxs ? _1140_varidxs->raw() : nullptr, _1140_varidxs ? _1140_varidxs->size(0) : 0);
  int32_t _9383_ = (int)0;
  int32_t _9384_ = (int)((_1138_conidxs)->size(0));
  for (int32_t _1141_i = _9383_; _1141_i < _9384_; ++_1141_i)
  {
    {
      if (((_ptr__1138_conidxs[_1141_i] >= (int)0) && con_blocks->row_is_parameterized(_1141_i)))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      else if(((_ptr__1138_conidxs[_1141_i] < (int)0) && con_blocks->row_is_parameterized((-safe_add( _1141_i,(int)1 )))))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      {}
    }
  }
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1139_expr)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int32_t _1142_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1143_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1144_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1145_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1146_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1147_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1148_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1149_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1150_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1151_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1152_code = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1153_codeptr = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1154_cconst = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1155_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1155_wi32(_1155_wi32 ? _1155_wi32->raw() : nullptr,_1155_wi32 ? _1155_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1156_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1156_wi64(_1156_wi64 ? _1156_wi64->raw() : nullptr,_1156_wi64 ? _1156_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1157_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1157_wf64(_1157_wf64 ? _1157_wf64->raw() : nullptr,_1157_wf64 ? _1157_wf64->size(0) : 0);
  int32_t _1158_num_lincon = (int)0;
  int32_t _9385_ = (int)0;
  int32_t _9386_ = _1143_nelem;
  for (int32_t _1159_i = _9385_; _1159_i < _9386_; ++_1159_i)
  {
    {
      if ((_ptr__1138_conidxs[_1159_i] >= (int)0))
      {
        {
          ++ _1158_num_lincon;
        }
      }
      {}
    }
  }
  int32_t _1160_num_concon = (_1143_nelem - _1158_num_lincon);
  if (((_1158_num_lincon == _1143_nelem) || (_1160_num_concon == _1143_nelem)))
  {
    {
      int32_t _1161_N = safe_mul( (int)((_1138_conidxs)->size(0)),(int)((_1140_varidxs)->size(0)) );
      std::shared_ptr< monty::ndarray< double,1 > > _1162_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1161_N)));
      _checked_ptr_1<double> _ptr__1162_cof(_1162_cof ? _1162_cof->raw() : nullptr,_1162_cof ? _1162_cof->size(0) : 0);
      int32_t _1163_nzi = (int)0;
      int32_t _9387_ = (int)0;
      int32_t _9388_ = _1143_nelem;
      for (int32_t _1164_i = _9387_; _1164_i < _9388_; ++_1164_i)
      {
        {
          int32_t _1165_p0 = _ptr__1155_wi32[safe_add( _1148_ptr_base,_1164_i )];
          int32_t _1166_p1 = _ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1164_i ),(int)1 )];
          int32_t _1167_p = _1165_p0;
          int32_t _1168_l = (int)0;
          while ( ((_1168_l < (int)((_1140_varidxs)->size(0))) && (_1167_p < _1166_p1)) )
          {
            {
              if ((_ptr__1140_varidxs[_1168_l] < _ptr__1156_wi64[safe_add( _1150_nidxs_base,_1167_p )]))
              {
                {
                  ++ _1168_l;
                }
              }
              else if((_ptr__1140_varidxs[_1168_l] > _ptr__1156_wi64[safe_add( _1150_nidxs_base,_1167_p )]))
              {
                {
                  ++ _1167_p;
                }
              }
              else
              {
                {
                  _ptr__1162_cof[safe_add( _1163_nzi,_1168_l )] = _ptr__1157_wf64[safe_add( _1151_cof_base,_1167_p )];
                  ++ _1168_l;
                  ++ _1167_p;
                }
              }
            }
          }
          _1163_nzi += (int)((_1140_varidxs)->size(0));
        }
      }
      std::vector<int32_t> _9389_;
      for (int32_t _1170_i = (int)0, _9390_ = _1143_nelem; _1170_i < _9390_ ; ++_1170_i)
      {
        for (int32_t _1171_j = (int)0, _9391_ = (int)((_1140_varidxs)->size(0)); _1171_j < _9391_ ; ++_1171_j)
        {
          _9389_.push_back(_ptr__1140_varidxs[_1171_j]);
        }
      }
      auto _9392_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9389_.size()),_9389_.begin(),_9389_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1169_subj = _9392_;
      _checked_ptr_1<int32_t> _ptr__1169_subj(_1169_subj ? _1169_subj->raw() : nullptr,_1169_subj ? _1169_subj->size(0) : 0);
      if ((_1158_num_lincon == _1143_nelem))
      {
        {
          std::vector<int32_t> _9393_;
          for (int32_t _1173_i = (int)0, _9394_ = _1143_nelem; _1173_i < _9394_ ; ++_1173_i)
          {
            for (int32_t _1174_j = (int)0, _9395_ = (int)((_1140_varidxs)->size(0)); _1174_j < _9395_ ; ++_1174_j)
            {
              _9393_.push_back(_ptr__1138_conidxs[_1173_i]);
            }
          }
          auto _9396_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9393_.size()),_9393_.begin(),_9393_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1172_subi = _9396_;
          _checked_ptr_1<int32_t> _ptr__1172_subi(_1172_subi ? _1172_subi->raw() : nullptr,_1172_subi ? _1172_subi->size(0) : 0);
          task_putaijlist(_1172_subi,_1169_subj,_1162_cof,(int64_t)(_1163_nzi));
          if ((_1146_ncodeatom > (int)0))
          {
            {
              con_blocks->replace_row_code(rs,_1138_conidxs,_1148_ptr_base,_1150_nidxs_base,_1153_codeptr,_1152_code,_1154_cconst);
            }
          }
          {}
        }
      }
      else
      {
        {
          std::vector<int32_t> _9397_;
          for (int32_t _1176_i = (int)0, _9398_ = _1143_nelem; _1176_i < _9398_ ; ++_1176_i)
          {
            for (int32_t _1177_j = (int)0, _9399_ = (int)((_1140_varidxs)->size(0)); _1177_j < _9399_ ; ++_1177_j)
            {
              _9397_.push_back((-safe_add( _ptr__1138_conidxs[_1176_i],(int)1 )));
            }
          }
          auto _9400_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9397_.size()),_9397_.begin(),_9397_.end()));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1175_subi = _9400_;
          _checked_ptr_1<int32_t> _ptr__1175_subi(_1175_subi ? _1175_subi->raw() : nullptr,_1175_subi ? _1175_subi->size(0) : 0);
          task_putafefijlist(_1175_subi,_1169_subj,_1162_cof);
          if ((_1146_ncodeatom > (int)0))
          {
            {
              std::vector<int32_t> _9401_;
              for (int32_t _1178_i = (int)0, _9402_ = _1143_nelem; _1178_i < _9402_ ; ++_1178_i)
              {
                _9401_.push_back((-safe_add( (int)1,_ptr__1138_conidxs[_1178_i] )));
              }
              auto _9403_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9401_.size()),_9401_.begin(),_9401_.end()));
              afe_blocks->replace_row_code(rs,_9403_,_1148_ptr_base,_1150_nidxs_base,_1153_codeptr,_1152_code,_1154_cconst);
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _1179_cN = safe_mul( _1160_num_concon,(int)((_1140_varidxs)->size(0)) );
      int32_t _1180_lN = safe_mul( _1158_num_lincon,(int)((_1140_varidxs)->size(0)) );
      std::shared_ptr< monty::ndarray< double,1 > > _1181_lcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1180_lN)));
      _checked_ptr_1<double> _ptr__1181_lcof(_1181_lcof ? _1181_lcof->raw() : nullptr,_1181_lcof ? _1181_lcof->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1182_ccof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1179_cN)));
      _checked_ptr_1<double> _ptr__1182_ccof(_1182_ccof ? _1182_ccof->raw() : nullptr,_1182_ccof ? _1182_ccof->size(0) : 0);
      std::vector<int32_t> _9404_;
      for (int32_t _1184_i = (int)0, _9405_ = _1158_num_lincon; _1184_i < _9405_ ; ++_1184_i)
      {
        for (int32_t _1185_j = (int)0, _9406_ = (int)((_1140_varidxs)->size(0)); _1185_j < _9406_ ; ++_1185_j)
        {
          _9404_.push_back(_ptr__1140_varidxs[_1185_j]);
        }
      }
      auto _9407_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9404_.size()),_9404_.begin(),_9404_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1183_lsubj = _9407_;
      _checked_ptr_1<int32_t> _ptr__1183_lsubj(_1183_lsubj ? _1183_lsubj->raw() : nullptr,_1183_lsubj ? _1183_lsubj->size(0) : 0);
      std::vector<int32_t> _9408_;
      for (int32_t _1187_i = (int)0, _9409_ = _1160_num_concon; _1187_i < _9409_ ; ++_1187_i)
      {
        for (int32_t _1188_j = (int)0, _9410_ = (int)((_1140_varidxs)->size(0)); _1188_j < _9410_ ; ++_1188_j)
        {
          _9408_.push_back(_ptr__1140_varidxs[_1188_j]);
        }
      }
      auto _9411_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9408_.size()),_9408_.begin(),_9408_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1186_csubj = _9411_;
      _checked_ptr_1<int32_t> _ptr__1186_csubj(_1186_csubj ? _1186_csubj->raw() : nullptr,_1186_csubj ? _1186_csubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1189_lsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1158_num_lincon)));
      _checked_ptr_1<int32_t> _ptr__1189_lsubi(_1189_lsubi ? _1189_lsubi->raw() : nullptr,_1189_lsubi ? _1189_lsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1190_csubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1160_num_concon)));
      _checked_ptr_1<int32_t> _ptr__1190_csubi(_1190_csubi ? _1190_csubi->raw() : nullptr,_1190_csubi ? _1190_csubi->size(0) : 0);
      int32_t _1191_crowi = (int)0;
      int32_t _1192_lrowi = (int)0;
      int32_t _1193_cncodeelm = (int)0;
      int32_t _1194_lncodeelm = (int)0;
      int32_t _1195_cnnz = (int)0;
      int32_t _1196_lnnz = (int)0;
      int32_t _9412_ = (int)0;
      int32_t _9413_ = _1143_nelem;
      for (int32_t _1197_i = _9412_; _1197_i < _9413_; ++_1197_i)
      {
        {
          int32_t _1198_p0 = _ptr__1155_wi32[safe_add( _1148_ptr_base,_1197_i )];
          int32_t _1199_p1 = _ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1197_i ),(int)1 )];
          int32_t _1200_p = _1198_p0;
          int32_t _1201_l = (int)0;
          if ((_ptr__1138_conidxs[_1197_i] >= (int)0))
          {
            {
              while ( ((_1201_l < (int)((_1140_varidxs)->size(0))) && (_1200_p < _1199_p1)) )
              {
                {
                  if ((_ptr__1140_varidxs[_1201_l] < _ptr__1156_wi64[safe_add( _1150_nidxs_base,_1200_p )]))
                  {
                    {
                      ++ _1201_l;
                    }
                  }
                  else if((_ptr__1140_varidxs[_1201_l] > _ptr__1156_wi64[safe_add( _1150_nidxs_base,_1200_p )]))
                  {
                    {
                      ++ _1200_p;
                    }
                  }
                  else
                  {
                    {
                      _ptr__1181_lcof[safe_add( _1196_lnnz,_1201_l )] = _ptr__1157_wf64[safe_add( _1151_cof_base,_1200_p )];
                      ++ _1201_l;
                      ++ _1200_p;
                    }
                  }
                }
              }
              int32_t _9414_ = (int)0;
              int32_t _9415_ = (int)((_1140_varidxs)->size(0));
              for (int32_t _1202_j = _9414_; _1202_j < _9415_; ++_1202_j)
              {
                {
                  _ptr__1189_lsubi[safe_add( _1196_lnnz,_1202_j )] = _ptr__1138_conidxs[_1197_i];
                }
              }
              _1196_lnnz += (int)((_1140_varidxs)->size(0));
            }
          }
          else
          {
            {
              while ( ((_1201_l < (int)((_1140_varidxs)->size(0))) && (_1200_p < _1199_p1)) )
              {
                {
                  if ((_ptr__1140_varidxs[_1201_l] < _ptr__1156_wi64[safe_add( _1150_nidxs_base,_1200_p )]))
                  {
                    {
                      ++ _1201_l;
                    }
                  }
                  else if((_ptr__1140_varidxs[_1201_l] > _ptr__1156_wi64[safe_add( _1150_nidxs_base,_1200_p )]))
                  {
                    {
                      ++ _1200_p;
                    }
                  }
                  else
                  {
                    {
                      _ptr__1182_ccof[safe_add( _1195_cnnz,_1201_l )] = _ptr__1157_wf64[safe_add( _1151_cof_base,_1200_p )];
                      ++ _1201_l;
                      ++ _1200_p;
                    }
                  }
                }
              }
              int32_t _9416_ = (int)0;
              int32_t _9417_ = (int)((_1140_varidxs)->size(0));
              for (int32_t _1203_j = _9416_; _1203_j < _9417_; ++_1203_j)
              {
                {
                  _ptr__1190_csubi[safe_add( _1195_cnnz,_1203_j )] = (-safe_add( (int)1,_ptr__1138_conidxs[_1197_i] ));
                }
              }
              _1195_cnnz += (int)((_1140_varidxs)->size(0));
            }
          }
        }
      }
      task_putaijlist(_1189_lsubi,_1183_lsubj,_1181_lcof,(int64_t)(_1196_lnnz));
      task_putafefijlist(_1190_csubi,_1186_csubj,_1182_ccof);
      if ((_1146_ncodeatom > (int)0))
      {
        {
          int32_t _9418_ = (int)0;
          int32_t _9419_ = _1143_nelem;
          for (int32_t _1204_i = _9418_; _1204_i < _9419_; ++_1204_i)
          {
            {
              if ((_ptr__1138_conidxs[_1204_i] >= (int)0))
              {
                {
                  _1196_lnnz += (_ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1204_i ),(int)1 )] - _ptr__1155_wi32[safe_add( _1148_ptr_base,_1204_i )]);
                }
              }
              else
              {
                {
                  _1195_cnnz += (_ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1204_i ),(int)1 )] - _ptr__1155_wi32[safe_add( _1148_ptr_base,_1204_i )]);
                }
              }
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1205_lrowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1158_num_lincon)));
          _checked_ptr_1<int32_t> _ptr__1205_lrowidx(_1205_lrowidx ? _1205_lrowidx->raw() : nullptr,_1205_lrowidx ? _1205_lrowidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1206_crowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1160_num_concon)));
          _checked_ptr_1<int32_t> _ptr__1206_crowidx(_1206_crowidx ? _1206_crowidx->raw() : nullptr,_1206_crowidx ? _1206_crowidx->size(0) : 0);
          int32_t _1207_lptr = xs->alloci32(safe_add( _1158_num_lincon,(int)1 ));
          int32_t _1208_cptr = xs->alloci32(safe_add( _1160_num_concon,(int)1 ));
          int32_t _1209_lnidxs = xs->alloci64(_1196_lnnz);
          int32_t _1210_cnidxs = xs->alloci64(_1195_cnnz);
          std::shared_ptr< monty::ndarray< double,1 > > _1211_xf64 = mosek::fusion::p_WorkStack::_get_impl(xs)->f64;
          _checked_ptr_1<double> _ptr__1211_xf64(_1211_xf64 ? _1211_xf64->raw() : nullptr,_1211_xf64 ? _1211_xf64->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _1212_xi64 = mosek::fusion::p_WorkStack::_get_impl(xs)->i64;
          _checked_ptr_1<int64_t> _ptr__1212_xi64(_1212_xi64 ? _1212_xi64->raw() : nullptr,_1212_xi64 ? _1212_xi64->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1213_xi32 = mosek::fusion::p_WorkStack::_get_impl(xs)->i32;
          _checked_ptr_1<int32_t> _ptr__1213_xi32(_1213_xi32 ? _1213_xi32->raw() : nullptr,_1213_xi32 ? _1213_xi32->size(0) : 0);
          _ptr__1213_xi32[_1207_lptr] = (int)0;
          _ptr__1213_xi32[_1208_cptr] = (int)0;
          int32_t _1214_ci = (int)0;
          int32_t _1215_li = (int)0;
          int32_t _1216_cnzi = (int)0;
          int32_t _1217_lnzi = (int)0;
          int32_t _9420_ = (int)0;
          int32_t _9421_ = _1143_nelem;
          for (int32_t _1218_i = _9420_; _1218_i < _9421_; ++_1218_i)
          {
            {
              int32_t _1219_pb = _ptr__1155_wi32[safe_add( _1148_ptr_base,_1218_i )];
              int32_t _1220_pe = _ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1218_i ),(int)1 )];
              if ((_ptr__1138_conidxs[_1218_i] >= (int)0))
              {
                {
                  _1217_lnzi += (_1220_pe - _1219_pb);
                  _ptr__1205_lrowidx[_1215_li] = _ptr__1138_conidxs[_1218_i];
                  _ptr__1213_xi32[safe_add( safe_add( _1207_lptr,_1215_li ),(int)1 )] = _1217_lnzi;
                  ++ _1215_li;
                }
              }
              else
              {
                {
                  _1216_cnzi += (_1220_pe - _1219_pb);
                  _ptr__1206_crowidx[_1214_ci] = (-safe_add( (int)1,_ptr__1138_conidxs[_1218_i] ));
                  _ptr__1213_xi32[safe_add( safe_add( _1208_cptr,_1214_ci ),(int)1 )] = _1216_cnzi;
                  ++ _1214_ci;
                }
              }
            }
          }
          int32_t _9422_ = (int)0;
          int32_t _9423_ = _1143_nelem;
          for (int32_t _1221_i = _9422_; _1221_i < _9423_; ++_1221_i)
          {
            {
              if ((_ptr__1138_conidxs[_1221_i] >= (int)0))
              {
                {
                  _1194_lncodeelm += (_ptr__1155_wi32[safe_add( _1153_codeptr,_ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1221_i ),(int)1 )] )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_ptr__1155_wi32[safe_add( _1148_ptr_base,_1221_i )] )]);
                }
              }
              else
              {
                {
                  _1193_cncodeelm += (_ptr__1155_wi32[safe_add( _1153_codeptr,_ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1221_i ),(int)1 )] )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_ptr__1155_wi32[safe_add( _1148_ptr_base,_1221_i )] )]);
                }
              }
            }
          }
          int32_t _1222_lcodeptr = xs->alloci32(safe_add( _1196_lnnz,(int)1 ));
          int32_t _1223_ccodeptr = xs->alloci32(safe_add( _1195_cnnz,(int)1 ));
          int32_t _1224_lcode = xs->alloci32(_1194_lncodeelm);
          int32_t _1225_ccode = xs->alloci32(_1193_cncodeelm);
          int32_t _1226_lcconst = xs->allocf64(_1194_lncodeelm);
          int32_t _1227_ccconst = xs->allocf64(_1193_cncodeelm);
          _ptr__1213_xi32[_1222_lcodeptr] = (int)0;
          _ptr__1213_xi32[_1223_ccodeptr] = (int)0;
          int32_t _1228_ccodei = (int)0;
          int32_t _1229_lcodei = (int)0;
          int32_t _1230_rnzi = (int)0;
          int32_t _1231_lnzi = (int)0;
          int32_t _9424_ = (int)0;
          int32_t _9425_ = _1143_nelem;
          for (int32_t _1232_i = _9424_; _1232_i < _9425_; ++_1232_i)
          {
            {
              int32_t _1233_pb = _ptr__1155_wi32[safe_add( _1148_ptr_base,_1232_i )];
              int32_t _1234_pe = _ptr__1155_wi32[safe_add( safe_add( _1148_ptr_base,_1232_i ),(int)1 )];
              if ((_ptr__1138_conidxs[_1232_i] >= (int)0))
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1155_wi32,safe_add( _1152_code,_ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )] ),_1213_xi32,safe_add( _1224_lcode,_1229_lcodei ),(_ptr__1155_wi32[safe_add( _1153_codeptr,_1234_pe )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1157_wf64,safe_add( _1154_cconst,_ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )] ),_1211_xf64,safe_add( _1226_lcconst,_1229_lcodei ),(_ptr__1155_wi32[safe_add( _1153_codeptr,_1234_pe )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )]));
                  int32_t _9426_ = _1233_pb;
                  int32_t _9427_ = _1234_pe;
                  for (int32_t _1235_j = _9426_; _1235_j < _9427_; ++_1235_j)
                  {
                    {
                      _1229_lcodei += (_ptr__1155_wi32[safe_add( safe_add( _1153_codeptr,_1235_j ),(int)1 )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_1235_j )]);
                      _ptr__1213_xi32[safe_add( safe_add( _1222_lcodeptr,_1231_lnzi ),(int)1 )] = _1229_lcodei;
                      ++ _1231_lnzi;
                    }
                  }
                }
              }
              else
              {
                {
                  ::mosek::fusion::Utils::Tools::arraycopy(_1155_wi32,safe_add( _1152_code,_ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )] ),_1213_xi32,safe_add( _1225_ccode,_1228_ccodei ),(_ptr__1155_wi32[safe_add( _1153_codeptr,_1234_pe )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )]));
                  ::mosek::fusion::Utils::Tools::arraycopy(_1157_wf64,safe_add( _1154_cconst,_ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )] ),_1211_xf64,safe_add( _1227_ccconst,_1228_ccodei ),(_ptr__1155_wi32[safe_add( _1153_codeptr,_1234_pe )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_1233_pb )]));
                  int32_t _9428_ = _1233_pb;
                  int32_t _9429_ = _1234_pe;
                  for (int32_t _1236_j = _9428_; _1236_j < _9429_; ++_1236_j)
                  {
                    {
                      _1228_ccodei += (_ptr__1155_wi32[safe_add( safe_add( _1153_codeptr,_1236_j ),(int)1 )] - _ptr__1155_wi32[safe_add( _1153_codeptr,_1236_j )]);
                      _ptr__1213_xi32[safe_add( safe_add( _1223_ccodeptr,_1216_cnzi ),(int)1 )] = _1228_ccodei;
                      ++ _1216_cnzi;
                    }
                  }
                }
              }
            }
          }
          con_blocks->replace_row_code(xs,_1205_lrowidx,_1207_lptr,_1209_lnidxs,_1222_lcodeptr,_1224_lcode,_1226_lcconst);
          afe_blocks->replace_row_code(xs,_1206_crowidx,_1208_cptr,_1210_cnidxs,_1223_ccodeptr,_1225_ccode,_1227_ccconst);
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1237_lrowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1158_num_lincon)));
          _checked_ptr_1<int32_t> _ptr__1237_lrowidx(_1237_lrowidx ? _1237_lrowidx->raw() : nullptr,_1237_lrowidx ? _1237_lrowidx->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1238_crowidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1160_num_concon)));
          _checked_ptr_1<int32_t> _ptr__1238_crowidx(_1238_crowidx ? _1238_crowidx->raw() : nullptr,_1238_crowidx ? _1238_crowidx->size(0) : 0);
          int32_t _1239_ci = (int)0;
          int32_t _1240_li = (int)0;
          int32_t _9430_ = (int)0;
          int32_t _9431_ = _1143_nelem;
          for (int32_t _1241_i = _9430_; _1241_i < _9431_; ++_1241_i)
          {
            {
              if ((_ptr__1138_conidxs[_1241_i] >= (int)0))
              {
                {
                  _ptr__1237_lrowidx[_1240_li] = _ptr__1138_conidxs[_1241_i];
                  ++ _1240_li;
                }
              }
              else
              {
                {
                  _ptr__1238_crowidx[_1239_ci] = (-safe_add( (int)1,_ptr__1138_conidxs[_1241_i] ));
                  ++ _1239_ci;
                }
              }
            }
          }
          con_blocks->clear_row_code(_1237_lrowidx);
          afe_blocks->clear_row_code(_1238_crowidx);
        }
      }
    }
  }
  xs->clear();
}
// End mosek.fusion.Model.update

// Begin mosek.fusion.Model.updateObjective
// Method mosek.fusion.Model.updateObjective @ src/fusion/Model.mbi:2829:6-2912:7
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _1242_expr,monty::rc_ptr< ::mosek::fusion::Variable > _1243_x) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_1242_expr,_1243_x); }
void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _1242_expr,monty::rc_ptr< ::mosek::fusion::Variable > _1243_x)
{
  if ((_1242_expr->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((mosek::fusion::p_RowBlockManager::_get_impl(obj_blocks)->code_used > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
    }
  }
  {}
  int32_t _1244_ni = _1243_x->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1245_varidxs_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1244_ni)));
  _checked_ptr_1<int64_t> _ptr__1245_varidxs_(_1245_varidxs_ ? _1245_varidxs_->raw() : nullptr,_1245_varidxs_ ? _1245_varidxs_->size(0) : 0);
  if ((_1244_ni < _1243_x->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1246_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1244_ni)));
      _checked_ptr_1<int64_t> _ptr__1246_sp(_1246_sp ? _1246_sp->raw() : nullptr,_1246_sp ? _1246_sp->size(0) : 0);
      _1243_x->inst((int)0,_1246_sp,(int)0,_1245_varidxs_);
    }
  }
  else
  {
    {
      _1243_x->inst((int)0,_1245_varidxs_);
    }
  }
  int32_t _9432_ = (int)0;
  int32_t _9433_ = _1244_ni;
  for (int32_t _1247_i = _9432_; _1247_i < _9433_; ++_1247_i)
  {
    {
      if ((_ptr__1245_varidxs_[_1247_i] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _1248_varidxs_issorted = true;
  int32_t _9434_ = (int)0;
  int32_t _9435_ = (_1244_ni - (int)1);
  for (int32_t _1249_i = _9434_; _1249_i < _9435_; ++_1249_i)
  {
    {
      _1248_varidxs_issorted = (_1248_varidxs_issorted && (_ptr__1245_varidxs_[_1249_i] < _ptr__1245_varidxs_[(_1249_i - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1250_varidxs = nullptr;
  _checked_ptr_1<int32_t> _ptr__1250_varidxs(_1250_varidxs ? _1250_varidxs->raw() : nullptr,_1250_varidxs ? _1250_varidxs->size(0) : 0);
  if (_1248_varidxs_issorted)
  {
    {
      std::vector<int32_t> _9436_;
      for (int32_t _1251_i = (int)0, _9437_ = _1244_ni; _1251_i < _9437_ ; ++_1251_i)
      {
        _9436_.push_back((int32_t)_ptr__1245_varidxs_[_1251_i]);
      }
      auto _9438_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9436_.size()),_9436_.begin(),_9436_.end()));
      _1250_varidxs = _9438_;
      _ptr__1250_varidxs.update(_1250_varidxs ? _1250_varidxs->raw() : nullptr, _1250_varidxs ? _1250_varidxs->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<int64_t> _9439_;
      for (int32_t _1253_i = (-(int)1), _9440_ = _1244_ni; _1253_i < _9440_ ; ++_1253_i)
      {
        _9439_.push_back(_1253_i);
      }
      auto _9441_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9439_.size()),_9439_.begin(),_9439_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1252_perm = _9441_;
      _checked_ptr_1<int64_t> _ptr__1252_perm(_1252_perm ? _1252_perm->raw() : nullptr,_1252_perm ? _1252_perm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1252_perm,_1245_varidxs_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_1244_ni));
      std::vector<int32_t> _9442_;
      for (int32_t _1254_i = (int)0, _9443_ = _1244_ni; _1254_i < _9443_ ; ++_1254_i)
      {
        _9442_.push_back((int32_t)_ptr__1245_varidxs_[_ptr__1252_perm[_1254_i]]);
      }
      auto _9444_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9442_.size()),_9442_.begin(),_9442_.end()));
      _1250_varidxs = _9444_;
      _ptr__1250_varidxs.update(_1250_varidxs ? _1250_varidxs->raw() : nullptr, _1250_varidxs ? _1250_varidxs->size(0) : 0);
    }
  }
  int32_t _1255_N = (int)((_1250_varidxs)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _1256_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1255_N)));
  _checked_ptr_1<double> _ptr__1256_cof(_1256_cof ? _1256_cof->raw() : nullptr,_1256_cof ? _1256_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1257_subj = _1250_varidxs;
  _checked_ptr_1<int32_t> _ptr__1257_subj(_1257_subj ? _1257_subj->raw() : nullptr,_1257_subj ? _1257_subj->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1242_expr)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  {
  }
  int32_t _1258_nd = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int32_t _1259_nelem = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int32_t _1260_nnz = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _1261_hassp = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int32_t _1262_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int32_t _1263_shape_base = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int32_t _1264_ptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int32_t _1265_sp_base = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int32_t _1266_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int32_t _1267_cof_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int32_t _1268_code_base = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int32_t _1269_codeptr_base = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int32_t _1270_cconst_base = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  {
  }
  if ((_1262_ncodeatom > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1271_wi32 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int32_t> _ptr__1271_wi32(_1271_wi32 ? _1271_wi32->raw() : nullptr,_1271_wi32 ? _1271_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1272_wi64 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<int64_t> _ptr__1272_wi64(_1272_wi64 ? _1272_wi64->raw() : nullptr,_1272_wi64 ? _1272_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1273_wf64 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__1273_wf64(_1273_wf64 ? _1273_wf64->raw() : nullptr,_1273_wf64 ? _1273_wf64->size(0) : 0);
  int32_t _1274_k = (int)0;
  int32_t _9445_ = (int)0;
  int32_t _9446_ = _1259_nelem;
  for (int32_t _1275_i = _9445_; _1275_i < _9446_; ++_1275_i)
  {
    {
      int32_t _1276_p0 = _ptr__1271_wi32[safe_add( _1264_ptr_base,_1275_i )];
      int32_t _1277_p1 = _ptr__1271_wi32[safe_add( safe_add( _1264_ptr_base,_1275_i ),(int)1 )];
      int32_t _1278_p = _1276_p0;
      int32_t _1279_l = (int)0;
      while ( ((_1279_l < (int)((_1250_varidxs)->size(0))) && (_1278_p < _1277_p1)) )
      {
        {
          if ((_ptr__1250_varidxs[_1279_l] < _ptr__1272_wi64[safe_add( _1266_nidxs_base,_1278_p )]))
          {
            {
              ++ _1279_l;
            }
          }
          else if((_ptr__1250_varidxs[_1279_l] > _ptr__1272_wi64[safe_add( _1266_nidxs_base,_1278_p )]))
          {
            {
              ++ _1278_p;
            }
          }
          else
          {
            {
              _ptr__1256_cof[safe_add( _1274_k,_1279_l )] = _ptr__1273_wf64[safe_add( _1267_cof_base,_1278_p )];
              ++ _1279_l;
              ++ _1278_p;
            }
          }
        }
      }
      _1274_k += (int)((_1250_varidxs)->size(0));
    }
  }
  task_putclist(_1257_subj,_1256_cof);
  if ((_1262_ncodeatom > (int)0))
  {
    {
      obj_blocks->replace_row_code(rs,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),_1264_ptr_base,_1266_nidxs_base,_1269_codeptr_base,_1268_code_base,_1270_cconst_base);
    }
  }
  {}
}
// End mosek.fusion.Model.updateObjective

// Begin mosek.fusion.Model.parameter_unchecked
// Method mosek.fusion.Model.parameter_unchecked @ src/fusion/Model.mbi:2781:6-2814:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_unchecked(const std::string & _1280_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1281_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1282_sp)
{
  _checked_ptr_1<int32_t> _ptr__1281_shape(_1281_shape ? _1281_shape->raw() : nullptr, _1281_shape ? _1281_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1282_sp(_1282_sp ? _1282_sp->raw() : nullptr, _1282_sp ? _1282_sp->size(0) : 0);
  if ((((int)((_1280_name).size()) > (int)0) && par_map->hasItem(_1280_name)))
  {
    {
      throw ::mosek::fusion::NameError(std::string ("Duplicate parameter name"));
    }
  }
  {}
  int64_t _1283_sz = ::mosek::fusion::p_Set::size(_1281_shape);
  int32_t _9447_;
  bool _9448_ = (NULL != _1282_sp.get());
  if (_9448_)
  {
    _9447_ = (int)((_1282_sp)->size(0));
  }
  else
  {
    _9447_ = (int32_t)_1283_sz;
  }
  int32_t _1284_nelem = _9447_;
  if ((NULL == param_value.get()))
  {
    {
      param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1284_nelem)));
    }
  }
  else
  {
    {
      if ((safe_add( param_num,_1284_nelem ) > (int)((param_value)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _1285_old_param_value = param_value;
          _checked_ptr_1<double> _ptr__1285_old_param_value(_1285_old_param_value ? _1285_old_param_value->raw() : nullptr,_1285_old_param_value ? _1285_old_param_value->size(0) : 0);
          int32_t _9449_;
          bool _9450_ = (safe_mul( (int)2,(int)((_1285_old_param_value)->size(0)) ) > safe_add( (int)((_1285_old_param_value)->size(0)),_1284_nelem ));
          if (_9450_)
          {
            _9449_ = safe_mul( (int)2,(int)((_1285_old_param_value)->size(0)) );
          }
          else
          {
            _9449_ = safe_add( (int)((_1285_old_param_value)->size(0)),_1284_nelem );
          }
          int32_t _1286_new_len = _9449_;
          param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1286_new_len)));
          if ((param_num > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_1285_old_param_value,(int)0,param_value,(int)0,param_num);
            }
          }
          {}
        }
      }
      {}
    }
  }
  std::vector<int32_t> _9451_;
  for (int32_t _1288_i = (int)0, _9452_ = (int32_t)_1284_nelem; _1288_i < _9452_ ; ++_1288_i)
  {
    _9451_.push_back(safe_add( param_num,_1288_i ));
  }
  auto _9453_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9451_.size()),_9451_.begin(),_9451_.end()));
  monty::rc_ptr< ::mosek::fusion::ParameterImpl > _1287_r = ::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::Model::t(_pubthis),_1281_shape,_1282_sp,_9453_);
  param_num += _1284_nelem;
  if (((int)((_1280_name).size()) > (int)0))
  {
    {
      if (((NULL == parameters.get()) || (numparameter == (int)((parameters)->size(0)))))
      {
        {
          std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _1289_tmppar = parameters;
          std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _9454_;
          for (int32_t _1290_i = (int)0, _9455_ = safe_add( safe_mul( numparameter,(int)2 ),(int)64 ); _1290_i < _9455_ ; ++_1290_i)
          {
            _9454_.push_back(nullptr);
          }
          auto _9456_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_9454_.size()),_9454_.begin(),_9454_.end()));
          parameters = _9456_;
          int32_t _9457_ = (int)0;
          int32_t _9458_ = numparameter;
          for (int32_t _1291_i = _9457_; _1291_i < _9458_; ++_1291_i)
          {
            {
              ((*parameters)(_1291_i)) = ((*_1289_tmppar)(_1291_i));
            }
          }
        }
      }
      {}
      ((*parameters)(numparameter)) = (_1287_r).as<::mosek::fusion::Parameter>();
      par_map->setItem(_1280_name,numparameter);
      numparameter += (int)1;
    }
  }
  {}
  return (_1287_r).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.Model.parameter_unchecked

// Begin mosek.fusion.Model.parameter_
// Method mosek.fusion.Model.parameter_ @ src/fusion/Model.mbi:2765:6-2779:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _1292_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1293_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1294_sp)
{
  _checked_ptr_1<int32_t> _ptr__1293_shape(_1293_shape ? _1293_shape->raw() : nullptr, _1293_shape ? _1293_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1294_sp(_1294_sp ? _1294_sp->raw() : nullptr, _1294_sp ? _1294_sp->size(0) : 0);
  bool _1295_sorted = true;
  int32_t _1296_nd = (int)((_1293_shape)->size(0));
  if (((NULL != _1294_sp.get()) && ((int)((_1294_sp)->size(0)) > (int)0)))
  {
    {
      bool _1297_ok = (_ptr__1294_sp[((int)((_1294_sp)->size(0)) - (int)1)] < ::mosek::fusion::p_Set::size(_1293_shape));
      int32_t _9459_ = (int)1;
      int32_t _9460_ = (int)((_1294_sp)->size(0));
      for (int32_t _1298_i = _9459_; _1298_i < _9460_; ++_1298_i)
      {
        {
          _1297_ok = (_1297_ok && (_ptr__1294_sp[(_1298_i - (int)1)] < _ptr__1294_sp[_1298_i]));
        }
      }
      if ((!_1297_ok))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Unordered sparsity pattern"));
        }
      }
      {}
    }
  }
  {}
  return __mosek_2fusion_2Model__parameter_unchecked(_1292_name,_1293_shape,_1294_sp);
}
// End mosek.fusion.Model.parameter_

// Begin mosek.fusion.Model.parameter_
// Method mosek.fusion.Model.parameter_ @ src/fusion/Model.mbi:2742:6-2763:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _1299_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1300_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1301_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1300_shape(_1300_shape ? _1300_shape->raw() : nullptr, _1300_shape ? _1300_shape->size(0) : 0);
  int32_t _1302_n = (int)((_1301_sparsity)->size(0));
  int32_t _1303_m = (int)((_1301_sparsity)->size(1));
  if (((int)((_1300_shape)->size(0)) != _1303_m))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid sparsity"));
    }
  }
  {}
  if ((NULL == _1301_sparsity.get()))
  {
    {
      return __mosek_2fusion_2Model__parameter_unchecked(_1299_name,_1300_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1304_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1302_n)));
      _checked_ptr_1<int64_t> _ptr__1304_sp(_1304_sp ? _1304_sp->raw() : nullptr,_1304_sp ? _1304_sp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1305_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1303_m)));
      _checked_ptr_1<int64_t> _ptr__1305_strides(_1305_strides ? _1305_strides->raw() : nullptr,_1305_strides ? _1305_strides->size(0) : 0);
      _ptr__1305_strides[(_1303_m - (int)1)] = (int)1;
      int32_t _9461_ = (int)1;
      int32_t _9462_ = _1303_m;
      for (int32_t _1306_i = _9461_; _1306_i < _9462_; ++_1306_i)
      {
        {
          _ptr__1305_strides[((_1303_m - (int)1) - _1306_i)] = safe_mul( _ptr__1305_strides[(_1303_m - _1306_i)],_ptr__1300_shape[(_1303_m - _1306_i)] );
        }
      }
      int32_t _9463_ = (int)0;
      int32_t _9464_ = _1302_n;
      for (int32_t _1307_i = _9463_; _1307_i < _9464_; ++_1307_i)
      {
        {
          _ptr__1304_sp[_1307_i] = (int)0;
          int32_t _9465_ = (int)0;
          int32_t _9466_ = _1303_m;
          for (int32_t _1308_j = _9465_; _1308_j < _9466_; ++_1308_j)
          {
            {
              _ptr__1304_sp[_1307_i] += safe_mul( ((*_1301_sparsity)(_1307_i,_1308_j)),_ptr__1305_strides[_1308_j] );
            }
          }
        }
      }
      return __mosek_2fusion_2Model__parameter_(_1299_name,_1300_shape,_1304_sp);
    }
  }
}
// End mosek.fusion.Model.parameter_

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2740:6-139
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1309_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1309_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1309_name) { return __mosek_2fusion_2Model__parameter(_1309_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1309_name)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1310_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1310_sp(_1310_sp ? _1310_sp->raw() : nullptr,_1310_sp ? _1310_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1309_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),_1310_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2739:6-159
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1311_name,int32_t _1312_d1,int32_t _1313_d2,int32_t _1314_d3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1311_name,_1312_d1,_1313_d2,_1314_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1311_name,int32_t _1312_d1,int32_t _1313_d2,int32_t _1314_d3) { return __mosek_2fusion_2Model__parameter(_1311_name,_1312_d1,_1313_d2,_1314_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1311_name,int32_t _1312_d1,int32_t _1313_d2,int32_t _1314_d3)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1315_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1315_sp(_1315_sp ? _1315_sp->raw() : nullptr,_1315_sp ? _1315_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1311_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1312_d1),(int32_t)(_1313_d2),(int32_t)(_1314_d3)}),_1315_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2738:6-146
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1316_name,int32_t _1317_d1,int32_t _1318_d2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1316_name,_1317_d1,_1318_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1316_name,int32_t _1317_d1,int32_t _1318_d2) { return __mosek_2fusion_2Model__parameter(_1316_name,_1317_d1,_1318_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1316_name,int32_t _1317_d1,int32_t _1318_d2)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1319_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1319_sp(_1319_sp ? _1319_sp->raw() : nullptr,_1319_sp ? _1319_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1316_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1317_d1),(int32_t)(_1318_d2)}),_1319_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2737:6-143
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1320_name,int32_t _1321_d1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1320_name,_1321_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1320_name,int32_t _1321_d1) { return __mosek_2fusion_2Model__parameter(_1320_name,_1321_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1320_name,int32_t _1321_d1)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1322_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1322_sp(_1322_sp ? _1322_sp->raw() : nullptr,_1322_sp ? _1322_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1320_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1321_d1)}),_1322_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2736:6-134
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1323_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1324_shape) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1323_name,_1324_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1323_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1324_shape) { return __mosek_2fusion_2Model__parameter(_1323_name,_1324_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1323_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1324_shape)
{
  _checked_ptr_1<int32_t> _ptr__1324_shape(_1324_shape ? _1324_shape->raw() : nullptr, _1324_shape ? _1324_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1325_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1325_sp(_1325_sp ? _1325_sp->raw() : nullptr,_1325_sp ? _1325_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1323_name,_1324_shape,_1325_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2735:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1326_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1327_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1328_sp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1326_name,_1327_shape,_1328_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1326_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1327_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1328_sp) { return __mosek_2fusion_2Model__parameter(_1326_name,_1327_shape,_1328_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1326_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1327_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1328_sp)
{
  _checked_ptr_1<int32_t> _ptr__1327_shape(_1327_shape ? _1327_shape->raw() : nullptr, _1327_shape ? _1327_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1328_sp(_1328_sp ? _1328_sp->raw() : nullptr, _1328_sp ? _1328_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1326_name,_1327_shape,_1328_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2734:6-136
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _1329_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1330_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1331_sparsity) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1329_name,_1330_shape,_1331_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _1329_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1330_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1331_sparsity) { return __mosek_2fusion_2Model__parameter(_1329_name,_1330_shape,_1331_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _1329_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1330_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1331_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1330_shape(_1330_shape ? _1330_shape->raw() : nullptr, _1330_shape ? _1330_shape->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_1329_name,_1330_shape,_1331_sparsity);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2732:6-126
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter() { return __mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter()
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1332_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1332_sp(_1332_sp ? _1332_sp->raw() : nullptr,_1332_sp ? _1332_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),_1332_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2731:6-145
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1333_d1,int32_t _1334_d2,int32_t _1335_d3) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1333_d1,_1334_d2,_1335_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1333_d1,int32_t _1334_d2,int32_t _1335_d3) { return __mosek_2fusion_2Model__parameter(_1333_d1,_1334_d2,_1335_d3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1333_d1,int32_t _1334_d2,int32_t _1335_d3)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1336_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1336_sp(_1336_sp ? _1336_sp->raw() : nullptr,_1336_sp ? _1336_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1333_d1),(int32_t)(_1334_d2),(int32_t)(_1335_d3)}),_1336_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2730:6-132
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1337_d1,int32_t _1338_d2) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1337_d1,_1338_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1337_d1,int32_t _1338_d2) { return __mosek_2fusion_2Model__parameter(_1337_d1,_1338_d2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1337_d1,int32_t _1338_d2)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1339_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1339_sp(_1339_sp ? _1339_sp->raw() : nullptr,_1339_sp ? _1339_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1337_d1),(int32_t)(_1338_d2)}),_1339_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2729:6-129
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int32_t _1340_d1) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1340_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int32_t _1340_d1) { return __mosek_2fusion_2Model__parameter(_1340_d1); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int32_t _1340_d1)
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1341_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1341_sp(_1341_sp ? _1341_sp->raw() : nullptr,_1341_sp ? _1341_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1340_d1)}),_1341_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2728:6-120
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1342_shape) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1342_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1342_shape) { return __mosek_2fusion_2Model__parameter(_1342_shape); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1342_shape)
{
  _checked_ptr_1<int32_t> _ptr__1342_shape(_1342_shape ? _1342_shape->raw() : nullptr, _1342_shape ? _1342_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1343_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__1343_sp(_1343_sp ? _1343_sp->raw() : nullptr,_1343_sp ? _1343_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1342_shape,_1343_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2727:6-109
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1344_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1345_sp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1344_shape,_1345_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1344_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1345_sp) { return __mosek_2fusion_2Model__parameter(_1344_shape,_1345_sp); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1344_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _1345_sp)
{
  _checked_ptr_1<int32_t> _ptr__1344_shape(_1344_shape ? _1344_shape->raw() : nullptr, _1344_shape ? _1344_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__1345_sp(_1345_sp ? _1345_sp->raw() : nullptr, _1345_sp ? _1345_sp->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1344_shape,_1345_sp);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.parameter
// Method mosek.fusion.Model.parameter @ src/fusion/Model.mbi:2726:6-122
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1346_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1347_sparsity) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_1346_shape,_1347_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1346_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1347_sparsity) { return __mosek_2fusion_2Model__parameter(_1346_shape,_1347_sparsity); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int32_t,1 > > _1346_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _1347_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__1346_shape(_1346_shape ? _1346_shape->raw() : nullptr, _1346_shape ? _1346_shape->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_1346_shape,_1347_sparsity);
}
// End mosek.fusion.Model.parameter

// Begin mosek.fusion.Model.objective_
// Method mosek.fusion.Model.objective_ @ src/fusion/Model.mbi:2629:6-2718:7
void mosek::fusion::p_Model::objective_(const std::string & _1348_name,mosek::fusion::ObjectiveSense _1349_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1350_expr)
{
  task_putobjectivename(_1348_name);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _1351_rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _1352_ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1353_obje = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1350_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1353_obje->eval(_1351_rs,_1352_ws,xs);
  _1351_rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1354_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1354_ri32(_1354_ri32 ? _1354_ri32->raw() : nullptr,_1354_ri32 ? _1354_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1355_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1355_ri64(_1355_ri64 ? _1355_ri64->raw() : nullptr,_1355_ri64 ? _1355_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1356_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->f64;
  _checked_ptr_1<double> _ptr__1356_rf64(_1356_rf64 ? _1356_rf64->raw() : nullptr,_1356_rf64 ? _1356_rf64->size(0) : 0);
  int32_t _1357_nd = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->nd;
  int32_t _1358_nelem = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->nelem;
  int32_t _1359_nnz = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->nnz;
  bool _1360_hassp = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->hassp;
  int32_t _1361_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->ncodeatom;
  int32_t _1362_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->ptr_base;
  int32_t _1363_shape_base = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->shape_base;
  int32_t _1364_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->nidxs_base;
  int32_t _1365_cof_base = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->cof_base;
  int32_t _1366_code_base = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->code_base;
  int32_t _1367_codeptr_base = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->codeptr_base;
  int32_t _1368_cconst_base = mosek::fusion::p_WorkStack::_get_impl(_1351_rs)->cconst_base;
  int64_t _1369_totalsize = (int64_t)1;
  int32_t _9467_ = (int)0;
  int32_t _9468_ = _1357_nd;
  for (int32_t _1370_i = _9467_; _1370_i < _9468_; ++_1370_i)
  {
    {
      _1357_nd *= _ptr__1354_ri32[safe_add( _1363_shape_base,_1370_i )];
    }
  }
  if ((_1369_totalsize != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((_1358_nelem != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int32_t _1371_linnz = (int)0;
  int32_t _1372_psdnz = (int)0;
  int32_t _9469_ = (int)0;
  int32_t _9470_ = _1359_nnz;
  for (int32_t _1373_i = _9469_; _1373_i < _9470_; ++_1373_i)
  {
    {
      if ((_ptr__1355_ri64[safe_add( _1364_nidxs_base,_1373_i )] < (int)0))
      {
        {
          ++ _1372_psdnz;
        }
      }
      else if((_ptr__1355_ri64[safe_add( _1364_nidxs_base,_1373_i )] >= (int)0))
      {
        {
          ++ _1371_linnz;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1374_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1371_linnz)));
  _checked_ptr_1<int32_t> _ptr__1374_subj(_1374_subj ? _1374_subj->raw() : nullptr,_1374_subj ? _1374_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1375_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1371_linnz)));
  _checked_ptr_1<double> _ptr__1375_cof(_1375_cof ? _1375_cof->raw() : nullptr,_1375_cof ? _1375_cof->size(0) : 0);
  {
    int32_t _1376_k = (int)0;
    int32_t _9471_ = (int)0;
    int32_t _9472_ = _1359_nnz;
    for (int32_t _1377_j = _9471_; _1377_j < _9472_; ++_1377_j)
    {
      {
        if ((_ptr__1355_ri64[safe_add( _1364_nidxs_base,_1377_j )] >= (int)0))
        {
          {
            _ptr__1374_subj[_1376_k] = (int32_t)_ptr__1355_ri64[safe_add( _1364_nidxs_base,_1377_j )];
            _ptr__1375_cof[_1376_k] = _ptr__1356_rf64[safe_add( _1365_cof_base,_1377_j )];
            ++ _1376_k;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_1349_sense == ::mosek::fusion::ObjectiveSense::Maximize),_1374_subj,_1375_cof,0.0);
  if ((_1372_psdnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1378_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1372_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1378_subj(_1378_subj ? _1378_subj->raw() : nullptr,_1378_subj ? _1378_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1379_subk = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1372_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1379_subk(_1379_subk ? _1379_subk->raw() : nullptr,_1379_subk ? _1379_subk->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1380_subl = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1372_psdnz)));
      _checked_ptr_1<int32_t> _ptr__1380_subl(_1380_subl ? _1380_subl->raw() : nullptr,_1380_subl ? _1380_subl->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1381_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1372_psdnz)));
      _checked_ptr_1<double> _ptr__1381_val(_1381_val ? _1381_val->raw() : nullptr,_1381_val ? _1381_val->size(0) : 0);
      int32_t _9473_ = (int)0;
      int32_t _9474_ = _1372_psdnz;
      for (int32_t _1382_i = _9473_; _1382_i < _9474_; ++_1382_i)
      {
        {
          int64_t _1383_varidx = (-safe_add( _ptr__1355_ri64[safe_add( _1364_nidxs_base,_1382_i )],(int)1 ));
          _ptr__1378_subj[_1382_i] = ((*barvar_block_elm_barj)(_1383_varidx));
          _ptr__1379_subk[_1382_i] = ((*barvar_block_elm_i)(_1383_varidx));
          _ptr__1380_subl[_1382_i] = ((*barvar_block_elm_j)(_1383_varidx));
          double _9475_;
          bool _9476_ = (_ptr__1379_subk[_1382_i] == _ptr__1380_subl[_1382_i]);
          if (_9476_)
          {
            _9475_ = _ptr__1356_rf64[safe_add( _1365_cof_base,_1382_i )];
          }
          else
          {
            _9475_ = (0.5 * _ptr__1356_rf64[safe_add( _1365_cof_base,_1382_i )]);
          }
          _ptr__1381_val[_1382_i] = _9475_;
        }
      }
      task_putbarc(_1378_subj,_1379_subk,_1380_subl,_1381_val);
    }
  }
  {}
  if ((_1361_ncodeatom > (int)0))
  {
    {
      obj_blocks->replace_row_code(_1351_rs,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),_1362_ptr_base,_1364_nidxs_base,_1367_codeptr_base,_1366_code_base,_1368_cconst_base);
    }
  }
  {}
}
// End mosek.fusion.Model.objective_

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2626:6-163
void mosek::fusion::Model :: objective(double _1384_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1384_c); }
void mosek::fusion::p_Model::objective(double _1384_c)
{
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_1384_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2625:6-145
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _1385_sense,double _1386_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1385_sense,_1386_c); }
void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _1385_sense,double _1386_c)
{
  objective_(std::string (""),_1385_sense,::mosek::fusion::p_Expr::constTerm(_1386_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2624:6-132
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _1387_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1388_expr) { mosek::fusion::p_Model::_get_impl(this)->objective(_1387_sense,_1388_expr); }
void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _1387_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1388_expr)
{
  objective_(std::string (""),_1387_sense,_1388_expr);
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2623:6-165
void mosek::fusion::Model :: objective(const std::string & _1389_name,double _1390_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1389_name,_1390_c); }
void mosek::fusion::p_Model::objective(const std::string & _1389_name,double _1390_c)
{
  objective_(_1389_name,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_1390_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2622:6-147
void mosek::fusion::Model :: objective(const std::string & _1391_name,mosek::fusion::ObjectiveSense _1392_sense,double _1393_c) { mosek::fusion::p_Model::_get_impl(this)->objective(_1391_name,_1392_sense,_1393_c); }
void mosek::fusion::p_Model::objective(const std::string & _1391_name,mosek::fusion::ObjectiveSense _1392_sense,double _1393_c)
{
  objective_(_1391_name,_1392_sense,::mosek::fusion::p_Expr::constTerm(_1393_c));
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.objective
// Method mosek.fusion.Model.objective @ src/fusion/Model.mbi:2621:6-134
void mosek::fusion::Model :: objective(const std::string & _1394_name,mosek::fusion::ObjectiveSense _1395_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1396_expr) { mosek::fusion::p_Model::_get_impl(this)->objective(_1394_name,_1395_sense,_1396_expr); }
void mosek::fusion::p_Model::objective(const std::string & _1394_name,mosek::fusion::ObjectiveSense _1395_sense,monty::rc_ptr< ::mosek::fusion::Expression > _1396_expr)
{
  objective_(_1394_name,_1395_sense,_1396_expr);
}
// End mosek.fusion.Model.objective

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2619:6-161
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1397_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1398_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1397_expr,_1398_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1397_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1398_qdom) { return __mosek_2fusion_2Model__constraint(_1397_expr,_1398_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1397_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1398_qdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1397_expr,_1398_qdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2618:6-161
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1399_name,monty::rc_ptr< ::mosek::fusion::Expression > _1400_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1401_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1399_name,_1400_expr,_1401_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1399_name,monty::rc_ptr< ::mosek::fusion::Expression > _1400_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1401_qdom) { return __mosek_2fusion_2Model__constraint(_1399_name,_1400_expr,_1401_qdom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1399_name,monty::rc_ptr< ::mosek::fusion::Expression > _1400_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1401_qdom)
{
  return __mosek_2fusion_2Model__constraint_(_1399_name,_1400_expr,_1401_qdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2617:6-168
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1402_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1403_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1402_expr,_1403_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1402_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1403_rdom) { return __mosek_2fusion_2Model__constraint(_1402_expr,_1403_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1402_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1403_rdom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1402_expr,_1403_rdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2616:6-168
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1404_name,monty::rc_ptr< ::mosek::fusion::Expression > _1405_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1406_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1404_name,_1405_expr,_1406_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _1404_name,monty::rc_ptr< ::mosek::fusion::Expression > _1405_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1406_rdom) { return __mosek_2fusion_2Model__constraint(_1404_name,_1405_expr,_1406_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1404_name,monty::rc_ptr< ::mosek::fusion::Expression > _1405_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1406_rdom)
{
  return __mosek_2fusion_2Model__constraint_(_1404_name,_1405_expr,_1406_rdom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2615:6-162
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1407_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1408_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1407_expr,_1408_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1407_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1408_ldom) { return __mosek_2fusion_2Model__constraint(_1407_expr,_1408_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1407_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1408_ldom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1407_expr,_1408_ldom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2614:6-163
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1409_name,monty::rc_ptr< ::mosek::fusion::Expression > _1410_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1411_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1409_name,_1410_expr,_1411_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1409_name,monty::rc_ptr< ::mosek::fusion::Expression > _1410_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1411_ldom) { return __mosek_2fusion_2Model__constraint(_1409_name,_1410_expr,_1411_ldom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1409_name,monty::rc_ptr< ::mosek::fusion::Expression > _1410_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1411_ldom)
{
  return __mosek_2fusion_2Model__constraint_(_1409_name,_1410_expr,_1411_ldom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2610:6-166
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1412_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1413_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1412_expr,_1413_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1412_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1413_psddom) { return __mosek_2fusion_2Model__constraint(_1412_expr,_1413_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1412_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1413_psddom)
{
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1412_expr,_1413_psddom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.constraint
// Method mosek.fusion.Model.constraint @ src/fusion/Model.mbi:2609:6-166
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1414_name,monty::rc_ptr< ::mosek::fusion::Expression > _1415_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1416_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1414_name,_1415_expr,_1416_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1414_name,monty::rc_ptr< ::mosek::fusion::Expression > _1415_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1416_psddom) { return __mosek_2fusion_2Model__constraint(_1414_name,_1415_expr,_1416_psddom); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1414_name,monty::rc_ptr< ::mosek::fusion::Expression > _1415_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1416_psddom)
{
  return __mosek_2fusion_2Model__constraint_(_1414_name,_1415_expr,_1416_psddom);
}
// End mosek.fusion.Model.constraint

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2598:6-170
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1417_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1417_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1417_psddom) { return __mosek_2fusion_2Model__variable(_1417_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1417_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_1417_psddom)->shape,_1417_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2597:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1418_n,int32_t _1419_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1420_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1418_n,_1419_m,_1420_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1418_n,int32_t _1419_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1420_psddom) { return __mosek_2fusion_2Model__variable(_1418_n,_1419_m,_1420_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1418_n,int32_t _1419_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1420_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1419_m),(int32_t)(_1418_n),(int32_t)(_1418_n)}),_1420_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2596:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1421_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1422_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1421_n,_1422_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1421_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1422_psddom) { return __mosek_2fusion_2Model__variable(_1421_n,_1422_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1421_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1422_psddom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1421_n),(int32_t)(_1421_n)}),_1422_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2595:6-170
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1423_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1424_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1423_name,_1424_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1423_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1424_psddom) { return __mosek_2fusion_2Model__variable(_1423_name,_1424_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1423_name,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1424_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1423_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1424_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2594:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1425_name,int32_t _1426_n,int32_t _1427_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1428_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1425_name,_1426_n,_1427_m,_1428_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1425_name,int32_t _1426_n,int32_t _1427_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1428_psddom) { return __mosek_2fusion_2Model__variable(_1425_name,_1426_n,_1427_m,_1428_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1425_name,int32_t _1426_n,int32_t _1427_m,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1428_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1425_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1427_m),(int32_t)(_1426_n),(int32_t)(_1426_n)}),_1428_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2593:6-172
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1429_name,int32_t _1430_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1431_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1429_name,_1430_n,_1431_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1429_name,int32_t _1430_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1431_psddom) { return __mosek_2fusion_2Model__variable(_1429_name,_1430_n,_1431_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1429_name,int32_t _1430_n,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1431_psddom)
{
  return __mosek_2fusion_2Model__variable_(_1429_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1430_n),(int32_t)(_1430_n)}),_1431_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2592:6-157
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1432_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1433_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1434_psddom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1432_name,_1433_shp,_1434_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1432_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1433_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1434_psddom) { return __mosek_2fusion_2Model__variable(_1432_name,_1433_shp,_1434_psddom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1432_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1433_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1434_psddom)
{
  _checked_ptr_1<int32_t> _ptr__1433_shp(_1433_shp ? _1433_shp->raw() : nullptr, _1433_shp ? _1433_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1432_name,_1433_shp,_1434_psddom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2586:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1435_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1435_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1435_qdom) { return __mosek_2fusion_2Model__variable(_1435_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1435_qdom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1435_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2585:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1436_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1436_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1436_rdom) { return __mosek_2fusion_2Model__variable(_1436_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1436_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1436_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2584:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1437_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1437_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1437_ldom) { return __mosek_2fusion_2Model__variable(_1437_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1437_ldom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1437_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2583:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1438_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1439_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1438_shp,_1439_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1438_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1439_qdom) { return __mosek_2fusion_2Model__variable(_1438_shp,_1439_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1438_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1439_qdom)
{
  _checked_ptr_1<int32_t> _ptr__1438_shp(_1438_shp ? _1438_shp->raw() : nullptr, _1438_shp ? _1438_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1438_shp,_1439_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2582:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1440_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1441_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1440_shp,_1441_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1440_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1441_rdom) { return __mosek_2fusion_2Model__variable(_1440_shp,_1441_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1440_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1441_rdom)
{
  _checked_ptr_1<int32_t> _ptr__1440_shp(_1440_shp ? _1440_shp->raw() : nullptr, _1440_shp ? _1440_shp->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_1440_shp,_1441_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2581:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1442_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1443_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1442_shp,_1443_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1442_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1443_ldom) { return __mosek_2fusion_2Model__variable(_1442_shp,_1443_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1442_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1443_ldom)
{
  _checked_ptr_1<int32_t> _ptr__1442_shp(_1442_shp ? _1442_shp->raw() : nullptr, _1442_shp ? _1442_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1442_shp,_1443_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2580:6-162
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1444_shp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1444_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1444_shp) { return __mosek_2fusion_2Model__variable(_1444_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int32_t,1 > > _1444_shp)
{
  _checked_ptr_1<int32_t> _ptr__1444_shp(_1444_shp ? _1444_shp->raw() : nullptr, _1444_shp ? _1444_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1444_shp,::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2579:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1445_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1446_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1445_size,_1446_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1445_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1446_qdom) { return __mosek_2fusion_2Model__variable(_1445_size,_1446_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1445_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1446_qdom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1445_size)}),_1446_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2578:6-161
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1447_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1448_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1447_size,_1448_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(int32_t _1447_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1448_rdom) { return __mosek_2fusion_2Model__variable(_1447_size,_1448_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1447_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1448_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1447_size)}),_1448_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2577:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1449_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1450_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1449_size,_1450_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1449_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1450_ldom) { return __mosek_2fusion_2Model__variable(_1449_size,_1450_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1449_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1450_ldom)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1449_size)}),_1450_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2576:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int32_t _1451_size) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1451_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int32_t _1451_size) { return __mosek_2fusion_2Model__variable(_1451_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int32_t _1451_size)
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1451_size)}),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2575:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable()
{
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2573:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1452_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1453_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1452_name,_1453_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1452_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1453_qdom) { return __mosek_2fusion_2Model__variable(_1452_name,_1453_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1452_name,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1453_qdom)
{
  return __mosek_2fusion_2Model__variable_(_1452_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1453_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2572:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1454_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1455_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1454_name,_1455_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1454_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1455_rdom) { return __mosek_2fusion_2Model__variable(_1454_name,_1455_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1454_name,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1455_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(_1454_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1455_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2571:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1456_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1457_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1456_name,_1457_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1456_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1457_ldom) { return __mosek_2fusion_2Model__variable(_1456_name,_1457_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1456_name,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1457_ldom)
{
  return __mosek_2fusion_2Model__variable_(_1456_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(nullptr),_1457_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2570:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1458_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1459_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1460_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1458_name,_1459_shp,_1460_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1458_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1459_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1460_qdom) { return __mosek_2fusion_2Model__variable(_1458_name,_1459_shp,_1460_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1458_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1459_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1460_qdom)
{
  _checked_ptr_1<int32_t> _ptr__1459_shp(_1459_shp ? _1459_shp->raw() : nullptr, _1459_shp ? _1459_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1458_name,_1459_shp,_1460_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2569:6-159
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1461_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1462_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1463_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1461_name,_1462_shp,_1463_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1461_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1462_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1463_rdom) { return __mosek_2fusion_2Model__variable(_1461_name,_1462_shp,_1463_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1461_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1462_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1463_rdom)
{
  _checked_ptr_1<int32_t> _ptr__1462_shp(_1462_shp ? _1462_shp->raw() : nullptr, _1462_shp ? _1462_shp->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_1461_name,_1462_shp,_1463_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2568:6-159
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1464_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1465_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1466_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1464_name,_1465_shp,_1466_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1464_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1465_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1466_ldom) { return __mosek_2fusion_2Model__variable(_1464_name,_1465_shp,_1466_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1464_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1465_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1466_ldom)
{
  _checked_ptr_1<int32_t> _ptr__1465_shp(_1465_shp ? _1465_shp->raw() : nullptr, _1465_shp ? _1465_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1464_name,_1465_shp,_1466_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2567:6-162
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1467_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1468_shp) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1467_name,_1468_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1467_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1468_shp) { return __mosek_2fusion_2Model__variable(_1467_name,_1468_shp); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1467_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1468_shp)
{
  _checked_ptr_1<int32_t> _ptr__1468_shp(_1468_shp ? _1468_shp->raw() : nullptr, _1468_shp ? _1468_shp->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1467_name,_1468_shp,::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2566:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1469_name,int32_t _1470_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1471_qdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1469_name,_1470_size,_1471_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1469_name,int32_t _1470_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1471_qdom) { return __mosek_2fusion_2Model__variable(_1469_name,_1470_size,_1471_qdom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1469_name,int32_t _1470_size,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1471_qdom)
{
  return __mosek_2fusion_2Model__variable_(_1469_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1470_size)}),_1471_qdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2565:6-161
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1472_name,int32_t _1473_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1474_rdom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1472_name,_1473_size,_1474_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1472_name,int32_t _1473_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1474_rdom) { return __mosek_2fusion_2Model__variable(_1472_name,_1473_size,_1474_rdom); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1472_name,int32_t _1473_size,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1474_rdom)
{
  return __mosek_2fusion_2Model__ranged_variable(_1472_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1473_size)}),_1474_rdom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2564:6-161
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1475_name,int32_t _1476_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1477_ldom) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1475_name,_1476_size,_1477_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1475_name,int32_t _1476_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1477_ldom) { return __mosek_2fusion_2Model__variable(_1475_name,_1476_size,_1477_ldom); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1475_name,int32_t _1476_size,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1477_ldom)
{
  return __mosek_2fusion_2Model__variable_(_1475_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1476_size)}),_1477_ldom);
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2563:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1478_name,int32_t _1479_size) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1478_name,_1479_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1478_name,int32_t _1479_size) { return __mosek_2fusion_2Model__variable(_1478_name,_1479_size); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1478_name,int32_t _1479_size)
{
  return __mosek_2fusion_2Model__variable_(_1478_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_1479_size)}),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.variable
// Method mosek.fusion.Model.variable @ src/fusion/Model.mbi:2562:6-175
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1480_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1480_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1480_name) { return __mosek_2fusion_2Model__variable(_1480_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1480_name)
{
  return __mosek_2fusion_2Model__variable_(_1480_name,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
// End mosek.fusion.Model.variable

// Begin mosek.fusion.Model.removeConstraintBlock
// Method mosek.fusion.Model.removeConstraintBlock @ src/fusion/Model.mbi:2553:6-2560:7
void mosek::fusion::p_Model::removeConstraintBlock(int32_t _1481_conid)
{
  if ((_1481_conid >= (int)0))
  {
    {
      con_release(_1481_conid);
    }
  }
  else
  {
    {
      acon_release((-safe_add( (int)1,_1481_conid )));
    }
  }
}
// End mosek.fusion.Model.removeConstraintBlock

// Begin mosek.fusion.Model.removeVariableBlock
// Method mosek.fusion.Model.removeVariableBlock @ src/fusion/Model.mbi:2525:6-2550:7
void mosek::fusion::p_Model::removeVariableBlock(int64_t _1482_varid64)
{
  if ((con_blocks->is_parameterized() || afe_blocks->is_parameterized()))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("Cannot remove variables in parameterized model"));
    }
  }
  {}
  if ((_1482_varid64 < (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("PSD variables cannot be removed"));
    }
  }
  else
  {
    {
      int32_t _1483_varid = (int32_t)_1482_varid64;
      int32_t _1484_sz = var_block_map->blocksize(_1483_varid);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1485_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1484_sz)));
      _checked_ptr_1<int32_t> _ptr__1485_nidxs(_1485_nidxs ? _1485_nidxs->raw() : nullptr,_1485_nidxs ? _1485_nidxs->size(0) : 0);
      var_block_map->get(_1483_varid,_1485_nidxs,(int)0);
      var_block_map->free(_1483_varid);
      int32_t _1486_conid = ((*var_block_acc_id)(_1483_varid));
      if ((_1486_conid >= (int)0))
      {
        {
          removeConstraintBlock(_1486_conid);
        }
      }
      {}
      task_var_putboundlist_fr(_1485_nidxs);
      task_clearacollist(_1485_nidxs);
    }
  }
}
// End mosek.fusion.Model.removeVariableBlock

// Begin mosek.fusion.Model.ranged_variable
// Method mosek.fusion.Model.ranged_variable @ src/fusion/Model.mbi:2442:6-2522:7
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _1487_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1488_shp,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1489_dom)
{
  _checked_ptr_1<int32_t> _ptr__1488_shp(_1488_shp ? _1488_shp->raw() : nullptr, _1488_shp ? _1488_shp->size(0) : 0);
  if ((((int)((_1487_name).size()) > (int)0) && hasVariable(_1487_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1487_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  mosek::fusion::p_RangeDomain::_get_impl(_1489_dom.get())->finalize_and_validate(_1488_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1490_shape = mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1490_shape(_1490_shape ? _1490_shape->raw() : nullptr,_1490_shape ? _1490_shape->size(0) : 0);
  int32_t _1491_nd = (int)((_1490_shape)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1492_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1491_nd)));
  _checked_ptr_1<int32_t> _ptr__1492_strides(_1492_strides ? _1492_strides->raw() : nullptr,_1492_strides ? _1492_strides->size(0) : 0);
  if ((_1491_nd > (int)0))
  {
    {
      _ptr__1492_strides[(_1491_nd - (int)1)] = (int)1;
      int32_t _9477_ = (int)1;
      int32_t _9478_ = _1491_nd;
      for (int32_t _1493_i = _9477_; _1493_i < _9478_; ++_1493_i)
      {
        {
          _ptr__1492_strides[((_1491_nd - _1493_i) - (int)1)] = safe_mul( _ptr__1492_strides[(_1491_nd - _1493_i)],_ptr__1490_shape[(_1491_nd - _1493_i)] );
        }
      }
    }
  }
  {}
  int64_t _1494_domsize = mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->domsize;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1495_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__1495_sparsity(_1495_sparsity ? _1495_sparsity->raw() : nullptr,_1495_sparsity ? _1495_sparsity->size(0) : 0);
  if ((NULL != _1495_sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)->size(1)) != _1491_nd))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _1495_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)->size(0)))));
      _ptr__1495_sparsity.update(_1495_sparsity ? _1495_sparsity->raw() : nullptr, _1495_sparsity ? _1495_sparsity->size(0) : 0);
      int32_t _9479_ = (int)0;
      int32_t _9480_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)->size(0));
      for (int32_t _1496_i = _9479_; _1496_i < _9480_; ++_1496_i)
      {
        {
          int32_t _9481_ = (int)0;
          int32_t _9482_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)->size(1));
          for (int32_t _1497_j = _9481_; _1497_j < _9482_; ++_1497_j)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)(_1496_i,_1497_j)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)(_1496_i,_1497_j)) >= _ptr__1490_shape[_1497_j])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          int64_t _1498_linidx = (int)0;
          int32_t _9483_ = (int)0;
          int32_t _9484_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)->size(1));
          for (int32_t _1499_j = _9483_; _1499_j < _9484_; ++_1499_j)
          {
            {
              _1498_linidx += safe_mul( _ptr__1492_strides[_1499_j],((*mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->sparsity)(_1496_i,_1499_j)) );
            }
          }
          _ptr__1495_sparsity[_1496_i] = _1498_linidx;
        }
      }
    }
  }
  {}
  int32_t _1500_nvaritems = (int32_t)mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->nelements;
  std::shared_ptr< monty::ndarray< double,1 > > _1501_bl;
  _checked_ptr_1<double> _ptr__1501_bl(_1501_bl ? _1501_bl->raw() : nullptr,_1501_bl ? _1501_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1502_bu;
  _checked_ptr_1<double> _ptr__1502_bu(_1502_bu ? _1502_bu->raw() : nullptr,_1502_bu ? _1502_bu->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->scalable)
  {
    {
      std::vector<double> _9485_;
      for (int32_t _1503_i = (int)0, _9486_ = _1500_nvaritems; _1503_i < _9486_ ; ++_1503_i)
      {
        _9485_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->lb)((int)0)));
      }
      auto _9487_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9485_.size()),_9485_.begin(),_9485_.end()));
      _1501_bl = _9487_;
      _ptr__1501_bl.update(_1501_bl ? _1501_bl->raw() : nullptr, _1501_bl ? _1501_bl->size(0) : 0);
      std::vector<double> _9488_;
      for (int32_t _1504_i = (int)0, _9489_ = _1500_nvaritems; _1504_i < _9489_ ; ++_1504_i)
      {
        _9488_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->ub)((int)0)));
      }
      auto _9490_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9488_.size()),_9488_.begin(),_9488_.end()));
      _1502_bu = _9490_;
      _ptr__1502_bu.update(_1502_bu ? _1502_bu->raw() : nullptr, _1502_bu ? _1502_bu->size(0) : 0);
    }
  }
  else
  {
    {
      _1501_bl = mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->lb;
      _ptr__1501_bl.update(_1501_bl ? _1501_bl->raw() : nullptr, _1501_bl ? _1501_bl->size(0) : 0);
      _1502_bu = mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->ub;
      _ptr__1502_bu.update(_1502_bu ? _1502_bu->raw() : nullptr, _1502_bu ? _1502_bu->size(0) : 0);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1505_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1500_nvaritems)));
  _checked_ptr_1<int32_t> _ptr__1505_nativeidxs(_1505_nativeidxs ? _1505_nativeidxs->raw() : nullptr,_1505_nativeidxs ? _1505_nativeidxs->size(0) : 0);
  int32_t _1506_varblockid = linearvar_alloc(_1500_nvaritems,_1505_nativeidxs);
  task_var_putboundlist_ra(_1505_nativeidxs,_1501_bl,_1502_bu);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _1507_res = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_1487_name,(int64_t)(_1506_varblockid),_1490_shape,_1495_sparsity,_1505_nativeidxs);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->cardinal_flag)
  {
    {
      task_var_putintlist(_1505_nativeidxs);
    }
  }
  {}
  if (((int)((_1487_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1508_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1508_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1487_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1491_nd > (int)0))
      {
        {
          _1508_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9491_ = (int)1;
          int32_t _9492_ = _1491_nd;
          for (int32_t _1509_i = _9491_; _1509_i < _9492_; ++_1509_i)
          {
            {
              _1508_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1509_i);
            }
          }
        }
      }
      {}
      _1508_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->indexnames.get()))
      {
        {
          task_format_var_names(_1505_nativeidxs,_1508_sb->toString(),_1490_shape,_1495_sparsity,mosek::fusion::p_RangeDomain::_get_impl(_1489_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_var_names(_1505_nativeidxs,_1508_sb->toString(),_1490_shape,_1495_sparsity,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
      var_map->setItem(_1487_name,_1506_varblockid);
    }
  }
  {}
  ((*vars)(_1506_varblockid)) = (_1507_res).as<::mosek::fusion::ModelVariable>();
  return _1507_res;
}
// End mosek.fusion.Model.ranged_variable

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ src/fusion/Model.mbi:2186:6-2436:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1510_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1511_shp,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1512_dom)
{
  _checked_ptr_1<int32_t> _ptr__1511_shp(_1511_shp ? _1511_shp->raw() : nullptr, _1511_shp ? _1511_shp->size(0) : 0);
  mosek::fusion::p_ConeDomain::_get_impl(_1512_dom.get())->finalize_and_validate(_1511_shp);
  if ((((int)((_1510_name).size()) > (int)0) && hasVariable(_1510_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1510_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1513_shape = mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1513_shape(_1513_shape ? _1513_shape->raw() : nullptr,_1513_shape ? _1513_shape->size(0) : 0);
  int32_t _1514_nd = (int)((_1513_shape)->size(0));
  int32_t _1515_coneaxis = _1512_dom->getAxis();
  int32_t _1516_conesize = _ptr__1513_shape[_1515_coneaxis];
  int32_t _1517_d1 = (int)1;
  int32_t _1518_d0 = (int)1;
  int32_t _1519_domsize = (int)1;
  int32_t _9493_ = (int)0;
  int32_t _9494_ = _1514_nd;
  for (int32_t _1520_i = _9493_; _1520_i < _9494_; ++_1520_i)
  {
    {
      _1519_domsize *= _ptr__1513_shape[_1520_i];
    }
  }
  int32_t _9495_ = (int)0;
  int32_t _9496_ = _1515_coneaxis;
  for (int32_t _1521_i = _9495_; _1521_i < _9496_; ++_1521_i)
  {
    {
      _1518_d0 *= _ptr__1513_shape[_1521_i];
    }
  }
  int32_t _9497_ = safe_add( _1515_coneaxis,(int)1 );
  int32_t _9498_ = _1514_nd;
  for (int32_t _1522_i = _9497_; _1522_i < _9498_; ++_1522_i)
  {
    {
      _1517_d1 *= _ptr__1513_shape[_1522_i];
    }
  }
  int32_t _1523_numcone = safe_mul( _1518_d0,_1517_d1 );
  int64_t _1524_domainidx;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      if ((_1516_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_quad(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      if ((_1516_conesize < (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_rquad(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      if ((_1516_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_pexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      if ((_1516_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_ppow(_1516_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      if ((_1516_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_dexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      if ((_1516_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_dpow(_1516_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InPGeoMeanCone))
  {
    {
      if ((_1516_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for primal geometric mean cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_pgeomean(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InDGeoMeanCone))
  {
    {
      if ((_1516_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual geometric mean cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_dgeomean(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::Positive))
  {
    {
      _1524_domainidx = task_append_domain_rpos(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InSVecPSDCone))
  {
    {
      int32_t _1525_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1516_conesize ) ))) - (int)1) / (int)2);
      if (((safe_mul( _1525_d,safe_add( _1525_d,(int)1 ) ) / (int)2) != _1516_conesize))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for vector positive semidefinite cone"))->toString());
        }
      }
      {}
      _1524_domainidx = task_append_domain_svec_psd(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::Negative))
  {
    {
      _1524_domainidx = task_append_domain_rneg(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::Unbounded))
  {
    {
      _1524_domainidx = task_append_domain_r(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::Zero))
  {
    {
      _1524_domainidx = task_append_domain_rzero(_1516_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->key == ::mosek::fusion::QConeKey::InPSDCone))
  {
    {
      if ((_1516_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
        }
      }
      else
      {
        {
          int32_t _1526_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1516_conesize ) ))) - (int)1) / (int)2);
          if (((safe_mul( _1526_d,safe_add( _1526_d,(int)1 ) ) / (int)2) != _1516_conesize))
          {
            {
              throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1516_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
            }
          }
          {}
        }
      }
      _1524_domainidx = task_append_domain_svec_psd(_1516_conesize);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1527_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( _1523_numcone,_1516_conesize ))));
  _checked_ptr_1<int32_t> _ptr__1527_nativeidxs(_1527_nativeidxs ? _1527_nativeidxs->raw() : nullptr,_1527_nativeidxs ? _1527_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1528_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1523_numcone)));
  _checked_ptr_1<int32_t> _ptr__1528_accidxs(_1528_accidxs ? _1528_accidxs->raw() : nullptr,_1528_accidxs ? _1528_accidxs->size(0) : 0);
  int32_t _1529_varid = conicvar_alloc(_1524_domainidx,_1516_conesize,_1523_numcone,_1528_accidxs,_1527_nativeidxs);
  task_var_putboundlist_fr(_1527_nativeidxs);
  if (mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->int_flag)
  {
    {
      task_var_putintlist(_1527_nativeidxs);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1530_permidxs = _1527_nativeidxs;
  _checked_ptr_1<int32_t> _ptr__1530_permidxs(_1530_permidxs ? _1530_permidxs->raw() : nullptr,_1530_permidxs ? _1530_permidxs->size(0) : 0);
  if ((_1515_coneaxis < ((int)((_1513_shape)->size(0)) - (int)1)))
  {
    {
      _1530_permidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_1527_nativeidxs)->size(0)))));
      _ptr__1530_permidxs.update(_1530_permidxs ? _1530_permidxs->raw() : nullptr, _1530_permidxs ? _1530_permidxs->size(0) : 0);
      int32_t _1531_p = (int)0;
      int32_t _9499_ = (int)0;
      int32_t _9500_ = _1518_d0;
      for (int32_t _1532_i0 = _9499_; _1532_i0 < _9500_; ++_1532_i0)
      {
        {
          int32_t _9501_ = (int)0;
          int32_t _9502_ = _1517_d1;
          for (int32_t _1533_i1 = _9501_; _1533_i1 < _9502_; ++_1533_i1)
          {
            {
              int32_t _9503_ = (int)0;
              int32_t _9504_ = _1516_conesize;
              for (int32_t _1534_k = _9503_; _1534_k < _9504_; ++_1534_k)
              {
                {
                  _ptr__1530_permidxs[_1531_p] = _ptr__1527_nativeidxs[safe_add( safe_mul( safe_add( safe_mul( _1532_i0,_1516_conesize ),_1534_k ),_1517_d1 ),_1533_i1 )];
                  ++ _1531_p;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _1535_res = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_1510_name,_1529_varid,_1513_shape,_1527_nativeidxs);
  ((*vars)(_1529_varid)) = (_1535_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1510_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1536_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      {
        _1536_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1510_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
        if ((_1514_nd > (int)0))
        {
          {
            _1536_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
            int32_t _9505_ = (int)1;
            int32_t _9506_ = _1514_nd;
            for (int32_t _1537_i = _9505_; _1537_i < _9506_; ++_1537_i)
            {
              {
                _1536_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537_i);
              }
            }
          }
        }
        {}
        _1536_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
        if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->indexnames.get()))
        {
          {
            task_format_var_names(_1530_permidxs,_1536_sb->toString(),_1513_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->indexnames);
          }
        }
        else
        {
          {
            task_format_var_names(_1530_permidxs,_1536_sb->toString(),_1513_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
          }
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1538_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1523_numcone)));
      _checked_ptr_1<int32_t> _ptr__1538_accidxs(_1538_accidxs ? _1538_accidxs->raw() : nullptr,_1538_accidxs ? _1538_accidxs->size(0) : 0);
      acc_block_map->get(((*var_block_acc_id)(_1529_varid)),_1538_accidxs,(int)0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _1539_accshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1513_shape)->size(0)) - (int)1))));
        _checked_ptr_1<int32_t> _ptr__1539_accshape(_1539_accshape ? _1539_accshape->raw() : nullptr,_1539_accshape ? _1539_accshape->size(0) : 0);
        int32_t _9507_ = (int)0;
        int32_t _9508_ = _1515_coneaxis;
        for (int32_t _1540_i = _9507_; _1540_i < _9508_; ++_1540_i)
        {
          {
            _ptr__1539_accshape[_1540_i] = _ptr__1513_shape[_1540_i];
          }
        }
        int32_t _9509_ = safe_add( _1515_coneaxis,(int)1 );
        int32_t _9510_ = _1514_nd;
        for (int32_t _1541_i = _9509_; _1541_i < _9510_; ++_1541_i)
        {
          {
            _ptr__1539_accshape[(_1541_i - (int)1)] = _ptr__1513_shape[_1541_i];
          }
        }
        monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1542_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
        _1542_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1510_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
        if (((_1514_nd - (int)1) > (int)0))
        {
          {
            _1542_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
            int32_t _9511_ = (int)1;
            int32_t _9512_ = _1514_nd;
            for (int32_t _1543_i = _9511_; _1543_i < _9512_; ++_1543_i)
            {
              {
                _1542_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1543_i);
              }
            }
          }
        }
        {}
        _1542_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
        if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->indexnames.get()))
        {
          {
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1544_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1514_nd - (int)1))));
            int32_t _9513_ = (int)0;
            int32_t _9514_ = _1515_coneaxis;
            for (int32_t _1545_i = _9513_; _1545_i < _9514_; ++_1545_i)
            {
              {
                ((*_1544_indexnames)(_1545_i)) = ((*mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->indexnames)(_1545_i));
              }
            }
            int32_t _9515_ = safe_add( _1515_coneaxis,(int)1 );
            int32_t _9516_ = _1514_nd;
            for (int32_t _1546_i = _9515_; _1546_i < _9516_; ++_1546_i)
            {
              {
                ((*_1544_indexnames)((_1546_i - (int)1))) = ((*mosek::fusion::p_ConeDomain::_get_impl(_1512_dom)->indexnames)(_1546_i));
              }
            }
            std::vector<int64_t> _9517_;
            for (int32_t _1547_i = (int)0, _9518_ = _1523_numcone; _1547_i < _9518_ ; ++_1547_i)
            {
              _9517_.push_back((int64_t)_ptr__1538_accidxs[_1547_i]);
            }
            auto _9519_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9517_.size()),_9517_.begin(),_9517_.end()));
            task_format_acc_names(_9519_,_1542_sb->toString(),_1539_accshape,_1544_indexnames);
          }
        }
        else
        {
          {
            std::vector<int64_t> _9520_;
            for (int32_t _1548_i = (int)0, _9521_ = _1523_numcone; _1548_i < _9521_ ; ++_1548_i)
            {
              _9520_.push_back((int64_t)_ptr__1538_accidxs[_1548_i]);
            }
            auto _9522_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9520_.size()),_9520_.begin(),_9520_.end()));
            task_format_acc_names(_9522_,_1542_sb->toString(),_1539_accshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
          }
        }
      }
      var_map->setItem(_1510_name,_1529_varid);
    }
  }
  {}
  return (_1535_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ src/fusion/Model.mbi:1990:6-2181:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1549_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1550_shp,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1551_dom)
{
  _checked_ptr_1<int32_t> _ptr__1550_shp(_1550_shp ? _1550_shp->raw() : nullptr, _1550_shp ? _1550_shp->size(0) : 0);
  if ((((int)((_1549_name).size()) > (int)0) && hasVariable(_1549_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1549_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  mosek::fusion::p_LinearDomain::_get_impl(_1551_dom.get())->finalize_and_validate(_1550_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1552_shape = mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1552_shape(_1552_shape ? _1552_shape->raw() : nullptr,_1552_shape ? _1552_shape->size(0) : 0);
  int32_t _1553_nd = (int)((_1552_shape)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1554_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1553_nd)));
  _checked_ptr_1<int32_t> _ptr__1554_strides(_1554_strides ? _1554_strides->raw() : nullptr,_1554_strides ? _1554_strides->size(0) : 0);
  if ((_1553_nd > (int)0))
  {
    {
      _ptr__1554_strides[(_1553_nd - (int)1)] = (int)1;
      int32_t _9523_ = (int)1;
      int32_t _9524_ = _1553_nd;
      for (int32_t _1555_i = _9523_; _1555_i < _9524_; ++_1555_i)
      {
        {
          _ptr__1554_strides[((_1553_nd - _1555_i) - (int)1)] = safe_mul( _ptr__1554_strides[(_1553_nd - _1555_i)],_ptr__1552_shape[(_1553_nd - _1555_i)] );
        }
      }
    }
  }
  {}
  int32_t _1556_domsize = (int)1;
  int32_t _9525_ = (int)0;
  int32_t _9526_ = (int)((_1552_shape)->size(0));
  for (int32_t _1557_i = _9525_; _1557_i < _9526_; ++_1557_i)
  {
    {
      _1556_domsize *= _ptr__1552_shape[_1557_i];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1558_axisptr = nullptr;
  _checked_ptr_1<int32_t> _ptr__1558_axisptr(_1558_axisptr ? _1558_axisptr->raw() : nullptr,_1558_axisptr ? _1558_axisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1559_nameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1559_nameptr(_1559_nameptr ? _1559_nameptr->raw() : nullptr,_1559_nameptr ? _1559_nameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1560_axisnames = nullptr;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1561_accaxisptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1561_accaxisptr(_1561_accaxisptr ? _1561_accaxisptr->raw() : nullptr,_1561_accaxisptr ? _1561_accaxisptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1562_accnameptr = nullptr;
  _checked_ptr_1<int64_t> _ptr__1562_accnameptr(_1562_accnameptr ? _1562_accnameptr->raw() : nullptr,_1562_accnameptr ? _1562_accnameptr->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1563_accaxisnames = nullptr;
  if ((((int)((_1549_name).size()) > (int)0) && (NULL != mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames.get())))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1564_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1565_accsb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      int32_t _1566_axisp = (int)0;
      int64_t _1567_namep = (int)0;
      int64_t _1568_numnames = (int)0;
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)->size(0)) != _1553_nd))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
        }
      }
      {}
      int32_t _9527_ = (int)0;
      int32_t _9528_ = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)->size(0));
      for (int32_t _1569_i = _9527_; _1569_i < _9528_; ++_1569_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)(_1569_i)).get()))
          {
            {
              if ((_ptr__1552_shape[_1569_i] != (int)((((*mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)(_1569_i)))->size(0))))
              {
                {
                  throw ::mosek::fusion::DomainError(std::string ("Invalid index name definition"));
                }
              }
              {}
              _1568_numnames += _ptr__1552_shape[_1569_i];
            }
          }
          {}
        }
      }
      _1559_nameptr = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1568_numnames,(int)1 ))));
      _ptr__1559_nameptr.update(_1559_nameptr ? _1559_nameptr->raw() : nullptr, _1559_nameptr ? _1559_nameptr->size(0) : 0);
      std::vector<int32_t> _9529_;
      for (int32_t _1570_i = (int)0, _9530_ = _1553_nd; _1570_i < _9530_ ; ++_1570_i)
      {
        _9529_.push_back((-(int)1));
      }
      auto _9531_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9529_.size()),_9529_.begin(),_9529_.end()));
      _1558_axisptr = _9531_;
      _ptr__1558_axisptr.update(_1558_axisptr ? _1558_axisptr->raw() : nullptr, _1558_axisptr ? _1558_axisptr->size(0) : 0);
      int32_t _9532_ = (int)0;
      int32_t _9533_ = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)->size(0));
      for (int32_t _1571_i = _9532_; _1571_i < _9533_; ++_1571_i)
      {
        {
          if ((NULL != ((*mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)(_1571_i)).get()))
          {
            {
              _ptr__1558_axisptr[_1571_i] = _1566_axisp;
              int32_t _9534_ = (int)0;
              int32_t _9535_ = _ptr__1552_shape[_1571_i];
              for (int32_t _1572_j = _9534_; _1572_j < _9535_; ++_1572_j)
              {
                {
                  _1564_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*((*mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)(_1571_i)))(_1572_j)));
                  ++ _1566_axisp;
                  _1567_namep += (int)((((*((*mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames)(_1571_i)))(_1572_j))).size());
                  _ptr__1559_nameptr[_1566_axisp] = _1567_namep;
                }
              }
            }
          }
          {}
        }
      }
      _1560_axisnames = _1564_sb;
      _1563_accaxisnames = _1565_accsb;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1573_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__1573_sparsity(_1573_sparsity ? _1573_sparsity->raw() : nullptr,_1573_sparsity ? _1573_sparsity->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1574_perm = nullptr;
  _checked_ptr_1<int32_t> _ptr__1574_perm(_1574_perm ? _1574_perm->raw() : nullptr,_1574_perm ? _1574_perm->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->empty)
  {
    {
      _1573_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0)));
      _ptr__1573_sparsity.update(_1573_sparsity ? _1573_sparsity->raw() : nullptr, _1573_sparsity ? _1573_sparsity->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->sparsity)->size(1)) != _1553_nd))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int32_t _1575_n = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->sparsity)->size(0));
      _1573_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1575_n)));
      _ptr__1573_sparsity.update(_1573_sparsity ? _1573_sparsity->raw() : nullptr, _1573_sparsity ? _1573_sparsity->size(0) : 0);
      {
        bool _1576_err = false;
        std::shared_ptr< monty::ndarray< int32_t,2 > > _1577_sp = mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->sparsity;
        int32_t _9536_ = (int)0;
        int32_t _9537_ = _1575_n;
        for (int32_t _1578_i = _9536_; _1578_i < _9537_; ++_1578_i)
        {
          {
            int32_t _9538_ = (int)0;
            int32_t _9539_ = (int)((_1577_sp)->size(1));
            for (int32_t _1579_j = _9538_; _1579_j < _9539_; ++_1579_j)
            {
              {
                _1576_err = (_1576_err || ((((*_1577_sp)(_1578_i,_1579_j)) < (int)0) || (((*_1577_sp)(_1578_i,_1579_j)) >= _ptr__1552_shape[_1579_j])));
              }
            }
            if ((!_1576_err))
            {
              {
                int64_t _1580_linidx = (int)0;
                int32_t _9540_ = (int)0;
                int32_t _9541_ = (int)((_1577_sp)->size(1));
                for (int32_t _1581_j = _9540_; _1581_j < _9541_; ++_1581_j)
                {
                  {
                    _1580_linidx += safe_mul( _ptr__1554_strides[_1581_j],((*_1577_sp)(_1578_i,_1581_j)) );
                  }
                }
                _ptr__1573_sparsity[_1578_i] = _1580_linidx;
              }
            }
            {}
          }
        }
        if (_1576_err)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int32_t,2 > > _1582_midxs = mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->sparsity;
      int32_t _1583_maxdim = (int)0;
      int32_t _9542_ = (int)0;
      int32_t _9543_ = _1553_nd;
      for (int32_t _1584_i = _9542_; _1584_i < _9543_; ++_1584_i)
      {
        {
          if ((_1583_maxdim < _ptr__1552_shape[_1584_i]))
          {
            {
              _1583_maxdim = _ptr__1552_shape[_1584_i];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1585_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1575_n)));
      _checked_ptr_1<int32_t> _ptr__1585_curperm(_1585_curperm ? _1585_curperm->raw() : nullptr,_1585_curperm ? _1585_curperm->size(0) : 0);
      int32_t _9544_ = (int)0;
      int32_t _9545_ = _1575_n;
      for (int32_t _1586_i = _9544_; _1586_i < _9545_; ++_1586_i)
      {
        {
          _ptr__1585_curperm[_1586_i] = _1586_i;
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1587_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1575_n)));
      _checked_ptr_1<int32_t> _ptr__1587_tgtperm(_1587_tgtperm ? _1587_tgtperm->raw() : nullptr,_1587_tgtperm ? _1587_tgtperm->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1588_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1583_maxdim,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__1588_ptr(_1588_ptr ? _1588_ptr->raw() : nullptr,_1588_ptr ? _1588_ptr->size(0) : 0);
      int32_t _9546_ = (int)0;
      int32_t _9547_ = _1553_nd;
      for (int32_t _1589_dd = _9546_; _1589_dd < _9547_; ++_1589_dd)
      {
        {
          {
            int32_t _1590_d = ((_1553_nd - _1589_dd) - (int)1);
            int32_t _9548_ = (int)0;
            int32_t _9549_ = safe_add( _ptr__1552_shape[_1590_d],(int)1 );
            for (int32_t _1591_i = _9548_; _1591_i < _9549_; ++_1591_i)
            {
              {
                _ptr__1588_ptr[_1591_i] = (int)0;
              }
            }
            int32_t _9550_ = (int)0;
            int32_t _9551_ = _1575_n;
            for (int32_t _1592_i = _9550_; _1592_i < _9551_; ++_1592_i)
            {
              {
                ++ _ptr__1588_ptr[safe_add( ((*_1582_midxs)(_1592_i,_1590_d)),(int)1 )];
              }
            }
            int32_t _9552_ = (int)0;
            int32_t _9553_ = _ptr__1552_shape[_1590_d];
            for (int32_t _1593_i = _9552_; _1593_i < _9553_; ++_1593_i)
            {
              {
                _ptr__1588_ptr[safe_add( _1593_i,(int)1 )] += _ptr__1588_ptr[_1593_i];
              }
            }
            int32_t _9554_ = (int)0;
            int32_t _9555_ = _1575_n;
            for (int32_t _1594_ii = _9554_; _1594_ii < _9555_; ++_1594_ii)
            {
              {
                int32_t _1595_i = _ptr__1585_curperm[_1594_ii];
                _ptr__1587_tgtperm[_ptr__1588_ptr[((*_1582_midxs)(_1595_i,_1590_d))]] = _1595_i;
                ++ _ptr__1588_ptr[((*_1582_midxs)(_1595_i,_1590_d))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1596_tmp = _1585_curperm;
          _checked_ptr_1<int32_t> _ptr__1596_tmp(_1596_tmp ? _1596_tmp->raw() : nullptr,_1596_tmp ? _1596_tmp->size(0) : 0);
          _1585_curperm = _1587_tgtperm;
          _ptr__1585_curperm.update(_1585_curperm ? _1585_curperm->raw() : nullptr, _1585_curperm ? _1585_curperm->size(0) : 0);
          _1587_tgtperm = _1596_tmp;
          _ptr__1587_tgtperm.update(_1587_tgtperm ? _1587_tgtperm->raw() : nullptr, _1587_tgtperm ? _1587_tgtperm->size(0) : 0);
        }
      }
      int32_t _9556_ = (int)0;
      int32_t _9557_ = _1575_n;
      for (int32_t _1597_ii = _9556_; _1597_ii < _9557_; ++_1597_ii)
      {
        {
          int32_t _1598_i = _ptr__1585_curperm[_1597_ii];
          int64_t _1599_k = (int)0;
          int32_t _9558_ = (int)0;
          int32_t _9559_ = _1553_nd;
          for (int32_t _1600_j = _9558_; _1600_j < _9559_; ++_1600_j)
          {
            {
              _1599_k += safe_mul( _ptr__1554_strides[_1600_j],((*_1582_midxs)(_1598_i,_1600_j)) );
            }
          }
          _ptr__1573_sparsity[_1597_ii] = _1599_k;
        }
      }
    }
  }
  {}
  int32_t _9560_;
  bool _9561_ = (NULL != _1573_sparsity.get());
  if (_9561_)
  {
    _9560_ = (int)((_1573_sparsity)->size(0));
  }
  else
  {
    _9560_ = _1556_domsize;
  }
  int32_t _1601_nvaritems = _9560_;
  std::shared_ptr< monty::ndarray< double,1 > > _1602_bnds = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1601_nvaritems)));
  _checked_ptr_1<double> _ptr__1602_bnds(_1602_bnds ? _1602_bnds->raw() : nullptr,_1602_bnds ? _1602_bnds->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->bnd)->size(0)) == (int)1))
      {
        {
          int32_t _9562_ = (int)0;
          int32_t _9563_ = _1601_nvaritems;
          for (int32_t _1603_i = _9562_; _1603_i < _9563_; ++_1603_i)
          {
            {
              _ptr__1602_bnds[_1603_i] = ((*mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->bnd)->size(0)) == _1601_nvaritems))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->bnd,(int)0,_1602_bnds,(int)0,_1601_nvaritems);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1604_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1601_nvaritems)));
  _checked_ptr_1<int32_t> _ptr__1604_nativeidxs(_1604_nativeidxs ? _1604_nativeidxs->raw() : nullptr,_1604_nativeidxs ? _1604_nativeidxs->size(0) : 0);
  int32_t _1605_varblockid = linearvar_alloc(_1601_nvaritems,_1604_nativeidxs);
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1604_nativeidxs);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1604_nativeidxs,_1602_bnds);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1604_nativeidxs,_1602_bnds);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1604_nativeidxs,_1602_bnds);
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1606_res = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_1549_name,(int64_t)(_1605_varblockid),_1552_shape,_1573_sparsity,_1604_nativeidxs);
  ((*vars)(_1605_varblockid)) = (_1606_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1549_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1607_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1549_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1553_nd > (int)0))
      {
        {
          _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9564_ = (int)1;
          int32_t _9565_ = _1553_nd;
          for (int32_t _1608_i = _9564_; _1608_i < _9565_; ++_1608_i)
          {
            {
              _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1608_i);
            }
          }
        }
      }
      {}
      _1607_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames.get()))
      {
        {
          task_format_var_names(_1604_nativeidxs,_1607_sb->toString(),_1552_shape,_1573_sparsity,mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_var_names(_1604_nativeidxs,_1607_sb->toString(),_1552_shape,_1573_sparsity,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
      var_map->setItem(_1549_name,_1605_varblockid);
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1551_dom)->cardinal_flag)
  {
    {
      task_var_putintlist(_1604_nativeidxs);
    }
  }
  {}
  return (_1606_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.variable_
// Method mosek.fusion.Model.variable_ @ src/fusion/Model.mbi:1806:6-1928:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1609_name,std::shared_ptr< monty::ndarray< int32_t,1 > > _1610_shp,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1611_dom)
{
  _checked_ptr_1<int32_t> _ptr__1610_shp(_1610_shp ? _1610_shp->raw() : nullptr, _1610_shp ? _1610_shp->size(0) : 0);
  if ((((int)((_1609_name).size()) > (int)0) && hasVariable(_1609_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1609_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  mosek::fusion::p_PSDDomain::_get_impl(_1611_dom.get())->finalize_and_validate(_1610_shp);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1612_shape = mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->shape;
  _checked_ptr_1<int32_t> _ptr__1612_shape(_1612_shape ? _1612_shape->raw() : nullptr,_1612_shape ? _1612_shape->size(0) : 0);
  int32_t _1613_conedim1 = mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->conedim1;
  int32_t _1614_conedim2 = mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->conedim2;
  int32_t _1615_nd = (int)((_1612_shape)->size(0));
  int32_t _1616_d = _ptr__1612_shape[_1613_conedim1];
  if ((_1613_conedim1 > _1614_conedim2))
  {
    {
      int32_t _1617_tmp = _1613_conedim1;
      _1613_conedim1 = _1614_conedim2;
      _1614_conedim2 = _1617_tmp;
    }
  }
  {}
  if (((_1613_conedim1 == _1614_conedim2) || ((_1613_conedim1 < (int)0) || (_1614_conedim2 >= _1615_nd))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1612_shape[_1613_conedim1] != _ptr__1612_shape[_1614_conedim2]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int32_t _1618_numcone = (int)1;
  int32_t _9566_ = (int)0;
  int32_t _9567_ = _1613_conedim1;
  for (int32_t _1619_i = _9566_; _1619_i < _9567_; ++_1619_i)
  {
    {
      _1618_numcone *= _ptr__1612_shape[_1619_i];
    }
  }
  int32_t _9568_ = safe_add( _1613_conedim1,(int)1 );
  int32_t _9569_ = _1614_conedim2;
  for (int32_t _1620_i = _9568_; _1620_i < _9569_; ++_1620_i)
  {
    {
      _1618_numcone *= _ptr__1612_shape[_1620_i];
    }
  }
  int32_t _9570_ = safe_add( _1614_conedim2,(int)1 );
  int32_t _9571_ = _1615_nd;
  for (int32_t _1621_i = _9570_; _1621_i < _9571_; ++_1621_i)
  {
    {
      _1618_numcone *= _ptr__1612_shape[_1621_i];
    }
  }
  int32_t _1622_numelm = (safe_mul( safe_mul( _1618_numcone,_1616_d ),safe_add( _1616_d,(int)1 ) ) / (int)2);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1623_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1622_numelm)));
  _checked_ptr_1<int64_t> _ptr__1623_nativeidxs(_1623_nativeidxs ? _1623_nativeidxs->raw() : nullptr,_1623_nativeidxs ? _1623_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1624_barvaridxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1618_numcone)));
  _checked_ptr_1<int32_t> _ptr__1624_barvaridxs(_1624_barvaridxs ? _1624_barvaridxs->raw() : nullptr,_1624_barvaridxs ? _1624_barvaridxs->size(0) : 0);
  int32_t _1625_varid = barvar_alloc(_1616_d,_1618_numcone,_1624_barvaridxs,_1623_nativeidxs);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1626_res = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1609_name,_1625_varid,_1612_shape,mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->conedim2,_1624_barvaridxs,_1623_nativeidxs);
  if (((_1609_name != std::string ("")) || true))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1627_coneshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((_1615_nd - (int)2))));
      _checked_ptr_1<int32_t> _ptr__1627_coneshape(_1627_coneshape ? _1627_coneshape->raw() : nullptr,_1627_coneshape ? _1627_coneshape->size(0) : 0);
      int32_t _9572_;
      bool _9573_ = (_1613_conedim1 < _1614_conedim2);
      if (_9573_)
      {
        _9572_ = _1613_conedim1;
      }
      else
      {
        _9572_ = _1614_conedim2;
      }
      int32_t _1628_cdim1 = _9572_;
      int32_t _9574_;
      bool _9575_ = (_1613_conedim1 < _1614_conedim2);
      if (_9575_)
      {
        _9574_ = _1614_conedim2;
      }
      else
      {
        _9574_ = _1613_conedim1;
      }
      int32_t _1629_cdim2 = _9574_;
      int32_t _9576_ = (int)0;
      int32_t _9577_ = _1628_cdim1;
      for (int32_t _1630_i = _9576_; _1630_i < _9577_; ++_1630_i)
      {
        {
          _ptr__1627_coneshape[_1630_i] = _ptr__1612_shape[_1630_i];
        }
      }
      int32_t _9578_ = safe_add( _1628_cdim1,(int)1 );
      int32_t _9579_ = _1629_cdim2;
      for (int32_t _1631_i = _9578_; _1631_i < _9579_; ++_1631_i)
      {
        {
          _ptr__1627_coneshape[(_1631_i - (int)1)] = _ptr__1612_shape[_1631_i];
        }
      }
      int32_t _9580_ = safe_add( _1629_cdim2,(int)1 );
      int32_t _9581_ = _1615_nd;
      for (int32_t _1632_i = _9580_; _1632_i < _9581_; ++_1632_i)
      {
        {
          _ptr__1627_coneshape[(_1632_i - (int)2)] = _ptr__1612_shape[_1632_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1633_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1633_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1609_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((_1615_nd - (int)2) > (int)0))
      {
        {
          _1633_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9582_ = (int)1;
          int32_t _9583_ = (_1615_nd - (int)2);
          for (int32_t _1634_i = _9582_; _1634_i < _9583_; ++_1634_i)
          {
            {
              _1633_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1634_i);
            }
          }
        }
      }
      {}
      _1633_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1635_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1615_nd - (int)2))));
          int32_t _9584_ = (int)0;
          int32_t _9585_ = _1628_cdim1;
          for (int32_t _1636_i = _9584_; _1636_i < _9585_; ++_1636_i)
          {
            {
              ((*_1635_indexnames)(_1636_i)) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->indexnames)(_1636_i));
            }
          }
          int32_t _9586_ = safe_add( _1628_cdim1,(int)1 );
          int32_t _9587_ = _1629_cdim2;
          for (int32_t _1637_i = _9586_; _1637_i < _9587_; ++_1637_i)
          {
            {
              ((*_1635_indexnames)((_1637_i - (int)1))) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->indexnames)(_1637_i));
            }
          }
          int32_t _9588_ = safe_add( _1629_cdim2,(int)1 );
          int32_t _9589_ = _1615_nd;
          for (int32_t _1638_i = _9588_; _1638_i < _9589_; ++_1638_i)
          {
            {
              ((*_1635_indexnames)((_1638_i - (int)2))) = ((*mosek::fusion::p_PSDDomain::_get_impl(_1611_dom)->indexnames)(_1638_i));
            }
          }
          task_format_barvar_names(_1624_barvaridxs,_1633_sb->toString(),_1627_coneshape,_1635_indexnames);
        }
      }
      else
      {
        {
          task_format_barvar_names(_1624_barvaridxs,_1633_sb->toString(),_1627_coneshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  ((*barvars)(_1625_varid)) = (_1626_res).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1609_name).size()) > (int)0))
  {
    {
      var_map->setItem(_1609_name,(-safe_add( _1625_varid,(int)1 )));
    }
  }
  {}
  return (_1626_res).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.variable_

// Begin mosek.fusion.Model.putfrows
// Method mosek.fusion.Model.putfrows @ src/fusion/Model.mbi:1675:6-1799:7
void mosek::fusion::p_Model::putfrows(std::shared_ptr< monty::ndarray< int32_t,1 > > _1639_nativeidxs,int32_t _1640_nativebaseptr,monty::rc_ptr< ::mosek::fusion::WorkStack > _1641_rs,int32_t _1642_nelem,int32_t _1643_nnz,int32_t _1644_ptr_base,int32_t _1645_nidxs_base,int32_t _1646_cof_base)
{
  _checked_ptr_1<int32_t> _ptr__1639_nativeidxs(_1639_nativeidxs ? _1639_nativeidxs->raw() : nullptr, _1639_nativeidxs ? _1639_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1647_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1641_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1647_ri32(_1647_ri32 ? _1647_ri32->raw() : nullptr,_1647_ri32 ? _1647_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1648_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1641_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1648_ri64(_1648_ri64 ? _1648_ri64->raw() : nullptr,_1648_ri64 ? _1648_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1649_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1641_rs)->f64;
  _checked_ptr_1<double> _ptr__1649_rf64(_1649_rf64 ? _1649_rf64->raw() : nullptr,_1649_rf64 ? _1649_rf64->size(0) : 0);
  int32_t _1650_linnz = (int)0;
  int32_t _1651_barnnz = (int)0;
  int32_t _1652_totalpsdelm = (int)0;
  int32_t _9590_ = (int)0;
  int32_t _9591_ = _1642_nelem;
  for (int32_t _1653_i = _9590_; _1653_i < _9591_; ++_1653_i)
  {
    {
      int32_t _1654_ps = _ptr__1647_ri32[safe_add( _1644_ptr_base,_1653_i )];
      int32_t _1655_pe = _ptr__1647_ri32[safe_add( safe_add( _1644_ptr_base,_1653_i ),(int)1 )];
      int32_t _1656_p = _1654_ps;
      while ( ((_1656_p < _1655_pe) && (_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1656_p )] < (int)0)) )
      {
        {
          int32_t _1657_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1648_ri64[safe_add( _1645_nidxs_base,_1656_p )],(int)1 ))));
          int32_t _1658_p0 = _1656_p;
          ++ _1656_p;
          while ( ((_1656_p < _1655_pe) && ((_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1656_p )] < (int)0) && (_1657_barj == ((*barvar_block_elm_barj)((-safe_add( _ptr__1648_ri64[safe_add( _1645_nidxs_base,_1656_p )],(int)1 ))))))) )
          {
            {
              ++ _1656_p;
            }
          }
          ++ _1651_barnnz;
        }
      }
      _1652_totalpsdelm += (_1656_p - _1654_ps);
      while ( ((_1656_p < _1655_pe) && (_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1656_p )] == (int)0)) )
      {
        {
          ++ _1656_p;
        }
      }
      _1650_linnz += (_1655_pe - _1656_p);
    }
  }
  if ((_1642_nelem > ((int)((_1639_nativeidxs)->size(0)) - _1640_nativebaseptr)))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching sizes"));
    }
  }
  {}
  int32_t _1659_numcon = _1642_nelem;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1660_ptrb = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1659_numcon,(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__1660_ptrb(_1660_ptrb ? _1660_ptrb->raw() : nullptr,_1660_ptrb ? _1660_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1661_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1650_linnz)));
  _checked_ptr_1<int32_t> _ptr__1661_subj(_1661_subj ? _1661_subj->raw() : nullptr,_1661_subj ? _1661_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1662_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1650_linnz)));
  _checked_ptr_1<double> _ptr__1662_cof(_1662_cof ? _1662_cof->raw() : nullptr,_1662_cof ? _1662_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1663_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1642_nelem)));
  _checked_ptr_1<double> _ptr__1663_bfix(_1663_bfix ? _1663_bfix->raw() : nullptr,_1663_bfix ? _1663_bfix->size(0) : 0);
  {
    int32_t _1664_k = (int)0;
    int32_t _9592_ = (int)0;
    int32_t _9593_ = _1642_nelem;
    for (int32_t _1665_i = _9592_; _1665_i < _9593_; ++_1665_i)
    {
      {
        int32_t _1666_knz = (int)0;
        int32_t _9594_ = _ptr__1647_ri32[safe_add( _1644_ptr_base,_1665_i )];
        int32_t _9595_ = _ptr__1647_ri32[safe_add( safe_add( _1644_ptr_base,_1665_i ),(int)1 )];
        for (int32_t _1667_j = _9594_; _1667_j < _9595_; ++_1667_j)
        {
          {
            if ((_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1667_j )] == (int)0))
            {
              {
                _ptr__1663_bfix[_1665_i] += _ptr__1649_rf64[safe_add( _1646_cof_base,_1667_j )];
              }
            }
            else if((_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1667_j )] > (int)0))
            {
              {
                _ptr__1661_subj[safe_add( _1664_k,_1666_knz )] = (int32_t)_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1667_j )];
                _ptr__1662_cof[safe_add( _1664_k,_1666_knz )] = _ptr__1649_rf64[safe_add( _1646_cof_base,_1667_j )];
                ++ _1666_knz;
              }
            }
            {}
          }
        }
        _ptr__1660_ptrb[safe_add( _1665_i,(int)1 )] = safe_add( _ptr__1660_ptrb[_1665_i],_1666_knz );
        _1664_k += _1666_knz;
      }
    }
  }
  std::vector<int64_t> _9596_;
  for (int32_t _1668_i = (int)0, _9597_ = _1642_nelem; _1668_i < _9597_ ; ++_1668_i)
  {
    _9596_.push_back(_ptr__1639_nativeidxs[safe_add( _1668_i,_1640_nativebaseptr )]);
  }
  auto _9598_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9596_.size()),_9596_.begin(),_9596_.end()));
  task_putafeflist(_9598_,_1660_ptrb,_1661_subj,_1662_cof,_1663_bfix);
  if ((_1651_barnnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1669_subi = _1639_nativeidxs;
      _checked_ptr_1<int32_t> _ptr__1669_subi(_1669_subi ? _1669_subi->raw() : nullptr,_1669_subi ? _1669_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1670_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _1659_numcon,(int)1 ))));
      _checked_ptr_1<int32_t> _ptr__1670_ptr(_1670_ptr ? _1670_ptr->raw() : nullptr,_1670_ptr ? _1670_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1671_barsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1651_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1671_barsubj(_1671_barsubj ? _1671_barsubj->raw() : nullptr,_1671_barsubj ? _1671_barsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1672_matdim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1651_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1672_matdim(_1672_matdim ? _1672_matdim->raw() : nullptr,_1672_matdim ? _1672_matdim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1673_matnnz = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1651_barnnz)));
      _checked_ptr_1<int64_t> _ptr__1673_matnnz(_1673_matnnz ? _1673_matnnz->raw() : nullptr,_1673_matnnz ? _1673_matnnz->size(0) : 0);
      std::vector<int32_t> _9599_;
      for (int32_t _1675_i = (int)0, _9600_ = _1652_totalpsdelm; _1675_i < _9600_ ; ++_1675_i)
      {
        _9599_.push_back((-(int)1));
      }
      auto _9601_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9599_.size()),_9599_.begin(),_9599_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1674_matsubi = _9601_;
      _checked_ptr_1<int32_t> _ptr__1674_matsubi(_1674_matsubi ? _1674_matsubi->raw() : nullptr,_1674_matsubi ? _1674_matsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1676_matsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1652_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1676_matsubj(_1676_matsubj ? _1676_matsubj->raw() : nullptr,_1676_matsubj ? _1676_matsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1677_matcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1652_totalpsdelm)));
      _checked_ptr_1<double> _ptr__1677_matcof(_1677_matcof ? _1677_matcof->raw() : nullptr,_1677_matcof ? _1677_matcof->size(0) : 0);
      int32_t _1678_barnzi = (int)0;
      int32_t _1679_barmatnzi = (int)0;
      int32_t _9602_ = (int)0;
      int32_t _9603_ = _1659_numcon;
      for (int32_t _1680_i = _9602_; _1680_i < _9603_; ++_1680_i)
      {
        {
          int32_t _1681_p = _ptr__1647_ri32[safe_add( _1644_ptr_base,_1680_i )];
          int32_t _1682_pe = _ptr__1647_ri32[safe_add( safe_add( _1644_ptr_base,_1680_i ),(int)1 )];
          while ( ((_1681_p < _1682_pe) && (_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1681_p )] < (int)0)) )
          {
            {
              int32_t _1683_p0 = _1681_p;
              int32_t _1684_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1648_ri64[safe_add( _1645_nidxs_base,_1681_p )],(int)1 ))));
              while ( ((_1681_p < _1682_pe) && ((_ptr__1648_ri64[safe_add( _1645_nidxs_base,_1681_p )] < (int)0) && (((*barvar_block_elm_barj)((-safe_add( _ptr__1648_ri64[safe_add( _1645_nidxs_base,_1681_p )],(int)1 )))) == _1684_barj))) )
              {
                {
                  _ptr__1674_matsubi[_1679_barmatnzi] = ((*barvar_block_elm_i)((-safe_add( _ptr__1648_ri64[safe_add( _1645_nidxs_base,_1681_p )],(int)1 ))));
                  _ptr__1676_matsubj[_1679_barmatnzi] = ((*barvar_block_elm_j)((-safe_add( _ptr__1648_ri64[safe_add( _1645_nidxs_base,_1681_p )],(int)1 ))));
                  if ((_ptr__1674_matsubi[_1679_barmatnzi] == _ptr__1676_matsubj[_1679_barmatnzi]))
                  {
                    {
                      _ptr__1677_matcof[_1679_barmatnzi] = _ptr__1649_rf64[safe_add( _1646_cof_base,_1681_p )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1677_matcof[_1679_barmatnzi] = (0.5 * _ptr__1649_rf64[safe_add( _1646_cof_base,_1681_p )]);
                    }
                  }
                  ++ _1679_barmatnzi;
                  ++ _1681_p;
                }
              }
              _ptr__1671_barsubj[_1678_barnzi] = _1684_barj;
              _ptr__1672_matdim[_1678_barnzi] = ((*barvar_dim)(_1684_barj));
              _ptr__1673_matnnz[_1678_barnzi] = (_1681_p - _1683_p0);
              ++ _1678_barnzi;
            }
          }
          _1681_p = _1682_pe;
          _ptr__1670_ptr[safe_add( _1680_i,(int)1 )] = _1678_barnzi;
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1685_symmatidx = task_appendsymmatlist(_1672_matdim,_1673_matnnz,_1674_matsubi,_1676_matsubj,_1677_matcof);
      _checked_ptr_1<int64_t> _ptr__1685_symmatidx(_1685_symmatidx ? _1685_symmatidx->raw() : nullptr,_1685_symmatidx ? _1685_symmatidx->size(0) : 0);
      task_putafebarfrowlist(_1669_subi,_1670_ptr,_1671_barsubj,_1685_symmatidx);
    }
  }
  {}
}
// End mosek.fusion.Model.putfrows

// Begin mosek.fusion.Model.putarows
// Method mosek.fusion.Model.putarows @ src/fusion/Model.mbi:1572:6-1672:7
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int32_t,1 > > _1686_nativeidxs,monty::rc_ptr< ::mosek::fusion::WorkStack > _1687_rs,int32_t _1688_nelem,int32_t _1689_nnz,int32_t _1690_ptr_base,int32_t _1691_nidxs_base,int32_t _1692_cof_base)
{
  _checked_ptr_1<int32_t> _ptr__1686_nativeidxs(_1686_nativeidxs ? _1686_nativeidxs->raw() : nullptr, _1686_nativeidxs ? _1686_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1693_ri32 = mosek::fusion::p_WorkStack::_get_impl(_1687_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1693_ri32(_1693_ri32 ? _1693_ri32->raw() : nullptr,_1693_ri32 ? _1693_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1694_ri64 = mosek::fusion::p_WorkStack::_get_impl(_1687_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1694_ri64(_1694_ri64 ? _1694_ri64->raw() : nullptr,_1694_ri64 ? _1694_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1695_rf64 = mosek::fusion::p_WorkStack::_get_impl(_1687_rs)->f64;
  _checked_ptr_1<double> _ptr__1695_rf64(_1695_rf64 ? _1695_rf64->raw() : nullptr,_1695_rf64 ? _1695_rf64->size(0) : 0);
  int32_t _1696_linnz = (int)0;
  int32_t _1697_barnnz = (int)0;
  int32_t _1698_totalpsdelm = (int)0;
  int32_t _9604_ = (int)0;
  int32_t _9605_ = _1688_nelem;
  for (int32_t _1699_i = _9604_; _1699_i < _9605_; ++_1699_i)
  {
    {
      int32_t _1700_ps = _ptr__1693_ri32[safe_add( _1690_ptr_base,_1699_i )];
      int32_t _1701_pe = _ptr__1693_ri32[safe_add( safe_add( _1690_ptr_base,_1699_i ),(int)1 )];
      int32_t _1702_p = _1700_ps;
      while ( ((_1702_p < _1701_pe) && (_ptr__1694_ri64[safe_add( _1691_nidxs_base,_1702_p )] < (int)0)) )
      {
        {
          int32_t _1703_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1694_ri64[safe_add( _1691_nidxs_base,_1702_p )],(int)1 ))));
          int32_t _1704_p0 = _1702_p;
          ++ _1702_p;
          while ( ((_1702_p < _1701_pe) && ((_ptr__1694_ri64[safe_add( _1691_nidxs_base,_1702_p )] < (int)0) && (_1703_barj == ((*barvar_block_elm_barj)((-safe_add( _ptr__1694_ri64[safe_add( _1691_nidxs_base,_1702_p )],(int)1 ))))))) )
          {
            {
              ++ _1702_p;
            }
          }
          ++ _1697_barnnz;
        }
      }
      _1698_totalpsdelm += (_1702_p - _1700_ps);
      _1696_linnz += (_1701_pe - _1702_p);
    }
  }
  _1696_linnz += _1688_nelem;
  int32_t _1705_numcon = (int)((_1686_nativeidxs)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1706_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1705_numcon,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__1706_ptrb(_1706_ptrb ? _1706_ptrb->raw() : nullptr,_1706_ptrb ? _1706_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1707_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1696_linnz)));
  _checked_ptr_1<int32_t> _ptr__1707_subj(_1707_subj ? _1707_subj->raw() : nullptr,_1707_subj ? _1707_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1708_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1696_linnz)));
  _checked_ptr_1<double> _ptr__1708_cof(_1708_cof ? _1708_cof->raw() : nullptr,_1708_cof ? _1708_cof->size(0) : 0);
  {
    int32_t _1709_k = (int)0;
    int32_t _9606_ = (int)0;
    int32_t _9607_ = _1688_nelem;
    for (int32_t _1710_i = _9606_; _1710_i < _9607_; ++_1710_i)
    {
      {
        int32_t _1711_knz = (int)0;
        int32_t _9608_ = _ptr__1693_ri32[safe_add( _1690_ptr_base,_1710_i )];
        int32_t _9609_ = _ptr__1693_ri32[safe_add( safe_add( _1690_ptr_base,_1710_i ),(int)1 )];
        for (int32_t _1712_j = _9608_; _1712_j < _9609_; ++_1712_j)
        {
          {
            if ((_ptr__1694_ri64[safe_add( _1691_nidxs_base,_1712_j )] >= (int)0))
            {
              {
                _ptr__1707_subj[safe_add( _1709_k,_1711_knz )] = (int32_t)_ptr__1694_ri64[safe_add( _1691_nidxs_base,_1712_j )];
                _ptr__1708_cof[safe_add( _1709_k,_1711_knz )] = _ptr__1695_rf64[safe_add( _1692_cof_base,_1712_j )];
                ++ _1711_knz;
              }
            }
            {}
          }
        }
        _ptr__1706_ptrb[safe_add( _1710_i,(int)1 )] = safe_add( _ptr__1706_ptrb[_1710_i],_1711_knz );
        _1709_k += _1711_knz;
      }
    }
  }
  task_putarowlist(_1686_nativeidxs,_1706_ptrb,_1707_subj,_1708_cof);
  if ((_1697_barnnz > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1713_subi = _1686_nativeidxs;
      _checked_ptr_1<int32_t> _ptr__1713_subi(_1713_subi ? _1713_subi->raw() : nullptr,_1713_subi ? _1713_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1714_ptr = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _1705_numcon,(int)1 ))));
      _checked_ptr_1<int64_t> _ptr__1714_ptr(_1714_ptr ? _1714_ptr->raw() : nullptr,_1714_ptr ? _1714_ptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1715_barsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1697_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1715_barsubj(_1715_barsubj ? _1715_barsubj->raw() : nullptr,_1715_barsubj ? _1715_barsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1716_matdim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1697_barnnz)));
      _checked_ptr_1<int32_t> _ptr__1716_matdim(_1716_matdim ? _1716_matdim->raw() : nullptr,_1716_matdim ? _1716_matdim->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1717_matnnz = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_1697_barnnz)));
      _checked_ptr_1<int64_t> _ptr__1717_matnnz(_1717_matnnz ? _1717_matnnz->raw() : nullptr,_1717_matnnz ? _1717_matnnz->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1718_matsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1698_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1718_matsubi(_1718_matsubi ? _1718_matsubi->raw() : nullptr,_1718_matsubi ? _1718_matsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1719_matsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1698_totalpsdelm)));
      _checked_ptr_1<int32_t> _ptr__1719_matsubj(_1719_matsubj ? _1719_matsubj->raw() : nullptr,_1719_matsubj ? _1719_matsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1720_matcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1698_totalpsdelm)));
      _checked_ptr_1<double> _ptr__1720_matcof(_1720_matcof ? _1720_matcof->raw() : nullptr,_1720_matcof ? _1720_matcof->size(0) : 0);
      int32_t _1721_barnzi = (int)0;
      int32_t _1722_barmatnzi = (int)0;
      int32_t _9610_ = (int)0;
      int32_t _9611_ = _1705_numcon;
      for (int32_t _1723_i = _9610_; _1723_i < _9611_; ++_1723_i)
      {
        {
          int32_t _1724_p = _ptr__1693_ri32[safe_add( _1690_ptr_base,_1723_i )];
          int32_t _1725_pe = _ptr__1693_ri32[safe_add( safe_add( _1690_ptr_base,_1723_i ),(int)1 )];
          while ( ((_1724_p < _1725_pe) && (_ptr__1694_ri64[safe_add( _1691_nidxs_base,_1724_p )] < (int)0)) )
          {
            {
              int32_t _1726_p0 = _1724_p;
              int32_t _1727_barj = ((*barvar_block_elm_barj)((-safe_add( _ptr__1694_ri64[safe_add( _1691_nidxs_base,_1724_p )],(int)1 ))));
              while ( ((_1724_p < _1725_pe) && ((_ptr__1694_ri64[safe_add( _1691_nidxs_base,_1724_p )] < (int)0) && (((*barvar_block_elm_barj)((-safe_add( _ptr__1694_ri64[safe_add( _1691_nidxs_base,_1724_p )],(int)1 )))) == _1727_barj))) )
              {
                {
                  _ptr__1718_matsubi[_1722_barmatnzi] = ((*barvar_block_elm_i)((-safe_add( _ptr__1694_ri64[safe_add( _1691_nidxs_base,_1724_p )],(int)1 ))));
                  _ptr__1719_matsubj[_1722_barmatnzi] = ((*barvar_block_elm_j)((-safe_add( _ptr__1694_ri64[safe_add( _1691_nidxs_base,_1724_p )],(int)1 ))));
                  if ((_ptr__1718_matsubi[_1722_barmatnzi] == _ptr__1719_matsubj[_1722_barmatnzi]))
                  {
                    {
                      _ptr__1720_matcof[_1722_barmatnzi] = _ptr__1695_rf64[safe_add( _1692_cof_base,_1724_p )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1720_matcof[_1722_barmatnzi] = (0.5 * _ptr__1695_rf64[safe_add( _1692_cof_base,_1724_p )]);
                    }
                  }
                  ++ _1722_barmatnzi;
                  ++ _1724_p;
                }
              }
              _ptr__1715_barsubj[_1721_barnzi] = _1727_barj;
              _ptr__1716_matdim[_1721_barnzi] = ((*barvar_dim)(_1727_barj));
              _ptr__1717_matnnz[_1721_barnzi] = (_1724_p - _1726_p0);
              ++ _1721_barnzi;
            }
          }
          _1724_p = _1725_pe;
          _ptr__1714_ptr[safe_add( _1723_i,(int)1 )] = _1721_barnzi;
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _1728_symmatidx = task_appendsymmatlist(_1716_matdim,_1717_matnnz,_1718_matsubi,_1719_matsubj,_1720_matcof);
      _checked_ptr_1<int64_t> _ptr__1728_symmatidx(_1728_symmatidx ? _1728_symmatidx->raw() : nullptr,_1728_symmatidx ? _1728_symmatidx->size(0) : 0);
      task_putbararowlist(_1713_subi,_1714_ptr,_1715_barsubj,_1728_symmatidx);
    }
  }
  {}
}
// End mosek.fusion.Model.putarows

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:1444:6-1556:7
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1729_name,monty::rc_ptr< ::mosek::fusion::Expression > _1730_expr,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1731_dom)
{
  if ((((int)((_1729_name).size()) > (int)0) && hasConstraint(_1729_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1729_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1732_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1730_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1732_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1733_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1733_ri32(_1733_ri32 ? _1733_ri32->raw() : nullptr,_1733_ri32 ? _1733_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1734_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1734_ri64(_1734_ri64 ? _1734_ri64->raw() : nullptr,_1734_ri64 ? _1734_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1735_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1735_rf64(_1735_rf64 ? _1735_rf64->raw() : nullptr,_1735_rf64 ? _1735_rf64->size(0) : 0);
  int32_t _1736_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1737_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1738_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1739_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int32_t _1740_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1741_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1742_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1743_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1744_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1745_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1746_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1747_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9612_;
  for (int32_t _1749_i = (int)0, _9613_ = _1736_nd; _1749_i < _9613_ ; ++_1749_i)
  {
    _9612_.push_back(_ptr__1733_ri32[safe_add( _1737_shape_base,_1749_i )]);
  }
  auto _9614_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9612_.size()),_9612_.begin(),_9612_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1748_shape = _9614_;
  _checked_ptr_1<int32_t> _ptr__1748_shape(_1748_shape ? _1748_shape->raw() : nullptr,_1748_shape ? _1748_shape->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(_1731_dom.get())->finalize_and_validate(_1748_shape);
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->shape)->size(0)) != _1736_nd))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int32_t _9615_ = (int)0;
          int32_t _9616_ = _1736_nd;
          for (int32_t _1750_i = _9615_; _1750_i < _9616_; ++_1750_i)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->shape)(_1750_i)) != _ptr__1733_ri32[safe_add( _1737_shape_base,_1750_i )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int32_t _1751_numcon = (int)1;
  int32_t _9617_ = (int)0;
  int32_t _9618_ = _1736_nd;
  for (int32_t _1752_i = _9617_; _1752_i < _9618_; ++_1752_i)
  {
    {
      _1751_numcon *= _ptr__1733_ri32[safe_add( _1737_shape_base,_1752_i )];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1753_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1751_numcon)));
  _checked_ptr_1<int32_t> _ptr__1753_nativeidxs(_1753_nativeidxs ? _1753_nativeidxs->raw() : nullptr,_1753_nativeidxs ? _1753_nativeidxs->size(0) : 0);
  int32_t _1754_conid = con_allocate(_1753_nativeidxs);
  putarows(_1753_nativeidxs,rs,_1738_nelem,_1739_nnz,_1742_ptr_base,_1743_nidxs_base,_1744_cof_base);
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1755_bl = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1751_numcon)));
  _checked_ptr_1<double> _ptr__1755_bl(_1755_bl ? _1755_bl->raw() : nullptr,_1755_bl ? _1755_bl->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1756_bu = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1751_numcon)));
  _checked_ptr_1<double> _ptr__1756_bu(_1756_bu ? _1756_bu->raw() : nullptr,_1756_bu ? _1756_bu->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1757_domlb = mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->lb;
  _checked_ptr_1<double> _ptr__1757_domlb(_1757_domlb ? _1757_domlb->raw() : nullptr,_1757_domlb ? _1757_domlb->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1758_domub = mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->ub;
  _checked_ptr_1<double> _ptr__1758_domub(_1758_domub ? _1758_domub->raw() : nullptr,_1758_domub ? _1758_domub->size(0) : 0);
  bool _1759_domempty = mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->empty;
  bool _1760_domsc = mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->scalable;
  std::shared_ptr< monty::ndarray< int32_t,2 > > _1761_domsp = mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->sparsity;
  {
    if (_1760_domsc)
    {
      {
        int32_t _9619_ = (int)0;
        int32_t _9620_ = _1751_numcon;
        for (int32_t _1762_i = _9619_; _1762_i < _9620_; ++_1762_i)
        {
          {
            _ptr__1755_bl[_1762_i] = _ptr__1757_domlb[(int)0];
            _ptr__1756_bu[_1762_i] = _ptr__1758_domub[(int)0];
          }
        }
      }
    }
    else if(_1759_domempty)
    {
      {
      }
    }
    else if((NULL != _1761_domsp.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _1763_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1736_nd)));
        _checked_ptr_1<int32_t> _ptr__1763_stride(_1763_stride ? _1763_stride->raw() : nullptr,_1763_stride ? _1763_stride->size(0) : 0);
        _ptr__1763_stride[(_1736_nd - (int)1)] = (int)1;
        int32_t _9621_ = (int)1;
        int32_t _9622_ = _1736_nd;
        for (int32_t _1764_i = _9621_; _1764_i < _9622_; ++_1764_i)
        {
          {
            _ptr__1763_stride[((_1736_nd - _1764_i) - (int)1)] = safe_mul( _ptr__1763_stride[(_1736_nd - _1764_i)],_ptr__1733_ri32[(safe_add( _1737_shape_base,_1736_nd ) - _1764_i)] );
          }
        }
        int32_t _9623_ = (int)0;
        int32_t _9624_ = (int)((_1757_domlb)->size(0));
        for (int32_t _1765_i = _9623_; _1765_i < _9624_; ++_1765_i)
        {
          {
            int32_t _1766_idx = (int)0;
            int32_t _9625_ = (int)0;
            int32_t _9626_ = _1736_nd;
            for (int32_t _1767_j = _9625_; _1767_j < _9626_; ++_1767_j)
            {
              {
                _1766_idx += safe_mul( _ptr__1763_stride[_1767_j],((*_1761_domsp)(_1765_i,_1767_j)) );
              }
            }
            _ptr__1755_bl[_1766_idx] = _ptr__1757_domlb[_1765_i];
            _ptr__1756_bu[_1766_idx] = _ptr__1758_domub[_1765_i];
          }
        }
      }
    }
    else
    {
      {
        int32_t _9627_ = (int)0;
        int32_t _9628_ = _1751_numcon;
        for (int32_t _1768_i = _9627_; _1768_i < _9628_; ++_1768_i)
        {
          {
            _ptr__1755_bl[_1768_i] = _ptr__1757_domlb[_1768_i];
            _ptr__1756_bu[_1768_i] = _ptr__1758_domub[_1768_i];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1753_nativeidxs,_1755_bl,_1756_bu);
  if ((_1740_ncodeatom > (int)0))
  {
    {
      con_blocks->replace_row_code(rs,_1753_nativeidxs,_1742_ptr_base,_1743_nidxs_base,_1745_codeptr,_1746_code,_1747_cconst);
    }
  }
  {}
  if (((int)((_1729_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1769_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1769_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1729_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((int)((_1748_shape)->size(0)) > (int)0))
      {
        {
          _1769_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
        }
      }
      {}
      int32_t _9629_ = (int)1;
      int32_t _9630_ = (int)((_1748_shape)->size(0));
      for (int32_t _1770_i = _9629_; _1770_i < _9630_; ++_1770_i)
      {
        {
          _1769_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1770_i);
        }
      }
      _1769_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->indexnames.get()))
      {
        {
          task_format_con_names(_1753_nativeidxs,_1769_sb->toString(),_1748_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_RangeDomain::_get_impl(_1731_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_con_names(_1753_nativeidxs,_1769_sb->toString(),_1748_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  std::vector<int32_t> _9631_;
  for (int32_t _1772_i = (int)0, _9632_ = _1736_nd; _1772_i < _9632_ ; ++_1772_i)
  {
    _9631_.push_back(_ptr__1733_ri32[safe_add( _1737_shape_base,_1772_i )]);
  }
  auto _9633_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9631_.size()),_9631_.begin(),_9631_.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1771_res = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1729_name,_9633_,_1753_nativeidxs,_1754_conid);
  ((*cons)(_1754_conid)) = (_1771_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1729_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1729_name,_1754_conid);
    }
  }
  {}
  return _1771_res;
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:1248:6-1424:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1773_name,monty::rc_ptr< ::mosek::fusion::Expression > _1774_expr,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1775_dom)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1776_shape = _1774_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__1776_shape(_1776_shape ? _1776_shape->raw() : nullptr,_1776_shape ? _1776_shape->size(0) : 0);
  mosek::fusion::p_PSDDomain::_get_impl(_1775_dom.get())->finalize_and_validate(_1776_shape);
  bool _1777_tril = (mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim2);
  int32_t _9634_;
  bool _9635_ = (mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim2);
  if (_9635_)
  {
    _9634_ = mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim2;
  }
  else
  {
    _9634_ = mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim1;
  }
  int32_t _1778_conedim1 = _9634_;
  int32_t _9636_;
  bool _9637_ = (mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim2);
  if (_9637_)
  {
    _9636_ = mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim1;
  }
  else
  {
    _9636_ = mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->conedim2;
  }
  int32_t _1779_conedim0 = _9636_;
  monty::rc_ptr< ::mosek::fusion::Expression > _9638_;
  bool _9639_ = (mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_9639_)
  {
    _9638_ = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1779_conedim0,_1778_conedim1,_1774_expr).as<::mosek::fusion::Expression>();
  }
  else
  {
    _9638_ = _1774_expr;
  }
  monty::rc_ptr< ::mosek::fusion::ExprOptimizeCode > _1780_e = ::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprScaleVecPSD::_new_ExprScaleVecPSD(_1779_conedim0,_1778_conedim1,(::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1779_conedim0,_1778_conedim1,_9638_)).as<::mosek::fusion::BaseExpression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1780_e->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1781_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1781_ri32(_1781_ri32 ? _1781_ri32->raw() : nullptr,_1781_ri32 ? _1781_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1782_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1782_ri64(_1782_ri64 ? _1782_ri64->raw() : nullptr,_1782_ri64 ? _1782_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1783_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1783_rf64(_1783_rf64 ? _1783_rf64->raw() : nullptr,_1783_rf64 ? _1783_rf64->size(0) : 0);
  int32_t _1784_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1785_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1786_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1787_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1788_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int32_t _1789_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1790_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1791_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1792_sp_base = mosek::fusion::p_WorkStack::_get_impl(rs)->sp_base;
  int32_t _1793_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1794_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1795_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1796_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  int32_t _1797_conedim = _ptr__1776_shape[_1778_conedim1];
  int32_t _1798_conesize = (safe_mul( _1797_conedim,safe_add( _1797_conedim,(int)1 ) ) / (int)2);
  int32_t _1799_numcone = (int)1;
  int32_t _9640_ = (int)0;
  int32_t _9641_ = _1784_nd;
  for (int32_t _1800_i = _9640_; _1800_i < _9641_; ++_1800_i)
  {
    {
      if (((_1800_i != _1779_conedim0) && (_1800_i != _1778_conedim1)))
      {
        {
          _1799_numcone *= _ptr__1776_shape[_1800_i];
        }
      }
      {}
    }
  }
  int64_t _1801_domainidx = task_append_domain_svec_psd(_1798_conesize);
  int32_t _1802_domsize = safe_mul( _1798_conesize,_1799_numcone );
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1803_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1802_domsize)));
  _checked_ptr_1<int32_t> _ptr__1803_afeidxs(_1803_afeidxs ? _1803_afeidxs->raw() : nullptr,_1803_afeidxs ? _1803_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1804_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1799_numcone)));
  _checked_ptr_1<int32_t> _ptr__1804_accidxs(_1804_accidxs ? _1804_accidxs->raw() : nullptr,_1804_accidxs ? _1804_accidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1805_conelmidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1802_domsize)));
  _checked_ptr_1<int32_t> _ptr__1805_conelmidx(_1805_conelmidx ? _1805_conelmidx->raw() : nullptr,_1805_conelmidx ? _1805_conelmidx->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1806_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1802_domsize)));
  _checked_ptr_1<double> _ptr__1806_g(_1806_g ? _1806_g->raw() : nullptr,_1806_g ? _1806_g->size(0) : 0);
  int32_t _1807_conid = acon_allocate(_1801_domainidx,_1798_conesize,_1799_numcone,_1806_g,_1803_afeidxs,_1804_accidxs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1808_aconidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1802_domsize)));
  _checked_ptr_1<int32_t> _ptr__1808_aconidxs(_1808_aconidxs ? _1808_aconidxs->raw() : nullptr,_1808_aconidxs ? _1808_aconidxs->size(0) : 0);
  acon_block_map->get(_1807_conid,_1808_aconidxs,(int)0);
  int64_t _1809_d5 = (int)1;
  int64_t _1810_d4 = _ptr__1776_shape[_1778_conedim1];
  int64_t _1811_d3 = (int)1;
  int64_t _1812_d2 = _ptr__1776_shape[_1779_conedim0];
  int64_t _1813_d1 = (int)1;
  int32_t _9642_ = (int)0;
  int32_t _9643_ = _1779_conedim0;
  for (int32_t _1814_i = _9642_; _1814_i < _9643_; ++_1814_i)
  {
    {
      _1813_d1 *= _ptr__1776_shape[_1814_i];
    }
  }
  int32_t _9644_ = safe_add( _1779_conedim0,(int)1 );
  int32_t _9645_ = _1778_conedim1;
  for (int32_t _1815_i = _9644_; _1815_i < _9645_; ++_1815_i)
  {
    {
      _1811_d3 *= _ptr__1776_shape[_1815_i];
    }
  }
  int32_t _9646_ = safe_add( _1778_conedim1,(int)1 );
  int32_t _9647_ = _1784_nd;
  for (int32_t _1816_i = _9646_; _1816_i < _9647_; ++_1816_i)
  {
    {
      _1809_d5 *= _ptr__1776_shape[_1816_i];
    }
  }
  {
    int32_t _1817_k = (int)0;
    double _1818_s = (1.0 / ::mosek::fusion::Utils::Tools::sqrt((double)((int)2)));
    int32_t _9648_ = (int)0;
    int64_t _9649_ = safe_mul( safe_mul( _1813_d1,_1811_d3 ),_1809_d5 );
    for (int64_t _1819_i1 = _9648_; _1819_i1 < _9649_; ++_1819_i1)
    {
      {
        int32_t _9650_ = (int)0;
        int64_t _9651_ = _1812_d2;
        for (int64_t _1820_i2 = _9650_; _1820_i2 < _9651_; ++_1820_i2)
        {
          {
            ++ _1817_k;
            int64_t _9652_ = safe_add( _1820_i2,(int)1 );
            int64_t _9653_ = _1810_d4;
            for (int64_t _1821_i4 = _9652_; _1821_i4 < _9653_; ++_1821_i4)
            {
              {
                ((*acon_elm_scale)(_ptr__1808_aconidxs[_1817_k])) = _1818_s;
                ++ _1817_k;
              }
            }
          }
        }
      }
    }
  }
  {
    std::shared_ptr< monty::ndarray< int32_t,1 > > _1822_afetrilperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1785_nelem)));
    _checked_ptr_1<int32_t> _ptr__1822_afetrilperm(_1822_afetrilperm ? _1822_afetrilperm->raw() : nullptr,_1822_afetrilperm ? _1822_afetrilperm->size(0) : 0);
    int32_t _1823_k = (int)0;
    if (_1777_tril)
    {
      {
        int32_t _9654_ = (int)0;
        int64_t _9655_ = _1813_d1;
        for (int64_t _1824_i1 = _9654_; _1824_i1 < _9655_; ++_1824_i1)
        {
          {
            int32_t _9656_ = (int)0;
            int64_t _9657_ = _1810_d4;
            for (int64_t _1825_i4 = _9656_; _1825_i4 < _9657_; ++_1825_i4)
            {
              {
                int32_t _9658_ = (int)0;
                int64_t _9659_ = _1811_d3;
                for (int64_t _1826_i3 = _9658_; _1826_i3 < _9659_; ++_1826_i3)
                {
                  {
                    int64_t _9660_ = _1825_i4;
                    int64_t _9661_ = _1812_d2;
                    for (int64_t _1827_i2 = _9660_; _1827_i2 < _9661_; ++_1827_i2)
                    {
                      {
                        int32_t _9662_ = (int)0;
                        int64_t _9663_ = _1809_d5;
                        for (int64_t _1828_i5 = _9662_; _1828_i5 < _9663_; ++_1828_i5)
                        {
                          {
                            int64_t _1829_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1824_i1,_1811_d3 ),_1809_d5 ),safe_mul( _1826_i3,_1809_d5 ) ),_1828_i5 );
                            int64_t _1830_coneofs = safe_add( (safe_mul( _1827_i2,safe_add( _1827_i2,(int)1 ) ) / (int)2),_1825_i4 );
                            _ptr__1822_afetrilperm[safe_add( safe_mul( _1829_coneidx,_1798_conesize ),_1830_coneofs )] = _ptr__1803_afeidxs[_1823_k];
                            ++ _1823_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _9664_ = (int)0;
        int64_t _9665_ = _1813_d1;
        for (int64_t _1831_i1 = _9664_; _1831_i1 < _9665_; ++_1831_i1)
        {
          {
            int32_t _9666_ = (int)0;
            int64_t _9667_ = _1810_d4;
            for (int64_t _1832_i4 = _9666_; _1832_i4 < _9667_; ++_1832_i4)
            {
              {
                int32_t _9668_ = (int)0;
                int64_t _9669_ = _1811_d3;
                for (int64_t _1833_i3 = _9668_; _1833_i3 < _9669_; ++_1833_i3)
                {
                  {
                    int32_t _9670_ = (int)0;
                    int64_t _9671_ = safe_add( _1832_i4,(int)1 );
                    for (int64_t _1834_i2 = _9670_; _1834_i2 < _9671_; ++_1834_i2)
                    {
                      {
                        int32_t _9672_ = (int)0;
                        int64_t _9673_ = _1809_d5;
                        for (int64_t _1835_i5 = _9672_; _1835_i5 < _9673_; ++_1835_i5)
                        {
                          {
                            int64_t _1836_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1831_i1,_1811_d3 ),_1809_d5 ),safe_mul( _1833_i3,_1809_d5 ) ),_1835_i5 );
                            int64_t _1837_coneofs = safe_add( (safe_mul( _1834_i2,((safe_mul( (int)2,_1812_d2 ) - _1834_i2) - (int)1) ) / (int)2),_1832_i4 );
                            _ptr__1822_afetrilperm[safe_add( safe_mul( _1836_coneidx,_1798_conesize ),_1837_coneofs )] = _ptr__1803_afeidxs[_1823_k];
                            ++ _1823_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    putfrows(_1822_afetrilperm,(int)0,rs,_1785_nelem,_1786_nnz,_1790_ptr_base,_1791_nidxs_base,_1793_cof_base);
    if ((_1788_ncodeatom > (int)0))
    {
      {
        afe_blocks->replace_row_code(rs,_1822_afetrilperm,_1790_ptr_base,_1791_nidxs_base,_1794_codeptr,_1795_code,_1796_cconst);
      }
    }
    {}
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1838_pafeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_mul( safe_mul( _1799_numcone,_1812_d2 ),_1812_d2 ))));
  _checked_ptr_1<int32_t> _ptr__1838_pafeidxs(_1838_pafeidxs ? _1838_pafeidxs->raw() : nullptr,_1838_pafeidxs ? _1838_pafeidxs->size(0) : 0);
  {
    int32_t _1839_k = (int)0;
    if (_1777_tril)
    {
      {
        int32_t _9674_ = (int)0;
        int64_t _9675_ = _1813_d1;
        for (int64_t _1840_i1 = _9674_; _1840_i1 < _9675_; ++_1840_i1)
        {
          {
            int32_t _9676_ = (int)0;
            int64_t _9677_ = _1812_d2;
            for (int64_t _1841_i2 = _9676_; _1841_i2 < _9677_; ++_1841_i2)
            {
              {
                int32_t _9678_ = (int)0;
                int64_t _9679_ = _1811_d3;
                for (int64_t _1842_i3 = _9678_; _1842_i3 < _9679_; ++_1842_i3)
                {
                  {
                    int32_t _9680_ = (int)0;
                    int64_t _9681_ = _1810_d4;
                    for (int64_t _1843_i4 = _9680_; _1843_i4 < _9681_; ++_1843_i4)
                    {
                      {
                        int32_t _9682_ = (int)0;
                        int64_t _9683_ = _1809_d5;
                        for (int64_t _1844_i5 = _9682_; _1844_i5 < _9683_; ++_1844_i5)
                        {
                          {
                            int64_t _1845_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1840_i1,_1811_d3 ),_1809_d5 ),safe_mul( _1842_i3,_1809_d5 ) ),_1844_i5 );
                            int64_t _9684_;
                            bool _9685_ = (_1841_i2 >= _1843_i4);
                            if (_9685_)
                            {
                              _9684_ = safe_add( (safe_mul( _1843_i4,((safe_mul( (int)2,_1812_d2 ) - _1843_i4) - (int)1) ) / (int)2),_1841_i2 );
                            }
                            else
                            {
                              _9684_ = safe_add( (safe_mul( _1841_i2,((safe_mul( (int)2,_1812_d2 ) - _1841_i2) - (int)1) ) / (int)2),_1843_i4 );
                            }
                            int64_t _1846_coneofs = _9684_;
                            _ptr__1838_pafeidxs[_1839_k] = _ptr__1803_afeidxs[safe_add( safe_mul( _1845_coneidx,_1798_conesize ),_1846_coneofs )];
                            ++ _1839_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _9686_ = (int)0;
        int64_t _9687_ = _1813_d1;
        for (int64_t _1847_i1 = _9686_; _1847_i1 < _9687_; ++_1847_i1)
        {
          {
            int32_t _9688_ = (int)0;
            int64_t _9689_ = _1812_d2;
            for (int64_t _1848_i2 = _9688_; _1848_i2 < _9689_; ++_1848_i2)
            {
              {
                int32_t _9690_ = (int)0;
                int64_t _9691_ = _1811_d3;
                for (int64_t _1849_i3 = _9690_; _1849_i3 < _9691_; ++_1849_i3)
                {
                  {
                    int32_t _9692_ = (int)0;
                    int64_t _9693_ = _1810_d4;
                    for (int64_t _1850_i4 = _9692_; _1850_i4 < _9693_; ++_1850_i4)
                    {
                      {
                        int32_t _9694_ = (int)0;
                        int64_t _9695_ = _1809_d5;
                        for (int64_t _1851_i5 = _9694_; _1851_i5 < _9695_; ++_1851_i5)
                        {
                          {
                            int64_t _1852_coneidx = safe_add( safe_add( safe_mul( safe_mul( _1847_i1,_1811_d3 ),_1809_d5 ),safe_mul( _1849_i3,_1809_d5 ) ),_1851_i5 );
                            int64_t _9696_;
                            bool _9697_ = (_1848_i2 >= _1850_i4);
                            if (_9697_)
                            {
                              _9696_ = safe_add( (safe_mul( _1850_i4,((safe_mul( (int)2,_1812_d2 ) - _1850_i4) - (int)1) ) / (int)2),_1848_i2 );
                            }
                            else
                            {
                              _9696_ = safe_add( (safe_mul( _1848_i2,((safe_mul( (int)2,_1812_d2 ) - _1848_i2) - (int)1) ) / (int)2),_1850_i4 );
                            }
                            int64_t _1853_coneofs = _9696_;
                            _ptr__1838_pafeidxs[_1839_k] = _ptr__1803_afeidxs[safe_add( safe_mul( _1852_coneidx,_1798_conesize ),_1853_coneofs )];
                            ++ _1839_k;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (((int)((_1773_name).size()) > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1854_coneshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1776_shape)->size(0)) - (int)2))));
      _checked_ptr_1<int32_t> _ptr__1854_coneshape(_1854_coneshape ? _1854_coneshape->raw() : nullptr,_1854_coneshape ? _1854_coneshape->size(0) : 0);
      int32_t _9698_ = (int)0;
      int32_t _9699_ = _1779_conedim0;
      for (int32_t _1855_i = _9698_; _1855_i < _9699_; ++_1855_i)
      {
        {
          _ptr__1854_coneshape[_1855_i] = _ptr__1776_shape[_1855_i];
        }
      }
      int32_t _9700_ = safe_add( _1779_conedim0,(int)1 );
      int32_t _9701_ = _1778_conedim1;
      for (int32_t _1856_i = _9700_; _1856_i < _9701_; ++_1856_i)
      {
        {
          _ptr__1854_coneshape[(_1856_i - (int)1)] = _ptr__1776_shape[_1856_i];
        }
      }
      int32_t _9702_ = safe_add( _1778_conedim1,(int)1 );
      int32_t _9703_ = _1784_nd;
      for (int32_t _1857_i = _9702_; _1857_i < _9703_; ++_1857_i)
      {
        {
          _ptr__1854_coneshape[(_1857_i - (int)2)] = _ptr__1776_shape[_1857_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1858_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1858_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1773_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1784_nd > (int)2))
      {
        {
          _1858_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9704_ = (int)1;
          int32_t _9705_ = (_1784_nd - (int)2);
          for (int32_t _1859_i = _9704_; _1859_i < _9705_; ++_1859_i)
          {
            {
              _1858_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1859_i);
            }
          }
        }
      }
      {}
      _1858_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1860_dindexnames = mosek::fusion::p_PSDDomain::_get_impl(_1775_dom)->indexnames;
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1861_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1784_nd - (int)2))));
          int32_t _9706_ = (int)0;
          int32_t _9707_ = _1779_conedim0;
          for (int32_t _1862_i = _9706_; _1862_i < _9707_; ++_1862_i)
          {
            {
              ((*_1861_indexnames)(_1862_i)) = ((*_1860_dindexnames)(_1862_i));
            }
          }
          int32_t _9708_ = safe_add( _1779_conedim0,(int)1 );
          int32_t _9709_ = _1778_conedim1;
          for (int32_t _1863_i = _9708_; _1863_i < _9709_; ++_1863_i)
          {
            {
              ((*_1861_indexnames)((_1863_i - (int)1))) = ((*_1860_dindexnames)(_1863_i));
            }
          }
          int32_t _9710_ = safe_add( _1778_conedim1,(int)1 );
          int32_t _9711_ = _1784_nd;
          for (int32_t _1864_i = _9710_; _1864_i < _9711_; ++_1864_i)
          {
            {
              ((*_1861_indexnames)((_1864_i - (int)2))) = ((*_1860_dindexnames)(_1864_i));
            }
          }
          std::vector<int64_t> _9712_;
          for (int32_t _1865_i = (int)0, _9713_ = (int)((_1804_accidxs)->size(0)); _1865_i < _9713_ ; ++_1865_i)
          {
            _9712_.push_back(_ptr__1804_accidxs[_1865_i]);
          }
          auto _9714_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9712_.size()),_9712_.begin(),_9712_.end()));
          task_format_acc_names(_9714_,_1858_sb->toString(),_1854_coneshape,_1861_indexnames);
        }
      }
      else
      {
        {
          std::vector<int64_t> _9715_;
          for (int32_t _1866_i = (int)0, _9716_ = (int)((_1804_accidxs)->size(0)); _1866_i < _9716_ ; ++_1866_i)
          {
            _9715_.push_back(_ptr__1804_accidxs[_1866_i]);
          }
          auto _9717_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9715_.size()),_9715_.begin(),_9715_.end()));
          task_format_acc_names(_9717_,_1858_sb->toString(),_1854_coneshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1867_res = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1773_name,nullptr,_1776_shape,_1807_conid,_1838_pafeidxs,nullptr);
  ((*acons)(_1807_conid)) = (_1867_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1773_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1773_name,(-safe_add( (int)1,_1807_conid )));
    }
  }
  {}
  return (_1867_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:823:6-1023:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1868_name,monty::rc_ptr< ::mosek::fusion::Expression > _1869_expr,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1870_dom)
{
  if ((((int)((_1868_name).size()) > (int)0) && hasConstraint(_1868_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1868_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1868_name).size()) > (int)0) && hasConstraint(_1868_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1868_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1871_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1869_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1871_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1872_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1872_ri32(_1872_ri32 ? _1872_ri32->raw() : nullptr,_1872_ri32 ? _1872_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1873_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1873_ri64(_1873_ri64 ? _1873_ri64->raw() : nullptr,_1873_ri64 ? _1873_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1874_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1874_rf64(_1874_rf64 ? _1874_rf64->raw() : nullptr,_1874_rf64 ? _1874_rf64->size(0) : 0);
  int32_t _1875_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1876_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1877_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1878_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int32_t _1879_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1880_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1881_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1882_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1883_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1884_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1885_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1886_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9718_;
  for (int32_t _1888_i = (int)0, _9719_ = _1875_nd; _1888_i < _9719_ ; ++_1888_i)
  {
    _9718_.push_back(_ptr__1872_ri32[safe_add( _1876_shape_base,_1888_i )]);
  }
  auto _9720_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9718_.size()),_9718_.begin(),_9718_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1887_shape = _9720_;
  _checked_ptr_1<int32_t> _ptr__1887_shape(_1887_shape ? _1887_shape->raw() : nullptr,_1887_shape ? _1887_shape->size(0) : 0);
  mosek::fusion::p_ConeDomain::_get_impl(_1870_dom.get())->finalize_and_validate(_1887_shape);
  int32_t _9721_;
  bool _9722_ = _1870_dom->axisIsSet();
  if (_9722_)
  {
    _9721_ = _1870_dom->getAxis();
  }
  else
  {
    _9721_ = (_1875_nd - (int)1);
  }
  int32_t _1889_coneaxis = _9721_;
  int32_t _1890_conesize = _ptr__1887_shape[_1889_coneaxis];
  int32_t _1891_d1 = (int)1;
  int32_t _1892_d0 = (int)1;
  int32_t _1893_domsize = (int)1;
  int32_t _9723_ = (int)0;
  int32_t _9724_ = _1875_nd;
  for (int32_t _1894_i = _9723_; _1894_i < _9724_; ++_1894_i)
  {
    {
      _1893_domsize *= _ptr__1887_shape[_1894_i];
    }
  }
  int32_t _9725_ = (int)0;
  int32_t _9726_ = _1889_coneaxis;
  for (int32_t _1895_i = _9725_; _1895_i < _9726_; ++_1895_i)
  {
    {
      _1892_d0 *= _ptr__1887_shape[_1895_i];
    }
  }
  int32_t _9727_ = safe_add( _1889_coneaxis,(int)1 );
  int32_t _9728_ = _1875_nd;
  for (int32_t _1896_i = _9727_; _1896_i < _9728_; ++_1896_i)
  {
    {
      _1891_d1 *= _ptr__1887_shape[_1896_i];
    }
  }
  int32_t _1897_numcone = safe_mul( _1892_d0,_1891_d1 );
  int64_t _1898_domainidx;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      if ((_1890_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_quad(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      if ((_1890_conesize < (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_rquad(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      if ((_1890_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_pexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      if ((_1890_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
        }
      }
      {}
      if (((int)((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->alpha)->size(0)) < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Power cone requires at least two parameters"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_ppow(_1890_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      if ((_1890_conesize != (int)3))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_dexp();
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      if ((_1890_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
        }
      }
      {}
      if (((int)((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->alpha)->size(0)) < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Power cone requires at least two parameters"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_dpow(_1890_conesize,mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->alpha);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InPGeoMeanCone))
  {
    {
      if ((_1890_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for primal geometric mean cone"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_pgeomean(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InDGeoMeanCone))
  {
    {
      if ((_1890_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual geometric mean cone"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_dgeomean(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InSVecPSDCone))
  {
    {
      int32_t _1899_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1890_conesize ) ))) - (int)1) / (int)2);
      if (((safe_mul( _1899_d,safe_add( _1899_d,(int)1 ) ) / (int)2) != _1890_conesize))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for vector positive semidefinite cone"))->toString());
        }
      }
      {}
      _1898_domainidx = task_append_domain_svec_psd(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::Positive))
  {
    {
      _1898_domainidx = task_append_domain_rpos(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::Negative))
  {
    {
      _1898_domainidx = task_append_domain_rneg(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::Unbounded))
  {
    {
      _1898_domainidx = task_append_domain_r(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::Zero))
  {
    {
      _1898_domainidx = task_append_domain_rzero(_1890_conesize);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->key == ::mosek::fusion::QConeKey::InPSDCone))
  {
    {
      if ((_1890_conesize < (int)2))
      {
        {
          throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
        }
      }
      else
      {
        {
          int32_t _1900_d = (int32_t)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1890_conesize ) ))) - (int)1) / (int)2);
          if (((safe_mul( _1900_d,safe_add( _1900_d,(int)1 ) ) / (int)2) != _1890_conesize))
          {
            {
              throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1890_conesize)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for positive semidefinite cone"))->toString());
            }
          }
          {}
        }
      }
      _1898_domainidx = task_append_domain_svec_psd(_1890_conesize);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1901_g = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1893_domsize)));
  _checked_ptr_1<double> _ptr__1901_g(_1901_g ? _1901_g->raw() : nullptr,_1901_g ? _1901_g->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1902_afeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1893_domsize)));
  _checked_ptr_1<int32_t> _ptr__1902_afeidxs(_1902_afeidxs ? _1902_afeidxs->raw() : nullptr,_1902_afeidxs ? _1902_afeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1903_accidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1897_numcone)));
  _checked_ptr_1<int32_t> _ptr__1903_accidxs(_1903_accidxs ? _1903_accidxs->raw() : nullptr,_1903_accidxs ? _1903_accidxs->size(0) : 0);
  int32_t _1904_conid = acon_allocate(_1898_domainidx,_1890_conesize,_1897_numcone,_1901_g,_1902_afeidxs,_1903_accidxs);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1905_perm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1893_domsize)));
  _checked_ptr_1<int32_t> _ptr__1905_perm(_1905_perm ? _1905_perm->raw() : nullptr,_1905_perm ? _1905_perm->size(0) : 0);
  {
    int32_t _1906_idx = (int)0;
    std::shared_ptr< monty::ndarray< double,1 > > _1907_ofs = mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->domofs;
    _checked_ptr_1<double> _ptr__1907_ofs(_1907_ofs ? _1907_ofs->raw() : nullptr,_1907_ofs ? _1907_ofs->size(0) : 0);
    {
      int32_t _9729_ = (int)0;
      int32_t _9730_ = _1892_d0;
      for (int32_t _1908_i0 = _9729_; _1908_i0 < _9730_; ++_1908_i0)
      {
        {
          int32_t _9731_ = (int)0;
          int32_t _9732_ = _1891_d1;
          for (int32_t _1909_i1 = _9731_; _1909_i1 < _9732_; ++_1909_i1)
          {
            {
              int32_t _9733_ = (int)0;
              int32_t _9734_ = _1890_conesize;
              for (int32_t _1910_ic = _9733_; _1910_ic < _9734_; ++_1910_ic)
              {
                {
                  _ptr__1905_perm[safe_add( safe_add( safe_mul( safe_mul( _1908_i0,_1891_d1 ),_1890_conesize ),safe_mul( _1910_ic,_1891_d1 ) ),_1909_i1 )] = _1906_idx;
                  ++ _1906_idx;
                }
              }
            }
          }
        }
      }
      if ((NULL != _1907_ofs.get()))
      {
        {
          int32_t _9735_ = (int)0;
          int32_t _9736_ = _1893_domsize;
          for (int32_t _1911_i = _9735_; _1911_i < _9736_; ++_1911_i)
          {
            {
              _ptr__1901_g[_ptr__1905_perm[_1911_i]] = _ptr__1907_ofs[_1911_i];
            }
          }
        }
      }
      {}
    }
  }
  std::vector<int32_t> _9737_;
  for (int32_t _1913_i = (int)0, _9738_ = _1893_domsize; _1913_i < _9738_ ; ++_1913_i)
  {
    _9737_.push_back(_ptr__1902_afeidxs[_ptr__1905_perm[_1913_i]]);
  }
  auto _9739_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9737_.size()),_9737_.begin(),_9737_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1912_pafeidxs = _9739_;
  _checked_ptr_1<int32_t> _ptr__1912_pafeidxs(_1912_pafeidxs ? _1912_pafeidxs->raw() : nullptr,_1912_pafeidxs ? _1912_pafeidxs->size(0) : 0);
  putfrows(_1912_pafeidxs,(int)0,rs,_1877_nelem,_1878_nnz,_1881_ptr_base,_1882_nidxs_base,_1883_cof_base);
  if ((_1879_ncodeatom > (int)0))
  {
    {
      afe_blocks->replace_row_code(rs,_1912_pafeidxs,_1881_ptr_base,_1882_nidxs_base,_1885_codeptr,_1884_code,_1886_cconst);
    }
  }
  {}
  if (((int)((_1868_name).size()) > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _1914_accshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_1887_shape)->size(0)) - (int)1))));
      _checked_ptr_1<int32_t> _ptr__1914_accshape(_1914_accshape ? _1914_accshape->raw() : nullptr,_1914_accshape ? _1914_accshape->size(0) : 0);
      int32_t _9740_ = (int)0;
      int32_t _9741_ = _1889_coneaxis;
      for (int32_t _1915_i = _9740_; _1915_i < _9741_; ++_1915_i)
      {
        {
          _ptr__1914_accshape[_1915_i] = _ptr__1887_shape[_1915_i];
        }
      }
      int32_t _9742_ = safe_add( _1889_coneaxis,(int)1 );
      int32_t _9743_ = _1875_nd;
      for (int32_t _1916_i = _9742_; _1916_i < _9743_; ++_1916_i)
      {
        {
          _ptr__1914_accshape[(_1916_i - (int)1)] = _ptr__1887_shape[_1916_i];
        }
      }
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1917_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1917_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1868_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_1875_nd > (int)1))
      {
        {
          _1917_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int32_t _9744_ = (int)1;
          int32_t _9745_ = (_1875_nd - (int)1);
          for (int32_t _1918_i = _9744_; _1918_i < _9745_; ++_1918_i)
          {
            {
              _1917_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1918_i);
            }
          }
        }
      }
      {}
      _1917_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->indexnames.get()))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1919_dindexnames = mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->indexnames;
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1920_indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((_1875_nd - (int)1))));
          int32_t _9746_ = (int)0;
          int32_t _9747_ = _1889_coneaxis;
          for (int32_t _1921_i = _9746_; _1921_i < _9747_; ++_1921_i)
          {
            {
              ((*_1920_indexnames)(_1921_i)) = ((*_1919_dindexnames)(_1921_i));
            }
          }
          int32_t _9748_ = safe_add( _1889_coneaxis,(int)1 );
          int32_t _9749_ = _1875_nd;
          for (int32_t _1922_i = _9748_; _1922_i < _9749_; ++_1922_i)
          {
            {
              ((*_1920_indexnames)((_1922_i - (int)1))) = ((*_1919_dindexnames)(_1922_i));
            }
          }
          std::vector<int64_t> _9750_;
          for (int32_t _1923_i = (int)0, _9751_ = (int)((_1903_accidxs)->size(0)); _1923_i < _9751_ ; ++_1923_i)
          {
            _9750_.push_back(_ptr__1903_accidxs[_1923_i]);
          }
          auto _9752_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9750_.size()),_9750_.begin(),_9750_.end()));
          task_format_acc_names(_9752_,_1917_sb->toString(),_1914_accshape,_1920_indexnames);
        }
      }
      else
      {
        {
          std::vector<int64_t> _9753_;
          for (int32_t _1924_i = (int)0, _9754_ = (int)((_1903_accidxs)->size(0)); _1924_i < _9754_ ; ++_1924_i)
          {
            _9753_.push_back(_ptr__1903_accidxs[_1924_i]);
          }
          auto _9755_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9753_.size()),_9753_.begin(),_9753_.end()));
          task_format_acc_names(_9755_,_1917_sb->toString(),_1914_accshape,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1925_res = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1868_name,_1870_dom,_1887_shape,_1904_conid,_1902_afeidxs,mosek::fusion::p_ConeDomain::_get_impl(_1870_dom)->indexnames);
  ((*acons)(_1904_conid)) = (_1925_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1868_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1868_name,(-safe_add( _1904_conid,(int)1 )));
    }
  }
  {}
  return (_1925_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.constraint_
// Method mosek.fusion.Model.constraint_ @ src/fusion/Model.mbi:696:6-818:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1926_name,monty::rc_ptr< ::mosek::fusion::Expression > _1927_expr,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1928_dom)
{
  if ((((int)((_1926_name).size()) > (int)0) && hasConstraint(_1926_name)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1926_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1929_e = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1927_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1929_e->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1930_ri32 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int32_t> _ptr__1930_ri32(_1930_ri32 ? _1930_ri32->raw() : nullptr,_1930_ri32 ? _1930_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _1931_ri64 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<int64_t> _ptr__1931_ri64(_1931_ri64 ? _1931_ri64->raw() : nullptr,_1931_ri64 ? _1931_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1932_rf64 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1932_rf64(_1932_rf64 ? _1932_rf64->raw() : nullptr,_1932_rf64 ? _1932_rf64->size(0) : 0);
  int32_t _1933_nd = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int32_t _1934_nelem = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int32_t _1935_nnz = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1936_hassp = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int32_t _1937_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int32_t _1938_shape_base = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int32_t _1939_ptr_base = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int32_t _1940_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int32_t _1941_cof_base = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int32_t _1942_codeptr = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int32_t _1943_code = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int32_t _1944_cconst = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int32_t> _9756_;
  for (int32_t _1946_i = (int)0, _9757_ = _1933_nd; _1946_i < _9757_ ; ++_1946_i)
  {
    _9756_.push_back(_ptr__1930_ri32[safe_add( _1938_shape_base,_1946_i )]);
  }
  auto _9758_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9756_.size()),_9756_.begin(),_9756_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1945_shape = _9758_;
  _checked_ptr_1<int32_t> _ptr__1945_shape(_1945_shape ? _1945_shape->raw() : nullptr,_1945_shape ? _1945_shape->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(_1928_dom.get())->finalize_and_validate(_1945_shape);
  int64_t _1947_domsize = mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->domsize;
  std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _1948_indexnames = mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->indexnames;
  std::shared_ptr< monty::ndarray< double,1 > > _1949_b;
  _checked_ptr_1<double> _ptr__1949_b(_1949_b ? _1949_b->raw() : nullptr,_1949_b ? _1949_b->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _1950_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1947_domsize)));
  _checked_ptr_1<int32_t> _ptr__1950_nativeidxs(_1950_nativeidxs ? _1950_nativeidxs->raw() : nullptr,_1950_nativeidxs ? _1950_nativeidxs->size(0) : 0);
  int32_t _1951_conid = con_allocate(_1950_nativeidxs);
  putarows(_1950_nativeidxs,rs,_1934_nelem,_1935_nnz,_1939_ptr_base,_1940_nidxs_base,_1941_cof_base);
  {
    std::shared_ptr< monty::ndarray< int32_t,2 > > _1952_domsp = mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->sparsity;
    bool _1953_domempty = mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1954_dombnd = mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->bnd;
    _checked_ptr_1<double> _ptr__1954_dombnd(_1954_dombnd ? _1954_dombnd->raw() : nullptr,_1954_dombnd ? _1954_dombnd->size(0) : 0);
    bool _1955_domscalable = mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->scalable;
    {
      if ((NULL == _1954_dombnd.get()))
      {
        {
          _1949_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1950_nativeidxs)->size(0)))));
          _ptr__1949_b.update(_1949_b ? _1949_b->raw() : nullptr, _1949_b ? _1949_b->size(0) : 0);
        }
      }
      else if(_1955_domscalable)
      {
        {
          std::vector<double> _9759_;
          for (int32_t _1956_i = (int)0, _9760_ = (int)((_1950_nativeidxs)->size(0)); _1956_i < _9760_ ; ++_1956_i)
          {
            _9759_.push_back(_ptr__1954_dombnd[(int)0]);
          }
          auto _9761_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9759_.size()),_9759_.begin(),_9759_.end()));
          _1949_b = _9761_;
          _ptr__1949_b.update(_1949_b ? _1949_b->raw() : nullptr, _1949_b ? _1949_b->size(0) : 0);
        }
      }
      else if((NULL != _1952_domsp.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _1957_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_1933_nd)));
          _checked_ptr_1<int32_t> _ptr__1957_stride(_1957_stride ? _1957_stride->raw() : nullptr,_1957_stride ? _1957_stride->size(0) : 0);
          _ptr__1957_stride[(_1933_nd - (int)1)] = (int)1;
          int32_t _9762_ = (int)1;
          int32_t _9763_ = _1933_nd;
          for (int32_t _1958_i = _9762_; _1958_i < _9763_; ++_1958_i)
          {
            {
              _ptr__1957_stride[((_1933_nd - _1958_i) - (int)1)] = safe_mul( _ptr__1957_stride[(_1933_nd - _1958_i)],_ptr__1945_shape[(_1933_nd - _1958_i)] );
            }
          }
          _1949_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1950_nativeidxs)->size(0)))));
          _ptr__1949_b.update(_1949_b ? _1949_b->raw() : nullptr, _1949_b ? _1949_b->size(0) : 0);
          int32_t _9764_ = (int)0;
          int32_t _9765_ = (int)((_1952_domsp)->size(0));
          for (int32_t _1959_i = _9764_; _1959_i < _9765_; ++_1959_i)
          {
            {
              int32_t _1960_idx = (int)0;
              int32_t _9766_ = (int)0;
              int32_t _9767_ = _1933_nd;
              for (int32_t _1961_j = _9766_; _1961_j < _9767_; ++_1961_j)
              {
                {
                  _1960_idx += safe_mul( _ptr__1957_stride[_1961_j],((*_1952_domsp)(_1959_i,_1961_j)) );
                }
              }
              _ptr__1949_b[_1960_idx] = _ptr__1954_dombnd[_1959_i];
            }
          }
        }
      }
      else if(_1953_domempty)
      {
        {
          _1949_b = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1950_nativeidxs)->size(0)))));
          _ptr__1949_b.update(_1949_b ? _1949_b->raw() : nullptr, _1949_b ? _1949_b->size(0) : 0);
        }
      }
      else
      {
        {
          std::vector<double> _9768_;
          for (int32_t _1962_i = (int)0, _9769_ = (int)((_1950_nativeidxs)->size(0)); _1962_i < _9769_ ; ++_1962_i)
          {
            _9768_.push_back(_ptr__1954_dombnd[_1962_i]);
          }
          auto _9770_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9768_.size()),_9768_.begin(),_9768_.end()));
          _1949_b = _9770_;
          _ptr__1949_b.update(_1949_b ? _1949_b->raw() : nullptr, _1949_b ? _1949_b->size(0) : 0);
        }
      }
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_con_putboundlist_fr(_1950_nativeidxs);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_con_putboundlist_up(_1950_nativeidxs,_1949_b);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_con_putboundlist_lo(_1950_nativeidxs,_1949_b);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_con_putboundlist_fx(_1950_nativeidxs,_1949_b);
    }
  }
  {}
  if ((_1937_ncodeatom > (int)0))
  {
    {
      con_blocks->replace_row_code(rs,_1950_nativeidxs,_1939_ptr_base,_1940_nidxs_base,_1942_codeptr,_1943_code,_1944_cconst);
    }
  }
  {}
  if (((int)((_1926_name).size()) > (int)0))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1963_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1963_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_1926_name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if (((int)((_1945_shape)->size(0)) > (int)0))
      {
        {
          _1963_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
        }
      }
      {}
      int32_t _9771_ = (int)1;
      int32_t _9772_ = (int)((_1945_shape)->size(0));
      for (int32_t _1964_i = _9771_; _1964_i < _9772_; ++_1964_i)
      {
        {
          _1963_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1964_i);
        }
      }
      _1963_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->indexnames.get()))
      {
        {
          task_format_con_names(_1950_nativeidxs,_1963_sb->toString(),_1945_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),mosek::fusion::p_LinearDomain::_get_impl(_1928_dom)->indexnames);
        }
      }
      else
      {
        {
          task_format_con_names(_1950_nativeidxs,_1963_sb->toString(),_1945_shape,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(nullptr));
        }
      }
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1965_res = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1926_name,_1951_conid,_1945_shape,_1950_nativeidxs,_1948_indexnames);
  ((*cons)(_1951_conid)) = (_1965_res).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1926_name).size()) > (int)0))
  {
    {
      con_map->setItem(_1926_name,_1951_conid);
    }
  }
  {}
  return (_1965_res).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.Model.constraint_

// Begin mosek.fusion.Model.getVersion
// Method mosek.fusion.Model.getVersion @ src/fusion/Model.mbi:690:6-692:7
std::string mosek::fusion::Model::getVersion
  ( ) { return mosek::fusion::p_Model::getVersion(); }
std::string mosek::fusion::p_Model::getVersion()
{
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
// End mosek.fusion.Model.getVersion

// Begin mosek.fusion.Model.hasParameter
// Method mosek.fusion.Model.hasParameter @ src/fusion/Model.mbi:685:6-93
bool mosek::fusion::Model :: hasParameter(const std::string & _1966_name) { return mosek::fusion::p_Model::_get_impl(this)->hasParameter(_1966_name); }
bool mosek::fusion::p_Model::hasParameter(const std::string & _1966_name)
{
  return par_map->hasItem(_1966_name);
}
// End mosek.fusion.Model.hasParameter

// Begin mosek.fusion.Model.hasConstraint
// Method mosek.fusion.Model.hasConstraint @ src/fusion/Model.mbi:684:6-93
bool mosek::fusion::Model :: hasConstraint(const std::string & _1967_name) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1967_name); }
bool mosek::fusion::p_Model::hasConstraint(const std::string & _1967_name)
{
  return con_map->hasItem(_1967_name);
}
// End mosek.fusion.Model.hasConstraint

// Begin mosek.fusion.Model.hasVariable
// Method mosek.fusion.Model.hasVariable @ src/fusion/Model.mbi:683:6-93
bool mosek::fusion::Model :: hasVariable(const std::string & _1968_name) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1968_name); }
bool mosek::fusion::p_Model::hasVariable(const std::string & _1968_name)
{
  return var_map->hasItem(_1968_name);
}
// End mosek.fusion.Model.hasVariable

// Begin mosek.fusion.Model.getParameter
// Method mosek.fusion.Model.getParameter @ src/fusion/Model.mbi:681:6-149
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__getParameter(const std::string & _1969_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getParameter(_1969_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::getParameter(const std::string &  _1969_name) { return __mosek_2fusion_2Model__getParameter(_1969_name); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__getParameter(const std::string & _1969_name)
{
  monty::rc_ptr< ::mosek::fusion::Parameter > _9773_;
  bool _9774_ = par_map->hasItem(_1969_name);
  if (_9774_)
  {
    _9773_ = ((*parameters)(par_map->getItem(_1969_name)));
  }
  else
  {
    _9773_ = nullptr;
  }
  return _9773_;
}
// End mosek.fusion.Model.getParameter

// Begin mosek.fusion.Model.getConstraint
// Method mosek.fusion.Model.getConstraint @ src/fusion/Model.mbi:680:6-167
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int32_t _1970_index) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1970_index); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int32_t _1970_index) { return __mosek_2fusion_2Model__getConstraint(_1970_index); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int32_t _1970_index)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _1971_res;
  if ((_1970_index >= (int)0))
  {
    {
      _1971_res = (((*cons)(_1970_index))).as<::mosek::fusion::Constraint>();
    }
  }
  else
  {
    {
      _1971_res = (((*acons)((-safe_add( (int)1,_1970_index ))))).as<::mosek::fusion::Constraint>();
    }
  }
  return _1971_res;
}
// End mosek.fusion.Model.getConstraint

// Begin mosek.fusion.Model.getConstraint
// Method mosek.fusion.Model.getConstraint @ src/fusion/Model.mbi:670:6-679:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1972_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1972_name); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1972_name) { return __mosek_2fusion_2Model__getConstraint(_1972_name); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1972_name)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _1973_retval = nullptr;
  if (con_map->hasItem(_1972_name))
  {
    {
      int32_t _1974_idx = con_map->getItem(_1972_name);
      if ((_1974_idx >= (int)0))
      {
        {
          _1973_retval = (((*cons)(_1974_idx))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          _1973_retval = (((*acons)((-safe_add( (int)1,_1974_idx ))))).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
  {}
  return _1973_retval;
}
// End mosek.fusion.Model.getConstraint

// Begin mosek.fusion.Model.getVariable
// Method mosek.fusion.Model.getVariable @ src/fusion/Model.mbi:668:6-86
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int32_t _1975_index) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1975_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int32_t _1975_index) { return __mosek_2fusion_2Model__getVariable(_1975_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int32_t _1975_index)
{
  return (((*vars)(_1975_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Model.getVariable

// Begin mosek.fusion.Model.getVariable
// Method mosek.fusion.Model.getVariable @ src/fusion/Model.mbi:657:6-667:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1976_name) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1976_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1976_name) { return __mosek_2fusion_2Model__getVariable(_1976_name); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1976_name)
{
  if (var_map->hasItem(_1976_name))
  {
    {
      int32_t _1977_varid = var_map->getItem(_1976_name);
      if ((_1977_varid < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1977_varid,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1977_varid))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
// End mosek.fusion.Model.getVariable

// Begin mosek.fusion.Model.getName
// Method mosek.fusion.Model.getName @ src/fusion/Model.mbi:655:6-67
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }
std::string mosek::fusion::p_Model::getName()
{
  return model_name;
}
// End mosek.fusion.Model.getName

// Begin mosek.fusion.Model.getParameterValue
// Method mosek.fusion.Model.getParameterValue @ src/fusion/Model.mbi:647:6-652:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getParameterValue(std::shared_ptr< monty::ndarray< int32_t,1 > > _1978_idxs)
{
  _checked_ptr_1<int32_t> _ptr__1978_idxs(_1978_idxs ? _1978_idxs->raw() : nullptr, _1978_idxs ? _1978_idxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1979_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1978_idxs)->size(0)))));
  _checked_ptr_1<double> _ptr__1979_res(_1979_res ? _1979_res->raw() : nullptr,_1979_res ? _1979_res->size(0) : 0);
  int32_t _9775_ = (int)0;
  int32_t _9776_ = (int)((_1978_idxs)->size(0));
  for (int32_t _1980_i = _9775_; _1980_i < _9776_; ++_1980_i)
  {
    {
      _ptr__1979_res[_1980_i] = ((*param_value)(_ptr__1978_idxs[_1980_i]));
    }
  }
  return _1979_res;
}
// End mosek.fusion.Model.getParameterValue

// Begin mosek.fusion.Model.setParameterValue
// Method mosek.fusion.Model.setParameterValue @ src/fusion/Model.mbi:642:6-645:7
void mosek::fusion::p_Model::setParameterValue(std::shared_ptr< monty::ndarray< int32_t,1 > > _1981_idxs,std::shared_ptr< monty::ndarray< double,1 > > _1982_vals)
{
  _checked_ptr_1<int32_t> _ptr__1981_idxs(_1981_idxs ? _1981_idxs->raw() : nullptr, _1981_idxs ? _1981_idxs->size(0) : 0);
  _checked_ptr_1<double> _ptr__1982_vals(_1982_vals ? _1982_vals->raw() : nullptr, _1982_vals ? _1982_vals->size(0) : 0);
  int32_t _9777_ = (int)0;
  int32_t _9778_ = (int)((_1981_idxs)->size(0));
  for (int32_t _1983_i = _9777_; _1983_i < _9778_; ++_1983_i)
  {
    {
      ((*param_value)(_ptr__1981_idxs[_1983_i])) = _ptr__1982_vals[_1983_i];
    }
  }
}
// End mosek.fusion.Model.setParameterValue

// Begin mosek.fusion.Model.clone
// Method mosek.fusion.Model.clone @ src/fusion/Model.mbi:637:6-640:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone()
{
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
// End mosek.fusion.Model.clone

void mosek::fusion::p_Model::destroy()
{
  xs.reset();
  ws.reset();
  rs.reset();
  sol_itg.reset();
  sol_bas.reset();
  sol_itr.reset();
  con_map.reset();
  acons.reset();
  cons.reset();
  param_value.reset();
  par_map.reset();
  parameters.reset();
  initsol_xx_flag.reset();
  initsol_xx.reset();
  var_map.reset();
  barvars.reset();
  vars.reset();
  barvar_block_elm_j.reset();
  barvar_block_elm_i.reset();
  barvar_block_elm_barj.reset();
  barvar_block_elm_ptr.reset();
  barvar_block_dim.reset();
  barvar_block_ptr.reset();
  barvar_dim.reset();
  var_elm_acc_ofs.reset();
  var_elm_acc_idx.reset();
  var_block_acc_id.reset();
  var_block_map.reset();
  acon_elm_afe.reset();
  acon_elm_ofs.reset();
  acon_elm_scale.reset();
  acon_elm_accid.reset();
  acon_afe.reset();
  acon_acc.reset();
  acon_block_map.reset();
  acc_block_map.reset();
  obj_blocks.reset();
  afe_blocks.reset();
  con_blocks.reset();
}
void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }
// } class Model
// class BoundInterfaceVariable { // @ src/fusion/BoundInterfaceVariable.mbi:29:4-85:5
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }
mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable
  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.BoundInterfaceVariable.ctor @ src/fusion/BoundInterfaceVariable.mbi:41:6-50:7
mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _1984_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _1985_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _1986_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _1987_nativeidxs,
    bool _1988_islower)
{ return new mosek::fusion::BoundInterfaceVariable(_1984_m,_1985_shape,_1986_sparsity,_1987_nativeidxs,_1988_islower); }
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _1984_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _1985_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _1986_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _1987_nativeidxs,
    bool _1988_islower) : 
   BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this))
{ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1984_m,_1985_shape,_1986_sparsity,_1987_nativeidxs,_1988_islower); }
void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1984_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _1985_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _1986_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _1987_nativeidxs,
    bool _1988_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__1985_shape(_1985_shape ? _1985_shape->raw() : nullptr, _1985_shape ? _1985_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__1986_sparsity(_1986_sparsity ? _1986_sparsity->raw() : nullptr, _1986_sparsity ? _1986_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__1987_nativeidxs(_1987_nativeidxs ? _1987_nativeidxs->raw() : nullptr, _1987_nativeidxs ? _1987_nativeidxs->size(0) : 0);
    mosek::fusion::p_SliceVariable::_initialize(_1984_m,_1985_shape,_1986_sparsity,_1987_nativeidxs);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1988_islower;
  }
}
// mosek.fusion.BoundInterfaceVariable.ctor

// mosek.fusion.BoundInterfaceVariable.ctor @ src/fusion/BoundInterfaceVariable.mbi:33:6-39:7
mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1989_v,
    bool _1990_islower)
{ return new mosek::fusion::BoundInterfaceVariable(_1989_v,_1990_islower); }
mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1989_v,
    bool _1990_islower) : 
   BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this))
{ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1989_v,_1990_islower); }
void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1989_v,
    bool _1990_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_SliceVariable::_initialize(_1989_v);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1990_islower;
  }
}
// mosek.fusion.BoundInterfaceVariable.ctor

// Begin mosek.fusion.BoundInterfaceVariable.dual
// Method mosek.fusion.BoundInterfaceVariable.dual @ src/fusion/BoundInterfaceVariable.mbi:80:6-84:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceVariable :: dual() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceVariable::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _1991_target = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__1991_target(_1991_target ? _1991_target->raw() : nullptr,_1991_target ? _1991_target->size(0) : 0);
  dual_lu((int)0,_1991_target,islower);
  return _1991_target;
}
// End mosek.fusion.BoundInterfaceVariable.dual

// Begin mosek.fusion.BoundInterfaceVariable.transpose
// Method mosek.fusion.BoundInterfaceVariable.transpose @ src/fusion/BoundInterfaceVariable.mbi:78:6-78
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__transpose() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
/* override: mosek.fusion.BaseVariable.transpose*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__transpose()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.transpose

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:77:6-112
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1992_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1993_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _1994_i2) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1992_i0,_1993_i1,_1994_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1992_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1993_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _1994_i2) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1992_i0,_1993_i1,_1994_i2); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1992_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1993_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _1994_i2) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1992_i0,_1993_i1,_1994_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1992_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1993_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _1994_i2)
{
  _checked_ptr_1<int32_t> _ptr__1992_i0(_1992_i0 ? _1992_i0->raw() : nullptr, _1992_i0 ? _1992_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1993_i1(_1993_i1 ? _1993_i1->raw() : nullptr, _1993_i1 ? _1993_i1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1994_i2(_1994_i2 ? _1994_i2->raw() : nullptr, _1994_i2 ? _1994_i2->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1992_i0,_1993_i1,_1994_i2))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:76:6-98
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1995_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1996_i1) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1995_i0,_1996_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1995_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1996_i1) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1995_i0,_1996_i1); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1995_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1996_i1) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1995_i0,_1996_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1995_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _1996_i1)
{
  _checked_ptr_1<int32_t> _ptr__1995_i0(_1995_i0 ? _1995_i0->raw() : nullptr, _1995_i0 ? _1995_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__1996_i1(_1996_i1 ? _1996_i1->raw() : nullptr, _1996_i1 ? _1996_i1->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1995_i0,_1996_i1))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:75:6-91
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _1997_midxs) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1997_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _1997_midxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1997_midxs); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _1997_midxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1997_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _1997_midxs)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1997_midxs))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.pick
// Method mosek.fusion.BoundInterfaceVariable.pick @ src/fusion/BoundInterfaceVariable.mbi:74:6-88
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1998_idxs) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1998_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1998_idxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1998_idxs); }
/* override: mosek.fusion.BaseVariable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1998_idxs) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1998_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _1998_idxs)
{
  _checked_ptr_1<int32_t> _ptr__1998_idxs(_1998_idxs ? _1998_idxs->raw() : nullptr, _1998_idxs ? _1998_idxs->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1998_idxs))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.pick

// Begin mosek.fusion.BoundInterfaceVariable.antidiag
// Method mosek.fusion.BoundInterfaceVariable.antidiag @ src/fusion/BoundInterfaceVariable.mbi:73:6-93
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag(int32_t _1999_index) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(_1999_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag(int32_t _1999_index) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1999_index); }
/* override: mosek.fusion.BaseVariable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag(int32_t _1999_index) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1999_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(int32_t _1999_index)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(_1999_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.antidiag

// Begin mosek.fusion.BoundInterfaceVariable.antidiag
// Method mosek.fusion.BoundInterfaceVariable.antidiag @ src/fusion/BoundInterfaceVariable.mbi:72:6-76
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
/* override: mosek.fusion.BaseVariable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.antidiag

// Begin mosek.fusion.BoundInterfaceVariable.diag
// Method mosek.fusion.BoundInterfaceVariable.diag @ src/fusion/BoundInterfaceVariable.mbi:71:6-88
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag(int32_t _2000_index) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(_2000_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag(int32_t _2000_index) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_2000_index); }
/* override: mosek.fusion.BaseVariable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag(int32_t _2000_index) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_2000_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(int32_t _2000_index)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(_2000_index))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.diag

// Begin mosek.fusion.BoundInterfaceVariable.diag
// Method mosek.fusion.BoundInterfaceVariable.diag @ src/fusion/BoundInterfaceVariable.mbi:70:6-72
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
/* override: mosek.fusion.BaseVariable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag()
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag())).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.diag

// Begin mosek.fusion.BoundInterfaceVariable.slice
// Method mosek.fusion.BoundInterfaceVariable.slice @ src/fusion/BoundInterfaceVariable.mbi:69:6-113
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2001_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2002_lasta) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_2001_firsta,_2002_lasta); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2001_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2002_lasta) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2001_firsta,_2002_lasta); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2001_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2002_lasta) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2001_firsta,_2002_lasta); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2001_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2002_lasta)
{
  _checked_ptr_1<int32_t> _ptr__2001_firsta(_2001_firsta ? _2001_firsta->raw() : nullptr, _2001_firsta ? _2001_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2002_lasta(_2002_lasta ? _2002_lasta->raw() : nullptr, _2002_lasta ? _2002_lasta->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_2001_firsta,_2002_lasta))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.slice

// Begin mosek.fusion.BoundInterfaceVariable.slice
// Method mosek.fusion.BoundInterfaceVariable.slice @ src/fusion/BoundInterfaceVariable.mbi:68:6-105
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(int32_t _2003_first,int32_t _2004_last) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_2003_first,_2004_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(int32_t _2003_first,int32_t _2004_last) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2003_first,_2004_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2003_first,int32_t _2004_last) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_2003_first,_2004_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(int32_t _2003_first,int32_t _2004_last)
{
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_2003_first,_2004_last))).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BoundInterfaceVariable.slice

// Begin mosek.fusion.BoundInterfaceVariable.from_
// Method mosek.fusion.BoundInterfaceVariable.from_ @ src/fusion/BoundInterfaceVariable.mbi:52:6-66:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__from_(monty::rc_ptr< ::mosek::fusion::Variable > _2005_v)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2006_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__2006_shape(_2006_shape ? _2006_shape->raw() : nullptr,_2006_shape ? _2006_shape->size(0) : 0);
  int32_t _2007_nnz = _2005_v->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2008_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2007_nnz)));
  _checked_ptr_1<int64_t> _ptr__2008_nativeidxs(_2008_nativeidxs ? _2008_nativeidxs->raw() : nullptr,_2008_nativeidxs ? _2008_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2009_sparsity = nullptr;
  _checked_ptr_1<int64_t> _ptr__2009_sparsity(_2009_sparsity ? _2009_sparsity->raw() : nullptr,_2009_sparsity ? _2009_sparsity->size(0) : 0);
  if ((_2005_v->getSize() == _2007_nnz))
  {
    {
      _2005_v->inst((int)0,_2008_nativeidxs);
    }
  }
  else
  {
    {
      _2009_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2007_nnz)));
      _ptr__2009_sparsity.update(_2009_sparsity ? _2009_sparsity->raw() : nullptr, _2009_sparsity ? _2009_sparsity->size(0) : 0);
      _2005_v->inst((int)0,_2009_sparsity,(int)0,_2008_nativeidxs);
    }
  }
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_2005_v->__mosek_2fusion_2Variable__getModel(),_2006_shape,_2009_sparsity,_2008_nativeidxs,islower);
}
// End mosek.fusion.BoundInterfaceVariable.from_

void mosek::fusion::p_BoundInterfaceVariable::destroy()
{
}
void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }
// } class BoundInterfaceVariable
// class SliceVariable { // @ src/fusion/SliceVariable.mbi:18:4-66:5
mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }
mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SliceVariable::p_SliceVariable
  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SliceVariable.ctor @ src/fusion/SliceVariable.mbi:54:6-65:7
mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2010_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2011_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2012_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2013_nativeidxs)
{ return new mosek::fusion::SliceVariable(_2010_m,_2011_shape,_2012_sparsity,_2013_nativeidxs); }
mosek::fusion::SliceVariable::SliceVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2010_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2011_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2012_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2013_nativeidxs) : 
   SliceVariable(new mosek::fusion::p_SliceVariable(this))
{ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_2010_m,_2011_shape,_2012_sparsity,_2013_nativeidxs); }
void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2010_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2011_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2012_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2013_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2011_shape(_2011_shape ? _2011_shape->raw() : nullptr, _2011_shape ? _2011_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2012_sparsity(_2012_sparsity ? _2012_sparsity->raw() : nullptr, _2012_sparsity ? _2012_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2013_nativeidxs(_2013_nativeidxs ? _2013_nativeidxs->raw() : nullptr, _2013_nativeidxs ? _2013_nativeidxs->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_2010_m,_2011_shape,_2012_sparsity,_2013_nativeidxs);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _2013_nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _2012_sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _2011_shape;
  }
}
// mosek.fusion.SliceVariable.ctor

// mosek.fusion.SliceVariable.ctor @ src/fusion/SliceVariable.mbi:47:6-52:7
mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2014_v)
{ return new mosek::fusion::SliceVariable(_2014_v); }
mosek::fusion::SliceVariable::SliceVariable
  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2014_v) : 
   SliceVariable(new mosek::fusion::p_SliceVariable(this))
{ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_2014_v); }
void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _2014_v)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseVariable::_initialize(_2014_v,_2014_v->__mosek_2fusion_2BaseVariable__getModel());
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_SliceVariable::_get_impl(_2014_v)->nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = mosek::fusion::p_SliceVariable::_get_impl(_2014_v)->sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = mosek::fusion::p_SliceVariable::_get_impl(_2014_v)->shape;
  }
}
// mosek.fusion.SliceVariable.ctor

void mosek::fusion::p_SliceVariable::destroy()
{
  shape.reset();
  sparsity.reset();
  nativeidxs.reset();
}
void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }
// } class SliceVariable
// class RangedVariable { // @ src/fusion/RangedVariable.mbi:15:4-125:5
mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }
mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_RangedVariable::p_RangedVariable
  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.RangedVariable.ctor @ src/fusion/RangedVariable.mbi:55:6-64:7
mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable
  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2015_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2016_m)
{ return new mosek::fusion::RangedVariable(_2015_v,_2016_m); }
mosek::fusion::RangedVariable::RangedVariable
  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2015_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2016_m) : 
   RangedVariable(new mosek::fusion::p_RangedVariable(this))
{ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_2015_v,_2016_m); }
void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2015_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2016_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2015_v,_2016_m);
    name = mosek::fusion::p_RangedVariable::_get_impl(_2015_v)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_2015_v)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_2015_v)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_2015_v)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_2015_v)->shape;
  }
}
// mosek.fusion.RangedVariable.ctor

// mosek.fusion.RangedVariable.ctor @ src/fusion/RangedVariable.mbi:39:6-53:7
mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2017_model,
    const std::string &  _2018_name,
    int64_t _2019_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2020_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2021_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2022_nativeidxs)
{ return new mosek::fusion::RangedVariable(_2017_model,_2018_name,_2019_varid,_2020_shape,_2021_sparsity,_2022_nativeidxs); }
mosek::fusion::RangedVariable::RangedVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2017_model,
    const std::string &  _2018_name,
    int64_t _2019_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2020_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2021_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2022_nativeidxs) : 
   RangedVariable(new mosek::fusion::p_RangedVariable(this))
{ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_2017_model,_2018_name,_2019_varid,_2020_shape,_2021_sparsity,_2022_nativeidxs); }
void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2017_model,
    const std::string &  _2018_name,
    int64_t _2019_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2020_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2021_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2022_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2020_shape(_2020_shape ? _2020_shape->raw() : nullptr, _2020_shape ? _2020_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2021_sparsity(_2021_sparsity ? _2021_sparsity->raw() : nullptr, _2021_sparsity ? _2021_sparsity->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2022_nativeidxs(_2022_nativeidxs ? _2022_nativeidxs->raw() : nullptr, _2022_nativeidxs ? _2022_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2017_model,_2018_name,_2020_shape,_2019_varid,_2021_sparsity,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_2022_nativeidxs));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _2022_nativeidxs;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _2021_sparsity;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _2018_name;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _2020_shape;
    names_flushed = false;
  }
}
// mosek.fusion.RangedVariable.ctor

// Begin mosek.fusion.RangedVariable.elementDesc
// Method mosek.fusion.RangedVariable.elementDesc @ src/fusion/RangedVariable.mbi:119:6-124:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(int64_t _2023_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2024_sb) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_2023_index,_2024_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(int64_t _2023_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2024_sb) { return __mosek_2fusion_2RangedVariable__elementDesc(_2023_index,_2024_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(int64_t _2023_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2024_sb)
{
  _pubthis->elementName(_2023_index,_2024_sb);
  _2024_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _2024_sb;
}
// End mosek.fusion.RangedVariable.elementDesc

// Begin mosek.fusion.RangedVariable.flushNames
// Method mosek.fusion.RangedVariable.flushNames @ src/fusion/RangedVariable.mbi:98:6-116:7
void mosek::fusion::p_RangedVariable::flushNames()
{
}
// End mosek.fusion.RangedVariable.flushNames

// Begin mosek.fusion.RangedVariable.dual_u
// Method mosek.fusion.RangedVariable.dual_u @ src/fusion/RangedVariable.mbi:91:6-96:7
void mosek::fusion::p_RangedVariable::dual_u(int32_t _2025_offset,std::shared_ptr< monty::ndarray< double,1 > > _2026_target)
{
  _checked_ptr_1<double> _ptr__2026_target(_2026_target ? _2026_target->raw() : nullptr, _2026_target ? _2026_target->size(0) : 0);
  dual_lu(_2025_offset,_2026_target,false);
}
// End mosek.fusion.RangedVariable.dual_u

// Begin mosek.fusion.RangedVariable.dual_l
// Method mosek.fusion.RangedVariable.dual_l @ src/fusion/RangedVariable.mbi:83:6-88:7
void mosek::fusion::p_RangedVariable::dual_l(int32_t _2027_offset,std::shared_ptr< monty::ndarray< double,1 > > _2028_target)
{
  _checked_ptr_1<double> _ptr__2028_target(_2028_target ? _2028_target->raw() : nullptr, _2028_target ? _2028_target->size(0) : 0);
  dual_lu(_2027_offset,_2028_target,true);
}
// End mosek.fusion.RangedVariable.dual_l

// Begin mosek.fusion.RangedVariable.upperBoundVar
// Method mosek.fusion.RangedVariable.upperBoundVar @ src/fusion/RangedVariable.mbi:79:6-81:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__upperBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::upperBoundVar() { return __mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__upperBoundVar()
{
  std::vector<int64_t> _9779_;
  for (int32_t _2029_i = (int)0, _9780_ = (int)((nativeidxs)->size(0)); _2029_i < _9780_ ; ++_2029_i)
  {
    _9779_.push_back(((*nativeidxs)(_2029_i)));
  }
  auto _9781_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9779_.size()),_9779_.begin(),_9779_.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9781_,false);
}
// End mosek.fusion.RangedVariable.upperBoundVar

// Begin mosek.fusion.RangedVariable.lowerBoundVar
// Method mosek.fusion.RangedVariable.lowerBoundVar @ src/fusion/RangedVariable.mbi:73:6-75:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__lowerBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::lowerBoundVar() { return __mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__lowerBoundVar()
{
  std::vector<int64_t> _9782_;
  for (int32_t _2030_i = (int)0, _9783_ = (int)((nativeidxs)->size(0)); _2030_i < _9783_ ; ++_2030_i)
  {
    _9782_.push_back(((*nativeidxs)(_2030_i)));
  }
  auto _9784_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9782_.size()),_9782_.begin(),_9782_.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9784_,true);
}
// End mosek.fusion.RangedVariable.lowerBoundVar

// Begin mosek.fusion.RangedVariable.clone
// Method mosek.fusion.RangedVariable.clone @ src/fusion/RangedVariable.mbi:66:6-68:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2031_m)
{
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_2031_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.RangedVariable.clone

// Begin mosek.fusion.RangedVariable.globalNativeIndexes
// Method mosek.fusion.RangedVariable.globalNativeIndexes @ src/fusion/RangedVariable.mbi:25:6-28:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2032_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2032_nativeidxs(_2032_nativeidxs ? _2032_nativeidxs->raw() : nullptr, _2032_nativeidxs ? _2032_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2033_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2032_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2033_r(_2033_r ? _2033_r->raw() : nullptr,_2033_r ? _2033_r->size(0) : 0);
  int32_t _9785_ = (int)0;
  int32_t _9786_ = (int)((_2032_nativeidxs)->size(0));
  for (int32_t _2034_i = _9785_; _2034_i < _9786_; ++_2034_i)
  {
    {
      _ptr__2033_r[_2034_i] = _ptr__2032_nativeidxs[_2034_i];
    }
  }
  return _2033_r;
}
// End mosek.fusion.RangedVariable.globalNativeIndexes

void mosek::fusion::p_RangedVariable::destroy()
{
  shape.reset();
  nativeidxs.reset();
  sparsity.reset();
}
void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }
// } class RangedVariable
// class LinearPSDVariable { // @ src/fusion/LinearPSDVariable.monty:8:4-73:5
mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }
mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable
  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearPSDVariable.ctor @ src/fusion/LinearPSDVariable.monty:35:6-43:7
mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2035_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2036_m)
{ return new mosek::fusion::LinearPSDVariable(_2035_v,_2036_m); }
mosek::fusion::LinearPSDVariable::LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2035_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2036_m) : 
   LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this))
{ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2035_v,_2036_m); }
void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _2035_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2036_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2035_v,_2036_m);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_2035_v)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_2035_v)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_2035_v)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_2035_v)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_2035_v)->nativeidxs;
  }
}
// mosek.fusion.LinearPSDVariable.ctor

// mosek.fusion.LinearPSDVariable.ctor @ src/fusion/LinearPSDVariable.monty:19:6-33:7
mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2037_model,
    const std::string &  _2038_name,
    int32_t _2039_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2040_shape,
    int32_t _2041_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2042_nativeidxs)
{ return new mosek::fusion::LinearPSDVariable(_2037_model,_2038_name,_2039_varid,_2040_shape,_2041_conedim,_2042_nativeidxs); }
mosek::fusion::LinearPSDVariable::LinearPSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2037_model,
    const std::string &  _2038_name,
    int32_t _2039_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2040_shape,
    int32_t _2041_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2042_nativeidxs) : 
   LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this))
{ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_2037_model,_2038_name,_2039_varid,_2040_shape,_2041_conedim,_2042_nativeidxs); }
void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2037_model,
    const std::string &  _2038_name,
    int32_t _2039_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2040_shape,
    int32_t _2041_conedim,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2042_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2040_shape(_2040_shape ? _2040_shape->raw() : nullptr, _2040_shape ? _2040_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2042_nativeidxs(_2042_nativeidxs ? _2042_nativeidxs->raw() : nullptr, _2042_nativeidxs ? _2042_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2037_model,_2038_name,_2040_shape,_2039_varid,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_2042_nativeidxs));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _2038_name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _2041_conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _2039_varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _2040_shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _2042_nativeidxs;
  }
}
// mosek.fusion.LinearPSDVariable.ctor

// Begin mosek.fusion.LinearPSDVariable.flushNames
// Method mosek.fusion.LinearPSDVariable.flushNames @ src/fusion/LinearPSDVariable.monty:71:6-38
void mosek::fusion::p_LinearPSDVariable::flushNames()
{
}
// End mosek.fusion.LinearPSDVariable.flushNames

// Begin mosek.fusion.LinearPSDVariable.toString
// Method mosek.fusion.LinearPSDVariable.toString @ src/fusion/LinearPSDVariable.monty:60:6-69:7
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearPSDVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2043_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _9787_ = (int)1;
  int32_t _9788_ = (int)((shape)->size(0));
  for (int32_t _2044_i = _9787_; _2044_i < _9788_; ++_2044_i)
  {
    {
      _2043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2044_i)));
    }
  }
  _2043_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2043_sb->toString();
}
// End mosek.fusion.LinearPSDVariable.toString

// Begin mosek.fusion.LinearPSDVariable.make_continuous
// Method mosek.fusion.LinearPSDVariable.make_continuous @ src/fusion/LinearPSDVariable.monty:56:6-58:7
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _2045_idxs) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_2045_idxs); }
void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< int64_t,1 > > _2045_idxs)
{
  _checked_ptr_1<int64_t> _ptr__2045_idxs(_2045_idxs ? _2045_idxs->raw() : nullptr, _2045_idxs ? _2045_idxs->size(0) : 0);
}
// End mosek.fusion.LinearPSDVariable.make_continuous

// Begin mosek.fusion.LinearPSDVariable.make_integer
// Method mosek.fusion.LinearPSDVariable.make_integer @ src/fusion/LinearPSDVariable.monty:51:6-54:7
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _2046_idxs) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_2046_idxs); }
void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< int64_t,1 > > _2046_idxs)
{
  _checked_ptr_1<int64_t> _ptr__2046_idxs(_2046_idxs ? _2046_idxs->raw() : nullptr, _2046_idxs ? _2046_idxs->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
// End mosek.fusion.LinearPSDVariable.make_integer

// Begin mosek.fusion.LinearPSDVariable.clone
// Method mosek.fusion.LinearPSDVariable.clone @ src/fusion/LinearPSDVariable.monty:45:6-48:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2047_m)
{
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_2047_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.LinearPSDVariable.clone

// Begin mosek.fusion.LinearPSDVariable.globalNativeIndexes
// Method mosek.fusion.LinearPSDVariable.globalNativeIndexes @ src/fusion/LinearPSDVariable.monty:17:6-147
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int64_t,1 > > _2048_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2048_nativeidxs(_2048_nativeidxs ? _2048_nativeidxs->raw() : nullptr, _2048_nativeidxs ? _2048_nativeidxs->size(0) : 0);
  std::vector<int64_t> _9789_;
  for (int32_t _2049_i = (int)0, _9790_ = (int)((_2048_nativeidxs)->size(0)); _2049_i < _9790_ ; ++_2049_i)
  {
    _9789_.push_back((-safe_add( _ptr__2048_nativeidxs[_2049_i],(int)1 )));
  }
  auto _9791_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9789_.size()),_9789_.begin(),_9789_.end()));
  return _9791_;
}
// End mosek.fusion.LinearPSDVariable.globalNativeIndexes

void mosek::fusion::p_LinearPSDVariable::destroy()
{
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }
// } class LinearPSDVariable
// class PSDVariable { // @ src/fusion/SemidefiniteVariable.mbi:8:4-139:5
mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }
mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_PSDVariable::p_PSDVariable
  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.PSDVariable.ctor @ src/fusion/SemidefiniteVariable.mbi:89:6-102:7
mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable
  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2050_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2051_m)
{ return new mosek::fusion::PSDVariable(_2050_v,_2051_m); }
mosek::fusion::PSDVariable::PSDVariable
  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2050_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2051_m) : 
   PSDVariable(new mosek::fusion::p_PSDVariable(this))
{ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2050_v,_2051_m); }
void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2050_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2051_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2050_v,_2051_m);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_2050_v)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_2050_v)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_2050_v)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_2050_v)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_2050_v)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_2050_v)->conedim2;
    names_flushed = false;
    model = _2051_m;
    barvaridxs = mosek::fusion::p_PSDVariable::_get_impl(_2050_v)->barvaridxs;
  }
}
// mosek.fusion.PSDVariable.ctor

// mosek.fusion.PSDVariable.ctor @ src/fusion/SemidefiniteVariable.mbi:66:6-87:7
mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2052_model,
    const std::string &  _2053_name,
    int32_t _2054_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2055_shape,
    int32_t _2056_conedim1,
    int32_t _2057_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2058_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2059_nativeidxs)
{ return new mosek::fusion::PSDVariable(_2052_model,_2053_name,_2054_varid,_2055_shape,_2056_conedim1,_2057_conedim2,_2058_barvaridxs,_2059_nativeidxs); }
mosek::fusion::PSDVariable::PSDVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2052_model,
    const std::string &  _2053_name,
    int32_t _2054_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2055_shape,
    int32_t _2056_conedim1,
    int32_t _2057_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2058_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2059_nativeidxs) : 
   PSDVariable(new mosek::fusion::p_PSDVariable(this))
{ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2052_model,_2053_name,_2054_varid,_2055_shape,_2056_conedim1,_2057_conedim2,_2058_barvaridxs,_2059_nativeidxs); }
void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2052_model,
    const std::string &  _2053_name,
    int32_t _2054_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2055_shape,
    int32_t _2056_conedim1,
    int32_t _2057_conedim2,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2058_barvaridxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2059_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2055_shape(_2055_shape ? _2055_shape->raw() : nullptr, _2055_shape ? _2055_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2058_barvaridxs(_2058_barvaridxs ? _2058_barvaridxs->raw() : nullptr, _2058_barvaridxs ? _2058_barvaridxs->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2059_nativeidxs(_2059_nativeidxs ? _2059_nativeidxs->raw() : nullptr, _2059_nativeidxs ? _2059_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2052_model,_2053_name,_2055_shape,_2054_varid,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_2055_shape,_2056_conedim1,_2057_conedim2,_2059_nativeidxs));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _2054_varid;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _2059_nativeidxs;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _2053_name;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _2055_shape;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _2056_conedim1;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _2057_conedim2;
    names_flushed = false;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->model = _2052_model;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->barvaridxs = _2058_barvaridxs;
  }
}
// mosek.fusion.PSDVariable.ctor

// Begin mosek.fusion.PSDVariable.flushNames
// Method mosek.fusion.PSDVariable.flushNames @ src/fusion/SemidefiniteVariable.mbi:130:6-137:7
void mosek::fusion::p_PSDVariable::flushNames()
{
}
// End mosek.fusion.PSDVariable.flushNames

// Begin mosek.fusion.PSDVariable.toString
// Method mosek.fusion.PSDVariable.toString @ src/fusion/SemidefiniteVariable.mbi:119:6-128:7
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_PSDVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2060_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _9792_ = (int)1;
  int32_t _9793_ = (int)((shape)->size(0));
  for (int32_t _2061_i = _9792_; _2061_i < _9793_; ++_2061_i)
  {
    {
      _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2061_i)));
    }
  }
  _2060_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2060_sb->toString();
}
// End mosek.fusion.PSDVariable.toString

// Begin mosek.fusion.PSDVariable.elementDesc
// Method mosek.fusion.PSDVariable.elementDesc @ src/fusion/SemidefiniteVariable.mbi:111:6-116:7
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(int64_t _2062_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2063_sb) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_2062_index,_2063_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(int64_t _2062_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2063_sb) { return __mosek_2fusion_2PSDVariable__elementDesc(_2062_index,_2063_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(int64_t _2062_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2063_sb)
{
  _pubthis->elementName(_2062_index,_2063_sb);
  _2063_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _2063_sb;
}
// End mosek.fusion.PSDVariable.elementDesc

// Begin mosek.fusion.PSDVariable.clone
// Method mosek.fusion.PSDVariable.clone @ src/fusion/SemidefiniteVariable.mbi:104:6-107:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2064_m)
{
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_2064_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.PSDVariable.clone

// Begin mosek.fusion.PSDVariable.fullnativeidxs
// Method mosek.fusion.PSDVariable.fullnativeidxs @ src/fusion/SemidefiniteVariable.mbi:23:6-59:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int32_t,1 > > _2065_shape,int32_t _2066_conedim1,int32_t _2067_conedim2,std::shared_ptr< monty::ndarray< int64_t,1 > > _2068_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2065_shape(_2065_shape ? _2065_shape->raw() : nullptr, _2065_shape ? _2065_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2068_nativeidxs(_2068_nativeidxs ? _2068_nativeidxs->raw() : nullptr, _2068_nativeidxs ? _2068_nativeidxs->size(0) : 0);
  int32_t _2069_nd = (int)((_2065_shape)->size(0));
  bool _2070_tril = (_2066_conedim1 < _2067_conedim2);
  int32_t _9794_;
  bool _9795_ = _2070_tril;
  if (_9795_)
  {
    _9794_ = _2066_conedim1;
  }
  else
  {
    _9794_ = _2067_conedim2;
  }
  int32_t _2071_cd1 = _9794_;
  int32_t _9796_;
  bool _9797_ = (!_2070_tril);
  if (_9797_)
  {
    _9796_ = _2066_conedim1;
  }
  else
  {
    _9796_ = _2067_conedim2;
  }
  int32_t _2072_cd2 = _9796_;
  int32_t _2073_d0 = (int)1;
  int32_t _9798_ = (int)0;
  int32_t _9799_ = _2071_cd1;
  for (int32_t _2074_i = _9798_; _2074_i < _9799_; ++_2074_i)
  {
    {
      _2073_d0 *= _ptr__2065_shape[_2074_i];
    }
  }
  int32_t _2075_d1 = _ptr__2065_shape[_2071_cd1];
  int32_t _2076_d2 = (int)1;
  int32_t _9800_ = safe_add( _2071_cd1,(int)1 );
  int32_t _9801_ = _2072_cd2;
  for (int32_t _2077_i = _9800_; _2077_i < _9801_; ++_2077_i)
  {
    {
      _2076_d2 *= _ptr__2065_shape[_2077_i];
    }
  }
  int32_t _2078_d3 = _ptr__2065_shape[_2072_cd2];
  int32_t _2079_d4 = (int)1;
  int32_t _9802_ = safe_add( _2072_cd2,(int)1 );
  int32_t _9803_ = _2069_nd;
  for (int32_t _2080_i = _9802_; _2080_i < _9803_; ++_2080_i)
  {
    {
      _2079_d4 *= _ptr__2065_shape[_2080_i];
    }
  }
  int32_t _2081_size = safe_mul( safe_mul( safe_mul( safe_mul( _2073_d0,_2075_d1 ),_2076_d2 ),_2078_d3 ),_2079_d4 );
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2082_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2081_size)));
  _checked_ptr_1<int64_t> _ptr__2082_residxs(_2082_residxs ? _2082_residxs->raw() : nullptr,_2082_residxs ? _2082_residxs->size(0) : 0);
  int32_t _2083_s3 = _2079_d4;
  int32_t _2084_s2 = safe_mul( _2083_s3,_2078_d3 );
  int32_t _2085_s1 = safe_mul( _2084_s2,_2076_d2 );
  int32_t _2086_s0 = safe_mul( _2085_s1,_2085_s1 );
  {
    int32_t _2087_k = (int)0;
    int32_t _9804_ = (int)0;
    int32_t _9805_ = _2073_d0;
    for (int32_t _2088_i0 = _9804_; _2088_i0 < _9805_; ++_2088_i0)
    {
      {
        int32_t _9806_ = (int)0;
        int32_t _9807_ = _2078_d3;
        for (int32_t _2089_i3 = _9806_; _2089_i3 < _9807_; ++_2089_i3)
        {
          {
            int32_t _9808_ = (int)0;
            int32_t _9809_ = _2076_d2;
            for (int32_t _2090_i2 = _9808_; _2090_i2 < _9809_; ++_2090_i2)
            {
              {
                int32_t _9810_ = _2089_i3;
                int32_t _9811_ = _2075_d1;
                for (int32_t _2091_i1 = _9810_; _2091_i1 < _9811_; ++_2091_i1)
                {
                  {
                    int32_t _9812_ = (int)0;
                    int32_t _9813_ = _2079_d4;
                    for (int32_t _2092_i4 = _9812_; _2092_i4 < _9813_; ++_2092_i4)
                    {
                      {
                        _ptr__2082_residxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2088_i0,_2086_s0 ),safe_mul( _2091_i1,_2085_s1 ) ),safe_mul( _2090_i2,_2084_s2 ) ),safe_mul( _2089_i3,_2083_s3 ) ),_2092_i4 )] = (-safe_add( _ptr__2068_nativeidxs[_2087_k],(int)1 ));
                        _ptr__2082_residxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2088_i0,_2086_s0 ),safe_mul( _2089_i3,_2085_s1 ) ),safe_mul( _2090_i2,_2084_s2 ) ),safe_mul( _2091_i1,_2083_s3 ) ),_2092_i4 )] = (-safe_add( _ptr__2068_nativeidxs[_2087_k],(int)1 ));
                        ++ _2087_k;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2082_residxs;
}
// End mosek.fusion.PSDVariable.fullnativeidxs

void mosek::fusion::p_PSDVariable::destroy()
{
  model.reset();
  barvaridxs.reset();
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }
// } class PSDVariable
// class LinearVariable { // @ src/fusion/LinearVariable.mbi:21:4-111:5
mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }
mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearVariable::p_LinearVariable
  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearVariable.ctor @ src/fusion/LinearVariable.mbi:53:6-62:7
mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable
  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2093_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2094_m)
{ return new mosek::fusion::LinearVariable(_2093_v,_2094_m); }
mosek::fusion::LinearVariable::LinearVariable
  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2093_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2094_m) : 
   LinearVariable(new mosek::fusion::p_LinearVariable(this))
{ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2093_v,_2094_m); }
void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2093_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2094_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2093_v,_2094_m);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_2093_v)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_2093_v)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_2093_v)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_2093_v)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_2093_v)->name;
  }
}
// mosek.fusion.LinearVariable.ctor

// mosek.fusion.LinearVariable.ctor @ src/fusion/LinearVariable.mbi:36:6-51:7
mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2095_model,
    const std::string &  _2096_name,
    int64_t _2097_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2098_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2099_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2100_nativeidxs)
{ return new mosek::fusion::LinearVariable(_2095_model,_2096_name,_2097_varid,_2098_shape,_2099_sparsity,_2100_nativeidxs); }
mosek::fusion::LinearVariable::LinearVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2095_model,
    const std::string &  _2096_name,
    int64_t _2097_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2098_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2099_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2100_nativeidxs) : 
   LinearVariable(new mosek::fusion::p_LinearVariable(this))
{ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2095_model,_2096_name,_2097_varid,_2098_shape,_2099_sparsity,_2100_nativeidxs); }
void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2095_model,
    const std::string &  _2096_name,
    int64_t _2097_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2098_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2099_sparsity,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2100_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2098_shape(_2098_shape ? _2098_shape->raw() : nullptr, _2098_shape ? _2098_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2099_sparsity(_2099_sparsity ? _2099_sparsity->raw() : nullptr, _2099_sparsity ? _2099_sparsity->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2100_nativeidxs(_2100_nativeidxs ? _2100_nativeidxs->raw() : nullptr, _2100_nativeidxs ? _2100_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2095_model,_2096_name,_2098_shape,_2097_varid,_2099_sparsity,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_2100_nativeidxs));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _2096_name;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _2100_nativeidxs;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _2099_sparsity;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _2098_shape;
  }
}
// mosek.fusion.LinearVariable.ctor

// Begin mosek.fusion.LinearVariable.toString
// Method mosek.fusion.LinearVariable.toString @ src/fusion/LinearVariable.mbi:95:6-109:7
std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2101_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2101_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _2101_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _9814_ = (int)1;
      int32_t _9815_ = (int)((shape)->size(0));
      for (int32_t _2102_i = _9814_; _2102_i < _9815_; ++_2102_i)
      {
        {
          _2101_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2102_i)));
        }
      }
    }
  }
  {}
  _2101_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sparsity.get()))
  {
    {
      _2101_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _2101_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _2101_sb->toString();
}
// End mosek.fusion.LinearVariable.toString

// Begin mosek.fusion.LinearVariable.flushNames
// Method mosek.fusion.LinearVariable.flushNames @ src/fusion/LinearVariable.mbi:68:6-93:7
void mosek::fusion::p_LinearVariable::flushNames()
{
}
// End mosek.fusion.LinearVariable.flushNames

// Begin mosek.fusion.LinearVariable.clone
// Method mosek.fusion.LinearVariable.clone @ src/fusion/LinearVariable.mbi:64:6-66:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2103_m)
{
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_2103_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.LinearVariable.clone

// Begin mosek.fusion.LinearVariable.globalNativeIndexes
// Method mosek.fusion.LinearVariable.globalNativeIndexes @ src/fusion/LinearVariable.mbi:31:6-34:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2104_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2104_nativeidxs(_2104_nativeidxs ? _2104_nativeidxs->raw() : nullptr, _2104_nativeidxs ? _2104_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2105_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2104_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2105_r(_2105_r ? _2105_r->raw() : nullptr,_2105_r ? _2105_r->size(0) : 0);
  int32_t _9816_ = (int)0;
  int32_t _9817_ = (int)((_2104_nativeidxs)->size(0));
  for (int32_t _2106_i = _9816_; _2106_i < _9817_; ++_2106_i)
  {
    {
      _ptr__2105_r[_2106_i] = _ptr__2104_nativeidxs[_2106_i];
    }
  }
  return _2105_r;
}
// End mosek.fusion.LinearVariable.globalNativeIndexes

void mosek::fusion::p_LinearVariable::destroy()
{
  shape.reset();
  sparsity.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }
// } class LinearVariable
// class ConicVariable { // @ src/fusion/ConicVariable.mbi:23:4-107:5
mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }
mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ConicVariable::p_ConicVariable
  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ConicVariable.ctor @ src/fusion/ConicVariable.mbi:55:6-64:7
mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable
  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2107_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2108_m)
{ return new mosek::fusion::ConicVariable(_2107_v,_2108_m); }
mosek::fusion::ConicVariable::ConicVariable
  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2107_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2108_m) : 
   ConicVariable(new mosek::fusion::p_ConicVariable(this))
{ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2107_v,_2108_m); }
void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2107_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2108_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelVariable::_initialize(_2107_v,_2108_m);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_2107_v)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_2107_v)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_2107_v)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_2107_v)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_2107_v)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_2107_v)->name;
  }
}
// mosek.fusion.ConicVariable.ctor

// mosek.fusion.ConicVariable.ctor @ src/fusion/ConicVariable.mbi:40:6-53:7
mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2109_model,
    const std::string &  _2110_name,
    int32_t _2111_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2112_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2113_nativeidxs)
{ return new mosek::fusion::ConicVariable(_2109_model,_2110_name,_2111_varid,_2112_shape,_2113_nativeidxs); }
mosek::fusion::ConicVariable::ConicVariable
  (monty::rc_ptr< ::mosek::fusion::Model > _2109_model,
    const std::string &  _2110_name,
    int32_t _2111_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2112_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2113_nativeidxs) : 
   ConicVariable(new mosek::fusion::p_ConicVariable(this))
{ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2109_model,_2110_name,_2111_varid,_2112_shape,_2113_nativeidxs); }
void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2109_model,
    const std::string &  _2110_name,
    int32_t _2111_varid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2112_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2113_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2112_shape(_2112_shape ? _2112_shape->raw() : nullptr, _2112_shape ? _2112_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2113_nativeidxs(_2113_nativeidxs ? _2113_nativeidxs->raw() : nullptr, _2113_nativeidxs ? _2113_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_2109_model,_2110_name,_2112_shape,_2111_varid,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_2113_nativeidxs));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _2110_name;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _2111_varid;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _2112_shape;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _2113_nativeidxs;
  }
}
// mosek.fusion.ConicVariable.ctor

// Begin mosek.fusion.ConicVariable.toString
// Method mosek.fusion.ConicVariable.toString @ src/fusion/ConicVariable.mbi:96:6-106:7
std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ConicVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2114_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2114_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _2114_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _2114_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _2114_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _9818_ = (int)1;
  int32_t _9819_ = (int)((shape)->size(0));
  for (int32_t _2115_i = _9818_; _2115_i < _9819_; ++_2115_i)
  {
    {
      _2114_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2115_i)));
    }
  }
  _2114_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _2114_sb->toString();
}
// End mosek.fusion.ConicVariable.toString

// Begin mosek.fusion.ConicVariable.flushNames
// Method mosek.fusion.ConicVariable.flushNames @ src/fusion/ConicVariable.mbi:71:6-95:7
void mosek::fusion::p_ConicVariable::flushNames()
{
}
// End mosek.fusion.ConicVariable.flushNames

// Begin mosek.fusion.ConicVariable.clone
// Method mosek.fusion.ConicVariable.clone @ src/fusion/ConicVariable.mbi:66:6-69:7
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _2116_m)
{
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_2116_m)).as<::mosek::fusion::ModelVariable>();
}
// End mosek.fusion.ConicVariable.clone

// Begin mosek.fusion.ConicVariable.globalNativeIndexes
// Method mosek.fusion.ConicVariable.globalNativeIndexes @ src/fusion/ConicVariable.mbi:35:6-38:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _2117_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2117_nativeidxs(_2117_nativeidxs ? _2117_nativeidxs->raw() : nullptr, _2117_nativeidxs ? _2117_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2118_r = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2117_nativeidxs)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__2118_r(_2118_r ? _2118_r->raw() : nullptr,_2118_r ? _2118_r->size(0) : 0);
  int32_t _9820_ = (int)0;
  int32_t _9821_ = (int)((_2117_nativeidxs)->size(0));
  for (int32_t _2119_i = _9820_; _2119_i < _9821_; ++_2119_i)
  {
    {
      _ptr__2118_r[_2119_i] = _ptr__2117_nativeidxs[_2119_i];
    }
  }
  return _2118_r;
}
// End mosek.fusion.ConicVariable.globalNativeIndexes

void mosek::fusion::p_ConicVariable::destroy()
{
  nativeidxs.reset();
  shape.reset();
}
void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }
// } class ConicVariable
// class ModelVariable { // @ src/fusion/ModelVariable.mbi:14:4-92:5
mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }
mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ModelVariable::p_ModelVariable
  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ModelVariable.ctor @ src/fusion/ModelVariable.mbi:62:6-72:7
void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _2120_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2121_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseVariable::_initialize(_2120_v,_2121_m);
    name = mosek::fusion::p_ModelVariable::_get_impl(_2120_v)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_2120_v)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_2120_v)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_2120_v)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_2120_v)->sparsity;
  }
}
// mosek.fusion.ModelVariable.ctor

// mosek.fusion.ModelVariable.ctor @ src/fusion/ModelVariable.mbi:44:6-58:7
void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2122_model,
    const std::string &  _2123_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2124_shape,
    int64_t _2125_varid,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2126_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2127_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2124_shape(_2124_shape ? _2124_shape->raw() : nullptr, _2124_shape ? _2124_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2126_sparsity(_2126_sparsity ? _2126_sparsity->raw() : nullptr, _2126_sparsity ? _2126_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2127_nativeidxs(_2127_nativeidxs ? _2127_nativeidxs->raw() : nullptr, _2127_nativeidxs ? _2127_nativeidxs->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_2122_model,_2124_shape,_2126_sparsity,_2127_nativeidxs);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _2123_name;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _2125_varid;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _2124_shape;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _2126_sparsity;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _2127_nativeidxs;
  }
}
// mosek.fusion.ModelVariable.ctor

// Begin mosek.fusion.ModelVariable.flushNames
// End mosek.fusion.ModelVariable.flushNames

// Begin mosek.fusion.ModelVariable.elementName
// Method mosek.fusion.ModelVariable.elementName @ src/fusion/ModelVariable.mbi:84:6-88:7
void mosek::fusion::ModelVariable :: elementName(int64_t _2128_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2129_sb) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_2128_index,_2129_sb); }
void mosek::fusion::p_ModelVariable::elementName(int64_t _2128_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2129_sb)
{
  std::string _9822_;
  bool _9823_ = ((int)((name).size()) == (int)0);
  if (_9823_)
  {
    _9822_ = std::string ("_");
  }
  else
  {
    _9822_ = name;
  }
  _2129_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_9822_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_2128_index))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
// End mosek.fusion.ModelVariable.elementName

// Begin mosek.fusion.ModelVariable.remove
// Method mosek.fusion.ModelVariable.remove @ src/fusion/ModelVariable.mbi:78:6-80:7
void mosek::fusion::ModelVariable :: remove() { mosek::fusion::p_ModelVariable::_get_impl(this)->remove(); }
void mosek::fusion::p_ModelVariable::remove()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->removeVariableBlock(varid);
}
// End mosek.fusion.ModelVariable.remove

// Begin mosek.fusion.ModelVariable.clone
// End mosek.fusion.ModelVariable.clone

void mosek::fusion::p_ModelVariable::destroy()
{
  sparsity.reset();
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }
// } class ModelVariable
// class NilVariable { // @ src/fusion/BaseVariable.monty:1000:4-1088:5
mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }
mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }
mosek::fusion::p_NilVariable::p_NilVariable
  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.NilVariable.ctor @ src/fusion/BaseVariable.monty:1008:6-1012:7
mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2131_shape)
{ return new mosek::fusion::NilVariable(_2131_shape); }
mosek::fusion::NilVariable::NilVariable
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2131_shape) : 
   NilVariable(new mosek::fusion::p_NilVariable(this))
{ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_2131_shape); }
void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _2131_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2131_shape(_2131_shape ? _2131_shape->raw() : nullptr, _2131_shape ? _2131_shape->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_2131_shape),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))));
    std::vector<int32_t> _9824_;
    for (int32_t _2132_i = (int)0, _9825_ = (int)((_2131_shape)->size(0)); _2132_i < _9825_ ; ++_2132_i)
    {
      _9824_.push_back(_ptr__2131_shape[_2132_i]);
    }
    auto _9826_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9824_.size()),_9824_.begin(),_9824_.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _9826_;
  }
}
// mosek.fusion.NilVariable.ctor

// mosek.fusion.NilVariable.ctor @ src/fusion/BaseVariable.monty:1006:6-45
mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable
  ()
{ return new mosek::fusion::NilVariable(); }
mosek::fusion::NilVariable::NilVariable
  () : 
   NilVariable(new mosek::fusion::p_NilVariable(this))
{ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }
void mosek::fusion::p_NilVariable::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
  }
}
// mosek.fusion.NilVariable.ctor

// Begin mosek.fusion.NilVariable.flushNames
// Method mosek.fusion.NilVariable.flushNames @ src/fusion/BaseVariable.monty:1085:6-44
void mosek::fusion::p_NilVariable::flushNames()
{
}
// End mosek.fusion.NilVariable.flushNames

// Begin mosek.fusion.NilVariable.elementDesc
// Method mosek.fusion.NilVariable.elementDesc @ src/fusion/BaseVariable.monty:1084:6-102
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(int64_t _2133_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2134_sb) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_2133_index,_2134_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(int64_t _2133_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2134_sb) { return __mosek_2fusion_2NilVariable__elementDesc(_2133_index,_2134_sb); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(int64_t _2133_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2134_sb)
{
  return _2134_sb;
}
// End mosek.fusion.NilVariable.elementDesc

// Begin mosek.fusion.NilVariable.elementName
// Method mosek.fusion.NilVariable.elementName @ src/fusion/BaseVariable.monty:1083:6-76
void mosek::fusion::NilVariable :: elementName(int64_t _2135_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2136_sb) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_2135_index,_2136_sb); }
void mosek::fusion::p_NilVariable::elementName(int64_t _2135_index,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2136_sb)
{
}
// End mosek.fusion.NilVariable.elementName

// Begin mosek.fusion.NilVariable.numInst
// Method mosek.fusion.NilVariable.numInst @ src/fusion/BaseVariable.monty:1079:6-1081:7
int32_t mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }
int32_t mosek::fusion::p_NilVariable::numInst()
{
  return (int)0;
}
// End mosek.fusion.NilVariable.numInst

// Begin mosek.fusion.NilVariable.inst
// Method mosek.fusion.NilVariable.inst @ src/fusion/BaseVariable.monty:1071:6-1077:7
int32_t mosek::fusion::NilVariable :: inst(int32_t _2137_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2138_sparsity,std::shared_ptr< monty::ndarray< int64_t,1 > > _2139_nativeidxs) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2137_offset,_2138_sparsity,_2139_nativeidxs); }
int32_t mosek::fusion::p_NilVariable::inst(int32_t _2137_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2138_sparsity,std::shared_ptr< monty::ndarray< int64_t,1 > > _2139_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2138_sparsity(_2138_sparsity ? _2138_sparsity->raw() : nullptr, _2138_sparsity ? _2138_sparsity->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2139_nativeidxs(_2139_nativeidxs ? _2139_nativeidxs->raw() : nullptr, _2139_nativeidxs ? _2139_nativeidxs->size(0) : 0);
  return (int)0;
}
// End mosek.fusion.NilVariable.inst

// Begin mosek.fusion.NilVariable.inst
// Method mosek.fusion.NilVariable.inst @ src/fusion/BaseVariable.monty:1066:6-1069:8
void mosek::fusion::NilVariable :: inst(int32_t _2140_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2141_nindex) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2140_offset,_2141_nindex); }
void mosek::fusion::p_NilVariable::inst(int32_t _2140_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2141_nindex)
{
  _checked_ptr_1<int64_t> _ptr__2141_nindex(_2141_nindex ? _2141_nindex->raw() : nullptr, _2141_nindex ? _2141_nindex->size(0) : 0);
}
// End mosek.fusion.NilVariable.inst

// Begin mosek.fusion.NilVariable.set_values
// Method mosek.fusion.NilVariable.set_values @ src/fusion/BaseVariable.monty:1061:6-1064:8
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2142_target,bool _2143_primal) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2142_target,_2143_primal); }
void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2142_target,bool _2143_primal)
{
  _checked_ptr_1<double> _ptr__2142_target(_2142_target ? _2142_target->raw() : nullptr, _2142_target ? _2142_target->size(0) : 0);
}
// End mosek.fusion.NilVariable.set_values

// Begin mosek.fusion.NilVariable.values
// Method mosek.fusion.NilVariable.values @ src/fusion/BaseVariable.monty:1055:6-1059:8
void mosek::fusion::NilVariable :: values(int32_t _2144_offset,std::shared_ptr< monty::ndarray< double,1 > > _2145_target,bool _2146_primal) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2144_offset,_2145_target,_2146_primal); }
void mosek::fusion::p_NilVariable::values(int32_t _2144_offset,std::shared_ptr< monty::ndarray< double,1 > > _2145_target,bool _2146_primal)
{
  _checked_ptr_1<double> _ptr__2145_target(_2145_target ? _2145_target->raw() : nullptr, _2145_target ? _2145_target->size(0) : 0);
}
// End mosek.fusion.NilVariable.values

// Begin mosek.fusion.NilVariable.make_continuous
// Method mosek.fusion.NilVariable.make_continuous @ src/fusion/BaseVariable.monty:1053:6-40
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }
void mosek::fusion::p_NilVariable::make_continuous()
{
}
// End mosek.fusion.NilVariable.make_continuous

// Begin mosek.fusion.NilVariable.make_integer
// Method mosek.fusion.NilVariable.make_integer @ src/fusion/BaseVariable.monty:1052:6-37
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }
void mosek::fusion::p_NilVariable::make_integer()
{
}
// End mosek.fusion.NilVariable.make_integer

// Begin mosek.fusion.NilVariable.toString
// Method mosek.fusion.NilVariable.toString @ src/fusion/BaseVariable.monty:1050:6-63
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_NilVariable::toString()
{
  return std::string ("NilVariable");
}
// End mosek.fusion.NilVariable.toString

// Begin mosek.fusion.NilVariable.index
// Method mosek.fusion.NilVariable.index @ src/fusion/BaseVariable.monty:1044:6-1048:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2147_first) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_2147_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2147_first) { return __mosek_2fusion_2NilVariable__index(_2147_first); }
/* override: mosek.fusion.BaseVariable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2147_first) { return __mosek_2fusion_2NilVariable__index(_2147_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2147_first)
{
  _checked_ptr_1<int32_t> _ptr__2147_first(_2147_first ? _2147_first->raw() : nullptr, _2147_first ? _2147_first->size(0) : 0);
  std::vector<int32_t> _9827_;
  for (int32_t _2148_i = (int)0, _9828_ = (int)((shape)->size(0)); _2148_i < _9828_ ; ++_2148_i)
  {
    _9827_.push_back((int)1);
  }
  auto _9829_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9827_.size()),_9827_.begin(),_9827_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9829_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.index

// Begin mosek.fusion.NilVariable.index
// Method mosek.fusion.NilVariable.index @ src/fusion/BaseVariable.monty:1038:6-1042:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int32_t _2149_first) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_2149_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int32_t _2149_first) { return __mosek_2fusion_2NilVariable__index(_2149_first); }
/* override: mosek.fusion.BaseVariable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2149_first) { return __mosek_2fusion_2NilVariable__index(_2149_first); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int32_t _2149_first)
{
  std::vector<int32_t> _9830_;
  for (int32_t _2150_i = (int)0, _9831_ = (int)((shape)->size(0)); _2150_i < _9831_ ; ++_2150_i)
  {
    _9830_.push_back((int)1);
  }
  auto _9832_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9830_.size()),_9830_.begin(),_9830_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9832_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.index

// Begin mosek.fusion.NilVariable.slice
// Method mosek.fusion.NilVariable.slice @ src/fusion/BaseVariable.monty:1026:6-1036:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2151_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2152_last) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_2151_first,_2152_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2151_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2152_last) { return __mosek_2fusion_2NilVariable__slice(_2151_first,_2152_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2151_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2152_last) { return __mosek_2fusion_2NilVariable__slice(_2151_first,_2152_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2151_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2152_last)
{
  _checked_ptr_1<int32_t> _ptr__2151_first(_2151_first ? _2151_first->raw() : nullptr, _2151_first ? _2151_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2152_last(_2152_last ? _2152_last->raw() : nullptr, _2152_last ? _2152_last->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_2151_first)->size(0))) || ((int)((shape)->size(0)) != (int)((_2152_last)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int32_t _9833_ = (int)0;
  int32_t _9834_ = (int)((_2151_first)->size(0));
  for (int32_t _2153_i = _9833_; _2153_i < _9834_; ++_2153_i)
  {
    {
      if (((_ptr__2152_last[_2153_i] > _ptr__2151_first[_2153_i]) || ((_ptr__2151_first[_2153_i] < (int)0) || (_ptr__2152_last[_2153_i] >= ((*shape)(_2153_i))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _9835_;
  for (int32_t _2154_i = (int)0, _9836_ = (int)((shape)->size(0)); _2154_i < _9836_ ; ++_2154_i)
  {
    _9835_.push_back((_ptr__2152_last[_2154_i] - _ptr__2151_first[_2154_i]));
  }
  auto _9837_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9835_.size()),_9835_.begin(),_9835_.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9837_)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.NilVariable.slice

// Begin mosek.fusion.NilVariable.slice
// Method mosek.fusion.NilVariable.slice @ src/fusion/BaseVariable.monty:1014:6-1024:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int32_t _2155_first,int32_t _2156_last) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_2155_first,_2156_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int32_t _2155_first,int32_t _2156_last) { return __mosek_2fusion_2NilVariable__slice(_2155_first,_2156_last); }
/* override: mosek.fusion.BaseVariable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2155_first,int32_t _2156_last) { return __mosek_2fusion_2NilVariable__slice(_2155_first,_2156_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int32_t _2155_first,int32_t _2156_last)
{
  if (((_2156_last > _2155_first) || ((_2155_first < (int)0) || (_2156_last > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_2156_last - _2155_first))}))).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.NilVariable.slice

void mosek::fusion::p_NilVariable::destroy()
{
  shape.reset();
}
void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }
// } class NilVariable
// class BaseVariable { // @ src/fusion/BaseVariable.monty:53:4-969:5
mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }
mosek::fusion::p_BaseVariable::p_BaseVariable
  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.BaseVariable.ctor @ src/fusion/BaseVariable.monty:99:6-108:7
void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _2157_v,
    monty::rc_ptr< ::mosek::fusion::Model > _2158_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    model = _2158_m;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_2157_v)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_2157_v)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_2157_v)->nativeidxs;
  }
}
// mosek.fusion.BaseVariable.ctor

// mosek.fusion.BaseVariable.ctor @ src/fusion/BaseVariable.monty:83:6-94:7
void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2159_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2160_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2161_sparsity,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2162_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2160_shape(_2160_shape ? _2160_shape->raw() : nullptr, _2160_shape ? _2160_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2161_sparsity(_2161_sparsity ? _2161_sparsity->raw() : nullptr, _2161_sparsity ? _2161_sparsity->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2162_nativeidxs(_2162_nativeidxs ? _2162_nativeidxs->raw() : nullptr, _2162_nativeidxs ? _2162_nativeidxs->size(0) : 0);
    model = _2159_m;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _2160_shape;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _2161_sparsity;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _2162_nativeidxs;
  }
}
// mosek.fusion.BaseVariable.ctor

// Begin mosek.fusion.BaseVariable.toString
// Method mosek.fusion.BaseVariable.toString @ src/fusion/BaseVariable.monty:957:6-968:7
std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }
std::string mosek::fusion::p_BaseVariable::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2163_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2163_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _2163_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _9838_ = (int)1;
      int32_t _9839_ = (int)((shape)->size(0));
      for (int32_t _2164_i = _9838_; _2164_i < _9839_; ++_2164_i)
      {
        {
          _2163_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2164_i)));
        }
      }
    }
  }
  {}
  _2163_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _2163_sb->toString();
}
// End mosek.fusion.BaseVariable.toString

// Begin mosek.fusion.BaseVariable.eval
// Method mosek.fusion.BaseVariable.eval @ src/fusion/BaseVariable.monty:926:6-954:7
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2165_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _2166_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _2167_xs) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_2165_rs,_2166_ws,_2167_xs); }
void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _2165_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _2166_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _2167_xs)
{
  int32_t _2168_nnz = (int)((nativeidxs)->size(0));
  int32_t _2169_nelem = _2168_nnz;
  int32_t _2170_nd = (int)((shape)->size(0));
  bool _2171_hassp = (NULL != sparsity.get());
  _2165_rs->alloc_expr(_2170_nd,_2169_nelem,_2168_nnz,_2171_hassp);
  int32_t _2172_ptr = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->ptr_base;
  int32_t _2173_nidxs = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->nidxs_base;
  int32_t _2174_sp = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->sp_base;
  int32_t _2175_cof = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->cof_base;
  int32_t _2176_shape_base = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2177_ri32 = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__2177_ri32(_2177_ri32 ? _2177_ri32->raw() : nullptr,_2177_ri32 ? _2177_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2178_ri64 = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__2178_ri64(_2178_ri64 ? _2178_ri64->raw() : nullptr,_2178_ri64 ? _2178_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2179_rf64 = mosek::fusion::p_WorkStack::_get_impl(_2165_rs)->f64;
  _checked_ptr_1<double> _ptr__2179_rf64(_2179_rf64 ? _2179_rf64->raw() : nullptr,_2179_rf64 ? _2179_rf64->size(0) : 0);
  int32_t _9840_ = (int)0;
  int32_t _9841_ = _2170_nd;
  for (int32_t _2180_i = _9840_; _2180_i < _9841_; ++_2180_i)
  {
    {
      _ptr__2177_ri32[safe_add( _2176_shape_base,_2180_i )] = ((*shape)(_2180_i));
    }
  }
  {
    int32_t _9842_ = (int)0;
    int32_t _9843_ = safe_add( _2168_nnz,(int)1 );
    for (int32_t _2181_i = _9842_; _2181_i < _9843_; ++_2181_i)
    {
      {
        _ptr__2177_ri32[safe_add( _2172_ptr,_2181_i )] = _2181_i;
      }
    }
    int32_t _9844_ = (int)0;
    int32_t _9845_ = _2168_nnz;
    for (int32_t _2182_i = _9844_; _2182_i < _9845_; ++_2182_i)
    {
      {
        _ptr__2178_ri64[safe_add( _2173_nidxs,_2182_i )] = ((*nativeidxs)(_2182_i));
      }
    }
    if (_2171_hassp)
    {
      {
        int32_t _9846_ = (int)0;
        int32_t _9847_ = _2168_nnz;
        for (int32_t _2183_i = _9846_; _2183_i < _9847_; ++_2183_i)
        {
          {
            _ptr__2178_ri64[safe_add( _2174_sp,_2183_i )] = ((*sparsity)(_2183_i));
          }
        }
      }
    }
    {}
    int32_t _9848_ = (int)0;
    int32_t _9849_ = _2168_nnz;
    for (int32_t _2184_i = _9848_; _2184_i < _9849_; ++_2184_i)
    {
      {
        _ptr__2179_rf64[safe_add( _2175_cof,_2184_i )] = 1.0;
      }
    }
  }
}
// End mosek.fusion.BaseVariable.eval

// Begin mosek.fusion.BaseVariable.remove
// Method mosek.fusion.BaseVariable.remove @ src/fusion/BaseVariable.monty:920:6-922:7
void mosek::fusion::BaseVariable :: remove() { mosek::fusion::p_BaseVariable::_get_impl(this)->remove(); }
void mosek::fusion::p_BaseVariable::remove()
{
  throw ::mosek::fusion::DeletionError(std::string ("Only original variables can be removed"));
}
// End mosek.fusion.BaseVariable.remove

// Begin mosek.fusion.BaseVariable.fromTril
// Method mosek.fusion.BaseVariable.fromTril @ src/fusion/BaseVariable.monty:844:6-918:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int32_t _2185_dim0,int32_t _2186_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_2185_dim0,_2186_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int32_t _2185_dim0,int32_t _2186_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2185_dim0,_2186_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int32_t _2185_dim0,int32_t _2186_d)
{
  if (((_2185_dim0 < (int)0) || (_2185_dim0 >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension"));
    }
  }
  else if((((*shape)(_2185_dim0)) != (safe_mul( _2186_d,safe_add( _2186_d,(int)1 ) ) / (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  {}
  int32_t _2187_d0 = (int)1;
  int32_t _9850_ = (int)0;
  int32_t _9851_ = _2185_dim0;
  for (int32_t _2188_i = _9850_; _2188_i < _9851_; ++_2188_i)
  {
    {
      _2187_d0 *= ((*shape)(_2188_i));
    }
  }
  int32_t _2189_d1 = ((*shape)(_2185_dim0));
  int32_t _2190_d2 = (int)1;
  int32_t _9852_ = safe_add( _2185_dim0,(int)1 );
  int32_t _9853_ = (int)((shape)->size(0));
  for (int32_t _2191_i = _9852_; _2191_i < _9853_; ++_2191_i)
  {
    {
      _2190_d2 *= ((*shape)(_2191_i));
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2192_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( (int)((shape)->size(0)),(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__2192_rshape(_2192_rshape ? _2192_rshape->raw() : nullptr,_2192_rshape ? _2192_rshape->size(0) : 0);
  int32_t _9854_ = (int)0;
  int32_t _9855_ = _2185_dim0;
  for (int32_t _2193_i = _9854_; _2193_i < _9855_; ++_2193_i)
  {
    {
      _ptr__2192_rshape[_2193_i] = ((*shape)(_2193_i));
    }
  }
  _ptr__2192_rshape[_2185_dim0] = _2186_d;
  _ptr__2192_rshape[safe_add( _2185_dim0,(int)1 )] = _2186_d;
  int32_t _9856_ = safe_add( _2185_dim0,(int)1 );
  int32_t _9857_ = (int)((shape)->size(0));
  for (int32_t _2194_i = _9856_; _2194_i < _9857_; ++_2194_i)
  {
    {
      _ptr__2192_rshape[safe_add( _2194_i,(int)1 )] = ((*shape)(_2194_i));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2195_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( safe_mul( safe_mul( _2187_d0,_2186_d ),_2186_d ),_2190_d2 ))));
      _checked_ptr_1<int64_t> _ptr__2195_nidxs(_2195_nidxs ? _2195_nidxs->raw() : nullptr,_2195_nidxs ? _2195_nidxs->size(0) : 0);
      int32_t _2196_ofs = (int)0;
      int32_t _9858_ = (int)0;
      int32_t _9859_ = _2187_d0;
      for (int32_t _2197_i0 = _9858_; _2197_i0 < _9859_; ++_2197_i0)
      {
        {
          int32_t _9860_ = (int)0;
          int32_t _9861_ = _2186_d;
          for (int32_t _2198_i10 = _9860_; _2198_i10 < _9861_; ++_2198_i10)
          {
            {
              int32_t _9862_ = (int)0;
              int32_t _9863_ = _2186_d;
              for (int32_t _2199_i11 = _9862_; _2199_i11 < _9863_; ++_2199_i11)
              {
                {
                  int32_t _9864_ = (int)0;
                  int32_t _9865_ = _2190_d2;
                  for (int32_t _2200_i2 = _9864_; _2200_i2 < _9865_; ++_2200_i2)
                  {
                    {
                      if ((_2198_i10 >= _2199_i11))
                      {
                        {
                          _ptr__2195_nidxs[_2196_ofs] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _2197_i0,_2189_d1 ),_2190_d2 ),safe_mul( safe_add( (safe_mul( _2198_i10,safe_add( _2198_i10,(int)1 ) ) / (int)2),_2199_i11 ),_2190_d2 ) ),_2200_i2 )));
                        }
                      }
                      else
                      {
                        {
                          _ptr__2195_nidxs[_2196_ofs] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _2197_i0,_2189_d1 ),_2190_d2 ),safe_mul( safe_add( (safe_mul( _2199_i11,safe_add( _2199_i11,(int)1 ) ) / (int)2),_2198_i10 ),_2190_d2 ) ),_2200_i2 )));
                        }
                      }
                      ++ _2196_ofs;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2192_rshape,nullptr,_2195_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2201_nelm = (int)0;
      int32_t _9866_ = (int)0;
      int32_t _9867_ = (int)((sparsity)->size(0));
      for (int32_t _2202_i = _9866_; _2202_i < _9867_; ++_2202_i)
      {
        {
          int64_t _2203_i1 = ((((*sparsity)(_2202_i)) / _2190_d2) % _2189_d1);
          int32_t _2204_ii = (int32_t)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_2203_i1 ) ),safe_add( (int)1,safe_mul( (int)2,_2203_i1 ) ) )))) / (int)4);
          int64_t _2205_jj = (((*sparsity)(_2202_i)) - (safe_mul( _2204_ii,safe_add( _2204_ii,(int)1 ) ) / (int)2));
          if ((_2204_ii == _2205_jj))
          {
            {
              _2201_nelm += (int)1;
            }
          }
          else
          {
            {
              _2201_nelm += (int)2;
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2206_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2201_nelm)));
      _checked_ptr_1<int64_t> _ptr__2206_nidxs(_2206_nidxs ? _2206_nidxs->raw() : nullptr,_2206_nidxs ? _2206_nidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2207_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2201_nelm)));
      _checked_ptr_1<int64_t> _ptr__2207_sp(_2207_sp ? _2207_sp->raw() : nullptr,_2207_sp ? _2207_sp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2208_perm = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2201_nelm)));
      _checked_ptr_1<int64_t> _ptr__2208_perm(_2208_perm ? _2208_perm->raw() : nullptr,_2208_perm ? _2208_perm->size(0) : 0);
      int32_t _9868_ = (int)0;
      int32_t _9869_ = _2201_nelm;
      for (int32_t _2209_i = _9868_; _2209_i < _9869_; ++_2209_i)
      {
        {
          _ptr__2208_perm[_2209_i] = _2209_i;
        }
      }
      int32_t _2210_elmi = (int)0;
      int32_t _9870_ = (int)0;
      int32_t _9871_ = (int)((sparsity)->size(0));
      for (int32_t _2211_i = _9870_; _2211_i < _9871_; ++_2211_i)
      {
        {
          int64_t _2212_i0 = (((*sparsity)(_2211_i)) / safe_mul( _2189_d1,_2190_d2 ));
          int64_t _2213_i1 = ((((*sparsity)(_2211_i)) / _2190_d2) % _2189_d1);
          int64_t _2214_i2 = (((*sparsity)(_2211_i)) % _2190_d2);
          int32_t _2215_ii1 = (int32_t)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_2213_i1 ) ),safe_add( (int)1,safe_mul( (int)2,_2213_i1 ) ) )))) / (int)4);
          int64_t _2216_jj1 = (((*sparsity)(_2211_i)) - (safe_mul( _2215_ii1,safe_add( _2215_ii1,(int)1 ) ) / (int)2));
          if ((_2215_ii1 == _2216_jj1))
          {
            {
              _ptr__2206_nidxs[_2210_elmi] = ((*nativeidxs)(_2211_i));
              _ptr__2207_sp[_2210_elmi] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2212_i0,_2186_d ),_2186_d ),_2190_d2 ),safe_mul( safe_add( safe_mul( _2215_ii1,_2186_d ),_2216_jj1 ),_2190_d2 ) ),_2214_i2 );
              _2210_elmi += (int)1;
            }
          }
          else
          {
            {
              _ptr__2206_nidxs[_2210_elmi] = ((*nativeidxs)(_2211_i));
              _ptr__2206_nidxs[safe_add( _2210_elmi,(int)1 )] = ((*nativeidxs)(_2211_i));
              _ptr__2207_sp[_2210_elmi] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2212_i0,_2186_d ),_2186_d ),_2190_d2 ),safe_mul( safe_add( safe_mul( _2215_ii1,_2186_d ),_2216_jj1 ),_2190_d2 ) ),_2214_i2 );
              _ptr__2207_sp[safe_add( _2210_elmi,(int)1 )] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _2212_i0,_2186_d ),_2186_d ),_2190_d2 ),safe_mul( safe_add( safe_mul( _2216_jj1,_2186_d ),_2215_ii1 ),_2190_d2 ) ),_2214_i2 );
              _2210_elmi += (int)2;
            }
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2208_perm,_2206_nidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2201_nelm));
      std::vector<int64_t> _9872_;
      for (int32_t _2217_i = (int)0, _9873_ = _2201_nelm; _2217_i < _9873_ ; ++_2217_i)
      {
        _9872_.push_back(_ptr__2207_sp[_ptr__2208_perm[_2217_i]]);
      }
      auto _9874_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9872_.size()),_9872_.begin(),_9872_.end()));
      std::vector<int64_t> _9875_;
      for (int32_t _2218_i = (int)0, _9876_ = _2201_nelm; _2218_i < _9876_ ; ++_2218_i)
      {
        _9875_.push_back(_ptr__2206_nidxs[_ptr__2208_perm[_2218_i]]);
      }
      auto _9877_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9875_.size()),_9875_.begin(),_9875_.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2192_rshape,_9874_,_9877_)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.fromTril

// Begin mosek.fusion.BaseVariable.fromTril
// Method mosek.fusion.BaseVariable.fromTril @ src/fusion/BaseVariable.monty:827:6-842:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int32_t _2219_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_2219_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int32_t _2219_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2219_d); }
/* override: mosek.fusion.Variable.fromTril*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__fromTril(int32_t _2219_d) { return __mosek_2fusion_2BaseVariable__fromTril(_2219_d); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int32_t _2219_d)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__fromTril((int)0,_2219_d);
}
// End mosek.fusion.BaseVariable.fromTril

// Begin mosek.fusion.BaseVariable.tril
// Method mosek.fusion.BaseVariable.tril @ src/fusion/BaseVariable.monty:738:6-825:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril(int32_t _2220_dim1,int32_t _2221_dim2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(_2220_dim1,_2221_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril(int32_t _2220_dim1,int32_t _2221_dim2) { return __mosek_2fusion_2BaseVariable__tril(_2220_dim1,_2221_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(int32_t _2220_dim1,int32_t _2221_dim2)
{
  if (((_2220_dim1 < (int)0) || ((_2220_dim1 >= _2221_dim2) || (_2221_dim2 >= (int)((shape)->size(0))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension specification"));
    }
  }
  else
  {
    {
      if ((((*shape)(_2220_dim1)) != ((*shape)(_2221_dim2))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Operation only valid for square variables"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2222_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((shape)->size(0)) - (int)1))));
  _checked_ptr_1<int32_t> _ptr__2222_rshape(_2222_rshape ? _2222_rshape->raw() : nullptr,_2222_rshape ? _2222_rshape->size(0) : 0);
  int32_t _9878_ = (int)0;
  int32_t _9879_ = _2220_dim1;
  for (int32_t _2223_i = _9878_; _2223_i < _9879_; ++_2223_i)
  {
    {
      _ptr__2222_rshape[_2223_i] = ((*shape)(_2223_i));
    }
  }
  _ptr__2222_rshape[_2220_dim1] = (safe_mul( ((*shape)(_2220_dim1)),safe_add( ((*shape)(_2220_dim1)),(int)1 ) ) / (int)2);
  int32_t _9880_ = safe_add( _2220_dim1,(int)1 );
  int32_t _9881_ = _2221_dim2;
  for (int32_t _2224_i = _9880_; _2224_i < _9881_; ++_2224_i)
  {
    {
      _ptr__2222_rshape[_2224_i] = ((*shape)(_2224_i));
    }
  }
  int32_t _9882_ = safe_add( _2221_dim2,(int)1 );
  int32_t _9883_ = (int)((shape)->size(0));
  for (int32_t _2225_i = _9882_; _2225_i < _9883_; ++_2225_i)
  {
    {
      _ptr__2222_rshape[(_2225_i - (int)1)] = ((*shape)(_2225_i));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      int32_t _2226_d0 = (int)1;
      int32_t _9884_ = (int)0;
      int32_t _9885_ = _2220_dim1;
      for (int32_t _2227_i = _9884_; _2227_i < _9885_; ++_2227_i)
      {
        {
          _2226_d0 *= ((*shape)(_2227_i));
        }
      }
      int32_t _2228_d1 = ((*shape)(_2220_dim1));
      int32_t _2229_d2 = (int)1;
      int32_t _9886_ = safe_add( _2220_dim1,(int)1 );
      int32_t _9887_ = _2221_dim2;
      for (int32_t _2230_i = _9886_; _2230_i < _9887_; ++_2230_i)
      {
        {
          _2229_d2 *= ((*shape)(_2230_i));
        }
      }
      int32_t _2231_d3 = ((*shape)(_2221_dim2));
      int32_t _2232_d4 = (int)1;
      int32_t _9888_ = safe_add( _2221_dim2,(int)1 );
      int32_t _9889_ = (int)((shape)->size(0));
      for (int32_t _2233_i = _9888_; _2233_i < _9889_; ++_2233_i)
      {
        {
          _2232_d4 *= ((*shape)(_2233_i));
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2234_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((safe_mul( safe_mul( safe_mul( safe_mul( _2226_d0,_2229_d2 ),_2232_d4 ),_2228_d1 ),safe_add( _2228_d1,(int)1 ) ) / (int)2))));
      _checked_ptr_1<int64_t> _ptr__2234_nidxs(_2234_nidxs ? _2234_nidxs->raw() : nullptr,_2234_nidxs ? _2234_nidxs->size(0) : 0);
      int32_t _2235_i = (int)0;
      int32_t _9890_ = (int)0;
      int32_t _9891_ = _2226_d0;
      for (int32_t _2236_i0 = _9890_; _2236_i0 < _9891_; ++_2236_i0)
      {
        {
          int32_t _9892_ = (int)0;
          int32_t _9893_ = _2228_d1;
          for (int32_t _2237_i1 = _9892_; _2237_i1 < _9893_; ++_2237_i1)
          {
            {
              int32_t _9894_ = (int)0;
              int32_t _9895_ = safe_add( _2237_i1,(int)1 );
              for (int32_t _2238_i3 = _9894_; _2238_i3 < _9895_; ++_2238_i3)
              {
                {
                  int32_t _9896_ = (int)0;
                  int32_t _9897_ = _2229_d2;
                  for (int32_t _2239_i2 = _9896_; _2239_i2 < _9897_; ++_2239_i2)
                  {
                    {
                      int32_t _9898_ = (int)0;
                      int32_t _9899_ = _2232_d4;
                      for (int32_t _2240_i4 = _9898_; _2240_i4 < _9899_; ++_2240_i4)
                      {
                        {
                          _ptr__2234_nidxs[_2235_i] = ((*nativeidxs)(safe_add( _2240_i4,safe_mul( _2232_d4,safe_add( _2238_i3,safe_mul( _2231_d3,safe_add( _2239_i2,safe_mul( _2229_d2,safe_add( _2237_i1,safe_mul( _2228_d1,_2236_i0 ) ) ) ) ) ) ) )));
                          _2235_i += (int)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2222_rshape,nullptr,_2234_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2241_d0 = (int)1;
      int32_t _9900_ = (int)0;
      int32_t _9901_ = _2220_dim1;
      for (int32_t _2242_i = _9900_; _2242_i < _9901_; ++_2242_i)
      {
        {
          _2241_d0 *= ((*shape)(_2242_i));
        }
      }
      int32_t _2243_d1 = ((*shape)(_2220_dim1));
      int32_t _2244_d2 = (int)1;
      int32_t _9902_ = safe_add( _2220_dim1,(int)1 );
      int32_t _9903_ = _2221_dim2;
      for (int32_t _2245_i = _9902_; _2245_i < _9903_; ++_2245_i)
      {
        {
          _2244_d2 *= ((*shape)(_2245_i));
        }
      }
      int32_t _2246_d3 = ((*shape)(_2221_dim2));
      int32_t _2247_d4 = (int)1;
      int32_t _9904_ = safe_add( _2221_dim2,(int)1 );
      int32_t _9905_ = (int)((shape)->size(0));
      for (int32_t _2248_i = _9904_; _2248_i < _9905_; ++_2248_i)
      {
        {
          _2247_d4 *= ((*shape)(_2248_i));
        }
      }
      int32_t _2249_s4 = (int)1;
      int32_t _2250_s3 = _2247_d4;
      int32_t _2251_s2 = safe_mul( _2250_s3,_2246_d3 );
      int32_t _2252_s1 = safe_mul( _2251_s2,_2244_d2 );
      int32_t _2253_s0 = safe_mul( _2252_s1,_2243_d1 );
      int32_t _2254_nelm = (int)0;
      int32_t _9906_ = (int)0;
      int32_t _9907_ = (int)((sparsity)->size(0));
      for (int32_t _2255_i = _9906_; _2255_i < _9907_; ++_2255_i)
      {
        {
          if ((((((*sparsity)(_2255_i)) / _2252_s1) % _2243_d1) >= ((((*sparsity)(_2255_i)) / _2250_s3) % _2246_d3)))
          {
            {
              ++ _2254_nelm;
            }
          }
          {}
        }
      }
      int32_t _2256_rs3 = (int)1;
      int32_t _2257_rs2 = _2247_d4;
      int32_t _2258_rs1 = safe_mul( _2257_rs2,_2244_d2 );
      int32_t _2259_rs0 = (safe_mul( safe_mul( _2258_rs1,_2243_d1 ),safe_add( _2243_d1,(int)1 ) ) / (int)2);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2260_perm = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2254_nelm)));
      _checked_ptr_1<int64_t> _ptr__2260_perm(_2260_perm ? _2260_perm->raw() : nullptr,_2260_perm ? _2260_perm->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2261_rnidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2254_nelm)));
      _checked_ptr_1<int64_t> _ptr__2261_rnidxs(_2261_rnidxs ? _2261_rnidxs->raw() : nullptr,_2261_rnidxs ? _2261_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2262_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2254_nelm)));
      _checked_ptr_1<int64_t> _ptr__2262_rsp(_2262_rsp ? _2262_rsp->raw() : nullptr,_2262_rsp ? _2262_rsp->size(0) : 0);
      int32_t _2263_elmi = (int)0;
      {
        int32_t _9908_ = (int)0;
        int32_t _9909_ = (int)((sparsity)->size(0));
        for (int32_t _2264_i = _9908_; _2264_i < _9909_; ++_2264_i)
        {
          {
            if ((((((*sparsity)(_2264_i)) / _2252_s1) % _2243_d1) >= ((((*sparsity)(_2264_i)) / _2250_s3) % _2246_d3)))
            {
              {
                int64_t _2265_i0 = (((*sparsity)(_2264_i)) / _2253_s0);
                int64_t _2266_i1 = ((((*sparsity)(_2264_i)) / _2252_s1) % _2243_d1);
                int64_t _2267_i2 = ((((*sparsity)(_2264_i)) / _2251_s2) % _2244_d2);
                int64_t _2268_i3 = ((((*sparsity)(_2264_i)) / _2250_s3) % _2246_d3);
                int64_t _2269_i4 = ((((*sparsity)(_2264_i)) / _2249_s4) % _2247_d4);
                _ptr__2261_rnidxs[_2263_elmi] = ((*nativeidxs)(_2264_i));
                _ptr__2262_rsp[_2263_elmi] = safe_add( safe_add( safe_add( safe_mul( _2259_rs0,_2265_i0 ),safe_mul( _2258_rs1,safe_add( (safe_mul( _2266_i1,safe_add( _2266_i1,(int)1 ) ) / (int)2),_2268_i3 ) ) ),safe_mul( _2257_rs2,_2267_i2 ) ),safe_mul( _2256_rs3,_2269_i4 ) );
                ++ _2263_elmi;
              }
            }
            {}
          }
        }
        int32_t _9910_ = (int)0;
        int32_t _9911_ = _2254_nelm;
        for (int32_t _2270_i = _9910_; _2270_i < _9911_; ++_2270_i)
        {
          {
            _ptr__2260_perm[_2270_i] = _2270_i;
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2260_perm,_2261_rnidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2254_nelm));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2271_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2254_nelm)));
      _checked_ptr_1<int64_t> _ptr__2271_nidxs(_2271_nidxs ? _2271_nidxs->raw() : nullptr,_2271_nidxs ? _2271_nidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2272_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2254_nelm)));
      _checked_ptr_1<int64_t> _ptr__2272_sp(_2272_sp ? _2272_sp->raw() : nullptr,_2272_sp ? _2272_sp->size(0) : 0);
      int32_t _9912_ = (int)0;
      int32_t _9913_ = _2254_nelm;
      for (int32_t _2273_i = _9912_; _2273_i < _9913_; ++_2273_i)
      {
        {
          _ptr__2271_nidxs[_2273_i] = _ptr__2261_rnidxs[_ptr__2260_perm[_2273_i]];
        }
      }
      int32_t _9914_ = (int)0;
      int32_t _9915_ = _2254_nelm;
      for (int32_t _2274_i = _9914_; _2274_i < _9915_; ++_2274_i)
      {
        {
          _ptr__2272_sp[_2274_i] = _ptr__2262_rsp[_ptr__2260_perm[_2274_i]];
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2222_rshape,_2272_sp,_2271_nidxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.tril

// Begin mosek.fusion.BaseVariable.tril
// Method mosek.fusion.BaseVariable.tril @ src/fusion/BaseVariable.monty:736:6-57
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril() { return __mosek_2fusion_2BaseVariable__tril(); }
/* override: mosek.fusion.Variable.tril*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__tril() { return __mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril()
{
  return _pubthis->__mosek_2fusion_2BaseVariable__tril((int)0,(int)1);
}
// End mosek.fusion.BaseVariable.tril

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:734:6-114
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2275_dim0,int32_t _2276_dim1,int32_t _2277_dim2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2275_dim0,_2276_dim1,_2277_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2275_dim0,int32_t _2276_dim1,int32_t _2277_dim2) { return __mosek_2fusion_2BaseVariable__reshape(_2275_dim0,_2276_dim1,_2277_dim2); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2275_dim0,int32_t _2276_dim1,int32_t _2277_dim2) { return __mosek_2fusion_2BaseVariable__reshape(_2275_dim0,_2276_dim1,_2277_dim2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2275_dim0,int32_t _2276_dim1,int32_t _2277_dim2)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2275_dim0),(int32_t)(_2276_dim1),(int32_t)(_2277_dim2)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:733:6-98
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2278_dim0,int32_t _2279_dim1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2278_dim0,_2279_dim1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2278_dim0,int32_t _2279_dim1) { return __mosek_2fusion_2BaseVariable__reshape(_2278_dim0,_2279_dim1); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2278_dim0,int32_t _2279_dim1) { return __mosek_2fusion_2BaseVariable__reshape(_2278_dim0,_2279_dim1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2278_dim0,int32_t _2279_dim1)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2278_dim0),(int32_t)(_2279_dim1)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:732:6-82
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int32_t _2280_dim0) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2280_dim0); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int32_t _2280_dim0) { return __mosek_2fusion_2BaseVariable__reshape(_2280_dim0); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int32_t _2280_dim0) { return __mosek_2fusion_2BaseVariable__reshape(_2280_dim0); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int32_t _2280_dim0)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2280_dim0)}));
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.reshape
// Method mosek.fusion.BaseVariable.reshape @ src/fusion/BaseVariable.monty:719:6-730:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2281_shape) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2281_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2281_shape) { return __mosek_2fusion_2BaseVariable__reshape(_2281_shape); }
/* override: mosek.fusion.Variable.reshape*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2281_shape) { return __mosek_2fusion_2BaseVariable__reshape(_2281_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2281_shape)
{
  _checked_ptr_1<int32_t> _ptr__2281_shape(_2281_shape ? _2281_shape->raw() : nullptr, _2281_shape ? _2281_shape->size(0) : 0);
  int64_t _2282_shapesize = (int)1;
  int32_t _9916_ = (int)0;
  int32_t _9917_ = (int)((_2281_shape)->size(0));
  for (int32_t _2283_i = _9916_; _2283_i < _9917_; ++_2283_i)
  {
    {
      if ((_ptr__2281_shape[_2283_i] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _2282_shapesize *= _ptr__2281_shape[_2283_i];
    }
  }
  if ((_2282_shapesize != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int32_t> _9918_;
  for (int32_t _2284_i = (int)0, _9919_ = (int)((_2281_shape)->size(0)); _2284_i < _9919_ ; ++_2284_i)
  {
    _9918_.push_back(_ptr__2281_shape[_2284_i]);
  }
  auto _9920_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_9918_.size()),_9918_.begin(),_9918_.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_9920_,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.reshape

// Begin mosek.fusion.BaseVariable.setLevel
// Method mosek.fusion.BaseVariable.setLevel @ src/fusion/BaseVariable.monty:705:6-717:7
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2285_v) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2285_v); }
void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2285_v)
{
  _checked_ptr_1<double> _ptr__2285_v(_2285_v ? _2285_v->raw() : nullptr, _2285_v ? _2285_v->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_2285_v)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_2285_v);
    }
  }
  else
  {
    {
      if (((int)((_2285_v)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _9921_;
      for (int32_t _2287_i = (int)0, _9922_ = (int)((nativeidxs)->size(0)); _2287_i < _9922_ ; ++_2287_i)
      {
        _9921_.push_back(_ptr__2285_v[((*sparsity)(_2287_i))]);
      }
      auto _9923_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9921_.size()),_9921_.begin(),_9921_.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _2286_v = _9923_;
      _checked_ptr_1<double> _ptr__2286_v(_2286_v ? _2286_v->raw() : nullptr,_2286_v ? _2286_v->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_2286_v);
    }
  }
}
// End mosek.fusion.BaseVariable.setLevel

// Begin mosek.fusion.BaseVariable.getModel
// Method mosek.fusion.BaseVariable.getModel @ src/fusion/BaseVariable.monty:703:6-55
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
/* override: mosek.fusion.Variable.getModel*/
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel()
{
  return model;
}
// End mosek.fusion.BaseVariable.getModel

// Begin mosek.fusion.BaseVariable.getND
// Method mosek.fusion.BaseVariable.getND @ src/fusion/BaseVariable.monty:702:6-56
int32_t mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_BaseVariable::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.BaseVariable.getND

// Begin mosek.fusion.BaseVariable.getDim
// Method mosek.fusion.BaseVariable.getDim @ src/fusion/BaseVariable.monty:701:6-62
int32_t mosek::fusion::BaseVariable :: getDim(int32_t _2288_d) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_2288_d); }
int32_t mosek::fusion::p_BaseVariable::getDim(int32_t _2288_d)
{
  return ((*shape)(_2288_d));
}
// End mosek.fusion.BaseVariable.getDim

// Begin mosek.fusion.BaseVariable.getShape
// Method mosek.fusion.BaseVariable.getShape @ src/fusion/BaseVariable.monty:700:6-79
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_BaseVariable::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.BaseVariable.getShape

// Begin mosek.fusion.BaseVariable.getSize
// Method mosek.fusion.BaseVariable.getSize @ src/fusion/BaseVariable.monty:699:6-107
int64_t mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_BaseVariable::getSize()
{
  int64_t _2289_sz = (int64_t)1;
  int32_t _9924_ = (int)0;
  int32_t _9925_ = (int)((shape)->size(0));
  for (int32_t _2290_i = _9924_; _2290_i < _9925_; ++_2290_i)
  {
    {
      _2289_sz *= ((*shape)(_2290_i));
    }
  }
  return _2289_sz;
}
// End mosek.fusion.BaseVariable.getSize

// Begin mosek.fusion.BaseVariable.dual
// Method mosek.fusion.BaseVariable.dual @ src/fusion/BaseVariable.monty:686:6-696:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2291_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2291_res(_2291_res ? _2291_res->raw() : nullptr,_2291_res ? _2291_res->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_2291_res,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2292_spread_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2292_spread_res(_2292_spread_res ? _2292_spread_res->raw() : nullptr,_2292_spread_res ? _2292_spread_res->size(0) : 0);
      int32_t _9926_ = (int)0;
      int32_t _9927_ = (int)((nativeidxs)->size(0));
      for (int32_t _2293_i = _9926_; _2293_i < _9927_; ++_2293_i)
      {
        {
          _ptr__2292_spread_res[((*sparsity)(_2293_i))] = _ptr__2291_res[_2293_i];
        }
      }
      _2291_res = _2292_spread_res;
      _ptr__2291_res.update(_2291_res ? _2291_res->raw() : nullptr, _2291_res ? _2291_res->size(0) : 0);
    }
  }
  {}
  return _2291_res;
}
// End mosek.fusion.BaseVariable.dual

// Begin mosek.fusion.BaseVariable.level
// Method mosek.fusion.BaseVariable.level @ src/fusion/BaseVariable.monty:674:6-684:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2294_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2294_res(_2294_res ? _2294_res->raw() : nullptr,_2294_res ? _2294_res->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_2294_res,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2295_spread_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2295_spread_res(_2295_spread_res ? _2295_spread_res->raw() : nullptr,_2295_spread_res ? _2295_spread_res->size(0) : 0);
      int32_t _9928_ = (int)0;
      int32_t _9929_ = (int)((nativeidxs)->size(0));
      for (int32_t _2296_i = _9928_; _2296_i < _9929_; ++_2296_i)
      {
        {
          _ptr__2295_spread_res[((*sparsity)(_2296_i))] = _ptr__2294_res[_2296_i];
        }
      }
      _2294_res = _2295_spread_res;
      _ptr__2294_res.update(_2294_res ? _2294_res->raw() : nullptr, _2294_res ? _2294_res->size(0) : 0);
    }
  }
  {}
  return _2294_res;
}
// End mosek.fusion.BaseVariable.level

// Begin mosek.fusion.BaseVariable.makeContinuous
// Method mosek.fusion.BaseVariable.makeContinuous @ src/fusion/BaseVariable.monty:670:6-59
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }
void mosek::fusion::p_BaseVariable::makeContinuous()
{
  _pubthis->make_continuous();
}
// End mosek.fusion.BaseVariable.makeContinuous

// Begin mosek.fusion.BaseVariable.makeInteger
// Method mosek.fusion.BaseVariable.makeInteger @ src/fusion/BaseVariable.monty:669:6-53
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }
void mosek::fusion::p_BaseVariable::makeInteger()
{
  _pubthis->make_integer();
}
// End mosek.fusion.BaseVariable.makeInteger

// Begin mosek.fusion.BaseVariable.transpose
// Method mosek.fusion.BaseVariable.transpose @ src/fusion/BaseVariable.monty:630:6-665:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
/* override: mosek.fusion.Variable.transpose*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose()
{
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2297_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<int64_t> _ptr__2297_idxs(_2297_idxs ? _2297_idxs->raw() : nullptr,_2297_idxs ? _2297_idxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _9930_;
      bool _9931_ = (NULL == sparsity.get());
      if (_9931_)
      {
        _9930_ = nullptr;
      }
      else
      {
        _9930_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2298_sp = _9930_;
      _checked_ptr_1<int64_t> _ptr__2298_sp(_2298_sp ? _2298_sp->raw() : nullptr,_2298_sp ? _2298_sp->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int32_t _2299_k = (int)0;
          int32_t _9932_ = (int)0;
          int32_t _9933_ = ((*shape)((int)1));
          for (int32_t _2300_j = _9932_; _2300_j < _9933_; ++_2300_j)
          {
            {
              int32_t _9934_ = (int)0;
              int32_t _9935_ = ((*shape)((int)0));
              for (int32_t _2301_i = _9934_; _2301_i < _9935_; ++_2301_i)
              {
                {
                  _ptr__2297_idxs[_2299_k] = ((*nativeidxs)(safe_add( safe_mul( _2301_i,((*shape)((int)1)) ),_2300_j )));
                  ++ _2299_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2302_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__2302_ptr(_2302_ptr ? _2302_ptr->raw() : nullptr,_2302_ptr ? _2302_ptr->size(0) : 0);
          int32_t _2303_dim0 = ((*shape)((int)0));
          int32_t _2304_dim1 = ((*shape)((int)1));
          int32_t _9936_ = (int)0;
          int32_t _9937_ = (int)((sparsity)->size(0));
          for (int32_t _2305_i = _9936_; _2305_i < _9937_; ++_2305_i)
          {
            {
              ++ _ptr__2302_ptr[safe_add( (((*sparsity)(_2305_i)) % _2304_dim1),(int)1 )];
            }
          }
          int32_t _9938_ = (int)0;
          int32_t _9939_ = _2304_dim1;
          for (int32_t _2306_i = _9938_; _2306_i < _9939_; ++_2306_i)
          {
            {
              _ptr__2302_ptr[safe_add( _2306_i,(int)1 )] += _ptr__2302_ptr[_2306_i];
            }
          }
          int32_t _9940_ = (int)0;
          int32_t _9941_ = (int)((sparsity)->size(0));
          for (int32_t _2307_i = _9940_; _2307_i < _9941_; ++_2307_i)
          {
            {
              int64_t _2308_ii = (((*sparsity)(_2307_i)) % _2304_dim1);
              _ptr__2297_idxs[_ptr__2302_ptr[_2308_ii]] = ((*nativeidxs)(_2307_i));
              _ptr__2298_sp[_ptr__2302_ptr[_2308_ii]] = safe_add( (((*sparsity)(_2307_i)) / _2304_dim1),safe_mul( (((*sparsity)(_2307_i)) % _2304_dim1),_2303_dim0 ) );
              ++ _ptr__2302_ptr[_2308_ii];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*shape)((int)1))),(int32_t)(((*shape)((int)0)))}),_2298_sp,_2297_idxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.transpose

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:619:6-622:40
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2309_i0,int32_t _2310_i1,int32_t _2311_i2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2309_i0,_2310_i1,_2311_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2309_i0,int32_t _2310_i1,int32_t _2311_i2) { return __mosek_2fusion_2BaseVariable__index(_2309_i0,_2310_i1,_2311_i2); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2309_i0,int32_t _2310_i1,int32_t _2311_i2) { return __mosek_2fusion_2BaseVariable__index(_2309_i0,_2310_i1,_2311_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2309_i0,int32_t _2310_i1,int32_t _2311_i2)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2309_i0),(int32_t)(_2310_i1),(int32_t)(_2311_i2)}));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:614:6-616:37
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2312_i0,int32_t _2313_i1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2312_i0,_2313_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2312_i0,int32_t _2313_i1) { return __mosek_2fusion_2BaseVariable__index(_2312_i0,_2313_i1); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2312_i0,int32_t _2313_i1) { return __mosek_2fusion_2BaseVariable__index(_2312_i0,_2313_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2312_i0,int32_t _2313_i1)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2312_i0),(int32_t)(_2313_i1)}));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:606:6-611:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2314_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2314_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2314_index) { return __mosek_2fusion_2BaseVariable__index(_2314_index); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2314_index) { return __mosek_2fusion_2BaseVariable__index(_2314_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2314_index)
{
  _checked_ptr_1<int32_t> _ptr__2314_index(_2314_index ? _2314_index->raw() : nullptr, _2314_index ? _2314_index->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2315_midx = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)((_2314_index)->size(0)))));
  int32_t _9942_ = (int)0;
  int32_t _9943_ = (int)((_2314_index)->size(0));
  for (int32_t _2316_i = _9942_; _2316_i < _9943_; ++_2316_i)
  {
    {
      ((*_2315_midx)((int)0,_2316_i)) = _ptr__2314_index[_2316_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2315_midx)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.index
// Method mosek.fusion.BaseVariable.index @ src/fusion/BaseVariable.monty:600:6-603:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int32_t _2317_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2317_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int32_t _2317_index) { return __mosek_2fusion_2BaseVariable__index(_2317_index); }
/* override: mosek.fusion.Variable.index*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int32_t _2317_index) { return __mosek_2fusion_2BaseVariable__index(_2317_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int32_t _2317_index)
{
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2317_index)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
}
// End mosek.fusion.BaseVariable.index

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:579:6-597:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2318_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2319_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2320_i2) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2318_i0,_2319_i1,_2320_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2318_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2319_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2320_i2) { return __mosek_2fusion_2BaseVariable__pick(_2318_i0,_2319_i1,_2320_i2); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2318_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2319_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2320_i2) { return __mosek_2fusion_2BaseVariable__pick(_2318_i0,_2319_i1,_2320_i2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2318_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2319_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2320_i2)
{
  _checked_ptr_1<int32_t> _ptr__2318_i0(_2318_i0 ? _2318_i0->raw() : nullptr, _2318_i0 ? _2318_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2319_i1(_2319_i1 ? _2319_i1->raw() : nullptr, _2319_i1 ? _2319_i1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2320_i2(_2320_i2 ? _2320_i2->raw() : nullptr, _2320_i2 ? _2320_i2->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_2318_i0)->size(0)) != (int)((_2319_i1)->size(0))) || ((int)((_2318_i0)->size(0)) != (int)((_2320_i2)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2321_midxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_2318_i0)->size(0)),(int)3)));
  int32_t _9944_ = (int)0;
  int32_t _9945_ = (int)((_2318_i0)->size(0));
  for (int32_t _2322_i = _9944_; _2322_i < _9945_; ++_2322_i)
  {
    {
      ((*_2321_midxs)(_2322_i,(int)0)) = _ptr__2318_i0[_2322_i];
      ((*_2321_midxs)(_2322_i,(int)1)) = _ptr__2319_i1[_2322_i];
      ((*_2321_midxs)(_2322_i,(int)2)) = _ptr__2320_i2[_2322_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2321_midxs);
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:563:6-577:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2323_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2324_i1) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2323_i0,_2324_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2323_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2324_i1) { return __mosek_2fusion_2BaseVariable__pick(_2323_i0,_2324_i1); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2323_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2324_i1) { return __mosek_2fusion_2BaseVariable__pick(_2323_i0,_2324_i1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2323_i0,std::shared_ptr< monty::ndarray< int32_t,1 > > _2324_i1)
{
  _checked_ptr_1<int32_t> _ptr__2323_i0(_2323_i0 ? _2323_i0->raw() : nullptr, _2323_i0 ? _2323_i0->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2324_i1(_2324_i1 ? _2324_i1->raw() : nullptr, _2324_i1 ? _2324_i1->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_2323_i0)->size(0)) != (int)((_2324_i1)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,2 > > _2325_midxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_2323_i0)->size(0)),(int)2)));
  int32_t _9946_ = (int)0;
  int32_t _9947_ = (int)((_2323_i0)->size(0));
  for (int32_t _2326_i = _9946_; _2326_i < _9947_; ++_2326_i)
  {
    {
      ((*_2325_midxs)(_2326_i,(int)0)) = _ptr__2323_i0[_2326_i];
      ((*_2325_midxs)(_2326_i,(int)1)) = _ptr__2324_i1[_2326_i];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2325_midxs);
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:502:6-561:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2327_midxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2327_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2327_midxs) { return __mosek_2fusion_2BaseVariable__pick(_2327_midxs); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2327_midxs) { return __mosek_2fusion_2BaseVariable__pick(_2327_midxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2327_midxs)
{
  if (((int)((shape)->size(0)) != (int)((_2327_midxs)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2328_invalidindex = false;
  int32_t _9948_ = (int)0;
  int32_t _9949_ = (int)((_2327_midxs)->size(0));
  for (int32_t _2329_i = _9948_; _2329_i < _9949_; ++_2329_i)
  {
    {
      int32_t _9950_ = (int)0;
      int32_t _9951_ = (int)((_2327_midxs)->size(1));
      for (int32_t _2330_j = _9950_; _2330_j < _9951_; ++_2330_j)
      {
        {
          if (((((*_2327_midxs)(_2329_i,_2330_j)) < (int)0) || (((*_2327_midxs)(_2329_i,_2330_j)) >= ((*shape)(_2330_j)))))
          {
            {
              _2328_invalidindex = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_2328_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int32_t _2331_nd = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2332_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2331_nd)));
  _checked_ptr_1<int64_t> _ptr__2332_strides(_2332_strides ? _2332_strides->raw() : nullptr,_2332_strides ? _2332_strides->size(0) : 0);
  _ptr__2332_strides[(_2331_nd - (int)1)] = (int)1;
  int32_t _9952_ = (int)1;
  int32_t _9953_ = _2331_nd;
  for (int32_t _2333_i = _9952_; _2333_i < _9953_; ++_2333_i)
  {
    {
      _ptr__2332_strides[((_2331_nd - _2333_i) - (int)1)] = safe_mul( _ptr__2332_strides[(_2331_nd - _2333_i)],((*shape)((_2331_nd - _2333_i))) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2334_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_2327_midxs)->size(0)))});
  _checked_ptr_1<int32_t> _ptr__2334_rshape(_2334_rshape ? _2334_rshape->raw() : nullptr,_2334_rshape ? _2334_rshape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2335_idxs;
  _checked_ptr_1<int64_t> _ptr__2335_idxs(_2335_idxs ? _2335_idxs->raw() : nullptr,_2335_idxs ? _2335_idxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2336_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__2336_sp(_2336_sp ? _2336_sp->raw() : nullptr,_2336_sp ? _2336_sp->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _2335_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_2327_midxs)->size(0)))));
      _ptr__2335_idxs.update(_2335_idxs ? _2335_idxs->raw() : nullptr, _2335_idxs ? _2335_idxs->size(0) : 0);
      {
        int32_t _9954_ = (int)0;
        int32_t _9955_ = (int)((_2327_midxs)->size(0));
        for (int32_t _2337_i = _9954_; _2337_i < _9955_; ++_2337_i)
        {
          {
            int64_t _2338_ii = (int64_t)0;
            int32_t _9956_ = (int)0;
            int32_t _9957_ = _2331_nd;
            for (int32_t _2339_j = _9956_; _2339_j < _9957_; ++_2339_j)
            {
              {
                _2338_ii += safe_mul( _ptr__2332_strides[_2339_j],((*_2327_midxs)(_2337_i,_2339_j)) );
              }
            }
            _ptr__2335_idxs[_2337_i] = ((*nativeidxs)(_2338_ii));
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _2340_nnz = (int)0;
      int32_t _9958_ = (int)0;
      int32_t _9959_ = (int)((_2327_midxs)->size(0));
      for (int32_t _2341_i = _9958_; _2341_i < _9959_; ++_2341_i)
      {
        {
          int64_t _2342_ii = (int64_t)0;
          int32_t _9960_ = (int)0;
          int32_t _9961_ = _2331_nd;
          for (int32_t _2343_j = _9960_; _2343_j < _9961_; ++_2343_j)
          {
            {
              _2342_ii += safe_mul( _ptr__2332_strides[_2343_j],((*_2327_midxs)(_2341_i,_2343_j)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2342_ii) >= (int)0))
          {
            {
              ++ _2340_nnz;
            }
          }
          {}
        }
      }
      _2335_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2340_nnz)));
      _ptr__2335_idxs.update(_2335_idxs ? _2335_idxs->raw() : nullptr, _2335_idxs ? _2335_idxs->size(0) : 0);
      _2336_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2340_nnz)));
      _ptr__2336_sp.update(_2336_sp ? _2336_sp->raw() : nullptr, _2336_sp ? _2336_sp->size(0) : 0);
      {
        int32_t _2344_k = (int)0;
        int32_t _9962_ = (int)0;
        int32_t _9963_ = (int)((_2327_midxs)->size(0));
        for (int32_t _2345_i = _9962_; _2345_i < _9963_; ++_2345_i)
        {
          {
            int64_t _2346_ii = (int64_t)0;
            int32_t _9964_ = (int)0;
            int32_t _9965_ = _2331_nd;
            for (int32_t _2347_j = _9964_; _2347_j < _9965_; ++_2347_j)
            {
              {
                _2346_ii += safe_mul( _ptr__2332_strides[_2347_j],((*_2327_midxs)(_2345_i,_2347_j)) );
              }
            }
            int32_t _2348_iidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2346_ii);
            if ((_2348_iidx >= (int)0))
            {
              {
                _ptr__2335_idxs[_2344_k] = ((*nativeidxs)(_2348_iidx));
                _ptr__2336_sp[_2344_k] = _2345_i;
                ++ _2344_k;
              }
            }
            {}
          }
        }
      }
      if ((_2340_nnz == (int)((_2327_midxs)->size(0))))
      {
        {
          _2336_sp = nullptr;
          _ptr__2336_sp.update(_2336_sp ? _2336_sp->raw() : nullptr, _2336_sp ? _2336_sp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2334_rshape,_2336_sp,_2335_idxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.pick
// Method mosek.fusion.BaseVariable.pick @ src/fusion/BaseVariable.monty:460:6-500:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2349_idxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2349_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2349_idxs) { return __mosek_2fusion_2BaseVariable__pick(_2349_idxs); }
/* override: mosek.fusion.Variable.pick*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2349_idxs) { return __mosek_2fusion_2BaseVariable__pick(_2349_idxs); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2349_idxs)
{
  _checked_ptr_1<int32_t> _ptr__2349_idxs(_2349_idxs ? _2349_idxs->raw() : nullptr, _2349_idxs ? _2349_idxs->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2350_invalidindex = false;
  int32_t _9966_ = (int)0;
  int32_t _9967_ = (int)((_2349_idxs)->size(0));
  for (int32_t _2351_i = _9966_; _2351_i < _9967_; ++_2351_i)
  {
    {
      if (((_ptr__2349_idxs[_2351_i] < (int)0) || (_ptr__2349_idxs[_2351_i] >= ((*shape)((int)0)))))
      {
        {
          _2350_invalidindex = true;
        }
      }
      {}
    }
  }
  if (_2350_invalidindex)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2352_nidxs;
  _checked_ptr_1<int64_t> _ptr__2352_nidxs(_2352_nidxs ? _2352_nidxs->raw() : nullptr,_2352_nidxs ? _2352_nidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2353_sp = nullptr;
  _checked_ptr_1<int64_t> _ptr__2353_sp(_2353_sp ? _2353_sp->raw() : nullptr,_2353_sp ? _2353_sp->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<int64_t> _9968_;
      for (int32_t _2354_i = (int)0, _9969_ = (int)((_2349_idxs)->size(0)); _2354_i < _9969_ ; ++_2354_i)
      {
        _9968_.push_back(((*nativeidxs)(_ptr__2349_idxs[_2354_i])));
      }
      auto _9970_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_9968_.size()),_9968_.begin(),_9968_.end()));
      _2352_nidxs = _9970_;
      _ptr__2352_nidxs.update(_2352_nidxs ? _2352_nidxs->raw() : nullptr, _2352_nidxs ? _2352_nidxs->size(0) : 0);
    }
  }
  else
  {
    {
      int32_t _2355_nnz = (int)0;
      int32_t _9971_ = (int)0;
      int32_t _9972_ = (int)((_2349_idxs)->size(0));
      for (int32_t _2356_i = _9971_; _2356_i < _9972_; ++_2356_i)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(int64_t)(_ptr__2349_idxs[_2356_i])) >= (int)0))
          {
            {
              ++ _2355_nnz;
            }
          }
          {}
        }
      }
      _2352_nidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2355_nnz)));
      _ptr__2352_nidxs.update(_2352_nidxs ? _2352_nidxs->raw() : nullptr, _2352_nidxs ? _2352_nidxs->size(0) : 0);
      _2353_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2355_nnz)));
      _ptr__2353_sp.update(_2353_sp ? _2353_sp->raw() : nullptr, _2353_sp ? _2353_sp->size(0) : 0);
      int32_t _2357_k = (int)0;
      int32_t _9973_ = (int)0;
      int32_t _9974_ = (int)((_2349_idxs)->size(0));
      for (int32_t _2358_i = _9973_; _2358_i < _9974_; ++_2358_i)
      {
        {
          int32_t _2359_j = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(int64_t)(_ptr__2349_idxs[_2358_i]));
          if ((_2359_j >= (int)0))
          {
            {
              _ptr__2353_sp[_2357_k] = _2358_i;
              _ptr__2352_nidxs[_2357_k] = ((*nativeidxs)(_2359_j));
              ++ _2357_k;
            }
          }
          {}
        }
      }
      if ((_2355_nnz == (int)((_2349_idxs)->size(0))))
      {
        {
          _2353_sp = nullptr;
          _ptr__2353_sp.update(_2353_sp ? _2353_sp->raw() : nullptr, _2353_sp ? _2353_sp->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_2349_idxs)->size(0)))}),_2353_sp,_2352_nidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.BaseVariable.pick

// Begin mosek.fusion.BaseVariable.antidiag
// Method mosek.fusion.BaseVariable.antidiag @ src/fusion/BaseVariable.monty:446:6-457:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int32_t _2360_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_2360_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int32_t _2360_index) { return __mosek_2fusion_2BaseVariable__antidiag(_2360_index); }
/* override: mosek.fusion.Variable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int32_t _2360_index) { return __mosek_2fusion_2BaseVariable__antidiag(_2360_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int32_t _2360_index)
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_2360_index >= ((*shape)((int)1))) || ((-_2360_index) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2360_index >= (int)0))
  {
    {
      int32_t _9975_;
      bool _9976_ = (((*shape)((int)0)) < (((*shape)((int)1)) - _2360_index));
      if (_9976_)
      {
        _9975_ = ((*shape)((int)0));
      }
      else
      {
        _9975_ = (((*shape)((int)1)) - _2360_index);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)(((((*shape)((int)1)) - (int)1) - _2360_index))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_9975_);
    }
  }
  else
  {
    {
      int32_t _9977_;
      bool _9978_ = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2360_index ));
      if (_9978_)
      {
        _9977_ = ((*shape)((int)1));
      }
      else
      {
        _9977_ = safe_add( ((*shape)((int)0)),_2360_index );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((-_2360_index)),(int32_t)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_9977_);
    }
  }
}
// End mosek.fusion.BaseVariable.antidiag

// Begin mosek.fusion.BaseVariable.antidiag
// Method mosek.fusion.BaseVariable.antidiag @ src/fusion/BaseVariable.monty:438:6-444:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
/* override: mosek.fusion.Variable.antidiag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag()
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int32_t _9979_;
  bool _9980_ = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9980_)
  {
    _9979_ = ((*shape)((int)0));
  }
  else
  {
    _9979_ = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((-(int)1))}),_9979_);
}
// End mosek.fusion.BaseVariable.antidiag

// Begin mosek.fusion.BaseVariable.diag
// Method mosek.fusion.BaseVariable.diag @ src/fusion/BaseVariable.monty:425:6-436:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int32_t _2361_index) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_2361_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int32_t _2361_index) { return __mosek_2fusion_2BaseVariable__diag(_2361_index); }
/* override: mosek.fusion.Variable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int32_t _2361_index) { return __mosek_2fusion_2BaseVariable__diag(_2361_index); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int32_t _2361_index)
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_2361_index >= ((*shape)((int)1))) || ((-_2361_index) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2361_index >= (int)0))
  {
    {
      int32_t _9981_;
      bool _9982_ = (((*shape)((int)0)) < (((*shape)((int)1)) - _2361_index));
      if (_9982_)
      {
        _9981_ = ((*shape)((int)0));
      }
      else
      {
        _9981_ = (((*shape)((int)1)) - _2361_index);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)(_2361_index)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_9981_);
    }
  }
  else
  {
    {
      int32_t _9983_;
      bool _9984_ = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2361_index ));
      if (_9984_)
      {
        _9983_ = ((*shape)((int)1));
      }
      else
      {
        _9983_ = safe_add( ((*shape)((int)0)),_2361_index );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((-_2361_index)),(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_9983_);
    }
  }
}
// End mosek.fusion.BaseVariable.diag

// Begin mosek.fusion.BaseVariable.diag
// Method mosek.fusion.BaseVariable.diag @ src/fusion/BaseVariable.monty:418:6-423:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
/* override: mosek.fusion.Variable.diag*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag()
{
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int32_t _9985_;
  bool _9986_ = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9986_)
  {
    _9985_ = ((*shape)((int)0));
  }
  else
  {
    _9985_ = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1)}),_9985_);
}
// End mosek.fusion.BaseVariable.diag

// Begin mosek.fusion.BaseVariable.general_diag
// Method mosek.fusion.BaseVariable.general_diag @ src/fusion/BaseVariable.monty:368:6-415:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int32_t,1 > > _2362_firstidx,std::shared_ptr< monty::ndarray< int32_t,1 > > _2363_step,int32_t _2364_num)
{
  _checked_ptr_1<int32_t> _ptr__2362_firstidx(_2362_firstidx ? _2362_firstidx->raw() : nullptr, _2362_firstidx ? _2362_firstidx->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2363_step(_2363_step ? _2363_step->raw() : nullptr, _2363_step ? _2363_step->size(0) : 0);
  int32_t _2365_nd = (int)((shape)->size(0));
  if (((_2365_nd != (int)((_2362_firstidx)->size(0))) || (_2365_nd != (int)((_2363_step)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int32_t _9987_ = (int)0;
  int32_t _9988_ = _2365_nd;
  for (int32_t _2366_i = _9987_; _2366_i < _9988_; ++_2366_i)
  {
    {
      if (((_ptr__2362_firstidx[_2366_i] < (int)0) || (_ptr__2362_firstidx[_2366_i] >= ((*shape)(_2366_i)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2367_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2365_nd)));
  _checked_ptr_1<int64_t> _ptr__2367_strides(_2367_strides ? _2367_strides->raw() : nullptr,_2367_strides ? _2367_strides->size(0) : 0);
  _ptr__2367_strides[(_2365_nd - (int)1)] = (int)1;
  int32_t _9989_ = (int)1;
  int32_t _9990_ = _2365_nd;
  for (int32_t _2368_i = _9989_; _2368_i < _9990_; ++_2368_i)
  {
    {
      _ptr__2367_strides[((_2365_nd - _2368_i) - (int)1)] = safe_mul( _ptr__2367_strides[(_2365_nd - _2368_i)],((*shape)((_2365_nd - _2368_i))) );
    }
  }
  int64_t _2369_startidx = (int64_t)0;
  int32_t _9991_ = (int)0;
  int32_t _9992_ = (int)((_2363_step)->size(0));
  for (int32_t _2370_i = _9991_; _2370_i < _9992_; ++_2370_i)
  {
    {
      _2369_startidx += safe_mul( _ptr__2362_firstidx[_2370_i],_ptr__2367_strides[_2370_i] );
    }
  }
  int64_t _2371_stepstride = (int64_t)0;
  int32_t _9993_ = (int)0;
  int32_t _9994_ = (int)((_2363_step)->size(0));
  for (int32_t _2372_i = _9993_; _2372_i < _9994_; ++_2372_i)
  {
    {
      _2371_stepstride += safe_mul( _ptr__2363_step[_2372_i],_ptr__2367_strides[_2372_i] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2373_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2364_num)));
      _checked_ptr_1<int64_t> _ptr__2373_residxs(_2373_residxs ? _2373_residxs->raw() : nullptr,_2373_residxs ? _2373_residxs->size(0) : 0);
      int32_t _9995_ = (int)0;
      int32_t _9996_ = _2364_num;
      for (int32_t _2374_i = _9995_; _2374_i < _9996_; ++_2374_i)
      {
        {
          _ptr__2373_residxs[_2374_i] = ((*nativeidxs)(safe_add( _2369_startidx,safe_mul( _2371_stepstride,_2374_i ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2364_num)}),nullptr,_2373_residxs)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2375_numnz = (int)0;
      int32_t _9997_ = (int)0;
      int32_t _9998_ = _2364_num;
      for (int32_t _2376_i = _9997_; _2376_i < _9998_; ++_2376_i)
      {
        {
          int64_t _2377_residx = safe_add( _2369_startidx,safe_mul( _2371_stepstride,_2376_i ) );
          int32_t _2378_spidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2377_residx);
          if ((_2378_spidx >= (int)0))
          {
            {
              ++ _2375_numnz;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2379_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2375_numnz)));
      _checked_ptr_1<int64_t> _ptr__2379_residxs(_2379_residxs ? _2379_residxs->raw() : nullptr,_2379_residxs ? _2379_residxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2380_ressp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2375_numnz)));
      _checked_ptr_1<int64_t> _ptr__2380_ressp(_2380_ressp ? _2380_ressp->raw() : nullptr,_2380_ressp ? _2380_ressp->size(0) : 0);
      int32_t _2381_k = (int)0;
      int32_t _9999_ = (int)0;
      int32_t _10000_ = _2364_num;
      for (int32_t _2382_i = _9999_; _2382_i < _10000_; ++_2382_i)
      {
        {
          _ptr__2379_residxs[_2382_i] = ((*nativeidxs)(safe_add( _2369_startidx,safe_mul( _2371_stepstride,_2382_i ) )));
          int64_t _2383_residx = safe_add( _2369_startidx,safe_mul( _2371_stepstride,_2382_i ) );
          int32_t _2384_spidx = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2383_residx);
          if ((_2384_spidx >= (int)0))
          {
            {
              _ptr__2380_ressp[_2381_k] = _2382_i;
              _ptr__2379_residxs[_2381_k] = ((*nativeidxs)(_2384_spidx));
              ++ _2381_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2364_num)}),_2380_ressp,_2379_residxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.general_diag

// Begin mosek.fusion.BaseVariable.slice
// Method mosek.fusion.BaseVariable.slice @ src/fusion/BaseVariable.monty:260:6-357:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2385_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2386_last) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2385_first,_2386_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2385_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2386_last) { return __mosek_2fusion_2BaseVariable__slice(_2385_first,_2386_last); }
/* override: mosek.fusion.Variable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2385_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2386_last) { return __mosek_2fusion_2BaseVariable__slice(_2385_first,_2386_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2385_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _2386_last)
{
  _checked_ptr_1<int32_t> _ptr__2385_first(_2385_first ? _2385_first->raw() : nullptr, _2385_first ? _2385_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2386_last(_2386_last ? _2386_last->raw() : nullptr, _2386_last ? _2386_last->size(0) : 0);
  if (((int)((_2385_first)->size(0)) != (int)((_2386_last)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_2385_first)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10001_ = (int)0;
      int32_t _10002_ = (int)((shape)->size(0));
      for (int32_t _2387_i = _10001_; _2387_i < _10002_; ++_2387_i)
      {
        {
          if (((_ptr__2385_first[_2387_i] < (int)0) || (_ptr__2386_last[_2387_i] > ((*shape)(_2387_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__2385_first[_2387_i] > _ptr__2386_last[_2387_i]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int32_t _2388_nd = (int)((shape)->size(0));
      std::vector<int32_t> _10003_;
      for (int32_t _2390_i = (int)0, _10004_ = _2388_nd; _2390_i < _10004_ ; ++_2390_i)
      {
        _10003_.push_back((_ptr__2386_last[_2390_i] - _ptr__2385_first[_2390_i]));
      }
      auto _10005_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10003_.size()),_10003_.begin(),_10003_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2389_sliceshape = _10005_;
      _checked_ptr_1<int32_t> _ptr__2389_sliceshape(_2389_sliceshape ? _2389_sliceshape->raw() : nullptr,_2389_sliceshape ? _2389_sliceshape->size(0) : 0);
      int32_t _2391_slicesize = (int)1;
      int32_t _10006_ = (int)0;
      int32_t _10007_ = _2388_nd;
      for (int32_t _2392_i = _10006_; _2392_i < _10007_; ++_2392_i)
      {
        {
          _2391_slicesize *= (_ptr__2386_last[_2392_i] - _ptr__2385_first[_2392_i]);
        }
      }
      if ((_2391_slicesize == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int32_t _2393_nnz = (int)0;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2394_key = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2388_nd)));
          _checked_ptr_1<int32_t> _ptr__2394_key(_2394_key ? _2394_key->raw() : nullptr,_2394_key ? _2394_key->size(0) : 0);
          int32_t _10008_ = (int)0;
          int32_t _10009_ = (int)((sparsity)->size(0));
          for (int32_t _2395_i = _10008_; _2395_i < _10009_; ++_2395_i)
          {
            {
              int64_t _2396_rem = ((*sparsity)(_2395_i));
              int32_t _10010_ = (int)1;
              int32_t _10011_ = _2388_nd;
              for (int32_t _2397_k = _10010_; _2397_k < _10011_; ++_2397_k)
              {
                {
                  _ptr__2394_key[(_2388_nd - _2397_k)] = (int32_t)(_2396_rem % ((*shape)((_2388_nd - _2397_k))));
                  _2396_rem /= ((*shape)((_2388_nd - _2397_k)));
                }
              }
              _ptr__2394_key[(int)0] = (int32_t)_2396_rem;
              int32_t _2398_k = (int)0;
              while ( ((_ptr__2394_key[_2398_k] >= _ptr__2385_first[_2398_k]) && (_ptr__2394_key[_2398_k] < _ptr__2386_last[_2398_k])) )
              {
                {
                  ++ _2398_k;
                }
              }
              if ((_2398_k == _2388_nd))
              {
                {
                  ++ _2393_nnz;
                }
              }
              {}
            }
          }
          int32_t _2399_idx = (int)0;
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2400_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2393_nnz)));
          _checked_ptr_1<int64_t> _ptr__2400_idxs(_2400_idxs ? _2400_idxs->raw() : nullptr,_2400_idxs ? _2400_idxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2401_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2393_nnz)));
          _checked_ptr_1<int64_t> _ptr__2401_sp(_2401_sp ? _2401_sp->raw() : nullptr,_2401_sp ? _2401_sp->size(0) : 0);
          int32_t _10012_ = (int)0;
          int32_t _10013_ = (int)((sparsity)->size(0));
          for (int32_t _2402_i = _10012_; _2402_i < _10013_; ++_2402_i)
          {
            {
              int64_t _2403_rem = ((*sparsity)(_2402_i));
              int32_t _10014_ = (int)1;
              int32_t _10015_ = _2388_nd;
              for (int32_t _2404_k = _10014_; _2404_k < _10015_; ++_2404_k)
              {
                {
                  _ptr__2394_key[(_2388_nd - _2404_k)] = (int32_t)(_2403_rem % ((*shape)((_2388_nd - _2404_k))));
                  _2403_rem /= ((*shape)((_2388_nd - _2404_k)));
                }
              }
              _ptr__2394_key[(int)0] = (int32_t)_2403_rem;
              int32_t _2405_k = (int)0;
              while ( ((_ptr__2394_key[_2405_k] >= _ptr__2385_first[_2405_k]) && (_ptr__2394_key[_2405_k] < _ptr__2386_last[_2405_k])) )
              {
                {
                  ++ _2405_k;
                }
              }
              if ((_2405_k == _2388_nd))
              {
                {
                  _ptr__2400_idxs[_2399_idx] = ((*nativeidxs)(_2402_i));
                  int32_t _2406_spidx = (int)0;
                  int32_t _10016_ = (int)0;
                  int32_t _10017_ = _2388_nd;
                  for (int32_t _2407_i = _10016_; _2407_i < _10017_; ++_2407_i)
                  {
                    {
                      _2406_spidx = safe_add( safe_mul( _2406_spidx,_ptr__2389_sliceshape[_2407_i] ),(_ptr__2394_key[_2407_i] - _ptr__2385_first[_2407_i]) );
                    }
                  }
                  _ptr__2401_sp[_2399_idx] = _2406_spidx;
                  ++ _2399_idx;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2389_sliceshape,_2401_sp,_2400_idxs)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2408_sliceidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2391_slicesize)));
          _checked_ptr_1<int64_t> _ptr__2408_sliceidxs(_2408_sliceidxs ? _2408_sliceidxs->raw() : nullptr,_2408_sliceidxs ? _2408_sliceidxs->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2409_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2388_nd)));
            _checked_ptr_1<int32_t> _ptr__2409_strides(_2409_strides ? _2409_strides->raw() : nullptr,_2409_strides ? _2409_strides->size(0) : 0);
            _ptr__2409_strides[(_2388_nd - (int)1)] = (int)1;
            int32_t _10018_ = (int)1;
            int32_t _10019_ = _2388_nd;
            for (int32_t _2410_i = _10018_; _2410_i < _10019_; ++_2410_i)
            {
              {
                _ptr__2409_strides[((_2388_nd - _2410_i) - (int)1)] = safe_mul( _ptr__2409_strides[(_2388_nd - _2410_i)],((*shape)((_2388_nd - _2410_i))) );
              }
            }
            int32_t _2411_start = (int)0;
            int32_t _10020_ = (int)0;
            int32_t _10021_ = _2388_nd;
            for (int32_t _2412_i = _10020_; _2412_i < _10021_; ++_2412_i)
            {
              {
                _2411_start += safe_mul( _ptr__2385_first[_2412_i],_ptr__2409_strides[_2412_i] );
              }
            }
            std::vector<int32_t> _10022_;
            for (int32_t _2414_i = (int)0, _10023_ = _2388_nd; _2414_i < _10023_ ; ++_2414_i)
            {
              _10022_.push_back(_2411_start);
            }
            auto _10024_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10022_.size()),_10022_.begin(),_10022_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2413_pp = _10024_;
            _checked_ptr_1<int32_t> _ptr__2413_pp(_2413_pp ? _2413_pp->raw() : nullptr,_2413_pp ? _2413_pp->size(0) : 0);
            std::vector<int32_t> _10025_;
            for (int32_t _2416_i = (int)0, _10026_ = _2388_nd; _2416_i < _10026_ ; ++_2416_i)
            {
              _10025_.push_back(_ptr__2385_first[_2416_i]);
            }
            auto _10027_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10025_.size()),_10025_.begin(),_10025_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2415_ii = _10027_;
            _checked_ptr_1<int32_t> _ptr__2415_ii(_2415_ii ? _2415_ii->raw() : nullptr,_2415_ii ? _2415_ii->size(0) : 0);
            int32_t _10028_ = (int)0;
            int32_t _10029_ = _2391_slicesize;
            for (int32_t _2417_i = _10028_; _2417_i < _10029_; ++_2417_i)
            {
              {
                _ptr__2408_sliceidxs[_2417_i] = ((*nativeidxs)(_ptr__2413_pp[(_2388_nd - (int)1)]));
                _ptr__2415_ii[(_2388_nd - (int)1)] += (int)1;
                _ptr__2413_pp[(_2388_nd - (int)1)] += _ptr__2409_strides[(_2388_nd - (int)1)];
                if ((_ptr__2415_ii[(_2388_nd - (int)1)] >= _ptr__2386_last[(_2388_nd - (int)1)]))
                {
                  {
                    int32_t _2418_k = (_2388_nd - (int)1);
                    while ( ((_2418_k > (int)0) && (_ptr__2415_ii[_2418_k] >= _ptr__2386_last[_2418_k])) )
                    {
                      {
                        _ptr__2415_ii[_2418_k] = _ptr__2385_first[_2418_k];
                        _ptr__2415_ii[(_2418_k - (int)1)] += (int)1;
                        _ptr__2413_pp[(_2418_k - (int)1)] += _ptr__2409_strides[(_2418_k - (int)1)];
                        -- _2418_k;
                      }
                    }
                    int32_t _10030_ = safe_add( _2418_k,(int)1 );
                    int32_t _10031_ = _2388_nd;
                    for (int32_t _2419_k2 = _10030_; _2419_k2 < _10031_; ++_2419_k2)
                    {
                      {
                        _ptr__2413_pp[_2419_k2] = _ptr__2413_pp[_2418_k];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2389_sliceshape,nullptr,_2408_sliceidxs)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.BaseVariable.slice

// Begin mosek.fusion.BaseVariable.slice
// Method mosek.fusion.BaseVariable.slice @ src/fusion/BaseVariable.monty:228:6-257:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int32_t _2420_first,int32_t _2421_last) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2420_first,_2421_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int32_t _2420_first,int32_t _2421_last) { return __mosek_2fusion_2BaseVariable__slice(_2420_first,_2421_last); }
/* override: mosek.fusion.Variable.slice*/
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int32_t _2420_first,int32_t _2421_last) { return __mosek_2fusion_2BaseVariable__slice(_2420_first,_2421_last); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int32_t _2420_first,int32_t _2421_last)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2420_first == (int)0) && (_2421_last == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_2420_first < (int)0) || (_2421_last > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2420_first > _2421_last))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_2420_first == _2421_last))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int32_t _2422_slicesize = (_2421_last - _2420_first);
      int32_t _2423_nnz = (int)0;
      int32_t _2424_i0 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(int64_t)(_2420_first));
      int32_t _2425_i1 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(int64_t)(_2421_last));
      std::vector<int64_t> _10032_;
      for (int32_t _2426_i = _2424_i0, _10033_ = _2425_i1; _2426_i < _10033_ ; ++_2426_i)
      {
        _10032_.push_back((((*sparsity)(_2426_i)) - _2420_first));
      }
      auto _10034_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10032_.size()),_10032_.begin(),_10032_.end()));
      std::vector<int64_t> _10035_;
      for (int32_t _2427_i = _2424_i0, _10036_ = _2425_i1; _2427_i < _10036_ ; ++_2427_i)
      {
        _10035_.push_back(((*nativeidxs)(_2427_i)));
      }
      auto _10037_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10035_.size()),_10035_.begin(),_10035_.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2422_slicesize)}),_10034_,_10037_)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int32_t _2428_slicesize = (_2421_last - _2420_first);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2429_sliceidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2428_slicesize)));
      _checked_ptr_1<int64_t> _ptr__2429_sliceidxs(_2429_sliceidxs ? _2429_sliceidxs->raw() : nullptr,_2429_sliceidxs ? _2429_sliceidxs->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_2420_first,_2429_sliceidxs,(int)0,_2428_slicesize);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2428_slicesize)}),nullptr,_2429_sliceidxs)).as<::mosek::fusion::Variable>();
    }
  }
}
// End mosek.fusion.BaseVariable.slice

// Begin mosek.fusion.BaseVariable.asExpr
// Method mosek.fusion.BaseVariable.asExpr @ src/fusion/BaseVariable.monty:226:6-74
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
/* override: mosek.fusion.Variable.asExpr*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr()
{
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseVariable.asExpr

// Begin mosek.fusion.BaseVariable.inst
// Method mosek.fusion.BaseVariable.inst @ src/fusion/BaseVariable.monty:185:6-207:7
int32_t mosek::fusion::BaseVariable :: inst(int32_t _2430_spoffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2431_sparsity,int32_t _2432_nioffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2433_nativeidxs) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2430_spoffset,_2431_sparsity,_2432_nioffset,_2433_nativeidxs); }
int32_t mosek::fusion::p_BaseVariable::inst(int32_t _2430_spoffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2431_sparsity,int32_t _2432_nioffset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2433_nativeidxs)
{
  _checked_ptr_1<int64_t> _ptr__2431_sparsity(_2431_sparsity ? _2431_sparsity->raw() : nullptr, _2431_sparsity ? _2431_sparsity->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__2433_nativeidxs(_2433_nativeidxs ? _2433_nativeidxs->raw() : nullptr, _2433_nativeidxs ? _2433_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2434_thisnidxs = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<int64_t> _ptr__2434_thisnidxs(_2434_thisnidxs ? _2434_thisnidxs->raw() : nullptr,_2434_thisnidxs ? _2434_thisnidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2435_thissp = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<int64_t> _ptr__2435_thissp(_2435_thissp ? _2435_thissp->raw() : nullptr,_2435_thissp ? _2435_thissp->size(0) : 0);
  if ((NULL == _2435_thissp.get()))
  {
    {
      int32_t _10038_ = (int)0;
      int32_t _10039_ = (int)((_2434_thisnidxs)->size(0));
      for (int32_t _2436_i = _10038_; _2436_i < _10039_; ++_2436_i)
      {
        {
          _ptr__2431_sparsity[safe_add( _2436_i,_2430_spoffset )] = _2436_i;
          _ptr__2433_nativeidxs[safe_add( _2436_i,_2432_nioffset )] = _ptr__2434_thisnidxs[_2436_i];
        }
      }
    }
  }
  else
  {
    {
      int32_t _10040_ = (int)0;
      int32_t _10041_ = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int32_t _2437_i = _10040_; _2437_i < _10041_; ++_2437_i)
      {
        {
          _ptr__2431_sparsity[safe_add( _2430_spoffset,_2437_i )] = _ptr__2435_thissp[_2437_i];
          _ptr__2433_nativeidxs[safe_add( _2437_i,_2432_nioffset )] = _ptr__2434_thisnidxs[_2437_i];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
// End mosek.fusion.BaseVariable.inst

// Begin mosek.fusion.BaseVariable.numInst
// Method mosek.fusion.BaseVariable.numInst @ src/fusion/BaseVariable.monty:181:6-183:7
int32_t mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }
int32_t mosek::fusion::p_BaseVariable::numInst()
{
  return (int)((nativeidxs)->size(0));
}
// End mosek.fusion.BaseVariable.numInst

// Begin mosek.fusion.BaseVariable.inst
// Method mosek.fusion.BaseVariable.inst @ src/fusion/BaseVariable.monty:165:6-179:7
void mosek::fusion::BaseVariable :: inst(int32_t _2438_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2439_nindex) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2438_offset,_2439_nindex); }
void mosek::fusion::p_BaseVariable::inst(int32_t _2438_offset,std::shared_ptr< monty::ndarray< int64_t,1 > > _2439_nindex)
{
  _checked_ptr_1<int64_t> _ptr__2439_nindex(_2439_nindex ? _2439_nindex->raw() : nullptr, _2439_nindex ? _2439_nindex->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int32_t _10042_ = (int)0;
      int32_t _10043_ = (int)((nativeidxs)->size(0));
      for (int32_t _2440_i = _10042_; _2440_i < _10043_; ++_2440_i)
      {
        {
          _ptr__2439_nindex[safe_add( _2438_offset,_2440_i )] = ((*nativeidxs)(_2440_i));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2441_shape = _pubthis->getShape();
      _checked_ptr_1<int32_t> _ptr__2441_shape(_2441_shape ? _2441_shape->raw() : nullptr,_2441_shape ? _2441_shape->size(0) : 0);
      int32_t _2442_domsize = (int)1;
      int32_t _10044_ = (int)0;
      int32_t _10045_ = (int)((_2441_shape)->size(0));
      for (int32_t _2443_i = _10044_; _2443_i < _10045_; ++_2443_i)
      {
        {
          _2442_domsize *= _ptr__2441_shape[_2443_i];
        }
      }
      int32_t _10046_ = (int)0;
      int32_t _10047_ = _2442_domsize;
      for (int32_t _2444_i = _10046_; _2444_i < _10047_; ++_2444_i)
      {
        {
          _ptr__2439_nindex[safe_add( _2438_offset,_2444_i )] = (int)0;
        }
      }
      int32_t _10048_ = (int)0;
      int32_t _10049_ = (int)((sparsity)->size(0));
      for (int32_t _2445_i = _10048_; _2445_i < _10049_; ++_2445_i)
      {
        {
          _ptr__2439_nindex[safe_add( _2438_offset,((*sparsity)(_2445_i)) )] = ((*nativeidxs)(_2445_i));
        }
      }
    }
  }
}
// End mosek.fusion.BaseVariable.inst

// Begin mosek.fusion.BaseVariable.set_values
// Method mosek.fusion.BaseVariable.set_values @ src/fusion/BaseVariable.monty:147:6-163:7
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2446_values,bool _2447_primal) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_2446_values,_2447_primal); }
void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2446_values,bool _2447_primal)
{
  _checked_ptr_1<double> _ptr__2446_values(_2446_values ? _2446_values->raw() : nullptr, _2446_values ? _2446_values->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2447_primal,nativeidxs,_2446_values);
    }
  }
  else
  {
    {
      int32_t _2448_varsize = (int)1;
      int32_t _10050_ = (int)0;
      int32_t _10051_ = (int)((shape)->size(0));
      for (int32_t _2449_i = _10050_; _2449_i < _10051_; ++_2449_i)
      {
        {
          _2448_varsize *= ((*shape)(_2449_i));
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2450_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2448_varsize)));
      _checked_ptr_1<int64_t> _ptr__2450_idxs(_2450_idxs ? _2450_idxs->raw() : nullptr,_2450_idxs ? _2450_idxs->size(0) : 0);
      int32_t _10052_ = (int)0;
      int32_t _10053_ = (int)((nativeidxs)->size(0));
      for (int32_t _2451_i = _10052_; _2451_i < _10053_; ++_2451_i)
      {
        {
          _ptr__2450_idxs[((*sparsity)(_2451_i))] = ((*nativeidxs)(_2451_i));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2447_primal,_2450_idxs,_2446_values);
    }
  }
}
// End mosek.fusion.BaseVariable.set_values

// Begin mosek.fusion.BaseVariable.dual_lu
// Method mosek.fusion.BaseVariable.dual_lu @ src/fusion/BaseVariable.monty:131:6-144:7
void mosek::fusion::p_BaseVariable::dual_lu(int32_t _2452_offset,std::shared_ptr< monty::ndarray< double,1 > > _2453_target,bool _2454_lower)
{
  _checked_ptr_1<double> _ptr__2453_target(_2453_target ? _2453_target->raw() : nullptr, _2453_target ? _2453_target->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_2454_lower,nativeidxs,_2453_target,_2452_offset);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2455_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<int64_t> _ptr__2455_idxs(_2455_idxs ? _2455_idxs->raw() : nullptr,_2455_idxs ? _2455_idxs->size(0) : 0);
      int32_t _10054_ = (int)0;
      int32_t _10055_ = (int)((sparsity)->size(0));
      for (int32_t _2456_i = _10054_; _2456_i < _10055_; ++_2456_i)
      {
        {
          _ptr__2455_idxs[((*sparsity)(_2456_i))] = ((*nativeidxs)(_2456_i));
        }
      }
      model->getVariableDuals(_2454_lower,_2455_idxs,_2453_target,_2452_offset);
    }
  }
}
// End mosek.fusion.BaseVariable.dual_lu

// Begin mosek.fusion.BaseVariable.values
// Method mosek.fusion.BaseVariable.values @ src/fusion/BaseVariable.monty:116:6-129:7
void mosek::fusion::BaseVariable :: values(int32_t _2457_offset,std::shared_ptr< monty::ndarray< double,1 > > _2458_target,bool _2459_primal) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2457_offset,_2458_target,_2459_primal); }
void mosek::fusion::p_BaseVariable::values(int32_t _2457_offset,std::shared_ptr< monty::ndarray< double,1 > > _2458_target,bool _2459_primal)
{
  _checked_ptr_1<double> _ptr__2458_target(_2458_target ? _2458_target->raw() : nullptr, _2458_target ? _2458_target->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_2459_primal,nativeidxs,_2458_target,_2457_offset);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2460_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<int64_t> _ptr__2460_idxs(_2460_idxs ? _2460_idxs->raw() : nullptr,_2460_idxs ? _2460_idxs->size(0) : 0);
      int32_t _10056_ = (int)0;
      int32_t _10057_ = (int)((sparsity)->size(0));
      for (int32_t _2461_i = _10056_; _2461_i < _10057_; ++_2461_i)
      {
        {
          _ptr__2460_idxs[((*sparsity)(_2461_i))] = ((*nativeidxs)(_2461_i));
        }
      }
      model->getVariableValues(_2459_primal,_2460_idxs,_2458_target,_2457_offset);
    }
  }
}
// End mosek.fusion.BaseVariable.values

// Begin mosek.fusion.BaseVariable.make_continuous
// Method mosek.fusion.BaseVariable.make_continuous @ src/fusion/BaseVariable.monty:114:6-81
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }
void mosek::fusion::p_BaseVariable::make_continuous()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
// End mosek.fusion.BaseVariable.make_continuous

// Begin mosek.fusion.BaseVariable.make_integer
// Method mosek.fusion.BaseVariable.make_integer @ src/fusion/BaseVariable.monty:113:6-75
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }
void mosek::fusion::p_BaseVariable::make_integer()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
// End mosek.fusion.BaseVariable.make_integer

void mosek::fusion::p_BaseVariable::destroy()
{
  sparsity.reset();
  nativeidxs.reset();
  model.reset();
  shape.reset();
}
void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }
// } class BaseVariable
// class Variable { // @ src/fusion/Variable.mbi:187:4-419:5
// Begin mosek.fusion.Variable.toString
// End mosek.fusion.Variable.toString

// Begin mosek.fusion.Variable.numInst
// End mosek.fusion.Variable.numInst

// Begin mosek.fusion.Variable.inst
// End mosek.fusion.Variable.inst

// Begin mosek.fusion.Variable.inst
// End mosek.fusion.Variable.inst

// Begin mosek.fusion.Variable.remove
// End mosek.fusion.Variable.remove

// Begin mosek.fusion.Variable.getND
// End mosek.fusion.Variable.getND

// Begin mosek.fusion.Variable.getShape
// End mosek.fusion.Variable.getShape

// Begin mosek.fusion.Variable.getModel
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
// End mosek.fusion.Variable.getModel

// Begin mosek.fusion.Variable.getSize
// End mosek.fusion.Variable.getSize

// Begin mosek.fusion.Variable.setLevel
// End mosek.fusion.Variable.setLevel

// Begin mosek.fusion.Variable.fromTril
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::fromTril(int32_t _2469_dim) { return __mosek_2fusion_2Variable__fromTril(_2469_dim); }
// End mosek.fusion.Variable.fromTril

// Begin mosek.fusion.Variable.tril
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::tril() { return __mosek_2fusion_2Variable__tril(); }
// End mosek.fusion.Variable.tril

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2470_dim0,int32_t _2471_dim1,int32_t _2472_dim2) { return __mosek_2fusion_2Variable__reshape(_2470_dim0,_2471_dim1,_2472_dim2); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2473_dim0,int32_t _2474_dim1) { return __mosek_2fusion_2Variable__reshape(_2473_dim0,_2474_dim1); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int32_t _2475_dim0) { return __mosek_2fusion_2Variable__reshape(_2475_dim0); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.reshape
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _2476_shape) { return __mosek_2fusion_2Variable__reshape(_2476_shape); }
// End mosek.fusion.Variable.reshape

// Begin mosek.fusion.Variable.set_values
// End mosek.fusion.Variable.set_values

// Begin mosek.fusion.Variable.dual
// End mosek.fusion.Variable.dual

// Begin mosek.fusion.Variable.level
// End mosek.fusion.Variable.level

// Begin mosek.fusion.Variable.values
// End mosek.fusion.Variable.values

// Begin mosek.fusion.Variable.make_continuous
// End mosek.fusion.Variable.make_continuous

// Begin mosek.fusion.Variable.make_integer
// End mosek.fusion.Variable.make_integer

// Begin mosek.fusion.Variable.makeContinuous
// End mosek.fusion.Variable.makeContinuous

// Begin mosek.fusion.Variable.makeInteger
// End mosek.fusion.Variable.makeInteger

// Begin mosek.fusion.Variable.transpose
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
// End mosek.fusion.Variable.transpose

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2482_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2483_i2,std::shared_ptr< monty::ndarray< int32_t,1 > > _2484_i3) { return __mosek_2fusion_2Variable__pick(_2482_i1,_2483_i2,_2484_i3); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2485_i1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2486_i2) { return __mosek_2fusion_2Variable__pick(_2485_i1,_2486_i2); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2487_midxs) { return __mosek_2fusion_2Variable__pick(_2487_midxs); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _2487_midxs) { return __mosek_2fusion_2Variable__pick(_2487_midxs); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2488_idxs) { return __mosek_2fusion_2Variable__pick(_2488_idxs); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _2488_idxs) { return __mosek_2fusion_2Variable__pick(_2488_idxs); }
// End mosek.fusion.Variable.pick

// Begin mosek.fusion.Variable.antidiag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
// End mosek.fusion.Variable.antidiag

// Begin mosek.fusion.Variable.antidiag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int32_t _2489_index) { return __mosek_2fusion_2Variable__antidiag(_2489_index); }
// End mosek.fusion.Variable.antidiag

// Begin mosek.fusion.Variable.diag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
// End mosek.fusion.Variable.diag

// Begin mosek.fusion.Variable.diag
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int32_t _2490_index) { return __mosek_2fusion_2Variable__diag(_2490_index); }
// End mosek.fusion.Variable.diag

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2491_idx) { return __mosek_2fusion_2Variable__index(_2491_idx); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2491_idx) { return __mosek_2fusion_2Variable__index(_2491_idx); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2492_i1,int32_t _2493_i2,int32_t _2494_i3) { return __mosek_2fusion_2Variable__index(_2492_i1,_2493_i2,_2494_i3); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2495_i1,int32_t _2496_i2) { return __mosek_2fusion_2Variable__index(_2495_i1,_2496_i2); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int32_t _2497_i1) { return __mosek_2fusion_2Variable__index(_2497_i1); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int32_t _2497_i1) { return __mosek_2fusion_2Variable__index(_2497_i1); }
// End mosek.fusion.Variable.index

// Begin mosek.fusion.Variable.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2498_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2499_lasta) { return __mosek_2fusion_2Variable__slice(_2498_firsta,_2499_lasta); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2498_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2499_lasta) { return __mosek_2fusion_2Variable__slice(_2498_firsta,_2499_lasta); }
// End mosek.fusion.Variable.slice

// Begin mosek.fusion.Variable.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int32_t _2500_first,int32_t _2501_last) { return __mosek_2fusion_2Variable__slice(_2500_first,_2501_last); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int32_t _2500_first,int32_t _2501_last) { return __mosek_2fusion_2Variable__slice(_2500_first,_2501_last); }
// End mosek.fusion.Variable.slice

// Begin mosek.fusion.Variable.asExpr
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
// End mosek.fusion.Variable.asExpr

// } class Variable
// class Var { // @ src/fusion/Var.monty:144:4-814:5
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Var::p_Var
  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Var.empty
// Method mosek.fusion.Var.empty @ src/fusion/Var.monty:808:6-813:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _2502_shape) { return mosek::fusion::p_Var::empty(_2502_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int32_t,1 > > _2502_shape)
{
  _checked_ptr_1<int32_t> _ptr__2502_shape(_2502_shape ? _2502_shape->raw() : nullptr, _2502_shape ? _2502_shape->size(0) : 0);
  int32_t _10058_ = (int)0;
  int32_t _10059_ = (int)((_2502_shape)->size(0));
  for (int32_t _2503_i = _10058_; _2503_i < _10059_; ++_2503_i)
  {
    {
      if ((_ptr__2502_shape[_2503_i] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2502_shape)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Var.empty

// Begin mosek.fusion.Var.compress
// Method mosek.fusion.Var.compress @ src/fusion/Var.monty:782:6-800:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2504_v) { return mosek::fusion::p_Var::compress(_2504_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _2504_v)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2505_shape = _2504_v->getShape();
  _checked_ptr_1<int32_t> _ptr__2505_shape(_2505_shape ? _2505_shape->raw() : nullptr,_2505_shape ? _2505_shape->size(0) : 0);
  int32_t _2506_nd = (int)((_2505_shape)->size(0));
  int32_t _2507_realnd = (int)0;
  int32_t _10060_ = (int)0;
  int32_t _10061_ = _2506_nd;
  for (int32_t _2508_i = _10060_; _2508_i < _10061_; ++_2508_i)
  {
    {
      if ((_ptr__2505_shape[_2508_i] != (int)1))
      {
        {
          ++ _2507_realnd;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2509_realshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2507_realnd)));
  _checked_ptr_1<int32_t> _ptr__2509_realshape(_2509_realshape ? _2509_realshape->raw() : nullptr,_2509_realshape ? _2509_realshape->size(0) : 0);
  {
    int32_t _2510_k = (int)0;
    int32_t _10062_ = (int)0;
    int32_t _10063_ = _2506_nd;
    for (int32_t _2511_i = _10062_; _2511_i < _10063_; ++_2511_i)
    {
      {
        if ((_ptr__2505_shape[_2511_i] != (int)1))
        {
          {
            _ptr__2509_realshape[_2510_k] = _ptr__2505_shape[_2511_i];
            ++ _2510_k;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_2504_v,_2509_realshape);
}
// End mosek.fusion.Var.compress

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ src/fusion/Var.monty:765:6-768:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2512_v,
    int32_t _2513_d1) { return mosek::fusion::p_Var::reshape(_2512_v,_2513_d1); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2512_v,int32_t _2513_d1)
{
  return ::mosek::fusion::p_Var::reshape(_2512_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2513_d1)}));
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ src/fusion/Var.monty:751:6-754:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2514_v,
    int32_t _2515_d1,
    int32_t _2516_d2) { return mosek::fusion::p_Var::reshape(_2514_v,_2515_d1,_2516_d2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2514_v,int32_t _2515_d1,int32_t _2516_d2)
{
  return ::mosek::fusion::p_Var::reshape(_2514_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_2515_d1),(int32_t)(_2516_d2)}));
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.flatten
// Method mosek.fusion.Var.flatten @ src/fusion/Var.monty:738:6-741:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2517_v) { return mosek::fusion::p_Var::flatten(_2517_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _2517_v)
{
  return ::mosek::fusion::p_Var::reshape(_2517_v,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int32_t)::mosek::fusion::p_Set::size(_2517_v->getShape()))}));
}
// End mosek.fusion.Var.flatten

// Begin mosek.fusion.Var.reshape
// Method mosek.fusion.Var.reshape @ src/fusion/Var.monty:707:6-709:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2518_v,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2519_shape) { return mosek::fusion::p_Var::reshape(_2518_v,_2519_shape); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2518_v,std::shared_ptr< monty::ndarray< int32_t,1 > > _2519_shape)
{
  _checked_ptr_1<int32_t> _ptr__2519_shape(_2519_shape ? _2519_shape->raw() : nullptr, _2519_shape ? _2519_shape->size(0) : 0);
  return _2518_v->__mosek_2fusion_2Variable__reshape(_2519_shape);
}
// End mosek.fusion.Var.reshape

// Begin mosek.fusion.Var.index_permute_
// Method mosek.fusion.Var.index_permute_ @ src/fusion/Var.monty:619:6-672:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _2520_v,std::shared_ptr< monty::ndarray< int32_t,1 > > _2521_perm)
{
  _checked_ptr_1<int32_t> _ptr__2521_perm(_2521_perm ? _2521_perm->raw() : nullptr, _2521_perm ? _2521_perm->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2522_sparsity;
  _checked_ptr_1<int64_t> _ptr__2522_sparsity(_2522_sparsity ? _2522_sparsity->raw() : nullptr,_2522_sparsity ? _2522_sparsity->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2523_nativeidxs;
  _checked_ptr_1<int64_t> _ptr__2523_nativeidxs(_2523_nativeidxs ? _2523_nativeidxs->raw() : nullptr,_2523_nativeidxs ? _2523_nativeidxs->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2524_shape = _2520_v->getShape();
  _checked_ptr_1<int32_t> _ptr__2524_shape(_2524_shape ? _2524_shape->raw() : nullptr,_2524_shape ? _2524_shape->size(0) : 0);
  int32_t _2525_nd = (int)((_2524_shape)->size(0));
  int32_t _2526_shapesize = (int)1;
  int32_t _10064_ = (int)0;
  int32_t _10065_ = _2525_nd;
  for (int32_t _2527_i = _10064_; _2527_i < _10065_; ++_2527_i)
  {
    {
      _2526_shapesize *= _ptr__2524_shape[_2527_i];
    }
  }
  int32_t _2528_nnz = _2520_v->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2529_pstrides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2525_nd)));
  _checked_ptr_1<int64_t> _ptr__2529_pstrides(_2529_pstrides ? _2529_pstrides->raw() : nullptr,_2529_pstrides ? _2529_pstrides->size(0) : 0);
  _ptr__2529_pstrides[(_2525_nd - (int)1)] = (int)1;
  int32_t _10066_ = (int)1;
  int32_t _10067_ = _2525_nd;
  for (int32_t _2530_i = _10066_; _2530_i < _10067_; ++_2530_i)
  {
    {
      _ptr__2529_pstrides[((_2525_nd - _2530_i) - (int)1)] = safe_mul( _ptr__2529_pstrides[(_2525_nd - _2530_i)],_ptr__2524_shape[_ptr__2521_perm[(_2525_nd - _2530_i)]] );
    }
  }
  if ((_2528_nnz < _2526_shapesize))
  {
    {
      _2522_sparsity = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2528_nnz)));
      _ptr__2522_sparsity.update(_2522_sparsity ? _2522_sparsity->raw() : nullptr, _2522_sparsity ? _2522_sparsity->size(0) : 0);
      _2523_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2528_nnz)));
      _ptr__2523_nativeidxs.update(_2523_nativeidxs ? _2523_nativeidxs->raw() : nullptr, _2523_nativeidxs ? _2523_nativeidxs->size(0) : 0);
      _2520_v->inst((int)0,_2522_sparsity,(int)0,_2523_nativeidxs);
    }
  }
  else
  {
    {
      _2522_sparsity = nullptr;
      _ptr__2522_sparsity.update(_2522_sparsity ? _2522_sparsity->raw() : nullptr, _2522_sparsity ? _2522_sparsity->size(0) : 0);
      _2523_nativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2528_nnz)));
      _ptr__2523_nativeidxs.update(_2523_nativeidxs ? _2523_nativeidxs->raw() : nullptr, _2523_nativeidxs ? _2523_nativeidxs->size(0) : 0);
      _2520_v->inst((int)0,_2523_nativeidxs);
    }
  }
  if ((NULL == _2522_sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2531_residxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2528_nnz)));
      _checked_ptr_1<int64_t> _ptr__2531_residxs(_2531_residxs ? _2531_residxs->raw() : nullptr,_2531_residxs ? _2531_residxs->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _2532_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2525_nd)));
        _checked_ptr_1<int32_t> _ptr__2532_ii(_2532_ii ? _2532_ii->raw() : nullptr,_2532_ii ? _2532_ii->size(0) : 0);
        int32_t _10068_ = (int)0;
        int32_t _10069_ = _2528_nnz;
        for (int32_t _2533_i = _10068_; _2533_i < _10069_; ++_2533_i)
        {
          {
            int32_t _2534_rem = _2533_i;
            int32_t _10070_ = (int)0;
            int32_t _10071_ = _2525_nd;
            for (int32_t _2535_j = _10070_; _2535_j < _10071_; ++_2535_j)
            {
              {
                _ptr__2532_ii[((_2525_nd - _2533_i) - (int)1)] = (_2534_rem % _ptr__2524_shape[((_2525_nd - _2533_i) - (int)1)]);
                _2534_rem /= _ptr__2524_shape[((_2525_nd - _2533_i) - (int)1)];
              }
            }
            int32_t _2536_newi = (int)0;
            int32_t _10072_ = (int)0;
            int32_t _10073_ = _2525_nd;
            for (int32_t _2537_j = _10072_; _2537_j < _10073_; ++_2537_j)
            {
              {
                _2536_newi += (int32_t)safe_mul( _ptr__2532_ii[_ptr__2521_perm[_2537_j]],_ptr__2529_pstrides[_2537_j] );
              }
            }
            _ptr__2531_residxs[_2536_newi] = _ptr__2523_nativeidxs[_2533_i];
          }
        }
      }
      _2523_nativeidxs = _2531_residxs;
      _ptr__2523_nativeidxs.update(_2523_nativeidxs ? _2523_nativeidxs->raw() : nullptr, _2523_nativeidxs ? _2523_nativeidxs->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2538_ressp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2528_nnz)));
      _checked_ptr_1<int64_t> _ptr__2538_ressp(_2538_ressp ? _2538_ressp->raw() : nullptr,_2538_ressp ? _2538_ressp->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _2539_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2525_nd)));
        _checked_ptr_1<int32_t> _ptr__2539_ii(_2539_ii ? _2539_ii->raw() : nullptr,_2539_ii ? _2539_ii->size(0) : 0);
        int32_t _10074_ = (int)0;
        int32_t _10075_ = _2528_nnz;
        for (int32_t _2540_i = _10074_; _2540_i < _10075_; ++_2540_i)
        {
          {
            int32_t _2541_rem = _2540_i;
            int32_t _10076_ = (int)0;
            int32_t _10077_ = _2525_nd;
            for (int32_t _2542_j = _10076_; _2542_j < _10077_; ++_2542_j)
            {
              {
                _ptr__2539_ii[((_2525_nd - _2540_i) - (int)1)] = (_2541_rem % _ptr__2524_shape[((_2525_nd - _2540_i) - (int)1)]);
                _2541_rem /= _ptr__2524_shape[((_2525_nd - _2540_i) - (int)1)];
              }
            }
            int32_t _2543_newi = (int)0;
            int32_t _10078_ = (int)0;
            int32_t _10079_ = _2525_nd;
            for (int32_t _2544_j = _10078_; _2544_j < _10079_; ++_2544_j)
            {
              {
                _2543_newi += (int32_t)safe_mul( _ptr__2539_ii[_ptr__2521_perm[_2544_j]],_ptr__2529_pstrides[_2544_j] );
              }
            }
            _ptr__2538_ressp[_2540_i] = _2543_newi;
          }
        }
      }
      std::vector<int64_t> _10080_;
      for (int32_t _2546_i = (int)0, _10081_ = _2528_nnz; _2546_i < _10081_ ; ++_2546_i)
      {
        _10080_.push_back(_2546_i);
      }
      auto _10082_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10080_.size()),_10080_.begin(),_10080_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2545_spperm = _10082_;
      _checked_ptr_1<int64_t> _ptr__2545_spperm(_2545_spperm ? _2545_spperm->raw() : nullptr,_2545_spperm ? _2545_spperm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2545_spperm,_2538_ressp,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2528_nnz));
      std::vector<int64_t> _10083_;
      for (int32_t _2547_i = (int)0, _10084_ = _2528_nnz; _2547_i < _10084_ ; ++_2547_i)
      {
        _10083_.push_back(_ptr__2522_sparsity[_ptr__2545_spperm[_2547_i]]);
      }
      auto _10085_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10083_.size()),_10083_.begin(),_10083_.end()));
      _2522_sparsity = _10085_;
      _ptr__2522_sparsity.update(_2522_sparsity ? _2522_sparsity->raw() : nullptr, _2522_sparsity ? _2522_sparsity->size(0) : 0);
      std::vector<int64_t> _10086_;
      for (int32_t _2548_i = (int)0, _10087_ = _2528_nnz; _2548_i < _10087_ ; ++_2548_i)
      {
        _10086_.push_back(_ptr__2523_nativeidxs[_ptr__2545_spperm[_2548_i]]);
      }
      auto _10088_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10086_.size()),_10086_.begin(),_10086_.end()));
      _2523_nativeidxs = _10088_;
      _ptr__2523_nativeidxs.update(_2523_nativeidxs ? _2523_nativeidxs->raw() : nullptr, _2523_nativeidxs ? _2523_nativeidxs->size(0) : 0);
    }
  }
  std::vector<int32_t> _10089_;
  for (int32_t _2549_i = (int)0, _10090_ = _2525_nd; _2549_i < _10090_ ; ++_2549_i)
  {
    _10089_.push_back(_ptr__2524_shape[_ptr__2521_perm[_2549_i]]);
  }
  auto _10091_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10089_.size()),_10089_.begin(),_10089_.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2520_v->__mosek_2fusion_2Variable__getModel(),_10091_,_2522_sparsity,_2523_nativeidxs)).as<::mosek::fusion::Variable>();
}
// End mosek.fusion.Var.index_permute_

// Begin mosek.fusion.Var.hrepeat
// Method mosek.fusion.Var.hrepeat @ src/fusion/Var.monty:611:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2550_v,
    int32_t _2551_n) { return mosek::fusion::p_Var::hrepeat(_2550_v,_2551_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2550_v,int32_t _2551_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2550_v,(int)1,_2551_n);
}
// End mosek.fusion.Var.hrepeat

// Begin mosek.fusion.Var.vrepeat
// Method mosek.fusion.Var.vrepeat @ src/fusion/Var.monty:610:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2552_v,
    int32_t _2553_n) { return mosek::fusion::p_Var::vrepeat(_2552_v,_2553_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2552_v,int32_t _2553_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2552_v,(int)0,_2553_n);
}
// End mosek.fusion.Var.vrepeat

// Begin mosek.fusion.Var.repeat
// Method mosek.fusion.Var.repeat @ src/fusion/Var.monty:609:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2554_v,
    int32_t _2555_n) { return mosek::fusion::p_Var::repeat(_2554_v,_2555_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2554_v,int32_t _2555_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2554_v,(int)0,_2555_n);
}
// End mosek.fusion.Var.repeat

// Begin mosek.fusion.Var.repeat
// Method mosek.fusion.Var.repeat @ src/fusion/Var.monty:608:6-108
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2556_v,
    int32_t _2557_dim,
    int32_t _2558_n) { return mosek::fusion::p_Var::repeat(_2556_v,_2557_dim,_2558_n); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2556_v,int32_t _2557_dim,int32_t _2558_n)
{
  return ::mosek::fusion::p_Var::drepeat(_2556_v,_2557_dim,_2558_n);
}
// End mosek.fusion.Var.repeat

// Begin mosek.fusion.Var.drepeat
// Method mosek.fusion.Var.drepeat @ src/fusion/Var.monty:472:6-606:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2559_v,int32_t _2560_dim,int32_t _2561_n)
{
  if ((_2561_n < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_2561_n == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_2561_n == (int)1))
  {
    {
      return _2559_v;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _2562_model = _2559_v->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2563_shape = _2559_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2563_shape(_2563_shape ? _2563_shape->raw() : nullptr,_2563_shape ? _2563_shape->size(0) : 0);
      int32_t _2564_nd = (int)((_2563_shape)->size(0));
      if (((_2560_dim < (int)0) || (_2560_dim > _2564_nd)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int64_t _2565_domsize = ::mosek::fusion::p_Set::size(_2563_shape);
      int32_t _2566_nnz = _2559_v->numInst();
      int32_t _2567_rnnz = safe_mul( _2566_nnz,_2561_n );
      int32_t _2568_d0 = (int)1;
      int32_t _10092_ = (int)0;
      int32_t _10093_ = _2560_dim;
      for (int32_t _2569_i = _10092_; _2569_i < _10093_; ++_2569_i)
      {
        {
          _2568_d0 *= _ptr__2563_shape[_2569_i];
        }
      }
      int32_t _10094_;
      bool _10095_ = (_2560_dim < _2564_nd);
      if (_10095_)
      {
        _10094_ = _ptr__2563_shape[_2560_dim];
      }
      else
      {
        _10094_ = (int)1;
      }
      int32_t _2570_d1 = _10094_;
      int32_t _2571_nd1 = safe_mul( _2570_d1,_2561_n );
      int32_t _2572_d2 = (int)1;
      int32_t _10096_ = safe_add( _2560_dim,(int)1 );
      int32_t _10097_ = _2564_nd;
      for (int32_t _2573_i = _10096_; _2573_i < _10097_; ++_2573_i)
      {
        {
          _2572_d2 *= _ptr__2563_shape[_2573_i];
        }
      }
      int32_t _10098_;
      bool _10099_ = (_2560_dim < _2564_nd);
      if (_10099_)
      {
        _10098_ = _2564_nd;
      }
      else
      {
        _10098_ = safe_add( _2560_dim,(int)1 );
      }
      int32_t _2574_rnd = _10098_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2575_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2574_rnd)));
      _checked_ptr_1<int32_t> _ptr__2575_rshape(_2575_rshape ? _2575_rshape->raw() : nullptr,_2575_rshape ? _2575_rshape->size(0) : 0);
      int32_t _10100_ = (int)0;
      int32_t _10101_ = _2564_nd;
      for (int32_t _2576_i = _10100_; _2576_i < _10101_; ++_2576_i)
      {
        {
          _ptr__2575_rshape[_2576_i] = _ptr__2563_shape[_2576_i];
        }
      }
      int32_t _10102_ = _2564_nd;
      int32_t _10103_ = _2574_rnd;
      for (int32_t _2577_i = _10102_; _2577_i < _10103_; ++_2577_i)
      {
        {
          _ptr__2575_rshape[_2577_i] = (int)1;
        }
      }
      _ptr__2575_rshape[_2560_dim] = _2571_nd1;
      if ((_2566_nnz < _2565_domsize))
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2578_tnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2566_nnz)));
          _checked_ptr_1<int64_t> _ptr__2578_tnativeidxs(_2578_tnativeidxs ? _2578_tnativeidxs->raw() : nullptr,_2578_tnativeidxs ? _2578_tnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2579_tsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2566_nnz)));
          _checked_ptr_1<int64_t> _ptr__2579_tsp(_2579_tsp ? _2579_tsp->raw() : nullptr,_2579_tsp ? _2579_tsp->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2580_rnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2567_rnnz)));
          _checked_ptr_1<int64_t> _ptr__2580_rnativeidxs(_2580_rnativeidxs ? _2580_rnativeidxs->raw() : nullptr,_2580_rnativeidxs ? _2580_rnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2581_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2567_rnnz)));
          _checked_ptr_1<int64_t> _ptr__2581_rsp(_2581_rsp ? _2581_rsp->raw() : nullptr,_2581_rsp ? _2581_rsp->size(0) : 0);
          _2559_v->inst((int)0,_2579_tsp,(int)0,_2578_tnativeidxs);
          {
            int32_t _2582_ns0 = safe_mul( _2571_nd1,_2572_d2 );
            int32_t _2583_s0 = safe_mul( _2570_d1,_2572_d2 );
            int32_t _2584_s1 = _2572_d2;
            if ((_2560_dim == (int)0))
            {
              {
                int32_t _2585_k = (int)0;
                int32_t _10104_ = (int)0;
                int32_t _10105_ = _2561_n;
                for (int32_t _2586_i = _10104_; _2586_i < _10105_; ++_2586_i)
                {
                  {
                    int32_t _10106_ = (int)0;
                    int32_t _10107_ = _2566_nnz;
                    for (int32_t _2587_j = _10106_; _2587_j < _10107_; ++_2587_j)
                    {
                      {
                        _ptr__2581_rsp[_2585_k] = safe_add( _ptr__2579_tsp[_2587_j],safe_mul( _2586_i,_2565_domsize ) );
                        _ptr__2580_rnativeidxs[_2585_k] = _ptr__2578_tnativeidxs[_2587_j];
                        ++ _2585_k;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2562_model,_2575_rshape,_2581_rsp,_2580_rnativeidxs)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_2560_dim >= _2564_nd))
            {
              {
                int32_t _2588_k = (int)0;
                int32_t _10108_ = (int)0;
                int32_t _10109_ = _2566_nnz;
                for (int32_t _2589_j = _10108_; _2589_j < _10109_; ++_2589_j)
                {
                  {
                    int32_t _10110_ = (int)0;
                    int32_t _10111_ = _2561_n;
                    for (int32_t _2590_i = _10110_; _2590_i < _10111_; ++_2590_i)
                    {
                      {
                        _ptr__2581_rsp[_2588_k] = safe_add( safe_mul( _ptr__2579_tsp[_2589_j],_2561_n ),_2590_i );
                        _ptr__2580_rnativeidxs[_2588_k] = _ptr__2578_tnativeidxs[_2589_j];
                        ++ _2588_k;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2562_model,_2575_rshape,_2581_rsp,_2580_rnativeidxs)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int32_t _2591_k = (int)0;
                int32_t _10112_ = (int)0;
                int32_t _10113_ = _2566_nnz;
                for (int32_t _2592_i = _10112_; _2592_i < _10113_; ++_2592_i)
                {
                  {
                    int64_t _2593_i0 = (_ptr__2579_tsp[_2592_i] / _2583_s0);
                    int64_t _2594_i1 = ((_ptr__2579_tsp[_2592_i] / _2584_s1) % _2570_d1);
                    int64_t _2595_i2 = (_ptr__2579_tsp[_2592_i] % _2572_d2);
                    int32_t _10114_ = (int)0;
                    int32_t _10115_ = _2561_n;
                    for (int32_t _2596_j = _10114_; _2596_j < _10115_; ++_2596_j)
                    {
                      {
                        _ptr__2581_rsp[_2591_k] = safe_add( safe_add( safe_mul( _2593_i0,_2582_ns0 ),safe_mul( safe_add( _2594_i1,safe_mul( _2570_d1,_2596_j ) ),_2572_d2 ) ),_2595_i2 );
                        _ptr__2580_rnativeidxs[_2591_k] = _ptr__2578_tnativeidxs[_2592_i];
                        ++ _2591_k;
                      }
                    }
                  }
                }
                int32_t _2597_maxdim = (int)1;
                int32_t _10116_ = (int)0;
                int32_t _10117_ = _2574_rnd;
                for (int32_t _2598_i = _10116_; _2598_i < _10117_; ++_2598_i)
                {
                  {
                    if ((_2597_maxdim < _ptr__2575_rshape[_2598_i]))
                    {
                      {
                        _2597_maxdim = _ptr__2575_rshape[_2598_i];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int32_t,1 > > _2599_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2567_rnnz)));
                _checked_ptr_1<int32_t> _ptr__2599_curperm(_2599_curperm ? _2599_curperm->raw() : nullptr,_2599_curperm ? _2599_curperm->size(0) : 0);
                std::shared_ptr< monty::ndarray< int32_t,1 > > _2600_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2567_rnnz)));
                _checked_ptr_1<int32_t> _ptr__2600_tgtperm(_2600_tgtperm ? _2600_tgtperm->raw() : nullptr,_2600_tgtperm ? _2600_tgtperm->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int32_t,1 > > _2601_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2597_maxdim,(int)1 ))));
                  _checked_ptr_1<int32_t> _ptr__2601_ptr(_2601_ptr ? _2601_ptr->raw() : nullptr,_2601_ptr ? _2601_ptr->size(0) : 0);
                  std::shared_ptr< monty::ndarray< int64_t,1 > > _2602_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2574_rnd)));
                  _checked_ptr_1<int64_t> _ptr__2602_s(_2602_s ? _2602_s->raw() : nullptr,_2602_s ? _2602_s->size(0) : 0);
                  _ptr__2602_s[(_2574_rnd - (int)1)] = (int)1;
                  int32_t _10118_ = (int)1;
                  int32_t _10119_ = _2574_rnd;
                  for (int32_t _2603_i = _10118_; _2603_i < _10119_; ++_2603_i)
                  {
                    {
                      _ptr__2602_s[((_2574_rnd - _2603_i) - (int)1)] = safe_mul( _ptr__2602_s[(_2574_rnd - _2603_i)],_ptr__2575_rshape[(_2574_rnd - _2603_i)] );
                    }
                  }
                  int32_t _10120_ = (int)0;
                  int32_t _10121_ = _2567_rnnz;
                  for (int32_t _2604_i = _10120_; _2604_i < _10121_; ++_2604_i)
                  {
                    {
                      _ptr__2599_curperm[_2604_i] = _2604_i;
                    }
                  }
                  int32_t _10122_ = (int)0;
                  int32_t _10123_ = _2574_rnd;
                  for (int32_t _2605_ii = _10122_; _2605_ii < _10123_; ++_2605_ii)
                  {
                    {
                      int32_t _2606_i = ((_2574_rnd - _2605_ii) - (int)1);
                      int32_t _10124_ = (int)0;
                      int32_t _10125_ = safe_add( _ptr__2575_rshape[_2606_i],(int)1 );
                      for (int32_t _2607_j = _10124_; _2607_j < _10125_; ++_2607_j)
                      {
                        {
                          _ptr__2601_ptr[_2607_j] = (int)0;
                        }
                      }
                      int32_t _10126_ = (int)0;
                      int32_t _10127_ = _2567_rnnz;
                      for (int32_t _2608_j = _10126_; _2608_j < _10127_; ++_2608_j)
                      {
                        {
                          ++ _ptr__2601_ptr[safe_add( ((_ptr__2581_rsp[_2608_j] / _ptr__2602_s[_2606_i]) % _ptr__2575_rshape[_2606_i]),(int)1 )];
                        }
                      }
                      int32_t _10128_ = (int)0;
                      int32_t _10129_ = _ptr__2575_rshape[_2606_i];
                      for (int32_t _2609_j = _10128_; _2609_j < _10129_; ++_2609_j)
                      {
                        {
                          _ptr__2601_ptr[safe_add( _2609_j,(int)1 )] += _ptr__2601_ptr[_2609_j];
                        }
                      }
                      int32_t _10130_ = (int)0;
                      int32_t _10131_ = _2567_rnnz;
                      for (int32_t _2610_jj = _10130_; _2610_jj < _10131_; ++_2610_jj)
                      {
                        {
                          int32_t _2611_j = _ptr__2599_curperm[_2610_jj];
                          int64_t _2612_idx = ((_ptr__2581_rsp[_2611_j] / _ptr__2602_s[_2606_i]) % _ptr__2575_rshape[_2606_i]);
                          _ptr__2600_tgtperm[_ptr__2601_ptr[_2612_idx]] = _2611_j;
                          ++ _ptr__2601_ptr[_2612_idx];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int32_t,1 > > _2613_tmp = _2599_curperm;
                      _checked_ptr_1<int32_t> _ptr__2613_tmp(_2613_tmp ? _2613_tmp->raw() : nullptr,_2613_tmp ? _2613_tmp->size(0) : 0);
                      _2599_curperm = _2600_tgtperm;
                      _ptr__2599_curperm.update(_2599_curperm ? _2599_curperm->raw() : nullptr, _2599_curperm ? _2599_curperm->size(0) : 0);
                      _2600_tgtperm = _2613_tmp;
                      _ptr__2600_tgtperm.update(_2600_tgtperm ? _2600_tgtperm->raw() : nullptr, _2600_tgtperm ? _2600_tgtperm->size(0) : 0);
                    }
                  }
                }
                std::vector<int64_t> _10132_;
                for (int32_t _2614_i = (int)0, _10133_ = _2567_rnnz; _2614_i < _10133_ ; ++_2614_i)
                {
                  _10132_.push_back(_ptr__2581_rsp[_ptr__2599_curperm[_2614_i]]);
                }
                auto _10134_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10132_.size()),_10132_.begin(),_10132_.end()));
                std::vector<int64_t> _10135_;
                for (int32_t _2615_i = (int)0, _10136_ = _2567_rnnz; _2615_i < _10136_ ; ++_2615_i)
                {
                  _10135_.push_back(_ptr__2580_rnativeidxs[_ptr__2599_curperm[_2615_i]]);
                }
                auto _10137_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10135_.size()),_10135_.begin(),_10135_.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2562_model,_2575_rshape,_10134_,_10137_)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2616_tnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2566_nnz)));
          _checked_ptr_1<int64_t> _ptr__2616_tnativeidxs(_2616_tnativeidxs ? _2616_tnativeidxs->raw() : nullptr,_2616_tnativeidxs ? _2616_tnativeidxs->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2617_rnativeidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( _2566_nnz,_2561_n ))));
          _checked_ptr_1<int64_t> _ptr__2617_rnativeidxs(_2617_rnativeidxs ? _2617_rnativeidxs->raw() : nullptr,_2617_rnativeidxs ? _2617_rnativeidxs->size(0) : 0);
          _2559_v->inst((int)0,_2616_tnativeidxs);
          int32_t _2618_s0 = safe_mul( _2571_nd1,_2572_d2 );
          int32_t _2619_s1 = _2572_d2;
          int32_t _2620_k = (int)0;
          int32_t _10138_ = (int)0;
          int32_t _10139_ = _2568_d0;
          for (int32_t _2621_i0 = _10138_; _2621_i0 < _10139_; ++_2621_i0)
          {
            {
              int32_t _10140_ = (int)0;
              int32_t _10141_ = _2570_d1;
              for (int32_t _2622_i1 = _10140_; _2622_i1 < _10141_; ++_2622_i1)
              {
                {
                  int32_t _10142_ = (int)0;
                  int32_t _10143_ = _2572_d2;
                  for (int32_t _2623_i2 = _10142_; _2623_i2 < _10143_; ++_2623_i2)
                  {
                    {
                      int32_t _10144_ = (int)0;
                      int32_t _10145_ = _2561_n;
                      for (int32_t _2624_j = _10144_; _2624_j < _10145_; ++_2624_j)
                      {
                        {
                          _ptr__2617_rnativeidxs[safe_add( safe_add( safe_mul( _2621_i0,_2618_s0 ),safe_mul( safe_add( _2622_i1,safe_mul( _2624_j,_2570_d1 ) ),_2619_s1 ) ),_2623_i2 )] = _ptr__2616_tnativeidxs[_2620_k];
                        }
                      }
                      ++ _2620_k;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2562_model,_2575_rshape,nullptr,_2617_rnativeidxs)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.Var.drepeat

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:450:6-454:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2625_vlist) { return mosek::fusion::p_Var::stack(_2625_vlist); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2625_vlist)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _10146_;
  for (int32_t _2626_i = (int)0, _10147_ = (int)((_2625_vlist)->size(0)); _2626_i < _10147_ ; ++_2626_i)
  {
    _10146_.push_back(::mosek::fusion::p_Var::dstack(((*_2625_vlist)(_2626_i)),(int)1));
  }
  auto _10148_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_10146_.size()),_10146_.begin(),_10146_.end()));
  return ::mosek::fusion::p_Var::dstack(_10148_,(int)0);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ src/fusion/Var.monty:414:6-420:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2627_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2628_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2629_v3) { return mosek::fusion::p_Var::vstack(_2627_v1,_2628_v2,_2629_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2627_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2628_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2629_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2627_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2628_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2629_v3.get())}),(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ src/fusion/Var.monty:396:6-401:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2630_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2631_v2) { return mosek::fusion::p_Var::vstack(_2630_v1,_2631_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2630_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2631_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2630_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2631_v2.get())}),(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.vstack
// Method mosek.fusion.Var.vstack @ src/fusion/Var.monty:377:6-381:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2632_v) { return mosek::fusion::p_Var::vstack(_2632_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2632_v)
{
  return ::mosek::fusion::p_Var::dstack(_2632_v,(int)0);
}
// End mosek.fusion.Var.vstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ src/fusion/Var.monty:357:6-363:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2633_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2634_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2635_v3) { return mosek::fusion::p_Var::hstack(_2633_v1,_2634_v2,_2635_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2633_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2634_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2635_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2633_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2634_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2635_v3.get())}),(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ src/fusion/Var.monty:336:6-341:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2636_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2637_v2) { return mosek::fusion::p_Var::hstack(_2636_v1,_2637_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2636_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2637_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2636_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2637_v2.get())}),(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.hstack
// Method mosek.fusion.Var.hstack @ src/fusion/Var.monty:315:6-319:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2638_v) { return mosek::fusion::p_Var::hstack(_2638_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2638_v)
{
  return ::mosek::fusion::p_Var::dstack(_2638_v,(int)1);
}
// End mosek.fusion.Var.hstack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:298:6-91
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2639_v,
    int32_t _2640_dim) { return mosek::fusion::p_Var::stack(_2639_v,_2640_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2639_v,int32_t _2640_dim)
{
  return ::mosek::fusion::p_Var::stack(_2640_dim,_2639_v);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:297:6-130
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2641_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2642_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2643_v3,
    int32_t _2644_dim) { return mosek::fusion::p_Var::stack(_2641_v1,_2642_v2,_2643_v3,_2644_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2641_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2642_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2643_v3,int32_t _2644_dim)
{
  return ::mosek::fusion::p_Var::stack(_2644_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2641_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2642_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2643_v3.get())}));
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:296:6-114
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2645_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2646_v2,
    int32_t _2647_dim) { return mosek::fusion::p_Var::stack(_2645_v1,_2646_v2,_2647_dim); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2645_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2646_v2,int32_t _2647_dim)
{
  return ::mosek::fusion::p_Var::stack(_2647_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2645_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2646_v2.get())}));
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:290:6-293:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2648_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2649_v) { return mosek::fusion::p_Var::stack(_2648_dim,_2649_v); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2648_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2649_v)
{
  int32_t _2650_maxnd = _2648_dim;
  int32_t _10149_ = (int)0;
  int32_t _10150_ = (int)((_2649_v)->size(0));
  for (int32_t _2651_i = _10149_; _2651_i < _10150_; ++_2651_i)
  {
    {
      if ((_2650_maxnd < ((*_2649_v)(_2651_i))->getND()))
      {
        {
          _2650_maxnd = ((*_2649_v)(_2651_i))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2649_v,_2648_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:289:6-131
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2652_dim,
    monty::rc_ptr< ::mosek::fusion::Variable > _2653_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2654_v2,
    monty::rc_ptr< ::mosek::fusion::Variable > _2655_v3) { return mosek::fusion::p_Var::stack(_2652_dim,_2653_v1,_2654_v2,_2655_v3); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2652_dim,monty::rc_ptr< ::mosek::fusion::Variable > _2653_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2654_v2,monty::rc_ptr< ::mosek::fusion::Variable > _2655_v3)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2653_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2654_v2.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2655_v3.get())}),_2652_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.stack
// Method mosek.fusion.Var.stack @ src/fusion/Var.monty:288:6-115
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack
  ( int32_t _2656_dim,
    monty::rc_ptr< ::mosek::fusion::Variable > _2657_v1,
    monty::rc_ptr< ::mosek::fusion::Variable > _2658_v2) { return mosek::fusion::p_Var::stack(_2656_dim,_2657_v1,_2658_v2); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(int32_t _2656_dim,monty::rc_ptr< ::mosek::fusion::Variable > _2657_v1,monty::rc_ptr< ::mosek::fusion::Variable > _2658_v2)
{
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2657_v1.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2658_v2.get())}),_2656_dim);
}
// End mosek.fusion.Var.stack

// Begin mosek.fusion.Var.promote
// Method mosek.fusion.Var.promote @ src/fusion/Var.monty:275:6-285:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote
  ( monty::rc_ptr< ::mosek::fusion::Variable > _2659_v,
    int32_t _2660_nd) { return mosek::fusion::p_Var::promote(_2659_v,_2660_nd); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2659_v,int32_t _2660_nd)
{
  if ((_2660_nd > _2659_v->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2661_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2660_nd)));
      _checked_ptr_1<int32_t> _ptr__2661_shape(_2661_shape ? _2661_shape->raw() : nullptr,_2661_shape ? _2661_shape->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2662_sh = _2659_v->getShape();
      _checked_ptr_1<int32_t> _ptr__2662_sh(_2662_sh ? _2662_sh->raw() : nullptr,_2662_sh ? _2662_sh->size(0) : 0);
      int32_t _10151_ = (int)0;
      int32_t _10152_ = (int)((_2662_sh)->size(0));
      for (int32_t _2663_i = _10151_; _2663_i < _10152_; ++_2663_i)
      {
        {
          _ptr__2661_shape[_2663_i] = _ptr__2662_sh[_2663_i];
        }
      }
      int32_t _10153_ = (int)((_2662_sh)->size(0));
      int32_t _10154_ = _2660_nd;
      for (int32_t _2664_i = _10153_; _2664_i < _10154_; ++_2664_i)
      {
        {
          _ptr__2661_shape[_2664_i] = (int)1;
        }
      }
      return _2659_v->__mosek_2fusion_2Variable__reshape(_2661_shape);
    }
  }
  else
  {
    {
      return _2659_v;
    }
  }
}
// End mosek.fusion.Var.promote

// Begin mosek.fusion.Var.dstack
// Method mosek.fusion.Var.dstack @ src/fusion/Var.monty:151:6-267:7
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2665_v,int32_t _2666_dim)
{
  if ((_2666_dim < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2667_m0 = nullptr;
  {
    int32_t _10155_ = (int)0;
    int32_t _10156_ = (int)((_2665_v)->size(0));
    for (int32_t _2668_i = _10155_; _2668_i < _10156_; ++_2668_i)
    {
      {
        if ((NULL == _2667_m0.get()))
        {
          {
            _2667_m0 = ((*_2665_v)(_2668_i))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2665_v)(_2668_i))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2665_v)(_2668_i))->__mosek_2fusion_2Variable__getModel() != _2667_m0)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2669_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _10157_;
            bool _10158_ = ((int)((mosek::fusion::p_Model::_get_impl(_2667_m0.get())->getName()).size()) > (int)0);
            if (_10158_)
            {
              _10157_ = mosek::fusion::p_Model::_get_impl(_2667_m0.get())->getName();
            }
            else
            {
              _10157_ = std::string ("?");
            }
            std::string _2670_m1name = _10157_;
            std::string _10159_;
            bool _10160_ = ((int)((mosek::fusion::p_Model::_get_impl(((*_2665_v)(_2668_i))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_10160_)
            {
              _10159_ = mosek::fusion::p_Model::_get_impl(((*_2665_v)(_2668_i))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _10159_ = std::string ("?");
            }
            std::string _2671_m2name = _10159_;
            _2669_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2670_m1name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2671_m2name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2669_sb->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2665_v)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2665_v)->size(0)) == (int)1))
  {
    {
      return ((*_2665_v)((int)0));
    }
  }
  else
  {
    {
      int32_t _2672_n = (int)((_2665_v)->size(0));
      std::vector<int32_t> _10161_;
      for (int32_t _2674_i = (int)0, _10162_ = _2672_n; _2674_i < _10162_ ; ++_2674_i)
      {
        _10161_.push_back(((*_2665_v)(_2674_i))->numInst());
      }
      auto _10163_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10161_.size()),_10161_.begin(),_10161_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2673_numnz = _10163_;
      _checked_ptr_1<int32_t> _ptr__2673_numnz(_2673_numnz ? _2673_numnz->raw() : nullptr,_2673_numnz ? _2673_numnz->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _10164_;
      for (int32_t _2676_i = (int)0, _10165_ = _2672_n; _2676_i < _10165_ ; ++_2676_i)
      {
        _10164_.push_back(((*_2665_v)(_2676_i))->getShape());
      }
      auto _10166_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_10164_.size()),_10164_.begin(),_10164_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _2675_shapes = _10166_;
      std::vector<int32_t> _10167_;
      for (int32_t _2678_i = (int)0, _10168_ = _2672_n; _2678_i < _10168_ ; ++_2678_i)
      {
        _10167_.push_back((int)((((*_2675_shapes)(_2678_i)))->size(0)));
      }
      auto _10169_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10167_.size()),_10167_.begin(),_10167_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2677_nds = _10169_;
      _checked_ptr_1<int32_t> _ptr__2677_nds(_2677_nds ? _2677_nds->raw() : nullptr,_2677_nds ? _2677_nds->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2679_shape0 = ((*_2675_shapes)((int)0));
      _checked_ptr_1<int32_t> _ptr__2679_shape0(_2679_shape0 ? _2679_shape0->raw() : nullptr,_2679_shape0 ? _2679_shape0->size(0) : 0);
      int32_t _2680_nd0 = _ptr__2677_nds[(int)0];
      int32_t _2681_rnnz = (int)0;
      int32_t _10170_ = (int)0;
      int32_t _10171_ = _2672_n;
      for (int32_t _2682_i = _10170_; _2682_i < _10171_; ++_2682_i)
      {
        {
          _2681_rnnz += _ptr__2673_numnz[_2682_i];
        }
      }
      int32_t _2683_rnd = safe_add( _2666_dim,(int)1 );
      int32_t _10172_ = (int)0;
      int32_t _10173_ = _2672_n;
      for (int32_t _2684_i = _10172_; _2684_i < _10173_; ++_2684_i)
      {
        {
          if ((_2683_rnd < _ptr__2677_nds[_2684_i]))
          {
            {
              _2683_rnd = _ptr__2677_nds[_2684_i];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2685_rshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2683_rnd)));
      _checked_ptr_1<int32_t> _ptr__2685_rshape(_2685_rshape ? _2685_rshape->raw() : nullptr,_2685_rshape ? _2685_rshape->size(0) : 0);
      int32_t _10174_ = (int)0;
      int32_t _10175_ = _2680_nd0;
      for (int32_t _2686_i = _10174_; _2686_i < _10175_; ++_2686_i)
      {
        {
          _ptr__2685_rshape[_2686_i] = _ptr__2679_shape0[_2686_i];
        }
      }
      int32_t _10176_ = _2680_nd0;
      int32_t _10177_ = _2683_rnd;
      for (int32_t _2687_i = _10176_; _2687_i < _10177_; ++_2687_i)
      {
        {
          _ptr__2685_rshape[_2687_i] = (int)1;
        }
      }
      _ptr__2685_rshape[_2666_dim] = (int)0;
      int32_t _10178_ = (int)0;
      int32_t _10179_ = _2672_n;
      for (int32_t _2688_i = _10178_; _2688_i < _10179_; ++_2688_i)
      {
        {
          int32_t _10180_;
          bool _10181_ = ((int)((((*_2675_shapes)(_2688_i)))->size(0)) > _2666_dim);
          if (_10181_)
          {
            _10180_ = ((*((*_2675_shapes)(_2688_i)))(_2666_dim));
          }
          else
          {
            _10180_ = (int)1;
          }
          _ptr__2685_rshape[_2666_dim] += _10180_;
        }
      }
      int32_t _10182_ = (int)0;
      int32_t _10183_ = _2672_n;
      for (int32_t _2689_i = _10182_; _2689_i < _10183_; ++_2689_i)
      {
        {
          int32_t _10184_ = (int)0;
          int32_t _10185_ = (int)((((*_2675_shapes)(_2689_i)))->size(0));
          for (int32_t _2690_j = _10184_; _2690_j < _10185_; ++_2690_j)
          {
            {
              if (((_2690_j != _2666_dim) && (((*((*_2675_shapes)(_2689_i)))(_2690_j)) != _ptr__2685_rshape[_2690_j])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int32_t _10186_ = (int)((((*_2675_shapes)(_2689_i)))->size(0));
          int32_t _10187_ = _2683_rnd;
          for (int32_t _2691_j = _10186_; _2691_j < _10187_; ++_2691_j)
          {
            {
              if (((_2691_j != _2666_dim) && ((int)1 != _ptr__2685_rshape[_2691_j])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2692_rnidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2681_rnnz)));
      _checked_ptr_1<int64_t> _ptr__2692_rnidxs(_2692_rnidxs ? _2692_rnidxs->raw() : nullptr,_2692_rnidxs ? _2692_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2693_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2681_rnnz)));
      _checked_ptr_1<int64_t> _ptr__2693_rsp(_2693_rsp ? _2693_rsp->raw() : nullptr,_2693_rsp ? _2693_rsp->size(0) : 0);
      std::vector<int32_t> _10188_;
      for (int32_t _2695_i = (int)0, _10189_ = (int)((_2665_v)->size(0)); _2695_i < _10189_ ; ++_2695_i)
      {
        int32_t _10190_;
        bool _10191_ = (_2666_dim < (int)((((*_2675_shapes)(_2695_i)))->size(0)));
        if (_10191_)
        {
          _10190_ = ((*((*_2675_shapes)(_2695_i)))(_2666_dim));
        }
        else
        {
          _10190_ = (int)1;
        }
        _10188_.push_back(_10190_);
      }
      auto _10192_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10188_.size()),_10188_.begin(),_10188_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2694_sdims = _10192_;
      _checked_ptr_1<int32_t> _ptr__2694_sdims(_2694_sdims ? _2694_sdims->raw() : nullptr,_2694_sdims ? _2694_sdims->size(0) : 0);
      int32_t _2696_d0 = (int)1;
      int32_t _10193_ = (int)0;
      int32_t _10194_ = _2666_dim;
      for (int32_t _2697_i = _10193_; _2697_i < _10194_; ++_2697_i)
      {
        {
          int32_t _10195_;
          bool _10196_ = (_2697_i < (int)((_2679_shape0)->size(0)));
          if (_10196_)
          {
            _10195_ = _ptr__2679_shape0[_2697_i];
          }
          else
          {
            _10195_ = (int)1;
          }
          _2696_d0 *= _10195_;
        }
      }
      int32_t _2698_d1 = (int)0;
      int32_t _10197_ = (int)0;
      int32_t _10198_ = _2672_n;
      for (int32_t _2699_i = _10197_; _2699_i < _10198_; ++_2699_i)
      {
        {
          _2698_d1 += _ptr__2694_sdims[_2699_i];
        }
      }
      int32_t _2700_d2 = (int)1;
      int32_t _10199_ = safe_add( _2666_dim,(int)1 );
      int32_t _10200_ = (int)((_2679_shape0)->size(0));
      for (int32_t _2701_i = _10199_; _2701_i < _10200_; ++_2701_i)
      {
        {
          _2700_d2 *= _ptr__2679_shape0[_2701_i];
        }
      }
      if ((_2696_d0 == (int)1))
      {
        {
          int32_t _2702_k = (int)0;
          int64_t _2703_kspofs = (int)0;
          int32_t _10201_ = (int)0;
          int32_t _10202_ = _2672_n;
          for (int32_t _2704_i = _10201_; _2704_i < _10202_; ++_2704_i)
          {
            {
              ((*_2665_v)(_2704_i))->inst(_2702_k,_2693_rsp,_2702_k,_2692_rnidxs);
              int32_t _10203_ = (int)0;
              int32_t _10204_ = _ptr__2673_numnz[_2704_i];
              for (int32_t _2705_j = _10203_; _2705_j < _10204_; ++_2705_j)
              {
                {
                  _ptr__2693_rsp[_2702_k] += _2703_kspofs;
                  ++ _2702_k;
                }
              }
              _2703_kspofs += ::mosek::fusion::p_Set::size(((*_2675_shapes)(_2704_i)));
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _10205_;
          bool _10206_ = (_2681_rnnz < safe_mul( safe_mul( _2696_d0,_2698_d1 ),_2700_d2 ));
          if (_10206_)
          {
            _10205_ = _2693_rsp;
          }
          else
          {
            _10205_ = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2667_m0,_2685_rshape,_10205_,_2692_rnidxs)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int32_t _2706_b = (int)0;
          int32_t _10207_ = (int)0;
          int32_t _10208_ = _2672_n;
          for (int32_t _2707_i = _10207_; _2707_i < _10208_; ++_2707_i)
          {
            {
              _2706_b += ((*_2665_v)(_2707_i))->inst(_2706_b,_2693_rsp,_2706_b,_2692_rnidxs);
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2708_curperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2681_rnnz)));
          _checked_ptr_1<int32_t> _ptr__2708_curperm(_2708_curperm ? _2708_curperm->raw() : nullptr,_2708_curperm ? _2708_curperm->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2709_tgtperm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2681_rnnz)));
          _checked_ptr_1<int32_t> _ptr__2709_tgtperm(_2709_tgtperm ? _2709_tgtperm->raw() : nullptr,_2709_tgtperm ? _2709_tgtperm->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2710_offset = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2672_n)));
          _checked_ptr_1<int32_t> _ptr__2710_offset(_2710_offset ? _2710_offset->raw() : nullptr,_2710_offset ? _2710_offset->size(0) : 0);
          int32_t _10209_ = (int)0;
          int32_t _10210_ = (_2672_n - (int)1);
          for (int32_t _2711_i = _10209_; _2711_i < _10210_; ++_2711_i)
          {
            {
              _ptr__2710_offset[safe_add( _2711_i,(int)1 )] = safe_add( _ptr__2710_offset[_2711_i],_ptr__2694_sdims[_2711_i] );
            }
          }
          int32_t _10211_ = (int)0;
          int32_t _10212_ = _2681_rnnz;
          for (int32_t _2712_i = _10211_; _2712_i < _10212_; ++_2712_i)
          {
            {
              _ptr__2708_curperm[_2712_i] = _2712_i;
            }
          }
          int32_t _2713_k = (int)0;
          int32_t _10213_ = (int)0;
          int32_t _10214_ = _2672_n;
          for (int32_t _2714_i = _10213_; _2714_i < _10214_; ++_2714_i)
          {
            {
              int32_t _10215_ = (int)0;
              int32_t _10216_ = _ptr__2673_numnz[_2714_i];
              for (int32_t _2715_j = _10215_; _2715_j < _10216_; ++_2715_j)
              {
                {
                  int64_t _2716_i0 = (_ptr__2693_rsp[_2713_k] / safe_mul( _ptr__2694_sdims[_2714_i],_2700_d2 ));
                  int64_t _2717_i1 = ((_ptr__2693_rsp[_2713_k] / _2700_d2) % _ptr__2694_sdims[_2714_i]);
                  int64_t _2718_i2 = (_ptr__2693_rsp[_2713_k] % _2700_d2);
                  _ptr__2693_rsp[_2713_k] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2716_i0,_2698_d1 ),_2717_i1 ),_ptr__2710_offset[_2714_i] ),_2700_d2 ),_2718_i2 );
                  ++ _2713_k;
                }
              }
            }
          }
          int32_t _2719_maxdim = (int)1;
          int32_t _10217_ = (int)0;
          int32_t _10218_ = _2683_rnd;
          for (int32_t _2720_i = _10217_; _2720_i < _10218_; ++_2720_i)
          {
            {
              int32_t _10219_;
              bool _10220_ = (_2719_maxdim < _ptr__2685_rshape[_2720_i]);
              if (_10220_)
              {
                _10219_ = _ptr__2685_rshape[_2720_i];
              }
              else
              {
                _10219_ = _2719_maxdim;
              }
              _2719_maxdim = _10219_;
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _2721_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2683_rnd)));
          _checked_ptr_1<int64_t> _ptr__2721_s(_2721_s ? _2721_s->raw() : nullptr,_2721_s ? _2721_s->size(0) : 0);
          _ptr__2721_s[(_2683_rnd - (int)1)] = (int)1;
          int32_t _10221_ = (int)1;
          int32_t _10222_ = _2683_rnd;
          for (int32_t _2722_i = _10221_; _2722_i < _10222_; ++_2722_i)
          {
            {
              _ptr__2721_s[((_2683_rnd - _2722_i) - (int)1)] = safe_mul( _ptr__2721_s[(_2683_rnd - _2722_i)],_ptr__2685_rshape[(_2683_rnd - _2722_i)] );
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2723_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2719_maxdim,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__2723_ptr(_2723_ptr ? _2723_ptr->raw() : nullptr,_2723_ptr ? _2723_ptr->size(0) : 0);
          int32_t _10223_ = (int)0;
          int32_t _10224_ = _2683_rnd;
          for (int32_t _2724_ii = _10223_; _2724_ii < _10224_; ++_2724_ii)
          {
            {
              int32_t _2725_i = ((_2683_rnd - _2724_ii) - (int)1);
              int32_t _10225_ = (int)0;
              int32_t _10226_ = safe_add( _ptr__2685_rshape[_2725_i],(int)1 );
              for (int32_t _2726_j = _10225_; _2726_j < _10226_; ++_2726_j)
              {
                {
                  _ptr__2723_ptr[_2726_j] = (int)0;
                }
              }
              int32_t _10227_ = (int)0;
              int32_t _10228_ = _2681_rnnz;
              for (int32_t _2727_j = _10227_; _2727_j < _10228_; ++_2727_j)
              {
                {
                  ++ _ptr__2723_ptr[safe_add( ((_ptr__2693_rsp[_2727_j] / _ptr__2721_s[_2725_i]) % _ptr__2685_rshape[_2725_i]),(int)1 )];
                }
              }
              int32_t _10229_ = (int)0;
              int32_t _10230_ = _ptr__2685_rshape[_2725_i];
              for (int32_t _2728_j = _10229_; _2728_j < _10230_; ++_2728_j)
              {
                {
                  _ptr__2723_ptr[safe_add( _2728_j,(int)1 )] += _ptr__2723_ptr[_2728_j];
                }
              }
              int32_t _10231_ = (int)0;
              int32_t _10232_ = _2681_rnnz;
              for (int32_t _2729_jj = _10231_; _2729_jj < _10232_; ++_2729_jj)
              {
                {
                  int32_t _2730_j = _ptr__2708_curperm[_2729_jj];
                  int64_t _2731_idx = ((_ptr__2693_rsp[_2730_j] / _ptr__2721_s[_2725_i]) % _ptr__2685_rshape[_2725_i]);
                  _ptr__2709_tgtperm[_ptr__2723_ptr[_2731_idx]] = _2730_j;
                  ++ _ptr__2723_ptr[_2731_idx];
                }
              }
              std::shared_ptr< monty::ndarray< int32_t,1 > > _2732_tmp = _2708_curperm;
              _checked_ptr_1<int32_t> _ptr__2732_tmp(_2732_tmp ? _2732_tmp->raw() : nullptr,_2732_tmp ? _2732_tmp->size(0) : 0);
              _2708_curperm = _2709_tgtperm;
              _ptr__2708_curperm.update(_2708_curperm ? _2708_curperm->raw() : nullptr, _2708_curperm ? _2708_curperm->size(0) : 0);
              _2709_tgtperm = _2732_tmp;
              _ptr__2709_tgtperm.update(_2709_tgtperm ? _2709_tgtperm->raw() : nullptr, _2709_tgtperm ? _2709_tgtperm->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< int64_t,1 > > _10233_;
          bool _10234_ = (_2681_rnnz < safe_mul( safe_mul( _2696_d0,_2698_d1 ),_2700_d2 ));
          if (_10234_)
          {
            std::vector<int64_t> _10235_;
            for (int32_t _2733_i = (int)0, _10236_ = _2681_rnnz; _2733_i < _10236_ ; ++_2733_i)
            {
              _10235_.push_back(_ptr__2693_rsp[_ptr__2708_curperm[_2733_i]]);
            }
            auto _10237_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10235_.size()),_10235_.begin(),_10235_.end()));
            _10233_ = _10237_;
          }
          else
          {
            _10233_ = nullptr;
          }
          std::vector<int64_t> _10238_;
          for (int32_t _2734_i = (int)0, _10239_ = _2681_rnnz; _2734_i < _10239_ ; ++_2734_i)
          {
            _10238_.push_back(_ptr__2692_rnidxs[_ptr__2708_curperm[_2734_i]]);
          }
          auto _10240_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10238_.size()),_10238_.begin(),_10238_.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2667_m0,_2685_rshape,_10233_,_10240_)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
// End mosek.fusion.Var.dstack

void mosek::fusion::p_Var::destroy()
{
}
void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }
// } class Var
// class BoundInterfaceConstraint { // @ src/fusion/BoundInterfaceConstraint.mbi:26:4-69:5
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }
mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint
  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.BoundInterfaceConstraint.ctor @ src/fusion/BoundInterfaceConstraint.mbi:39:6-47:7
mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2735_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2736_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2737_nativeidxs,
    bool _2738_islower)
{ return new mosek::fusion::BoundInterfaceConstraint(_2735_m,_2736_shape,_2737_nativeidxs,_2738_islower); }
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2735_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2736_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2737_nativeidxs,
    bool _2738_islower) : 
   BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this))
{ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2735_m,_2736_shape,_2737_nativeidxs,_2738_islower); }
void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2735_m,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2736_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2737_nativeidxs,
    bool _2738_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2736_shape(_2736_shape ? _2736_shape->raw() : nullptr, _2736_shape ? _2736_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2737_nativeidxs(_2737_nativeidxs ? _2737_nativeidxs->raw() : nullptr, _2737_nativeidxs ? _2737_nativeidxs->size(0) : 0);
    mosek::fusion::p_SliceConstraint::_initialize(_2735_m,_2736_shape,_2737_nativeidxs);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2738_islower;
  }
}
// mosek.fusion.BoundInterfaceConstraint.ctor

// mosek.fusion.BoundInterfaceConstraint.ctor @ src/fusion/BoundInterfaceConstraint.mbi:31:6-37:7
mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2739_c,
    bool _2740_islower)
{ return new mosek::fusion::BoundInterfaceConstraint(_2739_c,_2740_islower); }
mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2739_c,
    bool _2740_islower) : 
   BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this))
{ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2739_c,_2740_islower); }
void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2739_c,
    bool _2740_islower)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_SliceConstraint::_initialize(_2739_c);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2740_islower;
  }
}
// mosek.fusion.BoundInterfaceConstraint.ctor

// Begin mosek.fusion.BoundInterfaceConstraint.dual
// Method mosek.fusion.BoundInterfaceConstraint.dual @ src/fusion/BoundInterfaceConstraint.mbi:64:6-68:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceConstraint :: dual() { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceConstraint::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2741_target = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2741_target(_2741_target ? _2741_target->raw() : nullptr,_2741_target ? _2741_target->size(0) : 0);
  dual_lu((int)0,_2741_target,islower);
  return _2741_target;
}
// End mosek.fusion.BoundInterfaceConstraint.dual

// Begin mosek.fusion.BoundInterfaceConstraint.slice
// Method mosek.fusion.BoundInterfaceConstraint.slice @ src/fusion/BoundInterfaceConstraint.mbi:62:6-124
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2742_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2743_lasta) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2742_firsta,_2743_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2742_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2743_lasta) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2742_firsta,_2743_lasta); }
/* override: mosek.fusion.Constraint.slice*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2742_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2743_lasta) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2742_firsta,_2743_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2742_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2743_lasta)
{
  _checked_ptr_1<int32_t> _ptr__2742_firsta(_2742_firsta ? _2742_firsta->raw() : nullptr, _2742_firsta ? _2742_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2743_lasta(_2743_lasta ? _2743_lasta->raw() : nullptr, _2743_lasta ? _2743_lasta->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2744_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2742_firsta,_2743_lasta);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2744_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.slice

// Begin mosek.fusion.BoundInterfaceConstraint.slice
// Method mosek.fusion.BoundInterfaceConstraint.slice @ src/fusion/BoundInterfaceConstraint.mbi:61:6-122
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(int32_t _2745_first,int32_t _2746_last) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2745_first,_2746_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(int32_t _2745_first,int32_t _2746_last) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2745_first,_2746_last); }
/* override: mosek.fusion.Constraint.slice*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(int32_t _2745_first,int32_t _2746_last) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2745_first,_2746_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(int32_t _2745_first,int32_t _2746_last)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2747_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2745_first,_2746_last);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2747_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.slice

// Begin mosek.fusion.BoundInterfaceConstraint.index
// Method mosek.fusion.BoundInterfaceConstraint.index @ src/fusion/BoundInterfaceConstraint.mbi:60:6-115
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2748_idxa) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2748_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2748_idxa) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2748_idxa); }
/* override: mosek.fusion.Constraint.index*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2748_idxa) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2748_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2748_idxa)
{
  _checked_ptr_1<int32_t> _ptr__2748_idxa(_2748_idxa ? _2748_idxa->raw() : nullptr, _2748_idxa ? _2748_idxa->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2749_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2748_idxa);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2749_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.index

// Begin mosek.fusion.BoundInterfaceConstraint.index
// Method mosek.fusion.BoundInterfaceConstraint.index @ src/fusion/BoundInterfaceConstraint.mbi:59:6-114
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(int32_t _2750_idx) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2750_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(int32_t _2750_idx) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2750_idx); }
/* override: mosek.fusion.Constraint.index*/
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(int32_t _2750_idx) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2750_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(int32_t _2750_idx)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _2751_c = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2750_idx);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2751_c)).as<::mosek::fusion::Constraint>();
}
// End mosek.fusion.BoundInterfaceConstraint.index

// Begin mosek.fusion.BoundInterfaceConstraint.from_
// Method mosek.fusion.BoundInterfaceConstraint.from_ @ src/fusion/BoundInterfaceConstraint.mbi:49:6-57:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__from_(monty::rc_ptr< ::mosek::fusion::Constraint > _2752_c)
{
  monty::rc_ptr< ::mosek::fusion::Constraint > _10241_ = _2752_c;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::SliceConstraint*>(_10241_.get()))
  {
    ::mosek::fusion::SliceConstraint::t _2753_cc (dynamic_cast<::mosek::fusion::SliceConstraint*>(_10241_.get()));
    {
      return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_2753_cc,islower);
    }
  }
  else
  {
    mosek::fusion::Constraint::t _2754_cc = _10241_;
    {
      return nullptr;
    }
  }
}
// End mosek.fusion.BoundInterfaceConstraint.from_

void mosek::fusion::p_BoundInterfaceConstraint::destroy()
{
}
void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }
// } class BoundInterfaceConstraint
// class LinearPSDConstraint { // @ src/fusion/LinearPSDConstraint.monty:17:4-183:5
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }
mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint
  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearPSDConstraint.ctor @ src/fusion/LinearPSDConstraint.monty:48:6-58:7
mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2755_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2756_m)
{ return new mosek::fusion::LinearPSDConstraint(_2755_c,_2756_m); }
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2755_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2756_m) : 
   LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this))
{ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2755_c,_2756_m); }
void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2755_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2756_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2755_c,_2756_m);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2755_c)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2755_c)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2755_c)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2755_c)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2755_c)->shape;
  }
}
// mosek.fusion.LinearPSDConstraint.ctor

// mosek.fusion.LinearPSDConstraint.ctor @ src/fusion/LinearPSDConstraint.monty:27:6-46:7
mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2757_model,
    const std::string &  _2758_name,
    int32_t _2759_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2760_shape,
    int32_t _2761_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2762_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2763_slackidxs)
{ return new mosek::fusion::LinearPSDConstraint(_2757_model,_2758_name,_2759_conid,_2760_shape,_2761_conedim,_2762_nativeidxs,_2763_slackidxs); }
mosek::fusion::LinearPSDConstraint::LinearPSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2757_model,
    const std::string &  _2758_name,
    int32_t _2759_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2760_shape,
    int32_t _2761_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2762_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2763_slackidxs) : 
   LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this))
{ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2757_model,_2758_name,_2759_conid,_2760_shape,_2761_conedim,_2762_nativeidxs,_2763_slackidxs); }
void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2757_model,
    const std::string &  _2758_name,
    int32_t _2759_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2760_shape,
    int32_t _2761_conedim,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2762_nativeidxs,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2763_slackidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2760_shape(_2760_shape ? _2760_shape->raw() : nullptr, _2760_shape ? _2760_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2762_nativeidxs(_2762_nativeidxs ? _2762_nativeidxs->raw() : nullptr, _2762_nativeidxs ? _2762_nativeidxs->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2763_slackidxs(_2763_slackidxs ? _2763_slackidxs->raw() : nullptr, _2763_slackidxs ? _2763_slackidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2757_model,_2758_name,_2760_shape,_2762_nativeidxs,_2759_conid);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2759_conid;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2763_slackidxs;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2762_nativeidxs;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2761_conedim;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2760_shape;
  }
}
// mosek.fusion.LinearPSDConstraint.ctor

// Begin mosek.fusion.LinearPSDConstraint.domainToString
// Method mosek.fusion.LinearPSDConstraint.domainToString @ src/fusion/LinearPSDConstraint.monty:174:6-182:7
void mosek::fusion::p_LinearPSDConstraint::domainToString(int64_t _2764_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2765_sb)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2766_k = ::mosek::fusion::p_Set::idxtokey(shape,_2764_i);
  _checked_ptr_1<int32_t> _ptr__2766_k(_2766_k ? _2766_k->raw() : nullptr,_2766_k ? _2766_k->size(0) : 0);
  _2765_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2766_k[(int)0]);
  int32_t _10242_ = (int)1;
  int32_t _10243_ = (int)((_2766_k)->size(0));
  for (int32_t _2767_j = _10242_; _2767_j < _10243_; ++_2767_j)
  {
    {
      _2765_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2766_k[_2767_j]);
    }
  }
  _2765_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int32_t _10244_ = (int)1;
  int32_t _10245_ = (int)((_2766_k)->size(0));
  for (int32_t _2768_j = _10244_; _2768_j < _10245_; ++_2768_j)
  {
    {
      _2765_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2768_j)));
    }
  }
  _2765_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
// End mosek.fusion.LinearPSDConstraint.domainToString

// Begin mosek.fusion.LinearPSDConstraint.clone
// Method mosek.fusion.LinearPSDConstraint.clone @ src/fusion/LinearPSDConstraint.monty:60:6-63:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2769_m)
{
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2769_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.LinearPSDConstraint.clone

void mosek::fusion::p_LinearPSDConstraint::destroy()
{
  shape.reset();
  slackidxs.reset();
  nativeidxs.reset();
}
void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }
// } class LinearPSDConstraint
// class PSDConstraint { // @ src/fusion/SemidefiniteConstraint.mbi:17:4-146:5
mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }
mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_PSDConstraint::p_PSDConstraint
  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.PSDConstraint.ctor @ src/fusion/SemidefiniteConstraint.mbi:104:6-117:7
mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2770_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2771_m)
{ return new mosek::fusion::PSDConstraint(_2770_c,_2771_m); }
mosek::fusion::PSDConstraint::PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2770_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2771_m) : 
   PSDConstraint(new mosek::fusion::p_PSDConstraint(this))
{ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2770_c,_2771_m); }
void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2770_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2771_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2770_c,_2771_m);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2770_c)->conedim1;
  }
}
// mosek.fusion.PSDConstraint.ctor

// mosek.fusion.PSDConstraint.ctor @ src/fusion/SemidefiniteConstraint.mbi:78:6-102:7
mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2772_model,
    const std::string &  _2773_name,
    int32_t _2774_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2775_shape,
    int32_t _2776_conedim0,
    int32_t _2777_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2778_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2779_nativeidxs)
{ return new mosek::fusion::PSDConstraint(_2772_model,_2773_name,_2774_conid,_2775_shape,_2776_conedim0,_2777_conedim1,_2778_slackidxs,_2779_nativeidxs); }
mosek::fusion::PSDConstraint::PSDConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2772_model,
    const std::string &  _2773_name,
    int32_t _2774_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2775_shape,
    int32_t _2776_conedim0,
    int32_t _2777_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2778_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2779_nativeidxs) : 
   PSDConstraint(new mosek::fusion::p_PSDConstraint(this))
{ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2772_model,_2773_name,_2774_conid,_2775_shape,_2776_conedim0,_2777_conedim1,_2778_slackidxs,_2779_nativeidxs); }
void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2772_model,
    const std::string &  _2773_name,
    int32_t _2774_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2775_shape,
    int32_t _2776_conedim0,
    int32_t _2777_conedim1,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _2778_slackidxs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2779_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2775_shape(_2775_shape ? _2775_shape->raw() : nullptr, _2775_shape ? _2775_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__2778_slackidxs(_2778_slackidxs ? _2778_slackidxs->raw() : nullptr, _2778_slackidxs ? _2778_slackidxs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2779_nativeidxs(_2779_nativeidxs ? _2779_nativeidxs->raw() : nullptr, _2779_nativeidxs ? _2779_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2772_model,_2773_name,_2775_shape,::mosek::fusion::p_PSDConstraint::computenidxs(_2775_shape,_2776_conedim0,_2777_conedim1,_2779_nativeidxs),_2774_conid);
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2774_conid;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2779_nativeidxs;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2778_slackidxs;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2773_name;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2775_shape;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2776_conedim0;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2777_conedim1;
    names_flushed = false;
  }
}
// mosek.fusion.PSDConstraint.ctor

// Begin mosek.fusion.PSDConstraint.toString
// Method mosek.fusion.PSDConstraint.toString @ src/fusion/SemidefiniteConstraint.mbi:133:6-145:7
std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_PSDConstraint::toString()
{
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
// End mosek.fusion.PSDConstraint.toString

// Begin mosek.fusion.PSDConstraint.clone
// Method mosek.fusion.PSDConstraint.clone @ src/fusion/SemidefiniteConstraint.mbi:119:6-122:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2780_m)
{
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2780_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.PSDConstraint.clone

// Begin mosek.fusion.PSDConstraint.computenidxs
// Method mosek.fusion.PSDConstraint.computenidxs @ src/fusion/SemidefiniteConstraint.mbi:31:6-72:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int32_t,1 > > _2781_shape,int32_t _2782_d0,int32_t _2783_d1,std::shared_ptr< monty::ndarray< int32_t,1 > > _2784_nativeidxs)
{
  _checked_ptr_1<int32_t> _ptr__2781_shape(_2781_shape ? _2781_shape->raw() : nullptr, _2781_shape ? _2781_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2784_nativeidxs(_2784_nativeidxs ? _2784_nativeidxs->raw() : nullptr, _2784_nativeidxs ? _2784_nativeidxs->size(0) : 0);
  int32_t _2785_nd = (int)((_2781_shape)->size(0));
  bool _2786_tril = (_2782_d0 < _2783_d1);
  int32_t _10246_;
  bool _10247_ = _2786_tril;
  if (_10247_)
  {
    _10246_ = _2782_d0;
  }
  else
  {
    _10246_ = _2783_d1;
  }
  int32_t _2787_conedim0 = _10246_;
  int32_t _10248_;
  bool _10249_ = _2786_tril;
  if (_10249_)
  {
    _10248_ = _2783_d1;
  }
  else
  {
    _10248_ = _2782_d0;
  }
  int32_t _2788_conedim1 = _10248_;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2789_dim = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1),(int32_t)((int)1)});
  _checked_ptr_1<int32_t> _ptr__2789_dim(_2789_dim ? _2789_dim->raw() : nullptr,_2789_dim ? _2789_dim->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2790_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int32_t> _ptr__2790_stride(_2790_stride ? _2790_stride->raw() : nullptr,_2790_stride ? _2790_stride->size(0) : 0);
  int32_t _2791_size = (int)1;
  int32_t _10250_ = (int)0;
  int32_t _10251_ = (int)((_2781_shape)->size(0));
  for (int32_t _2792_i = _10250_; _2792_i < _10251_; ++_2792_i)
  {
    {
      _2791_size *= _ptr__2781_shape[_2792_i];
    }
  }
  int32_t _10252_ = (int)0;
  int32_t _10253_ = _2787_conedim0;
  for (int32_t _2793_i = _10252_; _2793_i < _10253_; ++_2793_i)
  {
    {
      _ptr__2789_dim[(int)0] *= _ptr__2781_shape[_2793_i];
    }
  }
  _ptr__2789_dim[(int)1] = _ptr__2781_shape[_2787_conedim0];
  int32_t _10254_ = safe_add( _2787_conedim0,(int)1 );
  int32_t _10255_ = _2788_conedim1;
  for (int32_t _2794_i = _10254_; _2794_i < _10255_; ++_2794_i)
  {
    {
      _ptr__2789_dim[(int)2] *= _ptr__2781_shape[_2794_i];
    }
  }
  _ptr__2789_dim[(int)3] = _ptr__2781_shape[_2788_conedim1];
  int32_t _10256_ = safe_add( _2788_conedim1,(int)1 );
  int32_t _10257_ = _2785_nd;
  for (int32_t _2795_i = _10256_; _2795_i < _10257_; ++_2795_i)
  {
    {
      _ptr__2789_dim[(int)4] *= _ptr__2781_shape[_2795_i];
    }
  }
  _ptr__2790_stride[(int)4] = (int)1;
  int32_t _10258_ = (int)1;
  int32_t _10259_ = (int)5;
  for (int32_t _2796_i = _10258_; _2796_i < _10259_; ++_2796_i)
  {
    {
      _ptr__2790_stride[(((int)5 - _2796_i) - (int)1)] = safe_mul( _ptr__2790_stride[((int)5 - _2796_i)],_ptr__2789_dim[((int)5 - _2796_i)] );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2797_nidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2791_size)));
  _checked_ptr_1<int32_t> _ptr__2797_nidxs(_2797_nidxs ? _2797_nidxs->raw() : nullptr,_2797_nidxs ? _2797_nidxs->size(0) : 0);
  int32_t _2798_k = (int)0;
  if (_2786_tril)
  {
    {
      int32_t _10260_ = (int)0;
      int32_t _10261_ = _ptr__2789_dim[(int)0];
      for (int32_t _2799_i0 = _10260_; _2799_i0 < _10261_; ++_2799_i0)
      {
        {
          int32_t _10262_ = (int)0;
          int32_t _10263_ = _ptr__2789_dim[(int)1];
          for (int32_t _2800_i1 = _10262_; _2800_i1 < _10263_; ++_2800_i1)
          {
            {
              int32_t _10264_ = (int)0;
              int32_t _10265_ = _ptr__2789_dim[(int)2];
              for (int32_t _2801_i2 = _10264_; _2801_i2 < _10265_; ++_2801_i2)
              {
                {
                  int32_t _10266_ = _2800_i1;
                  int32_t _10267_ = _ptr__2789_dim[(int)1];
                  for (int32_t _2802_i3 = _10266_; _2802_i3 < _10267_; ++_2802_i3)
                  {
                    {
                      int32_t _10268_ = (int)0;
                      int32_t _10269_ = _ptr__2789_dim[(int)4];
                      for (int32_t _2803_i4 = _10268_; _2803_i4 < _10269_; ++_2803_i4)
                      {
                        {
                          _ptr__2797_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2799_i0,_ptr__2790_stride[(int)0] ),safe_mul( _2800_i1,_ptr__2790_stride[(int)1] ) ),safe_mul( _2801_i2,_ptr__2790_stride[(int)2] ) ),safe_mul( _2802_i3,_ptr__2790_stride[(int)3] ) ),safe_mul( _2803_i4,_ptr__2790_stride[(int)4] ) )] = _ptr__2784_nativeidxs[_2798_k];
                          _ptr__2797_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2799_i0,_ptr__2790_stride[(int)0] ),safe_mul( _2802_i3,_ptr__2790_stride[(int)1] ) ),safe_mul( _2801_i2,_ptr__2790_stride[(int)2] ) ),safe_mul( _2800_i1,_ptr__2790_stride[(int)3] ) ),safe_mul( _2803_i4,_ptr__2790_stride[(int)4] ) )] = _ptr__2784_nativeidxs[_2798_k];
                          ++ _2798_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _10270_ = (int)0;
      int32_t _10271_ = _ptr__2789_dim[(int)0];
      for (int32_t _2804_i0 = _10270_; _2804_i0 < _10271_; ++_2804_i0)
      {
        {
          int32_t _10272_ = (int)0;
          int32_t _10273_ = _ptr__2789_dim[(int)1];
          for (int32_t _2805_i1 = _10272_; _2805_i1 < _10273_; ++_2805_i1)
          {
            {
              int32_t _10274_ = (int)0;
              int32_t _10275_ = _ptr__2789_dim[(int)2];
              for (int32_t _2806_i2 = _10274_; _2806_i2 < _10275_; ++_2806_i2)
              {
                {
                  int32_t _10276_ = (int)0;
                  int32_t _10277_ = safe_add( _2805_i1,(int)1 );
                  for (int32_t _2807_i3 = _10276_; _2807_i3 < _10277_; ++_2807_i3)
                  {
                    {
                      int32_t _10278_ = (int)0;
                      int32_t _10279_ = _ptr__2789_dim[(int)4];
                      for (int32_t _2808_i4 = _10278_; _2808_i4 < _10279_; ++_2808_i4)
                      {
                        {
                          _ptr__2797_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2804_i0,_ptr__2790_stride[(int)0] ),safe_mul( _2805_i1,_ptr__2790_stride[(int)1] ) ),safe_mul( _2806_i2,_ptr__2790_stride[(int)2] ) ),safe_mul( _2807_i3,_ptr__2790_stride[(int)3] ) ),safe_mul( _2808_i4,_ptr__2790_stride[(int)4] ) )] = _ptr__2784_nativeidxs[_2798_k];
                          _ptr__2797_nidxs[safe_add( safe_add( safe_add( safe_add( safe_mul( _2804_i0,_ptr__2790_stride[(int)0] ),safe_mul( _2807_i3,_ptr__2790_stride[(int)1] ) ),safe_mul( _2806_i2,_ptr__2790_stride[(int)2] ) ),safe_mul( _2805_i1,_ptr__2790_stride[(int)3] ) ),safe_mul( _2808_i4,_ptr__2790_stride[(int)4] ) )] = _ptr__2784_nativeidxs[_2798_k];
                          ++ _2798_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2797_nidxs;
}
// End mosek.fusion.PSDConstraint.computenidxs

void mosek::fusion::p_PSDConstraint::destroy()
{
  shape.reset();
  slackidxs.reset();
  nativeidxs.reset();
}
void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }
// } class PSDConstraint
// class SliceConstraint { // @ src/fusion/SliceConstraint.mbi:23:4-43:5
mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }
mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SliceConstraint::p_SliceConstraint
  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SliceConstraint.ctor @ src/fusion/SliceConstraint.mbi:33:6-36:7
mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2809_c)
{ return new mosek::fusion::SliceConstraint(_2809_c); }
mosek::fusion::SliceConstraint::SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2809_c) : 
   SliceConstraint(new mosek::fusion::p_SliceConstraint(this))
{ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2809_c); }
void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2809_c)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Constraint::_initialize(_2809_c,_2809_c->__mosek_2fusion_2Constraint__getModel());
  }
}
// mosek.fusion.SliceConstraint.ctor

// mosek.fusion.SliceConstraint.ctor @ src/fusion/SliceConstraint.mbi:26:6-31:7
mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2810_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2811_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2812_nativeidxs)
{ return new mosek::fusion::SliceConstraint(_2810_model,_2811_shape,_2812_nativeidxs); }
mosek::fusion::SliceConstraint::SliceConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2810_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2811_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2812_nativeidxs) : 
   SliceConstraint(new mosek::fusion::p_SliceConstraint(this))
{ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2810_model,_2811_shape,_2812_nativeidxs); }
void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2810_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2811_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2812_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2811_shape(_2811_shape ? _2811_shape->raw() : nullptr, _2811_shape ? _2811_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2812_nativeidxs(_2812_nativeidxs ? _2812_nativeidxs->raw() : nullptr, _2812_nativeidxs ? _2812_nativeidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2810_model,_2811_shape,_2812_nativeidxs);
  }
}
// mosek.fusion.SliceConstraint.ctor

// Begin mosek.fusion.SliceConstraint.toString
// Method mosek.fusion.SliceConstraint.toString @ src/fusion/SliceConstraint.mbi:38:6-42:7
std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_SliceConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2813_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2813_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2813_sb->toString();
}
// End mosek.fusion.SliceConstraint.toString

void mosek::fusion::p_SliceConstraint::destroy()
{
}
void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }
// } class SliceConstraint
// class RangedConstraint { // @ src/fusion/RangedConstraint.mbi:13:4-204:5
mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }
mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_RangedConstraint::p_RangedConstraint
  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.RangedConstraint.ctor @ src/fusion/RangedConstraint.mbi:32:6-39:7
mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2814_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2815_m)
{ return new mosek::fusion::RangedConstraint(_2814_c,_2815_m); }
mosek::fusion::RangedConstraint::RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2814_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2815_m) : 
   RangedConstraint(new mosek::fusion::p_RangedConstraint(this))
{ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2814_c,_2815_m); }
void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2814_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2815_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2814_c,_2815_m);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2814_c)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2814_c)->nativeidxs;
  }
}
// mosek.fusion.RangedConstraint.ctor

// mosek.fusion.RangedConstraint.ctor @ src/fusion/RangedConstraint.mbi:19:6-29:7
mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2816_model,
    const std::string &  _2817_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2818_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2819_nativeidxs,
    int32_t _2820_conid)
{ return new mosek::fusion::RangedConstraint(_2816_model,_2817_name,_2818_shape,_2819_nativeidxs,_2820_conid); }
mosek::fusion::RangedConstraint::RangedConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2816_model,
    const std::string &  _2817_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2818_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2819_nativeidxs,
    int32_t _2820_conid) : 
   RangedConstraint(new mosek::fusion::p_RangedConstraint(this))
{ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2816_model,_2817_name,_2818_shape,_2819_nativeidxs,_2820_conid); }
void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2816_model,
    const std::string &  _2817_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2818_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2819_nativeidxs,
    int32_t _2820_conid)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2818_shape(_2818_shape ? _2818_shape->raw() : nullptr, _2818_shape ? _2818_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2819_nativeidxs(_2819_nativeidxs ? _2819_nativeidxs->raw() : nullptr, _2819_nativeidxs ? _2819_nativeidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2816_model,_2817_name,_2818_shape,_2819_nativeidxs,_2820_conid);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2818_shape;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2819_nativeidxs;
  }
}
// mosek.fusion.RangedConstraint.ctor

// Begin mosek.fusion.RangedConstraint.upperBoundCon
// Method mosek.fusion.RangedConstraint.upperBoundCon @ src/fusion/RangedConstraint.mbi:55:6-57:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__upperBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::upperBoundCon() { return __mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__upperBoundCon()
{
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,false);
}
// End mosek.fusion.RangedConstraint.upperBoundCon

// Begin mosek.fusion.RangedConstraint.lowerBoundCon
// Method mosek.fusion.RangedConstraint.lowerBoundCon @ src/fusion/RangedConstraint.mbi:49:6-51:7
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__lowerBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::lowerBoundCon() { return __mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__lowerBoundCon()
{
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,true);
}
// End mosek.fusion.RangedConstraint.lowerBoundCon

// Begin mosek.fusion.RangedConstraint.clone
// Method mosek.fusion.RangedConstraint.clone @ src/fusion/RangedConstraint.mbi:41:6-44:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2821_m)
{
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2821_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.RangedConstraint.clone

void mosek::fusion::p_RangedConstraint::destroy()
{
  nativeidxs.reset();
  shape.reset();
}
void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }
// } class RangedConstraint
// class ConicConstraint { // @ src/fusion/ConicConstraint.mbi:22:4-94:5
mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }
mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ConicConstraint::p_ConicConstraint
  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ConicConstraint.ctor @ src/fusion/ConicConstraint.mbi:65:6-75:7
mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2822_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2823_m)
{ return new mosek::fusion::ConicConstraint(_2822_c,_2823_m); }
mosek::fusion::ConicConstraint::ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2822_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2823_m) : 
   ConicConstraint(new mosek::fusion::p_ConicConstraint(this))
{ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2822_c,_2823_m); }
void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2822_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2823_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2822_c,_2823_m);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2822_c)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2822_c)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2822_c)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2822_c)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2822_c)->nativeidxs;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2822_c)->names_flushed;
    indexnames = mosek::fusion::p_ConicConstraint::_get_impl(_2822_c)->indexnames;
  }
}
// mosek.fusion.ConicConstraint.ctor

// mosek.fusion.ConicConstraint.ctor @ src/fusion/ConicConstraint.mbi:38:6-62:7
mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2824_model,
    const std::string &  _2825_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2826_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2827_shape,
    int32_t _2828_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2829_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2830_indexnames)
{ return new mosek::fusion::ConicConstraint(_2824_model,_2825_name,_2826_dom,_2827_shape,_2828_conid,_2829_nativeidxs,_2830_indexnames); }
mosek::fusion::ConicConstraint::ConicConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2824_model,
    const std::string &  _2825_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2826_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2827_shape,
    int32_t _2828_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2829_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2830_indexnames) : 
   ConicConstraint(new mosek::fusion::p_ConicConstraint(this))
{ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2824_model,_2825_name,_2826_dom,_2827_shape,_2828_conid,_2829_nativeidxs,_2830_indexnames); }
void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2824_model,
    const std::string &  _2825_name,
    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2826_dom,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2827_shape,
    int32_t _2828_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2829_nativeidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2830_indexnames)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2827_shape(_2827_shape ? _2827_shape->raw() : nullptr, _2827_shape ? _2827_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2829_nativeidxs(_2829_nativeidxs ? _2829_nativeidxs->raw() : nullptr, _2829_nativeidxs ? _2829_nativeidxs->size(0) : 0);
    std::vector<int32_t> _10280_;
    for (int32_t _2831_i = (int)0, _10281_ = (int)((_2829_nativeidxs)->size(0)); _2831_i < _10281_ ; ++_2831_i)
    {
      _10280_.push_back((-safe_add( (int)1,_ptr__2829_nativeidxs[_2831_i] )));
    }
    auto _10282_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10280_.size()),_10280_.begin(),_10280_.end()));
    mosek::fusion::p_ModelConstraint::_initialize(_2824_model,_2825_name,_2827_shape,_10282_,(-safe_add( (int)1,_2828_conid )));
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2826_dom;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2827_shape;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2825_name;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2829_nativeidxs;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->indexnames = _2830_indexnames;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2828_conid;
    names_flushed = false;
  }
}
// mosek.fusion.ConicConstraint.ctor

// Begin mosek.fusion.ConicConstraint.toString
// Method mosek.fusion.ConicConstraint.toString @ src/fusion/ConicConstraint.mbi:88:6-92:7
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ConicConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2832_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2832_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2832_sb->toString();
}
// End mosek.fusion.ConicConstraint.toString

// Begin mosek.fusion.ConicConstraint.domainToString
// Method mosek.fusion.ConicConstraint.domainToString @ src/fusion/ConicConstraint.mbi:83:6-85:7
void mosek::fusion::p_ConicConstraint::domainToString(int64_t _2833_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2834_sb)
{
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
// End mosek.fusion.ConicConstraint.domainToString

// Begin mosek.fusion.ConicConstraint.clone
// Method mosek.fusion.ConicConstraint.clone @ src/fusion/ConicConstraint.mbi:77:6-80:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2835_m)
{
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2835_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.ConicConstraint.clone

void mosek::fusion::p_ConicConstraint::destroy()
{
  indexnames.reset();
  nativeidxs.reset();
  shape.reset();
  dom.reset();
}
void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }
// } class ConicConstraint
// class LinearConstraint { // @ src/fusion/LinearConstraint.mbi:24:4-119:5
mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }
mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_LinearConstraint::p_LinearConstraint
  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.LinearConstraint.ctor @ src/fusion/LinearConstraint.mbi:53:6-63:7
mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2836_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2837_m)
{ return new mosek::fusion::LinearConstraint(_2836_c,_2837_m); }
mosek::fusion::LinearConstraint::LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2836_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2837_m) : 
   LinearConstraint(new mosek::fusion::p_LinearConstraint(this))
{ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2836_c,_2837_m); }
void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2836_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2837_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ModelConstraint::_initialize(_2836_c,_2837_m);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2836_c)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2836_c)->name;
    nidxs = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearConstraint::_get_impl(_2836_c)->nidxs);
    names_flushed = mosek::fusion::p_LinearConstraint::_get_impl(_2836_c)->names_flushed;
    indexnames = mosek::fusion::p_LinearConstraint::_get_impl(_2836_c)->indexnames;
  }
}
// mosek.fusion.LinearConstraint.ctor

// mosek.fusion.LinearConstraint.ctor @ src/fusion/LinearConstraint.mbi:37:6-51:7
mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2838_model,
    const std::string &  _2839_name,
    int32_t _2840_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2841_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2842_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2843_indexnames)
{ return new mosek::fusion::LinearConstraint(_2838_model,_2839_name,_2840_conid,_2841_shape,_2842_nidxs,_2843_indexnames); }
mosek::fusion::LinearConstraint::LinearConstraint
  (monty::rc_ptr< ::mosek::fusion::Model > _2838_model,
    const std::string &  _2839_name,
    int32_t _2840_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2841_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2842_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2843_indexnames) : 
   LinearConstraint(new mosek::fusion::p_LinearConstraint(this))
{ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2838_model,_2839_name,_2840_conid,_2841_shape,_2842_nidxs,_2843_indexnames); }
void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2838_model,
    const std::string &  _2839_name,
    int32_t _2840_conid,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2841_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2842_nidxs,
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _2843_indexnames)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2841_shape(_2841_shape ? _2841_shape->raw() : nullptr, _2841_shape ? _2841_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2842_nidxs(_2842_nidxs ? _2842_nidxs->raw() : nullptr, _2842_nidxs ? _2842_nidxs->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2838_model,_2839_name,_2841_shape,_2842_nidxs,_2840_conid);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->nidxs = _2842_nidxs;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2840_conid;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2839_name;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->indexnames = _2843_indexnames;
  }
}
// mosek.fusion.LinearConstraint.ctor

// Begin mosek.fusion.LinearConstraint.toString
// Method mosek.fusion.LinearConstraint.toString @ src/fusion/LinearConstraint.mbi:104:6-117:7
std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_LinearConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2844_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2844_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2844_sb->toString();
}
// End mosek.fusion.LinearConstraint.toString

// Begin mosek.fusion.LinearConstraint.flushNames
// Method mosek.fusion.LinearConstraint.flushNames @ src/fusion/LinearConstraint.mbi:75:6-102:7
void mosek::fusion::p_LinearConstraint::flushNames()
{
}
// End mosek.fusion.LinearConstraint.flushNames

// Begin mosek.fusion.LinearConstraint.domainToString
// Method mosek.fusion.LinearConstraint.domainToString @ src/fusion/LinearConstraint.mbi:70:6-73:7
void mosek::fusion::p_LinearConstraint::domainToString(int64_t _2845_i,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2846_sb)
{
}
// End mosek.fusion.LinearConstraint.domainToString

// Begin mosek.fusion.LinearConstraint.clone
// Method mosek.fusion.LinearConstraint.clone @ src/fusion/LinearConstraint.mbi:65:6-68:7
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2847_m)
{
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2847_m)).as<::mosek::fusion::ModelConstraint>();
}
// End mosek.fusion.LinearConstraint.clone

void mosek::fusion::p_LinearConstraint::destroy()
{
  indexnames.reset();
  nidxs.reset();
}
void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }
// } class LinearConstraint
// class ModelConstraint { // @ src/fusion/ModelConstraint.mbi:19:4-84:5
mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }
mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ModelConstraint::p_ModelConstraint
  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ModelConstraint.ctor @ src/fusion/ModelConstraint.mbi:57:6-66:7
void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2848_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2849_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Constraint::_initialize(_2848_c,_2849_m);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = mosek::fusion::p_ModelConstraint::_get_impl(_2848_c)->conid;
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2848_c)->name;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2848_c)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2848_c)->shape;
  }
}
// mosek.fusion.ModelConstraint.ctor

// mosek.fusion.ModelConstraint.ctor @ src/fusion/ModelConstraint.mbi:42:6-55:7
void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2850_model,
    const std::string &  _2851_name,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2852_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2853_nidxs,
    int32_t _2854_conid)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2852_shape(_2852_shape ? _2852_shape->raw() : nullptr, _2852_shape ? _2852_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2853_nidxs(_2853_nidxs ? _2853_nidxs->raw() : nullptr, _2853_nidxs ? _2853_nidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2850_model,_2852_shape,_2853_nidxs);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2851_name;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2853_nidxs;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2852_shape;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = _2854_conid;
  }
}
// mosek.fusion.ModelConstraint.ctor

// Begin mosek.fusion.ModelConstraint.toString
// Method mosek.fusion.ModelConstraint.toString @ src/fusion/ModelConstraint.mbi:79:6-83:7
std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ModelConstraint::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2855_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2855_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2855_sb->toString();
}
// End mosek.fusion.ModelConstraint.toString

// Begin mosek.fusion.ModelConstraint.flushNames
// Method mosek.fusion.ModelConstraint.flushNames @ src/fusion/ModelConstraint.mbi:75:6-77:7
void mosek::fusion::p_ModelConstraint::flushNames()
{
}
// End mosek.fusion.ModelConstraint.flushNames

// Begin mosek.fusion.ModelConstraint.clone
// End mosek.fusion.ModelConstraint.clone

// Begin mosek.fusion.ModelConstraint.remove
// Method mosek.fusion.ModelConstraint.remove @ src/fusion/ModelConstraint.mbi:68:6-70:7
void mosek::fusion::ModelConstraint :: remove() { mosek::fusion::p_ModelConstraint::_get_impl(this)->remove(); }
void mosek::fusion::p_ModelConstraint::remove()
{
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2Constraint__getModel().get())->removeConstraintBlock(conid);
}
// End mosek.fusion.ModelConstraint.remove

void mosek::fusion::p_ModelConstraint::destroy()
{
  shape.reset();
  nativeidxs.reset();
}
void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }
// } class ModelConstraint
// class Constraint { // @ src/fusion/Constraint.mbi:110:4-680:5
mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Constraint::p_Constraint
  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Constraint.ctor @ src/fusion/Constraint.mbi:135:6-140:7
void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2857_c,
    monty::rc_ptr< ::mosek::fusion::Model > _2858_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    model = _2858_m;
    shape = mosek::fusion::p_Constraint::_get_impl(_2857_c)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2857_c)->nativeidxs;
  }
}
// mosek.fusion.Constraint.ctor

// mosek.fusion.Constraint.ctor @ src/fusion/Constraint.mbi:124:6-132:7
void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2859_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2860_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _2861_nativeidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__2860_shape(_2860_shape ? _2860_shape->raw() : nullptr, _2860_shape ? _2860_shape->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__2861_nativeidxs(_2861_nativeidxs ? _2861_nativeidxs->raw() : nullptr, _2861_nativeidxs ? _2861_nativeidxs->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2859_model;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2860_shape;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2861_nativeidxs;
  }
}
// mosek.fusion.Constraint.ctor

// Begin mosek.fusion.Constraint.toString
// Method mosek.fusion.Constraint.toString @ src/fusion/Constraint.mbi:662:6-679:7
std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }
std::string mosek::fusion::p_Constraint::toString()
{
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
// End mosek.fusion.Constraint.toString

// Begin mosek.fusion.Constraint.toStringArray
// Method mosek.fusion.Constraint.toStringArray @ src/fusion/Constraint.mbi:651:6-657:7
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< int64_t,1 > > _2862_subi,int64_t _2863_dstidx,std::shared_ptr< monty::ndarray< std::string,1 > > _2864_result)
{
  _checked_ptr_1<int64_t> _ptr__2862_subi(_2862_subi ? _2862_subi->raw() : nullptr, _2862_subi ? _2862_subi->size(0) : 0);
}
// End mosek.fusion.Constraint.toStringArray

// Begin mosek.fusion.Constraint.dual_lu
// Method mosek.fusion.Constraint.dual_lu @ src/fusion/Constraint.mbi:642:6-644:7
void mosek::fusion::p_Constraint::dual_lu(int32_t _2865_offset,std::shared_ptr< monty::ndarray< double,1 > > _2866_target,bool _2867_islower)
{
  _checked_ptr_1<double> _ptr__2866_target(_2866_target ? _2866_target->raw() : nullptr, _2866_target ? _2866_target->size(0) : 0);
  model->getConstraintDuals(_2867_islower,nativeidxs,_2866_target,_2865_offset);
}
// End mosek.fusion.Constraint.dual_lu

// Begin mosek.fusion.Constraint.dual
// Method mosek.fusion.Constraint.dual @ src/fusion/Constraint.mbi:636:6-640:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2868_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2868_res(_2868_res ? _2868_res->raw() : nullptr,_2868_res ? _2868_res->size(0) : 0);
  values(false,(int)0,_2868_res);
  return _2868_res;
}
// End mosek.fusion.Constraint.dual

// Begin mosek.fusion.Constraint.level
// Method mosek.fusion.Constraint.level @ src/fusion/Constraint.mbi:623:6-627:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level()
{
  std::shared_ptr< monty::ndarray< double,1 > > _2869_res = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2869_res(_2869_res ? _2869_res->raw() : nullptr,_2869_res ? _2869_res->size(0) : 0);
  values(true,(int)0,_2869_res);
  return _2869_res;
}
// End mosek.fusion.Constraint.level

// Begin mosek.fusion.Constraint.values
// Method mosek.fusion.Constraint.values @ src/fusion/Constraint.mbi:607:6-613:7
void mosek::fusion::p_Constraint::values(bool _2870_primal,int32_t _2871_offset,std::shared_ptr< monty::ndarray< double,1 > > _2872_target)
{
  _checked_ptr_1<double> _ptr__2872_target(_2872_target ? _2872_target->raw() : nullptr, _2872_target ? _2872_target->size(0) : 0);
  model->getConstraintValues(_2870_primal,nativeidxs,_2872_target,_2871_offset);
}
// End mosek.fusion.Constraint.values

// Begin mosek.fusion.Constraint.remove
// Method mosek.fusion.Constraint.remove @ src/fusion/Constraint.mbi:601:6-603:7
void mosek::fusion::Constraint :: remove() { mosek::fusion::p_Constraint::_get_impl(this)->remove(); }
void mosek::fusion::p_Constraint::remove()
{
  throw ::mosek::fusion::DeletionError(std::string ("Only original constraints can be removed"));
}
// End mosek.fusion.Constraint.remove

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:592:6-594:7
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2873_bfix) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2873_bfix); }
void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2873_bfix)
{
  _checked_ptr_1<double> _ptr__2873_bfix(_2873_bfix ? _2873_bfix->raw() : nullptr, _2873_bfix ? _2873_bfix->size(0) : 0);
  _pubthis->update(::mosek::fusion::p_Expr::reshape(::mosek::fusion::p_Expr::constTerm(_2873_bfix),_pubthis->getShape()),(::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>(),true);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:577:6-590:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2874_expr) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2874_expr); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2874_expr)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2875_eshape = _2874_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__2875_eshape(_2875_eshape ? _2875_eshape->raw() : nullptr,_2875_eshape ? _2875_eshape->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2875_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int32_t _10283_ = (int)0;
  int32_t _10284_ = (int)((_2875_eshape)->size(0));
  for (int32_t _2876_i = _10283_; _2876_i < _10284_; ++_2876_i)
  {
    {
      if ((_ptr__2875_eshape[_2876_i] != ((*shape)(_2876_i))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _10285_ = (int)((_2875_eshape)->size(0));
  int32_t _10286_ = (int)((shape)->size(0));
  for (int32_t _2877_i = _10285_; _2877_i < _10286_; ++_2877_i)
  {
    {
      if ((((*shape)(_2877_i)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2874_expr);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:517:6-574:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2878_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2879_x,bool _2880_bfixupdate) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2878_expr,_2879_x,_2880_bfixupdate); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2878_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2879_x,bool _2880_bfixupdate)
{
  int32_t _2881_nd = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2882_eshape = _2878_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__2882_eshape(_2882_eshape ? _2882_eshape->raw() : nullptr,_2882_eshape ? _2882_eshape->size(0) : 0);
  if ((_2881_nd < (int)((_2882_eshape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int32_t _10287_ = (int)0;
  int32_t _10288_ = (int)((_2882_eshape)->size(0));
  for (int32_t _2883_i = _10287_; _2883_i < _10288_; ++_2883_i)
  {
    {
      if ((_ptr__2882_eshape[_2883_i] != ((*shape)(_2883_i))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _10289_ = (int)((_2882_eshape)->size(0));
  int32_t _10290_ = (int)((shape)->size(0));
  for (int32_t _2884_i = _10289_; _2884_i < _10290_; ++_2884_i)
  {
    {
      if ((((*shape)(_2884_i)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int32_t _2885_ni = _2879_x->numInst();
  std::shared_ptr< monty::ndarray< int64_t,1 > > _2886_varidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2885_ni)));
  _checked_ptr_1<int64_t> _ptr__2886_varidxs(_2886_varidxs ? _2886_varidxs->raw() : nullptr,_2886_varidxs ? _2886_varidxs->size(0) : 0);
  if ((_2885_ni < _2879_x->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2887_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2885_ni)));
      _checked_ptr_1<int64_t> _ptr__2887_sp(_2887_sp ? _2887_sp->raw() : nullptr,_2887_sp ? _2887_sp->size(0) : 0);
      _2879_x->inst((int)0,_2887_sp,(int)0,_2886_varidxs);
    }
  }
  else
  {
    {
      _2879_x->inst((int)0,_2886_varidxs);
    }
  }
  int32_t _10291_ = (int)0;
  int32_t _10292_ = _2885_ni;
  for (int32_t _2888_i = _10291_; _2888_i < _10292_; ++_2888_i)
  {
    {
      if ((_ptr__2886_varidxs[_2888_i] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Semidefinite terms cannot be updated"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _2889_varidxs32;
  _checked_ptr_1<int32_t> _ptr__2889_varidxs32(_2889_varidxs32 ? _2889_varidxs32->raw() : nullptr,_2889_varidxs32 ? _2889_varidxs32->size(0) : 0);
  {
    bool _2890_issorted = true;
    int32_t _10293_ = (int)0;
    int32_t _10294_ = (_2885_ni - (int)1);
    for (int32_t _2891_i = _10293_; _2891_i < _10294_; ++_2891_i)
    {
      {
        _2890_issorted = (_2890_issorted && (_ptr__2886_varidxs[_2891_i] < _ptr__2886_varidxs[safe_add( _2891_i,(int)1 )]));
      }
    }
    if (_2890_issorted)
    {
      {
        if ((!_2880_bfixupdate))
        {
          {
            std::vector<int32_t> _10295_;
            for (int32_t _2892_i = (int)0, _10296_ = _2885_ni; _2892_i < _10296_ ; ++_2892_i)
            {
              _10295_.push_back((int32_t)_ptr__2886_varidxs[_2892_i]);
            }
            auto _10297_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10295_.size()),_10295_.begin(),_10295_.end()));
            _2889_varidxs32 = _10297_;
            _ptr__2889_varidxs32.update(_2889_varidxs32 ? _2889_varidxs32->raw() : nullptr, _2889_varidxs32 ? _2889_varidxs32->size(0) : 0);
          }
        }
        else
        {
          {
            _2889_varidxs32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _2885_ni,(int)1 ))));
            _ptr__2889_varidxs32.update(_2889_varidxs32 ? _2889_varidxs32->raw() : nullptr, _2889_varidxs32 ? _2889_varidxs32->size(0) : 0);
            _ptr__2889_varidxs32[(int)0] = (int)0;
            int32_t _10298_ = (int)0;
            int32_t _10299_ = _2885_ni;
            for (int32_t _2893_i = _10298_; _2893_i < _10299_; ++_2893_i)
            {
              {
                _ptr__2889_varidxs32[safe_add( (int)1,_2893_i )] = (int32_t)_ptr__2886_varidxs[_2893_i];
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::vector<int64_t> _10300_;
        for (int32_t _2895_i = (int)0, _10301_ = _2885_ni; _2895_i < _10301_ ; ++_2895_i)
        {
          _10300_.push_back(_2895_i);
        }
        auto _10302_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10300_.size()),_10300_.begin(),_10300_.end()));
        std::shared_ptr< monty::ndarray< int64_t,1 > > _2894_perm = _10302_;
        _checked_ptr_1<int64_t> _ptr__2894_perm(_2894_perm ? _2894_perm->raw() : nullptr,_2894_perm ? _2894_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2894_perm,_2886_varidxs,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_2885_ni));
        int32_t _2896_nunique = (int)1;
        int32_t _10303_ = (int)1;
        int32_t _10304_ = _2885_ni;
        for (int32_t _2897_i = _10303_; _2897_i < _10304_; ++_2897_i)
        {
          {
            if ((_ptr__2886_varidxs[_ptr__2894_perm[(_2897_i - (int)1)]] < _ptr__2886_varidxs[_ptr__2894_perm[_2897_i]]))
            {
              {
                ++ _2896_nunique;
              }
            }
            {}
          }
        }
        if (_2880_bfixupdate)
        {
          {
            _2896_nunique += (int)1;
          }
        }
        {}
        _2889_varidxs32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2896_nunique)));
        _ptr__2889_varidxs32.update(_2889_varidxs32 ? _2889_varidxs32->raw() : nullptr, _2889_varidxs32 ? _2889_varidxs32->size(0) : 0);
        int32_t _2898_k = (int)0;
        if (_2880_bfixupdate)
        {
          {
            _ptr__2889_varidxs32[(int)0] = (int)0;
            ++ _2898_k;
          }
        }
        {}
        _ptr__2889_varidxs32[_2898_k] = (int32_t)_ptr__2886_varidxs[_ptr__2894_perm[(int)0]];
        int32_t _10305_ = (int)1;
        int32_t _10306_ = _2885_ni;
        for (int32_t _2899_i = _10305_; _2899_i < _10306_; ++_2899_i)
        {
          {
            if ((_ptr__2886_varidxs[(_2899_i - (int)1)] < _ptr__2886_varidxs[_2899_i]))
            {
              {
                _ptr__2889_varidxs32[_2898_k] = (int32_t)_ptr__2886_varidxs[_ptr__2894_perm[_2899_i]];
                ++ _2898_k;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2878_expr,_2889_varidxs32);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.update
// Method mosek.fusion.Constraint.update @ src/fusion/Constraint.mbi:513:6-515:7
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2900_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2901_x) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2900_expr,_2901_x); }
void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2900_expr,monty::rc_ptr< ::mosek::fusion::Variable > _2901_x)
{
  _pubthis->update(_2900_expr,_2901_x,false);
}
// End mosek.fusion.Constraint.update

// Begin mosek.fusion.Constraint.get_model
// Method mosek.fusion.Constraint.get_model @ src/fusion/Constraint.mbi:505:6-508:7
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model()
{
  return model;
}
// End mosek.fusion.Constraint.get_model

// Begin mosek.fusion.Constraint.get_nd
// Method mosek.fusion.Constraint.get_nd @ src/fusion/Constraint.mbi:498:6-501:7
int32_t mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }
int32_t mosek::fusion::p_Constraint::get_nd()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.Constraint.get_nd

// Begin mosek.fusion.Constraint.size
// Method mosek.fusion.Constraint.size @ src/fusion/Constraint.mbi:491:6-494:7
int64_t mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }
int64_t mosek::fusion::p_Constraint::size()
{
  int64_t _2902_sz = (int)1;
  int32_t _10307_ = (int)0;
  int32_t _10308_ = (int)((shape)->size(0));
  for (int32_t _2903_i = _10307_; _2903_i < _10308_; ++_2903_i)
  {
    {
      _2902_sz *= ((*shape)(_2903_i));
    }
  }
  return _2902_sz;
}
// End mosek.fusion.Constraint.size

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ src/fusion/Constraint.mbi:479:6-484:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2904_clist,
    int32_t _2905_dim) { return mosek::fusion::p_Constraint::stack(_2904_clist,_2905_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2904_clist,int32_t _2905_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(_2904_clist,_2905_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ src/fusion/Constraint.mbi:471:6-478:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2906_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2907_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2908_v3,
    int32_t _2909_dim) { return mosek::fusion::p_Constraint::stack(_2906_v1,_2907_v2,_2908_v3,_2909_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2906_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2907_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _2908_v3,int32_t _2909_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2906_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2907_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2908_v3.get())}),_2909_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.stack
// Method mosek.fusion.Constraint.stack @ src/fusion/Constraint.mbi:463:6-469:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2910_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2911_v2,
    int32_t _2912_dim) { return mosek::fusion::p_Constraint::stack(_2910_v1,_2911_v2,_2912_dim); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2910_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2911_v2,int32_t _2912_dim)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2910_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2911_v2.get())}),_2912_dim);
}
// End mosek.fusion.Constraint.stack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ src/fusion/Constraint.mbi:456:6-460:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2913_clist) { return mosek::fusion::p_Constraint::hstack(_2913_clist); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2913_clist)
{
  return ::mosek::fusion::p_Constraint::dstack(_2913_clist,(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ src/fusion/Constraint.mbi:451:6-455:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2914_clist) { return mosek::fusion::p_Constraint::vstack(_2914_clist); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2914_clist)
{
  return ::mosek::fusion::p_Constraint::dstack(_2914_clist,(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ src/fusion/Constraint.mbi:432:6-438:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2915_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2916_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2917_v3) { return mosek::fusion::p_Constraint::hstack(_2915_v1,_2916_v2,_2917_v3); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2915_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2916_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _2917_v3)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2915_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2916_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2917_v3.get())}),(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ src/fusion/Constraint.mbi:425:6-431:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2918_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2919_v2,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2920_v3) { return mosek::fusion::p_Constraint::vstack(_2918_v1,_2919_v2,_2920_v3); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2918_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2919_v2,monty::rc_ptr< ::mosek::fusion::Constraint > _2920_v3)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2918_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2919_v2.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2920_v3.get())}),(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.hstack
// Method mosek.fusion.Constraint.hstack @ src/fusion/Constraint.mbi:406:6-411:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2921_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2922_v2) { return mosek::fusion::p_Constraint::hstack(_2921_v1,_2922_v2); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2921_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2922_v2)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2921_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2922_v2.get())}),(int)1);
}
// End mosek.fusion.Constraint.hstack

// Begin mosek.fusion.Constraint.vstack
// Method mosek.fusion.Constraint.vstack @ src/fusion/Constraint.mbi:399:6-404:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack
  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2923_v1,
    monty::rc_ptr< ::mosek::fusion::Constraint > _2924_v2) { return mosek::fusion::p_Constraint::vstack(_2923_v1,_2924_v2); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2923_v1,monty::rc_ptr< ::mosek::fusion::Constraint > _2924_v2)
{
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2923_v1.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2924_v2.get())}),(int)0);
}
// End mosek.fusion.Constraint.vstack

// Begin mosek.fusion.Constraint.dstack
// Method mosek.fusion.Constraint.dstack @ src/fusion/Constraint.mbi:277:6-386:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2925_c,int32_t _2926_dim)
{
  monty::rc_ptr< ::mosek::fusion::Model > _2927_m0 = nullptr;
  {
    int32_t _10309_ = (int)0;
    int32_t _10310_ = (int)((_2925_c)->size(0));
    for (int32_t _2928_i = _10309_; _2928_i < _10310_; ++_2928_i)
    {
      {
        if ((NULL == _2927_m0.get()))
        {
          {
            _2927_m0 = ((*_2925_c)(_2928_i))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2925_c)(_2928_i)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2925_c)(_2928_i)))->model != _2927_m0)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2929_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _10311_;
            bool _10312_ = ((int)((mosek::fusion::p_Model::_get_impl(_2927_m0.get())->getName()).size()) > (int)0);
            if (_10312_)
            {
              _10311_ = mosek::fusion::p_Model::_get_impl(_2927_m0.get())->getName();
            }
            else
            {
              _10311_ = std::string ("?");
            }
            std::string _2930_m1name = _10311_;
            std::string _10313_;
            bool _10314_ = ((int)((mosek::fusion::p_Model::_get_impl(((*_2925_c)(_2928_i))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_10314_)
            {
              _10313_ = mosek::fusion::p_Model::_get_impl(((*_2925_c)(_2928_i))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _10313_ = std::string ("?");
            }
            std::string _2931_m2name = _10313_;
            _2929_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2930_m1name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2931_m2name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2929_sb->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2925_c)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2925_c)->size(0)) == (int)1))
  {
    {
      return ((*_2925_c)((int)1));
    }
  }
  else
  {
    {
      int32_t _2932_n = (int)((_2925_c)->size(0));
      int32_t _2933_nd = (int)1;
      int32_t _10315_ = (int)0;
      int32_t _10316_ = _2932_n;
      for (int32_t _2934_i = _10315_; _2934_i < _10316_; ++_2934_i)
      {
        {
          int32_t _10317_;
          bool _10318_ = (((*_2925_c)(_2934_i))->getND() > _2933_nd);
          if (_10318_)
          {
            _10317_ = ((*_2925_c)(_2934_i))->getND();
          }
          else
          {
            _10317_ = _2933_nd;
          }
          _2933_nd = _10317_;
        }
      }
      if ((_2926_dim == _2933_nd))
      {
        {
          ++ _2933_nd;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,2 > > _2935_shape = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape(_2932_n,_2933_nd)));
      int32_t _10319_ = (int)0;
      int32_t _10320_ = _2932_n;
      for (int32_t _2936_i = _10319_; _2936_i < _10320_; ++_2936_i)
      {
        {
          int32_t _10321_ = (int)0;
          int32_t _10322_ = _2933_nd;
          for (int32_t _2937_j = _10321_; _2937_j < _10322_; ++_2937_j)
          {
            {
              ((*_2935_shape)(_2936_i,_2937_j)) = (int)1;
            }
          }
        }
      }
      std::vector<int32_t> _10323_;
      for (int32_t _2939_i = (int)0, _10324_ = _2932_n; _2939_i < _10324_ ; ++_2939_i)
      {
        _10323_.push_back(((*_2925_c)(_2939_i))->getSize());
      }
      auto _10325_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10323_.size()),_10323_.begin(),_10323_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2938_numnz = _10325_;
      _checked_ptr_1<int32_t> _ptr__2938_numnz(_2938_numnz ? _2938_numnz->raw() : nullptr,_2938_numnz ? _2938_numnz->size(0) : 0);
      int32_t _2940_totalnnz = (int)0;
      int32_t _10326_ = (int)0;
      int32_t _10327_ = _2932_n;
      for (int32_t _2941_i = _10326_; _2941_i < _10327_; ++_2941_i)
      {
        {
          _2940_totalnnz += _ptr__2938_numnz[_2941_i];
        }
      }
      int32_t _10328_ = (int)0;
      int32_t _10329_ = _2932_n;
      for (int32_t _2942_i = _10328_; _2942_i < _10329_; ++_2942_i)
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2943_shpi = ((*_2925_c)(_2942_i))->getShape();
          _checked_ptr_1<int32_t> _ptr__2943_shpi(_2943_shpi ? _2943_shpi->raw() : nullptr,_2943_shpi ? _2943_shpi->size(0) : 0);
          int32_t _10330_ = (int)0;
          int32_t _10331_ = (int)((_2943_shpi)->size(0));
          for (int32_t _2944_j = _10330_; _2944_j < _10331_; ++_2944_j)
          {
            {
              ((*_2935_shape)(_2942_i,_2944_j)) = _ptr__2943_shpi[_2944_j];
            }
          }
        }
      }
      if (((_2926_dim < (int)0) || (_2926_dim > _2933_nd)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int32_t _10332_ = (int)0;
      int32_t _10333_ = _2926_dim;
      for (int32_t _2945_i = _10332_; _2945_i < _10333_; ++_2945_i)
      {
        {
          int32_t _10334_ = (int)1;
          int32_t _10335_ = _2932_n;
          for (int32_t _2946_j = _10334_; _2946_j < _10335_; ++_2946_j)
          {
            {
              if ((((*_2935_shape)((int)0,_2945_i)) != ((*_2935_shape)(_2946_j,_2945_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int32_t _10336_ = safe_add( _2926_dim,(int)1 );
      int32_t _10337_ = _2933_nd;
      for (int32_t _2947_i = _10336_; _2947_i < _10337_; ++_2947_i)
      {
        {
          int32_t _10338_ = (int)1;
          int32_t _10339_ = _2932_n;
          for (int32_t _2948_j = _10338_; _2948_j < _10339_; ++_2948_j)
          {
            {
              if ((((*_2935_shape)((int)0,_2947_i)) != ((*_2935_shape)(_2948_j,_2947_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2949_nativeidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2940_totalnnz)));
      _checked_ptr_1<int32_t> _ptr__2949_nativeidxs(_2949_nativeidxs ? _2949_nativeidxs->raw() : nullptr,_2949_nativeidxs ? _2949_nativeidxs->size(0) : 0);
      std::vector<int32_t> _10340_;
      for (int32_t _2951_i = (int)0, _10341_ = _2933_nd; _2951_i < _10341_ ; ++_2951_i)
      {
        _10340_.push_back(((*_2935_shape)((int)0,_2951_i)));
      }
      auto _10342_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10340_.size()),_10340_.begin(),_10340_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2950_resshape = _10342_;
      _checked_ptr_1<int32_t> _ptr__2950_resshape(_2950_resshape ? _2950_resshape->raw() : nullptr,_2950_resshape ? _2950_resshape->size(0) : 0);
      int32_t _10343_ = (int)1;
      int32_t _10344_ = _2932_n;
      for (int32_t _2952_i = _10343_; _2952_i < _10344_; ++_2952_i)
      {
        {
          _ptr__2950_resshape[_2926_dim] += ((*_2935_shape)(_2952_i,_2926_dim));
        }
      }
      {
        int32_t _2953_rnd = (int)((_2950_resshape)->size(0));
        std::shared_ptr< monty::ndarray< int64_t,1 > > _2954_cumdims = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( (int)((_2925_c)->size(0)),(int)1 ))));
        _checked_ptr_1<int64_t> _ptr__2954_cumdims(_2954_cumdims ? _2954_cumdims->raw() : nullptr,_2954_cumdims ? _2954_cumdims->size(0) : 0);
        int32_t _10345_ = (int)0;
        int32_t _10346_ = (int)((_2925_c)->size(0));
        for (int32_t _2955_i = _10345_; _2955_i < _10346_; ++_2955_i)
        {
          {
            _ptr__2954_cumdims[safe_add( _2955_i,(int)1 )] = safe_add( _ptr__2954_cumdims[_2955_i],((*_2935_shape)(_2955_i,_2926_dim)) );
          }
        }
        if ((_2926_dim == (int)0))
        {
          {
            int32_t _2956_b = (int)0;
            int32_t _10347_ = (int)0;
            int32_t _10348_ = _2932_n;
            for (int32_t _2957_i = _10347_; _2957_i < _10348_; ++_2957_i)
            {
              {
                int32_t _2958_nnz = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2925_c)(_2957_i)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2925_c)(_2957_i)))->nativeidxs,(int)0,_2949_nativeidxs,_2956_b,_2958_nnz);
                _2956_b += _2958_nnz;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _10349_;
            for (int32_t _2960_i = (int)0, _10350_ = _2932_n; _2960_i < _10350_ ; ++_2960_i)
            {
              _10349_.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2925_c)(_2960_i)))->nativeidxs);
            }
            auto _10351_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_10349_.size()),_10349_.begin(),_10349_.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _2959_nidxlist = _10351_;
            if ((_2926_dim < _2933_nd))
            {
              {
                int32_t _2961_d0 = (int)1;
                int32_t _10352_ = (int)0;
                int32_t _10353_ = _2926_dim;
                for (int32_t _2962_i = _10352_; _2962_i < _10353_; ++_2962_i)
                {
                  {
                    _2961_d0 *= _ptr__2950_resshape[_2962_i];
                  }
                }
                int32_t _2963_d2 = (int)1;
                int32_t _10354_ = safe_add( _2926_dim,(int)1 );
                int32_t _10355_ = _2933_nd;
                for (int32_t _2964_i = _10354_; _2964_i < _10355_; ++_2964_i)
                {
                  {
                    _2963_d2 *= _ptr__2950_resshape[_2964_i];
                  }
                }
                int32_t _2965_k = (int)0;
                int32_t _10356_ = (int)0;
                int32_t _10357_ = _2961_d0;
                for (int32_t _2966_i0 = _10356_; _2966_i0 < _10357_; ++_2966_i0)
                {
                  {
                    int32_t _10358_ = (int)0;
                    int32_t _10359_ = _2932_n;
                    for (int32_t _2967_j = _10358_; _2967_j < _10359_; ++_2967_j)
                    {
                      {
                        int32_t _2968_l = (int)0;
                        int32_t _2969_d1 = ((*_2935_shape)(_2967_j,_2926_dim));
                        int32_t _10360_ = (int)0;
                        int32_t _10361_ = _2969_d1;
                        for (int32_t _2970_i1 = _10360_; _2970_i1 < _10361_; ++_2970_i1)
                        {
                          {
                            int32_t _10362_ = (int)0;
                            int32_t _10363_ = _2963_d2;
                            for (int32_t _2971_i2 = _10362_; _2971_i2 < _10363_; ++_2971_i2)
                            {
                              {
                                _ptr__2949_nativeidxs[_2965_k] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2925_c)(_2932_n)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2966_i0,_2963_d2 ),_2969_d1 ),_2968_l )));
                                ++ _2965_k;
                                ++ _2968_l;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int32_t _2972_prodshape = (int)1;
                int32_t _10364_ = (int)0;
                int32_t _10365_ = _2933_nd;
                for (int32_t _2973_i = _10364_; _2973_i < _10365_; ++_2973_i)
                {
                  {
                    _2972_prodshape *= _ptr__2950_resshape[_2973_i];
                  }
                }
                int32_t _2974_k = (int)0;
                int32_t _10366_ = (int)0;
                int32_t _10367_ = _2972_prodshape;
                for (int32_t _2975_i = _10366_; _2975_i < _10367_; ++_2975_i)
                {
                  {
                    int32_t _10368_ = (int)0;
                    int32_t _10369_ = _2932_n;
                    for (int32_t _2976_j = _10368_; _2976_j < _10369_; ++_2976_j)
                    {
                      {
                        _ptr__2949_nativeidxs[_2974_k] = ((*((*_2959_nidxlist)(_2976_j)))(_2975_i));
                        ++ _2974_k;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2927_m0,_2950_resshape,_2949_nativeidxs)).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.dstack

// Begin mosek.fusion.Constraint.index
// Method mosek.fusion.Constraint.index @ src/fusion/Constraint.mbi:251:6-266:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2977_idxa) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2977_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2977_idxa) { return __mosek_2fusion_2Constraint__index(_2977_idxa); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _2977_idxa)
{
  _checked_ptr_1<int32_t> _ptr__2977_idxa(_2977_idxa ? _2977_idxa->raw() : nullptr, _2977_idxa ? _2977_idxa->size(0) : 0);
  if (((int)((_2977_idxa)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10370_ = (int)0;
      int32_t _10371_ = (int)((shape)->size(0));
      for (int32_t _2978_i = _10370_; _2978_i < _10371_; ++_2978_i)
      {
        {
          if (((_ptr__2977_idxa[_2978_i] < (int)0) || (_ptr__2977_idxa[_2978_i] > ((*shape)(_2978_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int32_t _2979_nd = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _2980_strides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_2979_nd)));
      _checked_ptr_1<int64_t> _ptr__2980_strides(_2980_strides ? _2980_strides->raw() : nullptr,_2980_strides ? _2980_strides->size(0) : 0);
      _ptr__2980_strides[(_2979_nd - (int)1)] = (int)1;
      int32_t _10372_ = (int)1;
      int32_t _10373_ = _2979_nd;
      for (int32_t _2981_i = _10372_; _2981_i < _10373_; ++_2981_i)
      {
        {
          _ptr__2980_strides[((_2979_nd - _2981_i) - (int)1)] = safe_mul( _ptr__2980_strides[(_2979_nd - _2981_i)],((*shape)((_2979_nd - _2981_i))) );
        }
      }
      int32_t _2982_ii = (int)0;
      int32_t _10374_ = (int)0;
      int32_t _10375_ = _2979_nd;
      for (int32_t _2983_i = _10374_; _2983_i < _10375_; ++_2983_i)
      {
        {
          _2982_ii += (int32_t)safe_mul( _ptr__2980_strides[_2983_i],_ptr__2977_idxa[_2983_i] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nativeidxs)(_2982_ii)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.index

// Begin mosek.fusion.Constraint.index
// Method mosek.fusion.Constraint.index @ src/fusion/Constraint.mbi:236:6-246:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int32_t _2984_idx) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2984_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int32_t _2984_idx) { return __mosek_2fusion_2Constraint__index(_2984_idx); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int32_t _2984_idx)
{
  if ((((int)((shape)->size(0)) == (int)0) && (_2984_idx == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2984_idx < (int)0) || (_2984_idx > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nativeidxs)(_2984_idx)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.index

// Begin mosek.fusion.Constraint.slice
// Method mosek.fusion.Constraint.slice @ src/fusion/Constraint.mbi:179:6-231:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2985_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2986_lasta) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2985_firsta,_2986_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2985_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2986_lasta) { return __mosek_2fusion_2Constraint__slice(_2985_firsta,_2986_lasta); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _2985_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _2986_lasta)
{
  _checked_ptr_1<int32_t> _ptr__2985_firsta(_2985_firsta ? _2985_firsta->raw() : nullptr, _2985_firsta ? _2985_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__2986_lasta(_2986_lasta ? _2986_lasta->raw() : nullptr, _2986_lasta ? _2986_lasta->size(0) : 0);
  if (((int)((_2985_firsta)->size(0)) != (int)((_2986_lasta)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2985_firsta)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int32_t _10376_ = (int)0;
      int32_t _10377_ = (int)((shape)->size(0));
      for (int32_t _2987_i = _10376_; _2987_i < _10377_; ++_2987_i)
      {
        {
          if (((_ptr__2985_firsta[_2987_i] < (int)0) || (_ptr__2986_lasta[_2987_i] > ((*shape)(_2987_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2985_firsta[_2987_i] > _ptr__2986_lasta[_2987_i]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int32_t _2988_nd = (int)((shape)->size(0));
      std::vector<int32_t> _10378_;
      for (int32_t _2990_i = (int)0, _10379_ = _2988_nd; _2990_i < _10379_ ; ++_2990_i)
      {
        _10378_.push_back((_ptr__2986_lasta[_2990_i] - _ptr__2985_firsta[_2990_i]));
      }
      auto _10380_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10378_.size()),_10378_.begin(),_10378_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _2989_sliceshape = _10380_;
      _checked_ptr_1<int32_t> _ptr__2989_sliceshape(_2989_sliceshape ? _2989_sliceshape->raw() : nullptr,_2989_sliceshape ? _2989_sliceshape->size(0) : 0);
      int32_t _2991_slicesize = (int)1;
      int32_t _10381_ = (int)0;
      int32_t _10382_ = _2988_nd;
      for (int32_t _2992_i = _10381_; _2992_i < _10382_; ++_2992_i)
      {
        {
          _2991_slicesize *= (_ptr__2986_lasta[_2992_i] - _ptr__2985_firsta[_2992_i]);
        }
      }
      if ((_2991_slicesize == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2989_sliceshape,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _2993_sliceidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2991_slicesize)));
          _checked_ptr_1<int32_t> _ptr__2993_sliceidxs(_2993_sliceidxs ? _2993_sliceidxs->raw() : nullptr,_2993_sliceidxs ? _2993_sliceidxs->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2994_strides = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_2988_nd)));
            _checked_ptr_1<int32_t> _ptr__2994_strides(_2994_strides ? _2994_strides->raw() : nullptr,_2994_strides ? _2994_strides->size(0) : 0);
            _ptr__2994_strides[(_2988_nd - (int)1)] = (int)1;
            int32_t _10383_ = (int)1;
            int32_t _10384_ = _2988_nd;
            for (int32_t _2995_i = _10383_; _2995_i < _10384_; ++_2995_i)
            {
              {
                _ptr__2994_strides[((_2988_nd - _2995_i) - (int)1)] = safe_mul( _ptr__2994_strides[(_2988_nd - _2995_i)],((*shape)((_2988_nd - _2995_i))) );
              }
            }
            int32_t _2996_start = (int)0;
            int32_t _10385_ = (int)0;
            int32_t _10386_ = _2988_nd;
            for (int32_t _2997_i = _10385_; _2997_i < _10386_; ++_2997_i)
            {
              {
                _2996_start += safe_mul( _ptr__2985_firsta[_2997_i],_ptr__2994_strides[_2997_i] );
              }
            }
            std::vector<int32_t> _10387_;
            for (int32_t _2999_i = (int)0, _10388_ = _2988_nd; _2999_i < _10388_ ; ++_2999_i)
            {
              _10387_.push_back(_2996_start);
            }
            auto _10389_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10387_.size()),_10387_.begin(),_10387_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _2998_pp = _10389_;
            _checked_ptr_1<int32_t> _ptr__2998_pp(_2998_pp ? _2998_pp->raw() : nullptr,_2998_pp ? _2998_pp->size(0) : 0);
            std::vector<int32_t> _10390_;
            for (int32_t _3001_i = (int)0, _10391_ = _2988_nd; _3001_i < _10391_ ; ++_3001_i)
            {
              _10390_.push_back(_ptr__2985_firsta[_3001_i]);
            }
            auto _10392_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10390_.size()),_10390_.begin(),_10390_.end()));
            std::shared_ptr< monty::ndarray< int32_t,1 > > _3000_ii = _10392_;
            _checked_ptr_1<int32_t> _ptr__3000_ii(_3000_ii ? _3000_ii->raw() : nullptr,_3000_ii ? _3000_ii->size(0) : 0);
            int32_t _10393_ = (int)0;
            int32_t _10394_ = _2991_slicesize;
            for (int32_t _3002_i = _10393_; _3002_i < _10394_; ++_3002_i)
            {
              {
                _ptr__2993_sliceidxs[_3002_i] = ((*nativeidxs)(_ptr__2998_pp[(_2988_nd - (int)1)]));
                _ptr__3000_ii[(_2988_nd - (int)1)] += (int)1;
                _ptr__2998_pp[(_2988_nd - (int)1)] += _ptr__2994_strides[(_2988_nd - (int)1)];
                if ((_ptr__3000_ii[(_2988_nd - (int)1)] >= _ptr__2986_lasta[(_2988_nd - (int)1)]))
                {
                  {
                    int32_t _3003_k = (_2988_nd - (int)1);
                    while ( ((_3003_k > (int)0) && (_ptr__3000_ii[_3003_k] >= _ptr__2986_lasta[_3003_k])) )
                    {
                      {
                        _ptr__3000_ii[_3003_k] = _ptr__2985_firsta[_3003_k];
                        _ptr__3000_ii[(_3003_k - (int)1)] += (int)1;
                        _ptr__2998_pp[(_3003_k - (int)1)] += _ptr__2994_strides[(_3003_k - (int)1)];
                        -- _3003_k;
                      }
                    }
                    int32_t _10395_ = safe_add( _3003_k,(int)1 );
                    int32_t _10396_ = _2988_nd;
                    for (int32_t _3004_k2 = _10395_; _3004_k2 < _10396_; ++_3004_k2)
                    {
                      {
                        _ptr__2998_pp[_3004_k2] = _ptr__2998_pp[_3003_k];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2989_sliceshape,_2993_sliceidxs)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
// End mosek.fusion.Constraint.slice

// Begin mosek.fusion.Constraint.slice
// Method mosek.fusion.Constraint.slice @ src/fusion/Constraint.mbi:166:6-177:7
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int32_t _3005_first,int32_t _3006_last) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_3005_first,_3006_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int32_t _3005_first,int32_t _3006_last) { return __mosek_2fusion_2Constraint__slice(_3005_first,_3006_last); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int32_t _3005_first,int32_t _3006_last)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_3005_first == (int)0) && (_3006_last == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_3005_first < (int)0) || (_3006_last > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_3005_first > _3006_last))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int32_t> _10397_;
      for (int32_t _3007_i = _3005_first, _10398_ = _3006_last; _3007_i < _10398_ ; ++_3007_i)
      {
        _10397_.push_back(((*nativeidxs)(_3007_i)));
      }
      auto _10399_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10397_.size()),_10397_.begin(),_10397_.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((_3006_last - _3005_first))}),_10399_)).as<::mosek::fusion::Constraint>();
    }
  }
}
// End mosek.fusion.Constraint.slice

// Begin mosek.fusion.Constraint.getND
// Method mosek.fusion.Constraint.getND @ src/fusion/Constraint.mbi:162:6-164:7
int32_t mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_Constraint::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.Constraint.getND

// Begin mosek.fusion.Constraint.getSize
// Method mosek.fusion.Constraint.getSize @ src/fusion/Constraint.mbi:156:6-159:7
int32_t mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }
int32_t mosek::fusion::p_Constraint::getSize()
{
  int32_t _3008_sz = (int)1;
  int32_t _10400_ = (int)0;
  int32_t _10401_ = (int)((shape)->size(0));
  for (int32_t _3009_i = _10400_; _3009_i < _10401_; ++_3009_i)
  {
    {
      _3008_sz *= ((*shape)(_3009_i));
    }
  }
  return _3008_sz;
}
// End mosek.fusion.Constraint.getSize

// Begin mosek.fusion.Constraint.getModel
// Method mosek.fusion.Constraint.getModel @ src/fusion/Constraint.mbi:153:6-55
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel()
{
  return model;
}
// End mosek.fusion.Constraint.getModel

// Begin mosek.fusion.Constraint.getShape
// Method mosek.fusion.Constraint.getShape @ src/fusion/Constraint.mbi:147:6-150:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Constraint::getShape()
{
  std::vector<int32_t> _10402_;
  for (int32_t _3010_i = (int)0, _10403_ = (int)((shape)->size(0)); _3010_i < _10403_ ; ++_3010_i)
  {
    _10402_.push_back(((*shape)(_3010_i)));
  }
  auto _10404_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10402_.size()),_10402_.begin(),_10402_.end()));
  return _10404_;
}
// End mosek.fusion.Constraint.getShape

// Begin mosek.fusion.Constraint.getNativeidxs
// Method mosek.fusion.Constraint.getNativeidxs @ src/fusion/Constraint.mbi:142:6-144:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Constraint::getNativeidxs()
{
  return nativeidxs;
}
// End mosek.fusion.Constraint.getNativeidxs

void mosek::fusion::p_Constraint::destroy()
{
  nativeidxs.reset();
  shape.reset();
  model.reset();
}
void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }
// } class Constraint
// class Set { // @ src/fusion/Set.mbi:34:4-207:5
mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Set::p_Set
  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Set.size
// Method mosek.fusion.Set.size @ src/fusion/Set.mbi:204:6-206:7
int64_t mosek::fusion::Set::size
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3011_shape) { return mosek::fusion::p_Set::size(_3011_shape); }
int64_t mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int32_t,1 > > _3011_shape)
{
  _checked_ptr_1<int32_t> _ptr__3011_shape(_3011_shape ? _3011_shape->raw() : nullptr, _3011_shape ? _3011_shape->size(0) : 0);
  int64_t _3012_sz = (int64_t)1;
  int32_t _10405_ = (int)0;
  int32_t _10406_ = (int)((_3011_shape)->size(0));
  for (int32_t _3013_i = _10405_; _3013_i < _10406_; ++_3013_i)
  {
    {
      _3012_sz *= _ptr__3011_shape[_3013_i];
    }
  }
  return _3012_sz;
}
// End mosek.fusion.Set.size

// Begin mosek.fusion.Set.match
// Method mosek.fusion.Set.match @ src/fusion/Set.mbi:195:6-201:7
bool mosek::fusion::Set::match
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3014_s1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3015_s2) { return mosek::fusion::p_Set::match(_3014_s1,_3015_s2); }
bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int32_t,1 > > _3014_s1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3015_s2)
{
  _checked_ptr_1<int32_t> _ptr__3014_s1(_3014_s1 ? _3014_s1->raw() : nullptr, _3014_s1 ? _3014_s1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3015_s2(_3015_s2 ? _3015_s2->raw() : nullptr, _3015_s2 ? _3015_s2->size(0) : 0);
  if (((int)((_3014_s1)->size(0)) != (int)((_3015_s2)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int32_t _10407_ = (int)0;
  int32_t _10408_ = (int)((_3014_s1)->size(0));
  for (int32_t _3016_i = _10407_; _3016_i < _10408_; ++_3016_i)
  {
    {
      if ((_ptr__3014_s1[_3016_i] != _ptr__3015_s2[_3016_i]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.Set.match

// Begin mosek.fusion.Set.linearidx
// Method mosek.fusion.Set.linearidx @ src/fusion/Set.mbi:186:6-192:7
int64_t mosek::fusion::Set::linearidx
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3017_shape,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3018_key) { return mosek::fusion::p_Set::linearidx(_3017_shape,_3018_key); }
int64_t mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int32_t,1 > > _3017_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _3018_key)
{
  _checked_ptr_1<int32_t> _ptr__3017_shape(_3017_shape ? _3017_shape->raw() : nullptr, _3017_shape ? _3017_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3018_key(_3018_key ? _3018_key->raw() : nullptr, _3018_key ? _3018_key->size(0) : 0);
  int64_t _3019_res = _ptr__3018_key[(int)0];
  int32_t _10409_ = (int)1;
  int32_t _10410_ = (int)((_3018_key)->size(0));
  for (int32_t _3020_i = _10409_; _3020_i < _10410_; ++_3020_i)
  {
    {
      _3019_res = safe_add( safe_mul( _3019_res,_ptr__3017_shape[_3020_i] ),_ptr__3018_key[_3020_i] );
    }
  }
  return _3019_res;
}
// End mosek.fusion.Set.linearidx

// Begin mosek.fusion.Set.idxtokey
// Method mosek.fusion.Set.idxtokey @ src/fusion/Set.mbi:169:6-174:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::idxtokey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3021_shape,
    int64_t _3022_idx) { return mosek::fusion::p_Set::idxtokey(_3021_shape,_3022_idx); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3021_shape,int64_t _3022_idx)
{
  _checked_ptr_1<int32_t> _ptr__3021_shape(_3021_shape ? _3021_shape->raw() : nullptr, _3021_shape ? _3021_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3023_res = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_3021_shape)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__3023_res(_3023_res ? _3023_res->raw() : nullptr,_3023_res ? _3023_res->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_3021_shape,_3022_idx,_3023_res);
  return _3023_res;
}
// End mosek.fusion.Set.idxtokey

// Begin mosek.fusion.Set.idxtokey
// Method mosek.fusion.Set.idxtokey @ src/fusion/Set.mbi:154:6-167:7
void mosek::fusion::Set::idxtokey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3024_shape,
    int64_t _3025_idx,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3026_dest) { mosek::fusion::p_Set::idxtokey(_3024_shape,_3025_idx,_3026_dest); }
void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3024_shape,int64_t _3025_idx,std::shared_ptr< monty::ndarray< int32_t,1 > > _3026_dest)
{
  _checked_ptr_1<int32_t> _ptr__3024_shape(_3024_shape ? _3024_shape->raw() : nullptr, _3024_shape ? _3024_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3026_dest(_3026_dest ? _3026_dest->raw() : nullptr, _3026_dest ? _3026_dest->size(0) : 0);
  int32_t _3027_nd = (int)((_3024_shape)->size(0));
  if ((_3027_nd > (int)0))
  {
    {
      int64_t _3028_ix = _3025_idx;
      int32_t _10411_ = (int)0;
      int32_t _10412_ = (_3027_nd - (int)1);
      for (int32_t _3029_i = _10411_; _3029_i < _10412_; ++_3029_i)
      {
        {
          _ptr__3026_dest[((_3027_nd - _3029_i) - (int)1)] = (int32_t)(_3028_ix % _ptr__3024_shape[((_3027_nd - _3029_i) - (int)1)]);
          _3028_ix /= _ptr__3024_shape[((_3027_nd - _3029_i) - (int)1)];
        }
      }
      _ptr__3026_dest[(int)0] = (int32_t)_3028_ix;
    }
  }
  {}
}
// End mosek.fusion.Set.idxtokey

// Begin mosek.fusion.Set.indexToString
// Method mosek.fusion.Set.indexToString @ src/fusion/Set.mbi:124:6-148:7
std::string mosek::fusion::Set::indexToString
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3030_shape,
    int64_t _3031_key) { return mosek::fusion::p_Set::indexToString(_3030_shape,_3031_key); }
std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int32_t,1 > > _3030_shape,int64_t _3031_key)
{
  _checked_ptr_1<int32_t> _ptr__3030_shape(_3030_shape ? _3030_shape->raw() : nullptr, _3030_shape ? _3030_shape->size(0) : 0);
  int32_t _3032_nd = (int)((_3030_shape)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3033_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_3032_nd == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_3032_nd == (int)1))
  {
    {
      return _3033_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_3031_key)->toString();
    }
  }
  else
  {
    {
      int64_t _3034_rem = _3031_key;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3035_k = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3032_nd)));
      _checked_ptr_1<int32_t> _ptr__3035_k(_3035_k ? _3035_k->raw() : nullptr,_3035_k ? _3035_k->size(0) : 0);
      int32_t _10413_ = (int)1;
      int32_t _10414_ = _3032_nd;
      for (int32_t _3036_i = _10413_; _3036_i < _10414_; ++_3036_i)
      {
        {
          _ptr__3035_k[(_3032_nd - _3036_i)] = (int32_t)(_3034_rem % _ptr__3030_shape[(_3032_nd - _3036_i)]);
          _3034_rem /= _ptr__3030_shape[(_3032_nd - _3036_i)];
        }
      }
      _ptr__3035_k[(int)0] = (int32_t)_3034_rem;
      _3033_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3035_k[(int)0]);
      int32_t _10415_ = (int)1;
      int32_t _10416_ = _3032_nd;
      for (int32_t _3037_i = _10415_; _3037_i < _10416_; ++_3037_i)
      {
        {
          _3033_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3035_k[_3037_i]);
        }
      }
      return _3033_sb->toString();
    }
  }
}
// End mosek.fusion.Set.indexToString

// Begin mosek.fusion.Set.keyToString
// Method mosek.fusion.Set.keyToString @ src/fusion/Set.mbi:112:6-119:7
std::string mosek::fusion::Set::keyToString
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3038_key) { return mosek::fusion::p_Set::keyToString(_3038_key); }
std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int32_t,1 > > _3038_key)
{
  _checked_ptr_1<int32_t> _ptr__3038_key(_3038_key ? _3038_key->raw() : nullptr, _3038_key ? _3038_key->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3039_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _3039_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3038_key[(int)0]);
  int32_t _10417_ = (int)1;
  int32_t _10418_ = (int)((_3038_key)->size(0));
  for (int32_t _3040_i = _10417_; _3040_i < _10418_; ++_3040_i)
  {
    {
      _3039_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__3038_key[_3040_i]);
    }
  }
  return _3039_sb->toString();
}
// End mosek.fusion.Set.keyToString

// Begin mosek.fusion.Set.indexToKey
// Method mosek.fusion.Set.indexToKey @ src/fusion/Set.mbi:92:6-107:7
void mosek::fusion::Set::indexToKey
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3041_shape,
    int64_t _3042_key,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3043_res) { mosek::fusion::p_Set::indexToKey(_3041_shape,_3042_key,_3043_res); }
void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int32_t,1 > > _3041_shape,int64_t _3042_key,std::shared_ptr< monty::ndarray< int32_t,1 > > _3043_res)
{
  _checked_ptr_1<int32_t> _ptr__3041_shape(_3041_shape ? _3041_shape->raw() : nullptr, _3041_shape ? _3041_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3043_res(_3043_res ? _3043_res->raw() : nullptr, _3043_res ? _3043_res->size(0) : 0);
  int32_t _3044_nd = (int)((_3041_shape)->size(0));
  if ((_3044_nd == (int)1))
  {
    {
      _ptr__3043_res[(int)0] = (int32_t)_3042_key;
    }
  }
  else
  {
    {
      int64_t _3045_rem = _3042_key;
      int32_t _10419_ = (int)1;
      int32_t _10420_ = _3044_nd;
      for (int32_t _3046_i = _10419_; _3046_i < _10420_; ++_3046_i)
      {
        {
          _ptr__3043_res[(_3044_nd - _3046_i)] = (int32_t)(_3045_rem % _ptr__3041_shape[(_3044_nd - _3046_i)]);
          _3045_rem /= _ptr__3041_shape[(_3044_nd - _3046_i)];
        }
      }
      _ptr__3043_res[(int)0] = (int32_t)_3045_rem;
    }
  }
}
// End mosek.fusion.Set.indexToKey

// Begin mosek.fusion.Set.strides
// Method mosek.fusion.Set.strides @ src/fusion/Set.mbi:81:6-87:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::Set::strides
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3047_shape) { return mosek::fusion::p_Set::strides(_3047_shape); }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int32_t,1 > > _3047_shape)
{
  _checked_ptr_1<int32_t> _ptr__3047_shape(_3047_shape ? _3047_shape->raw() : nullptr, _3047_shape ? _3047_shape->size(0) : 0);
  int32_t _3048_nd = (int)((_3047_shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3049_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3048_nd)));
  _checked_ptr_1<int64_t> _ptr__3049_st(_3049_st ? _3049_st->raw() : nullptr,_3049_st ? _3049_st->size(0) : 0);
  _ptr__3049_st[(_3048_nd - (int)1)] = (int)1;
  int32_t _10421_ = (int)1;
  int32_t _10422_ = _3048_nd;
  for (int32_t _3050_i = _10421_; _3050_i < _10422_; ++_3050_i)
  {
    {
      _ptr__3049_st[((_3048_nd - _3050_i) - (int)1)] = safe_mul( _ptr__3049_st[(_3048_nd - _3050_i)],_ptr__3047_shape[(_3048_nd - _3050_i)] );
    }
  }
  return _3049_st;
}
// End mosek.fusion.Set.strides

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:66:6-72:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3051_set1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3052_set2) { return mosek::fusion::p_Set::make(_3051_set1,_3052_set2); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _3051_set1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3052_set2)
{
  _checked_ptr_1<int32_t> _ptr__3051_set1(_3051_set1 ? _3051_set1->raw() : nullptr, _3051_set1 ? _3051_set1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3052_set2(_3052_set2 ? _3052_set2->raw() : nullptr, _3052_set2 ? _3052_set2->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3053_r = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( (int)((_3051_set1)->size(0)),(int)((_3052_set2)->size(0)) ))));
  _checked_ptr_1<int32_t> _ptr__3053_r(_3053_r ? _3053_r->raw() : nullptr,_3053_r ? _3053_r->size(0) : 0);
  int32_t _10423_ = (int)0;
  int32_t _10424_ = (int)((_3051_set1)->size(0));
  for (int32_t _3054_i = _10423_; _3054_i < _10424_; ++_3054_i)
  {
    {
      _ptr__3053_r[_3054_i] = _ptr__3051_set1[_3054_i];
    }
  }
  int32_t _10425_ = (int)0;
  int32_t _10426_ = (int)((_3052_set2)->size(0));
  for (int32_t _3055_i = _10425_; _3055_i < _10426_; ++_3055_i)
  {
    {
      _ptr__3053_r[safe_add( (int)((_3051_set1)->size(0)),_3055_i )] = _ptr__3052_set2[_3055_i];
    }
  }
  return _3053_r;
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:61:6-64:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3056_sizes) { return mosek::fusion::p_Set::make(_3056_sizes); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _3056_sizes)
{
  _checked_ptr_1<int32_t> _ptr__3056_sizes(_3056_sizes ? _3056_sizes->raw() : nullptr, _3056_sizes ? _3056_sizes->size(0) : 0);
  std::vector<int32_t> _10427_;
  for (int32_t _3057_i = (int)0, _10428_ = (int)((_3056_sizes)->size(0)); _3057_i < _10428_ ; ++_3057_i)
  {
    _10427_.push_back(_ptr__3056_sizes[_3057_i]);
  }
  auto _10429_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10427_.size()),_10427_.begin(),_10427_.end()));
  return _10429_;
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:56:6-59:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3058_s1,
    int32_t _3059_s2,
    int32_t _3060_s3) { return mosek::fusion::p_Set::make(_3058_s1,_3059_s2,_3060_s3); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3058_s1,int32_t _3059_s2,int32_t _3060_s3)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3058_s1),(int32_t)(_3059_s2),(int32_t)(_3060_s3)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:51:6-54:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3061_s1,
    int32_t _3062_s2) { return mosek::fusion::p_Set::make(_3061_s1,_3062_s2); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3061_s1,int32_t _3062_s2)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3061_s1),(int32_t)(_3062_s2)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:46:6-49:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( int32_t _3063_sz) { return mosek::fusion::p_Set::make(_3063_sz); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(int32_t _3063_sz)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3063_sz)});
}
// End mosek.fusion.Set.make

// Begin mosek.fusion.Set.scalar
// Method mosek.fusion.Set.scalar @ src/fusion/Set.mbi:44:6-67
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::scalar
  ( ) { return mosek::fusion::p_Set::scalar(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::scalar()
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
}
// End mosek.fusion.Set.scalar

// Begin mosek.fusion.Set.make
// Method mosek.fusion.Set.make @ src/fusion/Set.mbi:36:6-39:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::Set::make
  ( std::shared_ptr< monty::ndarray< std::string,1 > > _3064_names) { return mosek::fusion::p_Set::make(_3064_names); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _3064_names)
{
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3064_names)->size(0)))});
}
// End mosek.fusion.Set.make

void mosek::fusion::p_Set::destroy()
{
}
void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }
// } class Set
// class ConeDomain { // @ src/fusion/domain.mbi:1605:4-1741:5
mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ConeDomain::p_ConeDomain
  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.ConeDomain.ctor @ src/fusion/domain.mbi:1680:6-1691:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (mosek::fusion::QConeKey _3065_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3066_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3067_d)
{ return new mosek::fusion::ConeDomain(_3065_k,_3066_alpha,_3067_d); }
mosek::fusion::ConeDomain::ConeDomain
  (mosek::fusion::QConeKey _3065_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3066_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3067_d) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3065_k,_3066_alpha,_3067_d); }
void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _3065_k,
    std::shared_ptr< monty::ndarray< double,1 > > _3066_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3067_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3066_alpha(_3066_alpha ? _3066_alpha->raw() : nullptr, _3066_alpha ? _3066_alpha->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3067_d(_3067_d ? _3067_d->raw() : nullptr, _3067_d ? _3067_d->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _10430_;
    bool _10431_ = (NULL != _3067_d.get());
    if (_10431_)
    {
      _10430_ = ::mosek::fusion::Utils::Tools::arraycopy(_3067_d);
    }
    else
    {
      _10430_ = nullptr;
    }
    shape = _10430_;
    domsize = (int)0;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _3066_alpha;
    key = _3065_k;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    domofs = nullptr;
    indexnames = nullptr;
  }
}
// mosek.fusion.ConeDomain.ctor

// mosek.fusion.ConeDomain.ctor @ src/fusion/domain.mbi:1654:6-1656:7
mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain
  (mosek::fusion::QConeKey _3068_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3069_d)
{ return new mosek::fusion::ConeDomain(_3068_k,_3069_d); }
mosek::fusion::ConeDomain::ConeDomain
  (mosek::fusion::QConeKey _3068_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3069_d) : 
   ConeDomain(new mosek::fusion::p_ConeDomain(this))
{ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_3068_k,_3069_d); }
void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _3068_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3069_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3069_d(_3069_d ? _3069_d->raw() : nullptr, _3069_d ? _3069_d->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_3068_k,nullptr,_3069_d);
  }
}
// mosek.fusion.ConeDomain.ctor

// Begin mosek.fusion.ConeDomain.match_shape
// Method mosek.fusion.ConeDomain.match_shape @ src/fusion/domain.mbi:1736:6-1740:7
bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3070_shp)
{
  _checked_ptr_1<int32_t> _ptr__3070_shp(_3070_shp ? _3070_shp->raw() : nullptr, _3070_shp ? _3070_shp->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_3070_shp,shape));
}
// End mosek.fusion.ConeDomain.match_shape

// Begin mosek.fusion.ConeDomain.integral
// Method mosek.fusion.ConeDomain.integral @ src/fusion/domain.mbi:1734:6-76
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral()
{
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.integral

// Begin mosek.fusion.ConeDomain.axisIsSet
// Method mosek.fusion.ConeDomain.axisIsSet @ src/fusion/domain.mbi:1727:6-66
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }
bool mosek::fusion::p_ConeDomain::axisIsSet()
{
  return axisset;
}
// End mosek.fusion.ConeDomain.axisIsSet

// Begin mosek.fusion.ConeDomain.getAxis
// Method mosek.fusion.ConeDomain.getAxis @ src/fusion/domain.mbi:1724:6-66
int32_t mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }
int32_t mosek::fusion::p_ConeDomain::getAxis()
{
  return axisidx;
}
// End mosek.fusion.ConeDomain.getAxis

// Begin mosek.fusion.ConeDomain.axis
// Method mosek.fusion.ConeDomain.axis @ src/fusion/domain.mbi:1721:6-94
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int32_t _3071_a) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_3071_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int32_t _3071_a) { return __mosek_2fusion_2ConeDomain__axis(_3071_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int32_t _3071_a)
{
  axisidx = _3071_a;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.axis

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1717:6-121
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3072_dim0,int32_t _3073_dim1,int32_t _3074_dim2) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3072_dim0,_3073_dim1,_3074_dim2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3072_dim0,int32_t _3073_dim1,int32_t _3074_dim2) { return __mosek_2fusion_2ConeDomain__withShape(_3072_dim0,_3073_dim1,_3074_dim2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3072_dim0,int32_t _3073_dim1,int32_t _3074_dim2)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3072_dim0),(int32_t)(_3073_dim1),(int32_t)(_3074_dim2)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1716:6-105
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3075_dim0,int32_t _3076_dim1) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3075_dim0,_3076_dim1); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3075_dim0,int32_t _3076_dim1) { return __mosek_2fusion_2ConeDomain__withShape(_3075_dim0,_3076_dim1); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3075_dim0,int32_t _3076_dim1)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3075_dim0),(int32_t)(_3076_dim1)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1715:6-89
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(int32_t _3077_dim0) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3077_dim0); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(int32_t _3077_dim0) { return __mosek_2fusion_2ConeDomain__withShape(_3077_dim0); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(int32_t _3077_dim0)
{
  return __mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3077_dim0)}));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape
// Method mosek.fusion.ConeDomain.withShape @ src/fusion/domain.mbi:1714:6-104
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3078_shp) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withShape(_3078_shp); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3078_shp) { return __mosek_2fusion_2ConeDomain__withShape(_3078_shp); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3078_shp)
{
  _checked_ptr_1<int32_t> _ptr__3078_shp(_3078_shp ? _3078_shp->raw() : nullptr, _3078_shp ? _3078_shp->size(0) : 0);
  return __mosek_2fusion_2ConeDomain__withShape_(::mosek::fusion::Utils::Tools::arraycopy(_3078_shp));
}
// End mosek.fusion.ConeDomain.withShape

// Begin mosek.fusion.ConeDomain.withShape_
// Method mosek.fusion.ConeDomain.withShape_ @ src/fusion/domain.mbi:1713:6-85
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withShape_(std::shared_ptr< monty::ndarray< int32_t,1 > > _3079_shp)
{
  _checked_ptr_1<int32_t> _ptr__3079_shp(_3079_shp ? _3079_shp->raw() : nullptr, _3079_shp ? _3079_shp->size(0) : 0);
  shape = _3079_shp;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.withShape_

// Begin mosek.fusion.ConeDomain.withNamesOnAxis
// Method mosek.fusion.ConeDomain.withNamesOnAxis @ src/fusion/domain.mbi:1693:6-1706:7
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3080_names,int32_t _3081_axis) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__withNamesOnAxis(_3080_names,_3081_axis); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3080_names,int32_t _3081_axis) { return __mosek_2fusion_2ConeDomain__withNamesOnAxis(_3080_names,_3081_axis); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3080_names,int32_t _3081_axis)
{
  if ((NULL == _3080_names.get()))
  {
    {
      indexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(safe_add( _3081_axis,(int)1 ))));
      std::vector<std::string> _10432_;
      for (int32_t _3082_i = (int)0, _10433_ = (int)((_3080_names)->size(0)); _3082_i < _10433_ ; ++_3082_i)
      {
        _10432_.push_back(((*_3080_names)(_3082_i)));
      }
      auto _10434_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10432_.size()),_10432_.begin(),_10432_.end()));
      ((*indexnames)(_3081_axis)) = _10434_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3081_axis,(int)1 )))
  {
    {
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3083_ixnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_3081_axis)));
      int32_t _10435_ = (int)0;
      int32_t _10436_ = (int)((indexnames)->size(0));
      for (int32_t _3084_i = _10435_; _3084_i < _10436_; ++_3084_i)
      {
        {
          ((*_3083_ixnames)(_3084_i)) = ((*indexnames)(_3084_i));
        }
      }
      indexnames = _3083_ixnames;
    }
  }
  {}
  std::vector<std::string> _10437_;
  for (int32_t _3085_i = (int)0, _10438_ = (int)((_3080_names)->size(0)); _3085_i < _10438_ ; ++_3085_i)
  {
    _10437_.push_back(((*_3080_names)(_3085_i)));
  }
  auto _10439_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10437_.size()),_10437_.begin(),_10437_.end()));
  ((*indexnames)(_3081_axis)) = _10439_;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
// End mosek.fusion.ConeDomain.withNamesOnAxis

// Begin mosek.fusion.ConeDomain.finalize_and_validate
// Method mosek.fusion.ConeDomain.finalize_and_validate @ src/fusion/domain.mbi:1618:6-1652:7
void mosek::fusion::p_ConeDomain::finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3086_shp)
{
  _checked_ptr_1<int32_t> _ptr__3086_shp(_3086_shp ? _3086_shp->raw() : nullptr, _3086_shp ? _3086_shp->size(0) : 0);
  domsize = (int)1;
  if ((NULL == shape.get()))
  {
    {
      if ((NULL != _3086_shp.get()))
      {
        {
          shape = _3086_shp;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Missing domain shape"));
        }
      }
    }
  }
  else if((NULL != _3086_shp.get()))
  {
    {
      if (((int)((_3086_shp)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
        }
      }
      {}
      int32_t _10440_ = (int)0;
      int32_t _10441_ = (int)((_3086_shp)->size(0));
      for (int32_t _3087_i = _10440_; _3087_i < _10441_; ++_3087_i)
      {
        {
          if ((_ptr__3086_shp[_3087_i] != ((*shape)(_3087_i))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  int32_t _10442_ = (int)0;
  int32_t _10443_ = (int)((shape)->size(0));
  for (int32_t _3088_i = _10442_; _3088_i < _10443_; ++_3088_i)
  {
    {
      domsize *= ((*shape)(_3088_i));
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10444_ = (int)0;
      int32_t _10445_ = (int)((shape)->size(0));
      for (int32_t _3089_i = _10444_; _3089_i < _10445_; ++_3089_i)
      {
        {
          if (((NULL != ((*indexnames)(_3089_i)).get()) && ((int)((((*indexnames)(_3089_i)))->size(0)) != ((*shape)(_3089_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if ((!axisset))
  {
    {
      axisset = true;
      axisidx = ((int)((shape)->size(0)) - (int)1);
    }
  }
  else if(((axisidx < (int)0) || (axisidx >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cone axis is invalid"));
    }
  }
  {}
  if (((NULL != domofs.get()) && ((int)((domofs)->size(0)) != domsize)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Domain offset does not match shape"));
    }
  }
  {}
}
// End mosek.fusion.ConeDomain.finalize_and_validate

void mosek::fusion::p_ConeDomain::destroy()
{
  indexnames.reset();
  domofs.reset();
  alpha.reset();
  shape.reset();
}
void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }
// } class ConeDomain
// class PSDDomain { // @ src/fusion/domain.mbi:1418:4-1559:5
mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_PSDDomain::p_PSDDomain
  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.PSDDomain.ctor @ src/fusion/domain.mbi:1476:6-1493:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3090_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3091_shp,
    int32_t _3092_conedim1,
    int32_t _3093_conedim2)
{ return new mosek::fusion::PSDDomain(_3090_k,_3091_shp,_3092_conedim1,_3093_conedim2); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3090_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3091_shp,
    int32_t _3092_conedim1,
    int32_t _3093_conedim2) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3090_k,_3091_shp,_3092_conedim1,_3093_conedim2); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3090_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3091_shp,
    int32_t _3092_conedim1,
    int32_t _3093_conedim2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3091_shp(_3091_shp ? _3091_shp->raw() : nullptr, _3091_shp ? _3091_shp->size(0) : 0);
    axisIsSet = true;
    shape = _3091_shp;
    key = _3090_k;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _3092_conedim1;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _3093_conedim2;
    indexnames = nullptr;
    int32_t _3094_nd = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _3092_conedim1) && (((int)((shape)->size(0)) > _3093_conedim2) && ((_3092_conedim1 >= (int)0) && ((_3093_conedim2 >= (int)0) && (_3092_conedim1 != _3093_conedim2)))))) && (((*shape)(_3092_conedim1)) == ((*shape)(_3093_conedim2)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ src/fusion/domain.mbi:1472:6-1474:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3095_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3096_shp)
{ return new mosek::fusion::PSDDomain(_3095_k,_3096_shp); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3095_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3096_shp) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3095_k,_3096_shp); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3095_k,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3096_shp)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__3096_shp(_3096_shp ? _3096_shp->raw() : nullptr, _3096_shp ? _3096_shp->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_3095_k,_3096_shp,((int)((_3096_shp)->size(0)) - (int)2),((int)((_3096_shp)->size(0)) - (int)1));
  }
}
// mosek.fusion.PSDDomain.ctor

// mosek.fusion.PSDDomain.ctor @ src/fusion/domain.mbi:1464:6-1471:7
mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain
  (mosek::fusion::PSDKey _3097_k)
{ return new mosek::fusion::PSDDomain(_3097_k); }
mosek::fusion::PSDDomain::PSDDomain
  (mosek::fusion::PSDKey _3097_k) : 
   PSDDomain(new mosek::fusion::p_PSDDomain(this))
{ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_3097_k); }
void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _3097_k)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    shape = nullptr;
    key = _3097_k;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
    indexnames = nullptr;
  }
}
// mosek.fusion.PSDDomain.ctor

// Begin mosek.fusion.PSDDomain.axis
// Method mosek.fusion.PSDDomain.axis @ src/fusion/domain.mbi:1521:6-1540:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int32_t _3098_conedim1,int32_t _3099_conedim2) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_3098_conedim1,_3099_conedim2); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int32_t _3098_conedim1,int32_t _3099_conedim2) { return __mosek_2fusion_2PSDDomain__axis(_3098_conedim1,_3099_conedim2); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int32_t _3098_conedim1,int32_t _3099_conedim2)
{
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _3098_conedim1;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _3099_conedim2;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_3098_conedim1 >= (int)0) && ((_3099_conedim2 >= (int)0) && (_3098_conedim1 != _3099_conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _3098_conedim1) && (((int)((shape)->size(0)) > _3099_conedim2) && ((_3098_conedim1 >= (int)0) && ((_3099_conedim2 >= (int)0) && (_3098_conedim1 != _3099_conedim2)))))) && (((*shape)(_3098_conedim1)) == ((*shape)(_3099_conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
// End mosek.fusion.PSDDomain.axis

// Begin mosek.fusion.PSDDomain.withNamesOnAxis
// Method mosek.fusion.PSDDomain.withNamesOnAxis @ src/fusion/domain.mbi:1497:6-1510:7
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3100_names,int32_t _3101_axis) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__withNamesOnAxis(_3100_names,_3101_axis); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3100_names,int32_t _3101_axis) { return __mosek_2fusion_2PSDDomain__withNamesOnAxis(_3100_names,_3101_axis); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3100_names,int32_t _3101_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10446_;
      for (int32_t _3102_i = (int)0, _10447_ = safe_add( _3101_axis,(int)1 ); _3102_i < _10447_ ; ++_3102_i)
      {
        _10446_.push_back(nullptr);
      }
      auto _10448_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10446_.size()),_10446_.begin(),_10446_.end()));
      indexnames = _10448_;
      std::vector<std::string> _10449_;
      for (int32_t _3103_i = (int)0, _10450_ = (int)((_3100_names)->size(0)); _3103_i < _10450_ ; ++_3103_i)
      {
        _10449_.push_back(((*_3100_names)(_3103_i)));
      }
      auto _10451_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10449_.size()),_10449_.begin(),_10449_.end()));
      ((*indexnames)(_3101_axis)) = _10451_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3101_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10452_;
      for (int32_t _3105_i = (int)0, _10453_ = safe_add( _3101_axis,(int)1 ); _3105_i < _10453_ ; ++_3105_i)
      {
        _10452_.push_back(nullptr);
      }
      auto _10454_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10452_.size()),_10452_.begin(),_10452_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3104_ixnames = _10454_;
      int32_t _10455_ = (int)0;
      int32_t _10456_ = (int)((indexnames)->size(0));
      for (int32_t _3106_i = _10455_; _3106_i < _10456_; ++_3106_i)
      {
        {
          ((*_3104_ixnames)(_3106_i)) = ((*indexnames)(_3106_i));
        }
      }
      indexnames = _3104_ixnames;
    }
  }
  {}
  std::vector<std::string> _10457_;
  for (int32_t _3107_i = (int)0, _10458_ = (int)((_3100_names)->size(0)); _3107_i < _10458_ ; ++_3107_i)
  {
    _10457_.push_back(((*_3100_names)(_3107_i)));
  }
  auto _10459_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10457_.size()),_10457_.begin(),_10457_.end()));
  ((*indexnames)(_3101_axis)) = _10459_;
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
// End mosek.fusion.PSDDomain.withNamesOnAxis

// Begin mosek.fusion.PSDDomain.finalize_and_validate
// Method mosek.fusion.PSDDomain.finalize_and_validate @ src/fusion/domain.mbi:1426:6-1462:7
void mosek::fusion::p_PSDDomain::finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3108_shp)
{
  _checked_ptr_1<int32_t> _ptr__3108_shp(_3108_shp ? _3108_shp->raw() : nullptr, _3108_shp ? _3108_shp->size(0) : 0);
  if ((NULL != _3108_shp.get()))
  {
    {
      if ((NULL == shape.get()))
      {
        {
          shape = _3108_shp;
        }
      }
      else
      {
        {
          if (((int)((_3108_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10460_ = (int)0;
          int32_t _10461_ = (int)((_3108_shp)->size(0));
          for (int32_t _3109_i = _10460_; _3109_i < _10461_; ++_3109_i)
          {
            {
              if ((_ptr__3108_shp[_3109_i] != ((*shape)(_3109_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  if (((int)((shape)->size(0)) < (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Positive semidefinite domain must have at least two dimensions"));
    }
  }
  {}
  if ((!axisIsSet))
  {
    {
      conedim1 = ((int)((shape)->size(0)) - (int)2);
      conedim2 = ((int)((shape)->size(0)) - (int)1);
    }
  }
  {}
  if (((conedim1 < (int)0) || ((conedim1 >= (int)((shape)->size(0))) || ((conedim2 < (int)0) || ((conedim2 >= (int)((shape)->size(0))) || (conedim1 == conedim2))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension specification"));
    }
  }
  {}
  if ((((*shape)(conedim1)) != ((*shape)(conedim2))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cone dimensions must have same size"));
    }
  }
  {}
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match the domain shape"));
        }
      }
      else
      {
        {
          int32_t _10462_ = (int)0;
          int32_t _10463_ = (int)((shape)->size(0));
          for (int32_t _3110_i = _10462_; _3110_i < _10463_; ++_3110_i)
          {
            {
              if (((NULL != ((*indexnames)(_3110_i)).get()) && ((int)((((*indexnames)(_3110_i)))->size(0)) != ((*shape)(_3110_i)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Index names do not match the domain shape"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
}
// End mosek.fusion.PSDDomain.finalize_and_validate

void mosek::fusion::p_PSDDomain::destroy()
{
  indexnames.reset();
  shape.reset();
}
void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }
// } class PSDDomain
// class SymmetricRangeDomain { // @ src/fusion/domain.mbi:1373:4-1388:5
mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }
mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain
  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SymmetricRangeDomain.ctor @ src/fusion/domain.mbi:1377:6-1386:7
mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3111_other)
{ return new mosek::fusion::SymmetricRangeDomain(_3111_other); }
mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3111_other) : 
   SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this))
{ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_3111_other); }
void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3111_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_RangeDomain::_initialize(_3111_other);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int32_t _10464_;
    bool _10465_ = (NULL == shape.get());
    if (_10465_)
    {
      _10464_ = (int)0;
    }
    else
    {
      _10464_ = ((*shape)((int)0));
    }
    dim = _10464_;
  }
}
// mosek.fusion.SymmetricRangeDomain.ctor

void mosek::fusion::p_SymmetricRangeDomain::destroy()
{
}
void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }
// } class SymmetricRangeDomain
// class RangeDomain { // @ src/fusion/domain.mbi:1114:4-1365:5
mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_RangeDomain::p_RangeDomain
  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1257:6-1264:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3112_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3113_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3114_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3115_dims)
{ return new mosek::fusion::RangeDomain(_3112_scalable,_3113_lb,_3114_ub,_3115_dims); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3112_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3113_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3114_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3115_dims) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3112_scalable,_3113_lb,_3114_ub,_3115_dims); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3112_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3113_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3114_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3115_dims)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3113_lb(_3113_lb ? _3113_lb->raw() : nullptr, _3113_lb ? _3113_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3114_ub(_3114_ub ? _3114_ub->raw() : nullptr, _3114_ub ? _3114_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3115_dims(_3115_dims ? _3115_dims->raw() : nullptr, _3115_dims ? _3115_dims->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_3112_scalable,_3113_lb,_3114_ub,_3115_dims,nullptr,(int)1);
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1247:6-1255:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3116_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3117_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3118_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3119_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3120_sp)
{ return new mosek::fusion::RangeDomain(_3116_scalable,_3117_lb,_3118_ub,_3119_dims,_3120_sp); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3116_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3117_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3118_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3119_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3120_sp) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3116_scalable,_3117_lb,_3118_ub,_3119_dims,_3120_sp); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3116_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3117_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3118_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3119_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3120_sp)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3117_lb(_3117_lb ? _3117_lb->raw() : nullptr, _3117_lb ? _3117_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3118_ub(_3118_ub ? _3118_ub->raw() : nullptr, _3118_ub ? _3118_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3119_dims(_3119_dims ? _3119_dims->raw() : nullptr, _3119_dims ? _3119_dims->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_3116_scalable,_3117_lb,_3118_ub,_3119_dims,_3120_sp,(int)1);
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1226:6-1245:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (bool _3121_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3122_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3123_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3124_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3125_sp,
    int32_t _3126_steal)
{ return new mosek::fusion::RangeDomain(_3121_scalable,_3122_lb,_3123_ub,_3124_dims,_3125_sp,_3126_steal); }
mosek::fusion::RangeDomain::RangeDomain
  (bool _3121_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3122_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3123_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3124_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3125_sp,
    int32_t _3126_steal) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3121_scalable,_3122_lb,_3123_ub,_3124_dims,_3125_sp,_3126_steal); }
void mosek::fusion::p_RangeDomain::_initialize  (bool _3121_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3122_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3123_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3124_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3125_sp,
    int32_t _3126_steal)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3122_lb(_3122_lb ? _3122_lb->raw() : nullptr, _3122_lb ? _3122_lb->size(0) : 0);
    _checked_ptr_1<double> _ptr__3123_ub(_3123_ub ? _3123_ub->raw() : nullptr, _3123_ub ? _3123_ub->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3124_dims(_3124_dims ? _3124_dims->raw() : nullptr, _3124_dims ? _3124_dims->size(0) : 0);
    cardinal_flag = false;
    shape = _3124_dims;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _3121_scalable;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _3123_ub;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _3122_lb;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _3125_sp;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->indexnames = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->domsize = (int)0;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->nelements = (int)0;
  }
}
// mosek.fusion.RangeDomain.ctor

// mosek.fusion.RangeDomain.ctor @ src/fusion/domain.mbi:1211:6-1224:7
mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3127_other)
{ return new mosek::fusion::RangeDomain(_3127_other); }
mosek::fusion::RangeDomain::RangeDomain
  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3127_other) : 
   RangeDomain(new mosek::fusion::p_RangeDomain(this))
{ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_3127_other); }
void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _3127_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->lb;
    domsize = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->domsize;
    nelements = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->nelements;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->empty;
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _10466_;
    bool _10467_ = (NULL != mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->indexnames.get());
    if (_10467_)
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10468_;
      for (int32_t _3128_i = (int)0, _10469_ = (int)((mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->indexnames)->size(0)); _3128_i < _10469_ ; ++_3128_i)
      {
        _10468_.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_3127_other)->indexnames)(_3128_i)));
      }
      auto _10470_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10468_.size()),_10468_.begin(),_10468_.end()));
      _10466_ = _10470_;
    }
    else
    {
      _10466_ = nullptr;
    }
    indexnames = _10466_;
  }
}
// mosek.fusion.RangeDomain.ctor

// Begin mosek.fusion.RangeDomain.symmetric
// Method mosek.fusion.RangeDomain.symmetric @ src/fusion/domain.mbi:1364:6-96
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric()
{
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
// End mosek.fusion.RangeDomain.symmetric

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ src/fusion/domain.mbi:1353:6-1360:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3129_sparsity) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_3129_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3129_sparsity) { return __mosek_2fusion_2RangeDomain__sparse(_3129_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3129_sparsity)
{
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3129_sparsity)->size(0)),(int)((_3129_sparsity)->size(1)))));
  {
    int32_t _3130_i = (int)0;
    for(;(_3130_i < (int)((_3129_sparsity)->size(0)));++ _3130_i)
    {
      {
        {
          int32_t _3131_j = (int)0;
          for(;(_3131_j < (int)((_3129_sparsity)->size(1)));++ _3131_j)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_3130_i,_3131_j)) = ((*_3129_sparsity)(_3130_i,_3131_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ src/fusion/domain.mbi:1339:6-1345:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3132_sparsity) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_3132_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3132_sparsity) { return __mosek_2fusion_2RangeDomain__sparse(_3132_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3132_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3132_sparsity(_3132_sparsity ? _3132_sparsity->raw() : nullptr, _3132_sparsity ? _3132_sparsity->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3132_sparsity)->size(0)),(int)1)));
  int32_t _10471_ = (int)0;
  int32_t _10472_ = (int)((_3132_sparsity)->size(0));
  for (int32_t _3133_i = _10471_; _3133_i < _10472_; ++_3133_i)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_3133_i,(int)0)) = _ptr__3132_sparsity[_3133_i];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.sparse
// Method mosek.fusion.RangeDomain.sparse @ src/fusion/domain.mbi:1327:6-1332:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse()
{
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.sparse

// Begin mosek.fusion.RangeDomain.integral
// Method mosek.fusion.RangeDomain.integral @ src/fusion/domain.mbi:1319:6-83
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.integral

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1306:6-124
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3134_dim0,int32_t _3135_dim1,int32_t _3136_dim2) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3134_dim0,_3135_dim1,_3136_dim2); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3134_dim0,int32_t _3135_dim1,int32_t _3136_dim2) { return __mosek_2fusion_2RangeDomain__withShape(_3134_dim0,_3135_dim1,_3136_dim2); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3134_dim0,int32_t _3135_dim1,int32_t _3136_dim2)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3134_dim0),(int32_t)(_3135_dim1),(int32_t)(_3136_dim2)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1305:6-108
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3137_dim0,int32_t _3138_dim1) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3137_dim0,_3138_dim1); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3137_dim0,int32_t _3138_dim1) { return __mosek_2fusion_2RangeDomain__withShape(_3137_dim0,_3138_dim1); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3137_dim0,int32_t _3138_dim1)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3137_dim0),(int32_t)(_3138_dim1)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1304:6-92
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int32_t _3139_dim0) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3139_dim0); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int32_t _3139_dim0) { return __mosek_2fusion_2RangeDomain__withShape(_3139_dim0); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int32_t _3139_dim0)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3139_dim0)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withShape
// Method mosek.fusion.RangeDomain.withShape @ src/fusion/domain.mbi:1303:6-83
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3140_shp) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_3140_shp); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3140_shp) { return __mosek_2fusion_2RangeDomain__withShape(_3140_shp); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3140_shp)
{
  _checked_ptr_1<int32_t> _ptr__3140_shp(_3140_shp ? _3140_shp->raw() : nullptr, _3140_shp ? _3140_shp->size(0) : 0);
  shape = _3140_shp;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withShape

// Begin mosek.fusion.RangeDomain.withNamesOnAxis
// Method mosek.fusion.RangeDomain.withNamesOnAxis @ src/fusion/domain.mbi:1279:6-1292:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3141_names,int32_t _3142_axis) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withNamesOnAxis(_3141_names,_3142_axis); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3141_names,int32_t _3142_axis) { return __mosek_2fusion_2RangeDomain__withNamesOnAxis(_3141_names,_3142_axis); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3141_names,int32_t _3142_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10473_;
      for (int32_t _3143_i = (int)0, _10474_ = safe_add( _3142_axis,(int)1 ); _3143_i < _10474_ ; ++_3143_i)
      {
        _10473_.push_back(nullptr);
      }
      auto _10475_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10473_.size()),_10473_.begin(),_10473_.end()));
      indexnames = _10475_;
      std::vector<std::string> _10476_;
      for (int32_t _3144_i = (int)0, _10477_ = (int)((_3141_names)->size(0)); _3144_i < _10477_ ; ++_3144_i)
      {
        _10476_.push_back(((*_3141_names)(_3144_i)));
      }
      auto _10478_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10476_.size()),_10476_.begin(),_10476_.end()));
      ((*indexnames)(_3142_axis)) = _10478_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3142_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10479_;
      for (int32_t _3146_i = (int)0, _10480_ = safe_add( _3142_axis,(int)1 ); _3146_i < _10480_ ; ++_3146_i)
      {
        _10479_.push_back(nullptr);
      }
      auto _10481_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10479_.size()),_10479_.begin(),_10479_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3145_ixnames = _10481_;
      int32_t _10482_ = (int)0;
      int32_t _10483_ = (int)((indexnames)->size(0));
      for (int32_t _3147_i = _10482_; _3147_i < _10483_; ++_3147_i)
      {
        {
          ((*_3145_ixnames)(_3147_i)) = ((*indexnames)(_3147_i));
        }
      }
      indexnames = _3145_ixnames;
    }
  }
  {}
  std::vector<std::string> _10484_;
  for (int32_t _3148_i = (int)0, _10485_ = (int)((_3141_names)->size(0)); _3148_i < _10485_ ; ++_3148_i)
  {
    _10484_.push_back(((*_3141_names)(_3148_i)));
  }
  auto _10486_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10484_.size()),_10484_.begin(),_10484_.end()));
  ((*indexnames)(_3142_axis)) = _10486_;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
// End mosek.fusion.RangeDomain.withNamesOnAxis

// Begin mosek.fusion.RangeDomain.match_shape
// Method mosek.fusion.RangeDomain.match_shape @ src/fusion/domain.mbi:1266:6-1277:7
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3149_shp)
{
  _checked_ptr_1<int32_t> _ptr__3149_shp(_3149_shp ? _3149_shp->raw() : nullptr, _3149_shp ? _3149_shp->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_3149_shp)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int32_t _10487_ = (int)0;
      int32_t _10488_ = (int)((shape)->size(0));
      for (int32_t _3150_i = _10487_; _3150_i < _10488_; ++_3150_i)
      {
        {
          if ((((*shape)(_3150_i)) != _ptr__3149_shp[_3150_i]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
// End mosek.fusion.RangeDomain.match_shape

// Begin mosek.fusion.RangeDomain.finalize_and_validate
// Method mosek.fusion.RangeDomain.finalize_and_validate @ src/fusion/domain.mbi:1145:6-1209:7
void mosek::fusion::p_RangeDomain::finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3151_shp)
{
  _checked_ptr_1<int32_t> _ptr__3151_shp(_3151_shp ? _3151_shp->raw() : nullptr, _3151_shp ? _3151_shp->size(0) : 0);
  domsize = (int)1;
  if (scalable)
  {
    {
      if ((NULL != _3151_shp.get()))
      {
        {
          shape = _3151_shp;
        }
      }
      else
      {
        {
          shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        }
      }
      int32_t _10489_ = (int)0;
      int32_t _10490_ = (int)((shape)->size(0));
      for (int32_t _3152_i = _10489_; _3152_i < _10490_; ++_3152_i)
      {
        {
          domsize *= ((*shape)(_3152_i));
        }
      }
    }
  }
  else
  {
    {
      if ((NULL != _3151_shp.get()))
      {
        {
          if (((int)((_3151_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10491_ = (int)0;
          int32_t _10492_ = (int)((_3151_shp)->size(0));
          for (int32_t _3153_i = _10491_; _3153_i < _10492_; ++_3153_i)
          {
            {
              if ((_ptr__3151_shp[_3153_i] != ((*shape)(_3153_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
          int32_t _10493_ = (int)0;
          int32_t _10494_ = (int)((shape)->size(0));
          for (int32_t _3154_i = _10493_; _3154_i < _10494_; ++_3154_i)
          {
            {
              domsize *= ((*shape)(_3154_i));
            }
          }
        }
      }
      {}
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) != (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10495_ = (int)0;
      int32_t _10496_ = (int)((shape)->size(0));
      for (int32_t _3155_i = _10495_; _3155_i < _10496_; ++_3155_i)
      {
        {
          if (((NULL != ((*indexnames)(_3155_i)).get()) && ((int)((((*indexnames)(_3155_i)))->size(0)) != ((*shape)(_3155_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
    }
  }
  {}
  if ((NULL != sparsity.get()))
  {
    {
      nelements = (int)((sparsity)->size(0));
      if (((int)((shape)->size(0)) != (int)((sparsity)->size(1))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and sparsity pattern"));
        }
      }
      {}
      int32_t _10497_ = (int)0;
      int64_t _10498_ = nelements;
      for (int64_t _3156_i = _10497_; _3156_i < _10498_; ++_3156_i)
      {
        {
          int32_t _10499_ = (int)0;
          int32_t _10500_ = (int)((sparsity)->size(1));
          for (int32_t _3157_j = _10499_; _3157_j < _10500_; ++_3157_j)
          {
            {
              if (((((*sparsity)(_3156_i,_3157_j)) < (int)0) || (((*sparsity)(_3156_i,_3157_j)) >= ((*shape)(_3157_j)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern entry is out of bounds"));
                }
              }
              {}
            }
          }
        }
      }
      if (((!scalable) && ((NULL != lb.get()) && ((int)((lb)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
      if (((!scalable) && ((NULL != ub.get()) && ((int)((ub)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
    }
  }
  else
  {
    {
      nelements = domsize;
      if (((NULL != lb.get()) && (!scalable)))
      {
        {
          if (((int)((lb)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
      if (((NULL != ub.get()) && (!scalable)))
      {
        {
          if (((int)((ub)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
    }
  }
}
// End mosek.fusion.RangeDomain.finalize_and_validate

void mosek::fusion::p_RangeDomain::destroy()
{
  indexnames.reset();
  ub.reset();
  lb.reset();
  sparsity.reset();
  shape.reset();
}
void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }
// } class RangeDomain
// class SymmetricLinearDomain { // @ src/fusion/domain.mbi:1017:4-1087:5
mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain
  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.SymmetricLinearDomain.ctor @ src/fusion/domain.mbi:1028:6-1042:7
mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3158_other)
{ return new mosek::fusion::SymmetricLinearDomain(_3158_other); }
mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3158_other) : 
   SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this))
{ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_3158_other); }
void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3158_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    dom = _3158_other;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_3158_other)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_3158_other)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_3158_other)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_3158_other)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int32_t _10501_;
    bool _10502_ = (NULL == shape.get());
    if (_10502_)
    {
      _10501_ = (int)0;
    }
    else
    {
      _10501_ = ((*shape)((int)0));
    }
    dim = _10501_;
  }
}
// mosek.fusion.SymmetricLinearDomain.ctor

// Begin mosek.fusion.SymmetricLinearDomain.sparse
// Method mosek.fusion.SymmetricLinearDomain.sparse @ src/fusion/domain.mbi:1079:6-1086:7
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3159_sparsity) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_3159_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3159_sparsity) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_3159_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3159_sparsity)
{
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3159_sparsity)->size(0)),(int)((_3159_sparsity)->size(1)))));
  {
    int32_t _3160_i = (int)0;
    for(;(_3160_i < (int)((_3159_sparsity)->size(0)));++ _3160_i)
    {
      {
        {
          int32_t _3161_j = (int)0;
          for(;(_3161_j < (int)((_3159_sparsity)->size(1)));++ _3161_j)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_3160_i,_3161_j)) = ((*_3159_sparsity)(_3160_i,_3161_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
// End mosek.fusion.SymmetricLinearDomain.sparse

// Begin mosek.fusion.SymmetricLinearDomain.sparse
// Method mosek.fusion.SymmetricLinearDomain.sparse @ src/fusion/domain.mbi:1065:6-1071:7
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3162_sparsity) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_3162_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3162_sparsity) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_3162_sparsity); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3162_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3162_sparsity(_3162_sparsity ? _3162_sparsity->raw() : nullptr, _3162_sparsity ? _3162_sparsity->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3162_sparsity)->size(0)),(int)1)));
  int32_t _10503_ = (int)0;
  int32_t _10504_ = (int)((_3162_sparsity)->size(0));
  for (int32_t _3163_i = _10503_; _3163_i < _10504_; ++_3163_i)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_3163_i,(int)0)) = _ptr__3162_sparsity[_3163_i];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
// End mosek.fusion.SymmetricLinearDomain.sparse

// Begin mosek.fusion.SymmetricLinearDomain.integral
// Method mosek.fusion.SymmetricLinearDomain.integral @ src/fusion/domain.mbi:1057:6-92
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
// End mosek.fusion.SymmetricLinearDomain.integral

// Begin mosek.fusion.SymmetricLinearDomain.match_shape
// Method mosek.fusion.SymmetricLinearDomain.match_shape @ src/fusion/domain.mbi:1044:6-1049:7
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3164_shp)
{
  _checked_ptr_1<int32_t> _ptr__3164_shp(_3164_shp ? _3164_shp->raw() : nullptr, _3164_shp ? _3164_shp->size(0) : 0);
  int32_t _10505_ = (int)0;
  int32_t _10506_ = (int)((_3164_shp)->size(0));
  for (int32_t _3165_i = _10505_; _3165_i < _10506_; ++_3165_i)
  {
    {
      if ((_ptr__3164_shp[_3165_i] == ((*shape)(_3165_i))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
// End mosek.fusion.SymmetricLinearDomain.match_shape

void mosek::fusion::p_SymmetricLinearDomain::destroy()
{
  sparsity.reset();
  shape.reset();
  dom.reset();
}
void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }
// } class SymmetricLinearDomain
// class LinearDomain { // @ src/fusion/domain.mbi:765:4-1010:5
mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinearDomain::p_LinearDomain
  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinearDomain.ctor @ src/fusion/domain.mbi:903:6-909:6
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (mosek::fusion::RelationKey _3166_k,
    bool _3167_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3168_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3169_dims)
{ return new mosek::fusion::LinearDomain(_3166_k,_3167_scalable,_3168_rhs,_3169_dims); }
mosek::fusion::LinearDomain::LinearDomain
  (mosek::fusion::RelationKey _3166_k,
    bool _3167_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3168_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3169_dims) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3166_k,_3167_scalable,_3168_rhs,_3169_dims); }
void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _3166_k,
    bool _3167_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3168_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3169_dims)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3168_rhs(_3168_rhs ? _3168_rhs->raw() : nullptr, _3168_rhs ? _3168_rhs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3169_dims(_3169_dims ? _3169_dims->raw() : nullptr, _3169_dims ? _3169_dims->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_3166_k,_3167_scalable,_3168_rhs,_3169_dims,nullptr,(int)1);
  }
}
// mosek.fusion.LinearDomain.ctor

// mosek.fusion.LinearDomain.ctor @ src/fusion/domain.mbi:884:6-901:7
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (mosek::fusion::RelationKey _3170_k,
    bool _3171_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3172_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3173_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3174_sp,
    int32_t _3175_steal)
{ return new mosek::fusion::LinearDomain(_3170_k,_3171_scalable,_3172_rhs,_3173_dims,_3174_sp,_3175_steal); }
mosek::fusion::LinearDomain::LinearDomain
  (mosek::fusion::RelationKey _3170_k,
    bool _3171_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3172_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3173_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3174_sp,
    int32_t _3175_steal) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3170_k,_3171_scalable,_3172_rhs,_3173_dims,_3174_sp,_3175_steal); }
void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _3170_k,
    bool _3171_scalable,
    std::shared_ptr< monty::ndarray< double,1 > > _3172_rhs,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3173_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3174_sp,
    int32_t _3175_steal)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__3172_rhs(_3172_rhs ? _3172_rhs->raw() : nullptr, _3172_rhs ? _3172_rhs->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__3173_dims(_3173_dims ? _3173_dims->raw() : nullptr, _3173_dims ? _3173_dims->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _3171_scalable;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _3173_dims;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _3170_k;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _3172_rhs;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _3174_sp;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
    indexnames = nullptr;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->domsize = (int)0;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->nelements = (int)0;
  }
}
// mosek.fusion.LinearDomain.ctor

// mosek.fusion.LinearDomain.ctor @ src/fusion/domain.mbi:870:6-882:7
mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3176_other)
{ return new mosek::fusion::LinearDomain(_3176_other); }
mosek::fusion::LinearDomain::LinearDomain
  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3176_other) : 
   LinearDomain(new mosek::fusion::p_LinearDomain(this))
{ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_3176_other); }
void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _3176_other)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->scalable;
    nelements = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->nelements;
    domsize = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->domsize;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->empty;
    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _10507_;
    bool _10508_ = (NULL != mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->indexnames.get());
    if (_10508_)
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10509_;
      for (int32_t _3177_i = (int)0, _10510_ = (int)((mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->indexnames)->size(0)); _3177_i < _10510_ ; ++_3177_i)
      {
        _10509_.push_back(((*mosek::fusion::p_LinearDomain::_get_impl(_3176_other)->indexnames)(_3177_i)));
      }
      auto _10511_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10509_.size()),_10509_.begin(),_10509_.end()));
      _10507_ = _10511_;
    }
    else
    {
      _10507_ = nullptr;
    }
    indexnames = _10507_;
  }
}
// mosek.fusion.LinearDomain.ctor

// Begin mosek.fusion.LinearDomain.symmetric
// Method mosek.fusion.LinearDomain.symmetric @ src/fusion/domain.mbi:1009:6-98
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric()
{
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
// End mosek.fusion.LinearDomain.symmetric

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ src/fusion/domain.mbi:997:6-1005:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3178_sparsity) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_3178_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3178_sparsity) { return __mosek_2fusion_2LinearDomain__sparse(_3178_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,2 > > _3178_sparsity)
{
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3178_sparsity)->size(0)),(int)((_3178_sparsity)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int32_t _3179_i = (int)0;
    for(;(_3179_i < (int)((_3178_sparsity)->size(0)));++ _3179_i)
    {
      {
        {
          int32_t _3180_j = (int)0;
          for(;(_3180_j < (int)((_3178_sparsity)->size(1)));++ _3180_j)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_3179_i,_3180_j)) = ((*_3178_sparsity)(_3179_i,_3180_j));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ src/fusion/domain.mbi:982:6-989:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3181_sparsity) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_3181_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3181_sparsity) { return __mosek_2fusion_2LinearDomain__sparse(_3181_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _3181_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3181_sparsity(_3181_sparsity ? _3181_sparsity->raw() : nullptr, _3181_sparsity ? _3181_sparsity->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3181_sparsity)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int32_t _10512_ = (int)0;
  int32_t _10513_ = (int)((_3181_sparsity)->size(0));
  for (int32_t _3182_i = _10512_; _3182_i < _10513_; ++_3182_i)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_3182_i,(int)0)) = _ptr__3181_sparsity[_3182_i];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.sparse
// Method mosek.fusion.LinearDomain.sparse @ src/fusion/domain.mbi:970:6-975:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse()
{
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.sparse

// Begin mosek.fusion.LinearDomain.integral
// Method mosek.fusion.LinearDomain.integral @ src/fusion/domain.mbi:960:6-83
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral()
{
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.integral

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:952:6-125
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3183_dim0,int32_t _3184_dim1,int32_t _3185_dim2) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3183_dim0,_3184_dim1,_3185_dim2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3183_dim0,int32_t _3184_dim1,int32_t _3185_dim2) { return __mosek_2fusion_2LinearDomain__withShape(_3183_dim0,_3184_dim1,_3185_dim2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3183_dim0,int32_t _3184_dim1,int32_t _3185_dim2)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3183_dim0),(int32_t)(_3184_dim1),(int32_t)(_3185_dim2)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:951:6-109
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3186_dim0,int32_t _3187_dim1) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3186_dim0,_3187_dim1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3186_dim0,int32_t _3187_dim1) { return __mosek_2fusion_2LinearDomain__withShape(_3186_dim0,_3187_dim1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3186_dim0,int32_t _3187_dim1)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3186_dim0),(int32_t)(_3187_dim1)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:950:6-93
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int32_t _3188_dim0) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3188_dim0); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int32_t _3188_dim0) { return __mosek_2fusion_2LinearDomain__withShape(_3188_dim0); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int32_t _3188_dim0)
{
  shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3188_dim0)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withShape
// Method mosek.fusion.LinearDomain.withShape @ src/fusion/domain.mbi:949:6-85
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3189_shp) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_3189_shp); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3189_shp) { return __mosek_2fusion_2LinearDomain__withShape(_3189_shp); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3189_shp)
{
  _checked_ptr_1<int32_t> _ptr__3189_shp(_3189_shp ? _3189_shp->raw() : nullptr, _3189_shp ? _3189_shp->size(0) : 0);
  shape = _3189_shp;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withShape

// Begin mosek.fusion.LinearDomain.withNamesOnAxis
// Method mosek.fusion.LinearDomain.withNamesOnAxis @ src/fusion/domain.mbi:923:6-936:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3190_names,int32_t _3191_axis) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withNamesOnAxis(_3190_names,_3191_axis); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3190_names,int32_t _3191_axis) { return __mosek_2fusion_2LinearDomain__withNamesOnAxis(_3190_names,_3191_axis); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withNamesOnAxis(std::shared_ptr< monty::ndarray< std::string,1 > > _3190_names,int32_t _3191_axis)
{
  if ((NULL == indexnames.get()))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10514_;
      for (int32_t _3192_i = (int)0, _10515_ = safe_add( _3191_axis,(int)1 ); _3192_i < _10515_ ; ++_3192_i)
      {
        _10514_.push_back(nullptr);
      }
      auto _10516_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10514_.size()),_10514_.begin(),_10514_.end()));
      indexnames = _10516_;
      std::vector<std::string> _10517_;
      for (int32_t _3193_i = (int)0, _10518_ = (int)((_3190_names)->size(0)); _3193_i < _10518_ ; ++_3193_i)
      {
        _10517_.push_back(((*_3190_names)(_3193_i)));
      }
      auto _10519_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10517_.size()),_10517_.begin(),_10517_.end()));
      ((*indexnames)(_3191_axis)) = _10519_;
    }
  }
  {}
  if (((int)((indexnames)->size(0)) < safe_add( _3191_axis,(int)1 )))
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< std::string,1 > >> _10520_;
      for (int32_t _3195_i = (int)0, _10521_ = safe_add( _3191_axis,(int)1 ); _3195_i < _10521_ ; ++_3195_i)
      {
        _10520_.push_back(nullptr);
      }
      auto _10522_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape(_10520_.size()),_10520_.begin(),_10520_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3194_ixnames = _10522_;
      int32_t _10523_ = (int)0;
      int32_t _10524_ = (int)((indexnames)->size(0));
      for (int32_t _3196_i = _10523_; _3196_i < _10524_; ++_3196_i)
      {
        {
          ((*_3194_ixnames)(_3196_i)) = ((*indexnames)(_3196_i));
        }
      }
      indexnames = _3194_ixnames;
    }
  }
  {}
  std::vector<std::string> _10525_;
  for (int32_t _3197_i = (int)0, _10526_ = (int)((_3190_names)->size(0)); _3197_i < _10526_ ; ++_3197_i)
  {
    _10525_.push_back(((*_3190_names)(_3197_i)));
  }
  auto _10527_ = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_10525_.size()),_10525_.begin(),_10525_.end()));
  ((*indexnames)(_3191_axis)) = _10527_;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
// End mosek.fusion.LinearDomain.withNamesOnAxis

// Begin mosek.fusion.LinearDomain.match_shape
// Method mosek.fusion.LinearDomain.match_shape @ src/fusion/domain.mbi:911:6-919:7
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int32_t,1 > > _3198_shp)
{
  _checked_ptr_1<int32_t> _ptr__3198_shp(_3198_shp ? _3198_shp->raw() : nullptr, _3198_shp ? _3198_shp->size(0) : 0);
  if ((!scalable))
  {
    {
      int32_t _10528_ = (int)0;
      int32_t _10529_ = (int)((_3198_shp)->size(0));
      for (int32_t _3199_i = _10528_; _3199_i < _10529_; ++_3199_i)
      {
        {
          if ((_ptr__3198_shp[_3199_i] == ((*shape)(_3199_i))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
// End mosek.fusion.LinearDomain.match_shape

// Begin mosek.fusion.LinearDomain.finalize_and_validate
// Method mosek.fusion.LinearDomain.finalize_and_validate @ src/fusion/domain.mbi:799:6-867:7
void mosek::fusion::p_LinearDomain::finalize_and_validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3200_shp)
{
  _checked_ptr_1<int32_t> _ptr__3200_shp(_3200_shp ? _3200_shp->raw() : nullptr, _3200_shp ? _3200_shp->size(0) : 0);
  if (scalable)
  {
    {
      if ((NULL == shape.get()))
      {
        {
          if (((NULL != sparsity.get()) && (NULL == _3200_shp.get())))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Sparse domain requires a fixed shape"));
            }
          }
          {}
          if ((NULL != _3200_shp.get()))
          {
            {
              shape = _3200_shp;
            }
          }
          else
          {
            {
              shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((NULL != _3200_shp.get()))
      {
        {
          if (((int)((_3200_shp)->size(0)) != (int)((shape)->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
            }
          }
          {}
          int32_t _10530_ = (int)0;
          int32_t _10531_ = (int)((_3200_shp)->size(0));
          for (int32_t _3201_i = _10530_; _3201_i < _10531_; ++_3201_i)
          {
            {
              if ((_ptr__3200_shp[_3201_i] != ((*shape)(_3201_i))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Conflicting shape definitions"));
                }
              }
              {}
            }
          }
        }
      }
      {}
    }
  }
  if ((NULL != indexnames.get()))
  {
    {
      if (((int)((indexnames)->size(0)) > (int)((shape)->size(0))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
        }
      }
      {}
      int32_t _10532_ = (int)0;
      int32_t _10533_ = (int)((indexnames)->size(0));
      for (int32_t _3202_i = _10532_; _3202_i < _10533_; ++_3202_i)
      {
        {
          if (((NULL != ((*indexnames)(_3202_i)).get()) && ((int)((((*indexnames)(_3202_i)))->size(0)) != ((*shape)(_3202_i)))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Index names do not match shape"));
            }
          }
          {}
        }
      }
      if (((int)((indexnames)->size(0)) < (int)((shape)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > > _3203_tmpindexnames = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< std::string,1 > >,1 >(monty::shape((int)((shape)->size(0)))));
          int32_t _10534_ = (int)0;
          int32_t _10535_ = (int)((indexnames)->size(0));
          for (int32_t _3204_i = _10534_; _3204_i < _10535_; ++_3204_i)
          {
            {
              ((*_3203_tmpindexnames)(_3204_i)) = ((*indexnames)(_3204_i));
            }
          }
          indexnames = _3203_tmpindexnames;
        }
      }
      {}
    }
  }
  {}
  domsize = (int)1;
  int32_t _10536_ = (int)0;
  int32_t _10537_ = (int)((shape)->size(0));
  for (int32_t _3205_i = _10536_; _3205_i < _10537_; ++_3205_i)
  {
    {
      domsize *= ((*shape)(_3205_i));
    }
  }
  if ((NULL != sparsity.get()))
  {
    {
      nelements = (int)((sparsity)->size(0));
      if (((int)((shape)->size(0)) != (int)((sparsity)->size(1))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and sparsity pattern"));
        }
      }
      {}
      int32_t _10538_ = (int)0;
      int64_t _10539_ = nelements;
      for (int64_t _3206_i = _10538_; _3206_i < _10539_; ++_3206_i)
      {
        {
          int32_t _10540_ = (int)0;
          int32_t _10541_ = (int)((sparsity)->size(1));
          for (int32_t _3207_j = _10540_; _3207_j < _10541_; ++_3207_j)
          {
            {
              if (((((*sparsity)(_3206_i,_3207_j)) < (int)0) || (((*sparsity)(_3206_i,_3207_j)) >= ((*shape)(_3207_j)))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern entry is out of bounds"));
                }
              }
              {}
            }
          }
        }
      }
      if (((!scalable) && ((NULL != bnd.get()) && ((int)((bnd)->size(0)) != nelements))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Sparsity pattern does not match bound"));
        }
      }
      {}
    }
  }
  else
  {
    {
      nelements = domsize;
      if (((NULL != bnd.get()) && (!scalable)))
      {
        {
          if (((int)((bnd)->size(0)) != nelements))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Domain bound does not match shape"));
            }
          }
          {}
        }
      }
      {}
    }
  }
}
// End mosek.fusion.LinearDomain.finalize_and_validate

void mosek::fusion::p_LinearDomain::destroy()
{
  indexnames.reset();
  sparsity.reset();
  bnd.reset();
  shape.reset();
}
void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }
// } class LinearDomain
// class Domain { // @ src/fusion/domain.mbi:402:4-744:5
mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Domain::p_Domain
  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Domain.dimsize
// Method mosek.fusion.Domain.dimsize @ src/fusion/domain.mbi:743:6-126
int64_t mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int32_t,1 > > _3208_dims)
{
  _checked_ptr_1<int32_t> _ptr__3208_dims(_3208_dims ? _3208_dims->raw() : nullptr, _3208_dims ? _3208_dims->size(0) : 0);
  int64_t _3209_sz = (int64_t)1;
  int32_t _10542_ = (int)0;
  int32_t _10543_ = (int)((_3208_dims)->size(0));
  for (int32_t _3210_i = _10542_; _3210_i < _10543_; ++_3210_i)
  {
    {
      _3209_sz *= _ptr__3208_dims[_3210_i];
    }
  }
  return _3209_sz;
}
// End mosek.fusion.Domain.dimsize

// Begin mosek.fusion.Domain.mkRangedDomain
// Method mosek.fusion.Domain.mkRangedDomain @ src/fusion/domain.mbi:624:6-741:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _3211_lb,monty::rc_ptr< ::mosek::fusion::Matrix > _3212_ub)
{
  if (((mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimi != mosek::fusion::p_Matrix::_get_impl(_3212_ub)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimj != mosek::fusion::p_Matrix::_get_impl(_3212_ub)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_3211_lb->isSparse() && _3212_ub->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3213_lsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3211_lb->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3213_lsubi(_3213_lsubi ? _3213_lsubi->raw() : nullptr,_3213_lsubi ? _3213_lsubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3214_lsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3211_lb->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3214_lsubj(_3214_lsubj ? _3214_lsubj->raw() : nullptr,_3214_lsubj ? _3214_lsubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3215_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3211_lb->numNonzeros())));
      _checked_ptr_1<double> _ptr__3215_lval(_3215_lval ? _3215_lval->raw() : nullptr,_3215_lval ? _3215_lval->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3216_usubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3212_ub->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3216_usubi(_3216_usubi ? _3216_usubi->raw() : nullptr,_3216_usubi ? _3216_usubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3217_usubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3212_ub->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3217_usubj(_3217_usubj ? _3217_usubj->raw() : nullptr,_3217_usubj ? _3217_usubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3218_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3212_ub->numNonzeros())));
      _checked_ptr_1<double> _ptr__3218_uval(_3218_uval ? _3218_uval->raw() : nullptr,_3218_uval ? _3218_uval->size(0) : 0);
      _3211_lb->getDataAsTriplets(_3213_lsubi,_3214_lsubj,_3215_lval);
      _3212_ub->getDataAsTriplets(_3216_usubi,_3217_usubj,_3218_uval);
      int64_t _3219_n = (int)0;
      {
        int32_t _3220_ui = (int)0;
        int32_t _3221_li = (int)0;
        while ( ((_3221_li < (int)((_3213_lsubi)->size(0))) && (_3220_ui < (int)((_3216_usubi)->size(0)))) )
        {
          {
            if (((_ptr__3213_lsubi[_3221_li] < _ptr__3216_usubi[_3220_ui]) || ((_ptr__3213_lsubi[_3221_li] == _ptr__3216_usubi[_3220_ui]) && (_ptr__3214_lsubj[_3221_li] < _ptr__3217_usubj[_3220_ui]))))
            {
              {
                ++ _3219_n;
                ++ _3221_li;
              }
            }
            else
            {
              {
                if (((_ptr__3213_lsubi[_3221_li] > _ptr__3216_usubi[_3220_ui]) || ((_ptr__3213_lsubi[_3221_li] == _ptr__3216_usubi[_3220_ui]) && (_ptr__3214_lsubj[_3221_li] > _ptr__3217_usubj[_3220_ui]))))
                {
                  {
                    ++ _3219_n;
                    ++ _3220_ui;
                  }
                }
                else
                {
                  {
                    ++ _3219_n;
                    ++ _3221_li;
                    ++ _3220_ui;
                  }
                }
              }
            }
          }
        }
        _3219_n += ((int)((_3213_lsubi)->size(0)) - _3221_li);
        _3219_n += ((int)((_3216_usubi)->size(0)) - _3220_ui);
      }
      std::shared_ptr< monty::ndarray< int32_t,2 > > _3222_inst = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape(_3219_n,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _3223_lbv = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3219_n)));
      _checked_ptr_1<double> _ptr__3223_lbv(_3223_lbv ? _3223_lbv->raw() : nullptr,_3223_lbv ? _3223_lbv->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3224_ubv = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3219_n)));
      _checked_ptr_1<double> _ptr__3224_ubv(_3224_ubv ? _3224_ubv->raw() : nullptr,_3224_ubv ? _3224_ubv->size(0) : 0);
      {
        int32_t _3225_k = (int)0;
        int32_t _3226_ui = (int)0;
        int32_t _3227_li = (int)0;
        while ( ((_3227_li < (int)((_3213_lsubi)->size(0))) && (_3226_ui < (int)((_3216_usubi)->size(0)))) )
        {
          {
            if (((_ptr__3213_lsubi[_3227_li] < _ptr__3216_usubi[_3226_ui]) || ((_ptr__3213_lsubi[_3227_li] == _ptr__3216_usubi[_3226_ui]) && (_ptr__3214_lsubj[_3227_li] < _ptr__3217_usubj[_3226_ui]))))
            {
              {
                ((*_3222_inst)(_3225_k,(int)0)) = _ptr__3213_lsubi[_3227_li];
                ((*_3222_inst)(_3225_k,(int)1)) = _ptr__3214_lsubj[_3227_li];
                _ptr__3223_lbv[_3225_k] = _ptr__3215_lval[_3227_li];
                _ptr__3224_ubv[_3225_k] = 0.0;
                ++ _3225_k;
                ++ _3227_li;
              }
            }
            else
            {
              {
                if (((_ptr__3213_lsubi[_3227_li] > _ptr__3216_usubi[_3226_ui]) || ((_ptr__3213_lsubi[_3227_li] == _ptr__3216_usubi[_3226_ui]) && (_ptr__3214_lsubj[_3227_li] > _ptr__3217_usubj[_3226_ui]))))
                {
                  {
                    ((*_3222_inst)(_3225_k,(int)0)) = _ptr__3216_usubi[_3226_ui];
                    ((*_3222_inst)(_3225_k,(int)1)) = _ptr__3217_usubj[_3226_ui];
                    _ptr__3223_lbv[_3225_k] = 0.0;
                    _ptr__3224_ubv[_3225_k] = _ptr__3218_uval[_3226_ui];
                    ++ _3225_k;
                    ++ _3226_ui;
                  }
                }
                else
                {
                  {
                    ((*_3222_inst)(_3225_k,(int)0)) = _ptr__3216_usubi[_3226_ui];
                    ((*_3222_inst)(_3225_k,(int)1)) = _ptr__3217_usubj[_3226_ui];
                    _ptr__3223_lbv[_3225_k] = _ptr__3215_lval[_3226_ui];
                    _ptr__3224_ubv[_3225_k] = _ptr__3218_uval[_3226_ui];
                    ++ _3225_k;
                    ++ _3227_li;
                    ++ _3226_ui;
                  }
                }
              }
            }
          }
        }
        while ( (_3227_li < (int)((_3213_lsubi)->size(0))) )
        {
          {
            ((*_3222_inst)(_3225_k,(int)0)) = _ptr__3213_lsubi[_3227_li];
            ((*_3222_inst)(_3225_k,(int)1)) = _ptr__3214_lsubj[_3227_li];
            _ptr__3223_lbv[_3225_k] = _ptr__3215_lval[_3227_li];
            _ptr__3224_ubv[_3225_k] = 0.0;
            ++ _3225_k;
            ++ _3227_li;
          }
        }
        while ( (_3226_ui < (int)((_3216_usubi)->size(0))) )
        {
          {
            ((*_3222_inst)(_3225_k,(int)0)) = _ptr__3216_usubi[_3226_ui];
            ((*_3222_inst)(_3225_k,(int)1)) = _ptr__3217_usubj[_3226_ui];
            _ptr__3223_lbv[_3225_k] = 0.0;
            _ptr__3224_ubv[_3225_k] = _ptr__3218_uval[_3226_ui];
            ++ _3225_k;
            ++ _3226_ui;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3223_lbv,_3224_ubv,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimj)}),_3222_inst,(int)1);
    }
  }
  else
  {
    {
      int32_t _3228_dimj = mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimj;
      int32_t _3229_dimi = mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimi;
      int32_t _3230_n = safe_mul( _3229_dimi,_3228_dimj );
      std::shared_ptr< monty::ndarray< double,1 > > _3231_lval;
      _checked_ptr_1<double> _ptr__3231_lval(_3231_lval ? _3231_lval->raw() : nullptr,_3231_lval ? _3231_lval->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3232_uval;
      _checked_ptr_1<double> _ptr__3232_uval(_3232_uval ? _3232_uval->raw() : nullptr,_3232_uval ? _3232_uval->size(0) : 0);
      if (_3211_lb->isSparse())
      {
        {
          _3231_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3230_n)));
          _ptr__3231_lval.update(_3231_lval ? _3231_lval->raw() : nullptr, _3231_lval ? _3231_lval->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3233_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3211_lb->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3233_subi(_3233_subi ? _3233_subi->raw() : nullptr,_3233_subi ? _3233_subi->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3234_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3211_lb->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3234_subj(_3234_subj ? _3234_subj->raw() : nullptr,_3234_subj ? _3234_subj->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3235_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3211_lb->numNonzeros())));
          _checked_ptr_1<double> _ptr__3235_v(_3235_v ? _3235_v->raw() : nullptr,_3235_v ? _3235_v->size(0) : 0);
          _3211_lb->getDataAsTriplets(_3233_subi,_3234_subj,_3235_v);
          int32_t _10544_ = (int)0;
          int32_t _10545_ = (int)((_3233_subi)->size(0));
          for (int32_t _3236_i = _10544_; _3236_i < _10545_; ++_3236_i)
          {
            {
              _ptr__3231_lval[safe_add( safe_mul( _ptr__3233_subi[_3236_i],_3228_dimj ),_ptr__3234_subj[_3236_i] )] = _ptr__3235_v[_3236_i];
            }
          }
        }
      }
      else
      {
        {
          _3231_lval = _3211_lb->getDataAsArray();
          _ptr__3231_lval.update(_3231_lval ? _3231_lval->raw() : nullptr, _3231_lval ? _3231_lval->size(0) : 0);
        }
      }
      if (_3212_ub->isSparse())
      {
        {
          _3232_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3230_n)));
          _ptr__3232_uval.update(_3232_uval ? _3232_uval->raw() : nullptr, _3232_uval ? _3232_uval->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3237_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3212_ub->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3237_subi(_3237_subi ? _3237_subi->raw() : nullptr,_3237_subi ? _3237_subi->size(0) : 0);
          std::shared_ptr< monty::ndarray< int32_t,1 > > _3238_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3212_ub->numNonzeros())));
          _checked_ptr_1<int32_t> _ptr__3238_subj(_3238_subj ? _3238_subj->raw() : nullptr,_3238_subj ? _3238_subj->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _3239_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3212_ub->numNonzeros())));
          _checked_ptr_1<double> _ptr__3239_v(_3239_v ? _3239_v->raw() : nullptr,_3239_v ? _3239_v->size(0) : 0);
          _3212_ub->getDataAsTriplets(_3237_subi,_3238_subj,_3239_v);
          int32_t _10546_ = (int)0;
          int32_t _10547_ = (int)((_3237_subi)->size(0));
          for (int32_t _3240_i = _10546_; _3240_i < _10547_; ++_3240_i)
          {
            {
              _ptr__3232_uval[safe_add( safe_mul( _ptr__3237_subi[_3240_i],_3228_dimj ),_ptr__3238_subj[_3240_i] )] = _ptr__3239_v[_3240_i];
            }
          }
        }
      }
      else
      {
        {
          _3232_uval = _3212_ub->getDataAsArray();
          _ptr__3232_uval.update(_3232_uval ? _3232_uval->raw() : nullptr, _3232_uval ? _3232_uval->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3231_lval,_3232_uval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3211_lb)->dimj)}),nullptr,(int)1);
    }
  }
}
// End mosek.fusion.Domain.mkRangedDomain

// Begin mosek.fusion.Domain.mkRangedDomain
// Method mosek.fusion.Domain.mkRangedDomain @ src/fusion/domain.mbi:603:6-622:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _3241_lb,std::shared_ptr< monty::ndarray< double,2 > > _3242_ub)
{
  if ((((int)((_3241_lb)->size(0)) != (int)((_3242_ub)->size(0))) || ((int)((_3241_lb)->size(1)) != (int)((_3242_ub)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int32_t _3243_dimj = (int)((_3241_lb)->size(1));
  int32_t _3244_dimi = (int)((_3241_lb)->size(0));
  int32_t _3245_n = safe_mul( _3244_dimi,_3243_dimj );
  std::shared_ptr< monty::ndarray< double,1 > > _3246_lval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3245_n)));
  _checked_ptr_1<double> _ptr__3246_lval(_3246_lval ? _3246_lval->raw() : nullptr,_3246_lval ? _3246_lval->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3247_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3245_n)));
  _checked_ptr_1<double> _ptr__3247_uval(_3247_uval ? _3247_uval->raw() : nullptr,_3247_uval ? _3247_uval->size(0) : 0);
  int32_t _3248_k = (int)0;
  int32_t _10548_ = (int)0;
  int32_t _10549_ = _3244_dimi;
  for (int32_t _3249_i = _10548_; _3249_i < _10549_; ++_3249_i)
  {
    {
      int32_t _10550_ = (int)0;
      int32_t _10551_ = _3243_dimj;
      for (int32_t _3250_j = _10550_; _3250_j < _10551_; ++_3250_j)
      {
        {
          _ptr__3246_lval[_3248_k] = ((*_3241_lb)(_3249_i,_3250_j));
          _ptr__3247_uval[_3248_k] = ((*_3242_ub)(_3249_i,_3250_j));
          ++ _3248_k;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3246_lval,_3247_uval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3244_dimi),(int32_t)(_3243_dimj)}),nullptr,(int)1);
}
// End mosek.fusion.Domain.mkRangedDomain

// Begin mosek.fusion.Domain.mkLinearDomain
// Method mosek.fusion.Domain.mkLinearDomain @ src/fusion/domain.mbi:583:6-601:7
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _3251_k,monty::rc_ptr< ::mosek::fusion::Matrix > _3252_mx)
{
  if (_3252_mx->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3253_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3252_mx->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3253_msubi(_3253_msubi ? _3253_msubi->raw() : nullptr,_3253_msubi ? _3253_msubi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3254_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3252_mx->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__3254_msubj(_3254_msubj ? _3254_msubj->raw() : nullptr,_3254_msubj ? _3254_msubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3255_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3252_mx->numNonzeros())));
      _checked_ptr_1<double> _ptr__3255_mval(_3255_mval ? _3255_mval->raw() : nullptr,_3255_mval ? _3255_mval->size(0) : 0);
      _3252_mx->getDataAsTriplets(_3253_msubi,_3254_msubj,_3255_mval);
      std::shared_ptr< monty::ndarray< int32_t,2 > > _3256_inst = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_3253_msubi)->size(0)),(int)2)));
      int32_t _10552_ = (int)0;
      int32_t _10553_ = (int)((_3253_msubi)->size(0));
      for (int32_t _3257_i = _10552_; _3257_i < _10553_; ++_3257_i)
      {
        {
          ((*_3256_inst)(_3257_i,(int)0)) = _ptr__3253_msubi[_3257_i];
          ((*_3256_inst)(_3257_i,(int)1)) = _ptr__3254_msubj[_3257_i];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3251_k,false,_3255_mval,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3252_mx)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3252_mx)->dimj)}),_3256_inst,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3251_k,false,_3252_mx->getDataAsArray(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3252_mx)->dimi),(int32_t)(mosek::fusion::p_Matrix::_get_impl(_3252_mx)->dimj)}),nullptr,(int)1);
    }
  }
}
// End mosek.fusion.Domain.mkLinearDomain

// Begin mosek.fusion.Domain.prod
// Method mosek.fusion.Domain.prod @ src/fusion/domain.mbi:581:6-121
int64_t mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int32_t,1 > > _3258_dim)
{
  _checked_ptr_1<int32_t> _ptr__3258_dim(_3258_dim ? _3258_dim->raw() : nullptr, _3258_dim ? _3258_dim->size(0) : 0);
  int64_t _3259_r = (int)1;
  int32_t _10554_ = (int)0;
  int32_t _10555_ = (int)((_3258_dim)->size(0));
  for (int32_t _3260_i = _10554_; _3260_i < _10555_; ++_3260_i)
  {
    {
      _3259_r *= _ptr__3258_dim[_3260_i];
    }
  }
  return _3259_r;
}
// End mosek.fusion.Domain.prod

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:564:6-579:7
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _3261_scalable,std::shared_ptr< monty::ndarray< double,1 > > _3262_lb,std::shared_ptr< monty::ndarray< double,1 > > _3263_ub,std::shared_ptr< monty::ndarray< int32_t,2 > > _3264_sp,std::shared_ptr< monty::ndarray< int32_t,1 > > _3265_dims)
{
  _checked_ptr_1<double> _ptr__3262_lb(_3262_lb ? _3262_lb->raw() : nullptr, _3262_lb ? _3262_lb->size(0) : 0);
  _checked_ptr_1<double> _ptr__3263_ub(_3263_ub ? _3263_ub->raw() : nullptr, _3263_ub ? _3263_ub->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3265_dims(_3265_dims ? _3265_dims->raw() : nullptr, _3265_dims ? _3265_dims->size(0) : 0);
  if (((!_3261_scalable) && ((int)((_3262_lb)->size(0)) != (int)((_3263_ub)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _3264_sp.get()) && ((int)((_3264_sp)->size(0)) != (int)((_3262_lb)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int32_t _10556_ = (int)0;
  int32_t _10557_ = (int)((_3263_ub)->size(0));
  for (int32_t _3266_i = _10556_; _3266_i < _10557_; ++_3266_i)
  {
    {
      if ((_ptr__3262_lb[_3266_i] > _ptr__3263_ub[_3266_i]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _3265_dims.get()) && (::mosek::fusion::p_Domain::dimsize(_3265_dims) != (int)((_3262_lb)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_3261_scalable,_3262_lb,_3263_ub,_3265_dims)->__mosek_2fusion_2RangeDomain__sparse(_3264_sp);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.symmetric
// Method mosek.fusion.Domain.symmetric @ src/fusion/domain.mbi:561:6-103
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3267_rd) { return mosek::fusion::p_Domain::symmetric(_3267_rd); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3267_rd)
{
  return _3267_rd->__mosek_2fusion_2RangeDomain__symmetric();
}
// End mosek.fusion.Domain.symmetric

// Begin mosek.fusion.Domain.symmetric
// Method mosek.fusion.Domain.symmetric @ src/fusion/domain.mbi:560:6-103
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3268_ld) { return mosek::fusion::p_Domain::symmetric(_3268_ld); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3268_ld)
{
  return _3268_ld->__mosek_2fusion_2LinearDomain__symmetric();
}
// End mosek.fusion.Domain.symmetric

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:557:6-118
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3269_rd,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3270_sparsity) { return mosek::fusion::p_Domain::sparse(_3269_rd,_3270_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3269_rd,std::shared_ptr< monty::ndarray< int32_t,2 > > _3270_sparsity)
{
  return _3269_rd->__mosek_2fusion_2RangeDomain__sparse(_3270_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:556:6-118
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3271_rd,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3272_sparsity) { return mosek::fusion::p_Domain::sparse(_3271_rd,_3272_sparsity); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3271_rd,std::shared_ptr< monty::ndarray< int32_t,1 > > _3272_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3272_sparsity(_3272_sparsity ? _3272_sparsity->raw() : nullptr, _3272_sparsity ? _3272_sparsity->size(0) : 0);
  return _3271_rd->__mosek_2fusion_2RangeDomain__sparse(_3272_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:555:6-118
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3273_ld,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _3274_sparsity) { return mosek::fusion::p_Domain::sparse(_3273_ld,_3274_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3273_ld,std::shared_ptr< monty::ndarray< int32_t,2 > > _3274_sparsity)
{
  return _3273_ld->__mosek_2fusion_2LinearDomain__sparse(_3274_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.sparse
// Method mosek.fusion.Domain.sparse @ src/fusion/domain.mbi:554:6-118
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3275_ld,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3276_sparsity) { return mosek::fusion::p_Domain::sparse(_3275_ld,_3276_sparsity); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3275_ld,std::shared_ptr< monty::ndarray< int32_t,1 > > _3276_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__3276_sparsity(_3276_sparsity ? _3276_sparsity->raw() : nullptr, _3276_sparsity ? _3276_sparsity->size(0) : 0);
  return _3275_ld->__mosek_2fusion_2LinearDomain__sparse(_3276_sparsity);
}
// End mosek.fusion.Domain.sparse

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ src/fusion/domain.mbi:552:6-92
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3277_rd) { return mosek::fusion::p_Domain::integral(_3277_rd); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3277_rd)
{
  return _3277_rd->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ src/fusion/domain.mbi:551:6-92
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3278_ld) { return mosek::fusion::p_Domain::integral(_3278_ld); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3278_ld)
{
  return _3278_ld->__mosek_2fusion_2LinearDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.integral
// Method mosek.fusion.Domain.integral @ src/fusion/domain.mbi:550:6-88
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral
  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3279_c) { return mosek::fusion::p_Domain::integral(_3279_c); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3279_c)
{
  return _3279_c->__mosek_2fusion_2ConeDomain__integral();
}
// End mosek.fusion.Domain.integral

// Begin mosek.fusion.Domain.axis
// Method mosek.fusion.Domain.axis @ src/fusion/domain.mbi:548:6-93
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis
  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3280_c,
    int32_t _3281_a) { return mosek::fusion::p_Domain::axis(_3280_c,_3281_a); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3280_c,int32_t _3281_a)
{
  return _3280_c->__mosek_2fusion_2ConeDomain__axis(_3281_a);
}
// End mosek.fusion.Domain.axis

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:545:6-178
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3282_alphas,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3283_dims) { return mosek::fusion::p_Domain::inDPowerCone(_3282_alphas,_3283_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3282_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > > _3283_dims)
{
  _checked_ptr_1<double> _ptr__3282_alphas(_3282_alphas ? _3282_alphas->raw() : nullptr, _3282_alphas ? _3282_alphas->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3283_dims(_3283_dims ? _3283_dims->raw() : nullptr, _3283_dims ? _3283_dims->size(0) : 0);
  std::vector<int32_t> _10558_;
  for (int32_t _3284_i = (int)0, _10559_ = (int)((_3283_dims)->size(0)); _3284_i < _10559_ ; ++_3284_i)
  {
    _10558_.push_back(_ptr__3283_dims[_3284_i]);
  }
  auto _10560_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10558_.size()),_10558_.begin(),_10558_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3282_alphas,_10560_);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:544:6-153
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3285_alphas,
    int32_t _3286_m) { return mosek::fusion::p_Domain::inDPowerCone(_3285_alphas,_3286_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3285_alphas,int32_t _3286_m)
{
  _checked_ptr_1<double> _ptr__3285_alphas(_3285_alphas ? _3285_alphas->raw() : nullptr, _3285_alphas ? _3285_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3285_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3286_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:543:6-147
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3287_alphas) { return mosek::fusion::p_Domain::inDPowerCone(_3287_alphas); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3287_alphas)
{
  _checked_ptr_1<double> _ptr__3287_alphas(_3287_alphas ? _3287_alphas->raw() : nullptr, _3287_alphas ? _3287_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3287_alphas,nullptr);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:541:6-191
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3288_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3289_dims) { return mosek::fusion::p_Domain::inDPowerCone(_3288_alpha,_3289_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3288_alpha,std::shared_ptr< monty::ndarray< int32_t,1 > > _3289_dims)
{
  _checked_ptr_1<int32_t> _ptr__3289_dims(_3289_dims ? _3289_dims->raw() : nullptr, _3289_dims ? _3289_dims->size(0) : 0);
  std::vector<int32_t> _10561_;
  for (int32_t _3290_i = (int)0, _10562_ = (int)((_3289_dims)->size(0)); _3290_i < _10562_ ; ++_3290_i)
  {
    _10561_.push_back(_ptr__3289_dims[_3290_i]);
  }
  auto _10563_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10561_.size()),_10561_.begin(),_10561_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3288_alpha),(double)((1.0 - _3288_alpha))}),_10563_);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:540:6-166
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3291_alpha,
    int32_t _3292_m) { return mosek::fusion::p_Domain::inDPowerCone(_3291_alpha,_3292_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3291_alpha,int32_t _3292_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3291_alpha),(double)((1.0 - _3291_alpha))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3292_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inDPowerCone
// Method mosek.fusion.Domain.inDPowerCone @ src/fusion/domain.mbi:539:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone
  ( double _3293_alpha) { return mosek::fusion::p_Domain::inDPowerCone(_3293_alpha); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3293_alpha)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3293_alpha),(double)((1.0 - _3293_alpha))}),nullptr);
}
// End mosek.fusion.Domain.inDPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:536:6-178
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3294_alphas,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3295_dims) { return mosek::fusion::p_Domain::inPPowerCone(_3294_alphas,_3295_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3294_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > > _3295_dims)
{
  _checked_ptr_1<double> _ptr__3294_alphas(_3294_alphas ? _3294_alphas->raw() : nullptr, _3294_alphas ? _3294_alphas->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3295_dims(_3295_dims ? _3295_dims->raw() : nullptr, _3295_dims ? _3295_dims->size(0) : 0);
  std::vector<int32_t> _10564_;
  for (int32_t _3296_i = (int)0, _10565_ = (int)((_3295_dims)->size(0)); _3296_i < _10565_ ; ++_3296_i)
  {
    _10564_.push_back(_ptr__3295_dims[_3296_i]);
  }
  auto _10566_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10564_.size()),_10564_.begin(),_10564_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3294_alphas,_10566_);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:535:6-153
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3297_alphas,
    int32_t _3298_m) { return mosek::fusion::p_Domain::inPPowerCone(_3297_alphas,_3298_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3297_alphas,int32_t _3298_m)
{
  _checked_ptr_1<double> _ptr__3297_alphas(_3297_alphas ? _3297_alphas->raw() : nullptr, _3297_alphas ? _3297_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3297_alphas,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3298_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:534:6-147
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( std::shared_ptr< monty::ndarray< double,1 > > _3299_alphas) { return mosek::fusion::p_Domain::inPPowerCone(_3299_alphas); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(std::shared_ptr< monty::ndarray< double,1 > > _3299_alphas)
{
  _checked_ptr_1<double> _ptr__3299_alphas(_3299_alphas ? _3299_alphas->raw() : nullptr, _3299_alphas ? _3299_alphas->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3299_alphas,nullptr);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:532:6-191
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3300_alpha,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3301_dims) { return mosek::fusion::p_Domain::inPPowerCone(_3300_alpha,_3301_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3300_alpha,std::shared_ptr< monty::ndarray< int32_t,1 > > _3301_dims)
{
  _checked_ptr_1<int32_t> _ptr__3301_dims(_3301_dims ? _3301_dims->raw() : nullptr, _3301_dims ? _3301_dims->size(0) : 0);
  std::vector<int32_t> _10567_;
  for (int32_t _3302_i = (int)0, _10568_ = (int)((_3301_dims)->size(0)); _3302_i < _10568_ ; ++_3302_i)
  {
    _10567_.push_back(_ptr__3301_dims[_3302_i]);
  }
  auto _10569_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10567_.size()),_10567_.begin(),_10567_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3300_alpha),(double)((1.0 - _3300_alpha))}),_10569_);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:531:6-166
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3303_alpha,
    int32_t _3304_m) { return mosek::fusion::p_Domain::inPPowerCone(_3303_alpha,_3304_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3303_alpha,int32_t _3304_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3303_alpha),(double)((1.0 - _3303_alpha))}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3304_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inPPowerCone
// Method mosek.fusion.Domain.inPPowerCone @ src/fusion/domain.mbi:530:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone
  ( double _3305_alpha) { return mosek::fusion::p_Domain::inPPowerCone(_3305_alpha); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3305_alpha)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3305_alpha),(double)((1.0 - _3305_alpha))}),nullptr);
}
// End mosek.fusion.Domain.inPPowerCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ src/fusion/domain.mbi:527:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3306_dims) { return mosek::fusion::p_Domain::inDExpCone(_3306_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3306_dims)
{
  _checked_ptr_1<int32_t> _ptr__3306_dims(_3306_dims ? _3306_dims->raw() : nullptr, _3306_dims ? _3306_dims->size(0) : 0);
  std::vector<int32_t> _10570_;
  for (int32_t _3307_i = (int)0, _10571_ = (int)((_3306_dims)->size(0)); _3307_i < _10571_ ; ++_3307_i)
  {
    _10570_.push_back(_ptr__3306_dims[_3307_i]);
  }
  auto _10572_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10570_.size()),_10570_.begin(),_10570_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_10572_);
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ src/fusion/domain.mbi:526:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( int32_t _3308_m) { return mosek::fusion::p_Domain::inDExpCone(_3308_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int32_t _3308_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3308_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inDExpCone
// Method mosek.fusion.Domain.inDExpCone @ src/fusion/domain.mbi:525:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone
  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
// End mosek.fusion.Domain.inDExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ src/fusion/domain.mbi:522:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3309_dims) { return mosek::fusion::p_Domain::inPExpCone(_3309_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3309_dims)
{
  _checked_ptr_1<int32_t> _ptr__3309_dims(_3309_dims ? _3309_dims->raw() : nullptr, _3309_dims ? _3309_dims->size(0) : 0);
  std::vector<int32_t> _10573_;
  for (int32_t _3310_i = (int)0, _10574_ = (int)((_3309_dims)->size(0)); _3310_i < _10574_ ; ++_3310_i)
  {
    _10573_.push_back(_ptr__3309_dims[_3310_i]);
  }
  auto _10575_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10573_.size()),_10573_.begin(),_10573_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_10575_);
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ src/fusion/domain.mbi:521:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( int32_t _3311_m) { return mosek::fusion::p_Domain::inPExpCone(_3311_m); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int32_t _3311_m)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3311_m),(int32_t)((int)3)}));
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inPExpCone
// Method mosek.fusion.Domain.inPExpCone @ src/fusion/domain.mbi:520:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone
  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
// End mosek.fusion.Domain.inPExpCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:516:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3312_dims) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3312_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3312_dims)
{
  _checked_ptr_1<int32_t> _ptr__3312_dims(_3312_dims ? _3312_dims->raw() : nullptr, _3312_dims ? _3312_dims->size(0) : 0);
  std::vector<int32_t> _10576_;
  for (int32_t _3313_i = (int)0, _10577_ = (int)((_3312_dims)->size(0)); _3313_i < _10577_ ; ++_3313_i)
  {
    _10576_.push_back(_ptr__3312_dims[_3313_i]);
  }
  auto _10578_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10576_.size()),_10576_.begin(),_10576_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,_10578_);
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:515:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( int32_t _3314_m,
    int32_t _3315_n) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3314_m,_3315_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(int32_t _3314_m,int32_t _3315_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3314_m),(int32_t)(_3315_n)}));
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:514:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( int32_t _3316_n) { return mosek::fusion::p_Domain::inDGeoMeanCone(_3316_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone(int32_t _3316_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3316_n)}));
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inDGeoMeanCone
// Method mosek.fusion.Domain.inDGeoMeanCone @ src/fusion/domain.mbi:513:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDGeoMeanCone
  ( ) { return mosek::fusion::p_Domain::inDGeoMeanCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDGeoMeanCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDGeoMeanCone,nullptr);
}
// End mosek.fusion.Domain.inDGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:511:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3317_dims) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3317_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3317_dims)
{
  _checked_ptr_1<int32_t> _ptr__3317_dims(_3317_dims ? _3317_dims->raw() : nullptr, _3317_dims ? _3317_dims->size(0) : 0);
  std::vector<int32_t> _10579_;
  for (int32_t _3318_i = (int)0, _10580_ = (int)((_3317_dims)->size(0)); _3318_i < _10580_ ; ++_3318_i)
  {
    _10579_.push_back(_ptr__3317_dims[_3318_i]);
  }
  auto _10581_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10579_.size()),_10579_.begin(),_10579_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,_10581_);
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:510:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( int32_t _3319_m,
    int32_t _3320_n) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3319_m,_3320_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(int32_t _3319_m,int32_t _3320_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3319_m),(int32_t)(_3320_n)}));
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:509:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( int32_t _3321_n) { return mosek::fusion::p_Domain::inPGeoMeanCone(_3321_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone(int32_t _3321_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3321_n)}));
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inPGeoMeanCone
// Method mosek.fusion.Domain.inPGeoMeanCone @ src/fusion/domain.mbi:508:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPGeoMeanCone
  ( ) { return mosek::fusion::p_Domain::inPGeoMeanCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPGeoMeanCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPGeoMeanCone,nullptr);
}
// End mosek.fusion.Domain.inPGeoMeanCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:493:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3322_dims) { return mosek::fusion::p_Domain::inRotatedQCone(_3322_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3322_dims)
{
  _checked_ptr_1<int32_t> _ptr__3322_dims(_3322_dims ? _3322_dims->raw() : nullptr, _3322_dims ? _3322_dims->size(0) : 0);
  std::vector<int32_t> _10582_;
  for (int32_t _3323_i = (int)0, _10583_ = (int)((_3322_dims)->size(0)); _3323_i < _10583_ ; ++_3323_i)
  {
    _10582_.push_back(_ptr__3322_dims[_3323_i]);
  }
  auto _10584_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10582_.size()),_10582_.begin(),_10582_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,_10584_);
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:492:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( int32_t _3324_m,
    int32_t _3325_n) { return mosek::fusion::p_Domain::inRotatedQCone(_3324_m,_3325_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int32_t _3324_m,int32_t _3325_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3324_m),(int32_t)(_3325_n)}));
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:491:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( int32_t _3326_n) { return mosek::fusion::p_Domain::inRotatedQCone(_3326_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int32_t _3326_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3326_n)}));
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inRotatedQCone
// Method mosek.fusion.Domain.inRotatedQCone @ src/fusion/domain.mbi:490:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone
  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,nullptr);
}
// End mosek.fusion.Domain.inRotatedQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:488:6-160
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3327_dims) { return mosek::fusion::p_Domain::inQCone(_3327_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3327_dims)
{
  _checked_ptr_1<int32_t> _ptr__3327_dims(_3327_dims ? _3327_dims->raw() : nullptr, _3327_dims ? _3327_dims->size(0) : 0);
  std::vector<int32_t> _10585_;
  for (int32_t _3328_i = (int)0, _10586_ = (int)((_3327_dims)->size(0)); _3328_i < _10586_ ; ++_3328_i)
  {
    _10585_.push_back(_ptr__3327_dims[_3328_i]);
  }
  auto _10587_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10585_.size()),_10585_.begin(),_10585_.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,_10587_);
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:487:6-135
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( int32_t _3329_m,
    int32_t _3330_n) { return mosek::fusion::p_Domain::inQCone(_3329_m,_3330_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int32_t _3329_m,int32_t _3330_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3329_m),(int32_t)(_3330_n)}));
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:486:6-133
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( int32_t _3331_n) { return mosek::fusion::p_Domain::inQCone(_3331_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int32_t _3331_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3331_n)}));
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inQCone
// Method mosek.fusion.Domain.inQCone @ src/fusion/domain.mbi:485:6-129
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone
  ( ) { return mosek::fusion::p_Domain::inQCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,nullptr);
}
// End mosek.fusion.Domain.inQCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:482:6-128
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3332_dims) { return mosek::fusion::p_Domain::inSVecPSDCone(_3332_dims); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(std::shared_ptr< monty::ndarray< int32_t,1 > > _3332_dims)
{
  _checked_ptr_1<int32_t> _ptr__3332_dims(_3332_dims ? _3332_dims->raw() : nullptr, _3332_dims ? _3332_dims->size(0) : 0);
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,_3332_dims);
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:481:6-136
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( int32_t _3333_d1,
    int32_t _3334_d2) { return mosek::fusion::p_Domain::inSVecPSDCone(_3333_d1,_3334_d2); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(int32_t _3333_d1,int32_t _3334_d2)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3333_d1),(int32_t)(_3334_d2)}));
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:480:6-132
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( int32_t _3335_n) { return mosek::fusion::p_Domain::inSVecPSDCone(_3335_n); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone(int32_t _3335_n)
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3335_n)}));
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.inSVecPSDCone
// Method mosek.fusion.Domain.inSVecPSDCone @ src/fusion/domain.mbi:479:6-128
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inSVecPSDCone
  ( ) { return mosek::fusion::p_Domain::inSVecPSDCone(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inSVecPSDCone()
{
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InSVecPSDCone,nullptr);
}
// End mosek.fusion.Domain.inSVecPSDCone

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ src/fusion/domain.mbi:469:6-130
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( int32_t _3336_n,
    int32_t _3337_m) { return mosek::fusion::p_Domain::isTrilPSD(_3336_n,_3337_m); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int32_t _3336_n,int32_t _3337_m)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3337_m),(int32_t)(_3336_n),(int32_t)(_3336_n)}),(int)1,(int)2);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ src/fusion/domain.mbi:468:6-128
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( int32_t _3338_n) { return mosek::fusion::p_Domain::isTrilPSD(_3338_n); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int32_t _3338_n)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3338_n),(int32_t)(_3338_n)}),(int)0,(int)1);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.isTrilPSD
// Method mosek.fusion.Domain.isTrilPSD @ src/fusion/domain.mbi:467:6-112
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD
  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD()
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
// End mosek.fusion.Domain.isTrilPSD

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ src/fusion/domain.mbi:465:6-126
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( int32_t _3339_n,
    int32_t _3340_m) { return mosek::fusion::p_Domain::inPSDCone(_3339_n,_3340_m); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int32_t _3339_n,int32_t _3340_m)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3340_m),(int32_t)(_3339_n),(int32_t)(_3339_n)}));
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ src/fusion/domain.mbi:464:6-124
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( int32_t _3341_n) { return mosek::fusion::p_Domain::inPSDCone(_3341_n); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int32_t _3341_n)
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3341_n),(int32_t)(_3341_n)}));
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.inPSDCone
// Method mosek.fusion.Domain.inPSDCone @ src/fusion/domain.mbi:463:6-111
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone
  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone()
{
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
// End mosek.fusion.Domain.inPSDCone

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:460:6-159
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( ) { return mosek::fusion::p_Domain::binary(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary()
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:459:6-159
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3342_dims) { return mosek::fusion::p_Domain::binary(_3342_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int32_t,1 > > _3342_dims)
{
  _checked_ptr_1<int32_t> _ptr__3342_dims(_3342_dims ? _3342_dims->raw() : nullptr, _3342_dims ? _3342_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_3342_dims)->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:458:6-165
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( int32_t _3343_m,
    int32_t _3344_n) { return mosek::fusion::p_Domain::binary(_3343_m,_3344_n); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int32_t _3343_m,int32_t _3344_n)
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3343_m),(int32_t)(_3344_n)}))->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.binary
// Method mosek.fusion.Domain.binary @ src/fusion/domain.mbi:457:6-163
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary
  ( int32_t _3345_n) { return mosek::fusion::p_Domain::binary(_3345_n); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int32_t _3345_n)
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3345_n)}))->__mosek_2fusion_2RangeDomain__integral();
}
// End mosek.fusion.Domain.binary

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:451:6-120
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3346_lbm,
    monty::rc_ptr< ::mosek::fusion::Matrix > _3347_ubm) { return mosek::fusion::p_Domain::inRange(_3346_lbm,_3347_ubm); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _3346_lbm,monty::rc_ptr< ::mosek::fusion::Matrix > _3347_ubm)
{
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3346_lbm,_3347_ubm);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:450:6-120
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,2 > > _3348_lba,
    std::shared_ptr< monty::ndarray< double,2 > > _3349_uba) { return mosek::fusion::p_Domain::inRange(_3348_lba,_3349_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _3348_lba,std::shared_ptr< monty::ndarray< double,2 > > _3349_uba)
{
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3348_lba,_3349_uba);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:448:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3350_lba,
    std::shared_ptr< monty::ndarray< double,1 > > _3351_uba,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3352_dims) { return mosek::fusion::p_Domain::inRange(_3350_lba,_3351_uba,_3352_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3350_lba,std::shared_ptr< monty::ndarray< double,1 > > _3351_uba,std::shared_ptr< monty::ndarray< int32_t,1 > > _3352_dims)
{
  _checked_ptr_1<double> _ptr__3350_lba(_3350_lba ? _3350_lba->raw() : nullptr, _3350_lba ? _3350_lba->size(0) : 0);
  _checked_ptr_1<double> _ptr__3351_uba(_3351_uba ? _3351_uba->raw() : nullptr, _3351_uba ? _3351_uba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3352_dims(_3352_dims ? _3352_dims->raw() : nullptr, _3352_dims ? _3352_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3350_lba,_3351_uba,_3352_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:447:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3353_lba,
    double _3354_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3355_dims) { return mosek::fusion::p_Domain::inRange(_3353_lba,_3354_ub,_3355_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3353_lba,double _3354_ub,std::shared_ptr< monty::ndarray< int32_t,1 > > _3355_dims)
{
  _checked_ptr_1<double> _ptr__3353_lba(_3353_lba ? _3353_lba->raw() : nullptr, _3353_lba ? _3353_lba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3355_dims(_3355_dims ? _3355_dims->raw() : nullptr, _3355_dims ? _3355_dims->size(0) : 0);
  std::vector<double> _10588_;
  for (int32_t _3356_i = (int)0, _10589_ = (int)((_3353_lba)->size(0)); _3356_i < _10589_ ; ++_3356_i)
  {
    _10588_.push_back(_3354_ub);
  }
  auto _10590_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10588_.size()),_10588_.begin(),_10588_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3353_lba,_10590_,_3355_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:446:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3357_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3358_uba,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3359_dims) { return mosek::fusion::p_Domain::inRange(_3357_lb,_3358_uba,_3359_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3357_lb,std::shared_ptr< monty::ndarray< double,1 > > _3358_uba,std::shared_ptr< monty::ndarray< int32_t,1 > > _3359_dims)
{
  _checked_ptr_1<double> _ptr__3358_uba(_3358_uba ? _3358_uba->raw() : nullptr, _3358_uba ? _3358_uba->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3359_dims(_3359_dims ? _3359_dims->raw() : nullptr, _3359_dims ? _3359_dims->size(0) : 0);
  std::vector<double> _10591_;
  for (int32_t _3360_i = (int)0, _10592_ = (int)((_3358_uba)->size(0)); _3360_i < _10592_ ; ++_3360_i)
  {
    _10591_.push_back(_3357_lb);
  }
  auto _10593_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10591_.size()),_10591_.begin(),_10591_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10593_,_3358_uba,_3359_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:445:6-201
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3361_lb,
    double _3362_ub,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3363_dims) { return mosek::fusion::p_Domain::inRange(_3361_lb,_3362_ub,_3363_dims); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3361_lb,double _3362_ub,std::shared_ptr< monty::ndarray< int32_t,1 > > _3363_dims)
{
  _checked_ptr_1<int32_t> _ptr__3363_dims(_3363_dims ? _3363_dims->raw() : nullptr, _3363_dims ? _3363_dims->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3361_lb)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3362_ub)}),_3363_dims);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:443:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3364_lba,
    std::shared_ptr< monty::ndarray< double,1 > > _3365_uba) { return mosek::fusion::p_Domain::inRange(_3364_lba,_3365_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3364_lba,std::shared_ptr< monty::ndarray< double,1 > > _3365_uba)
{
  _checked_ptr_1<double> _ptr__3364_lba(_3364_lba ? _3364_lba->raw() : nullptr, _3364_lba ? _3364_lba->size(0) : 0);
  _checked_ptr_1<double> _ptr__3365_uba(_3365_uba ? _3365_uba->raw() : nullptr, _3365_uba ? _3365_uba->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3364_lba,_3365_uba,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3364_lba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:442:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( std::shared_ptr< monty::ndarray< double,1 > > _3366_lba,
    double _3367_ub) { return mosek::fusion::p_Domain::inRange(_3366_lba,_3367_ub); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3366_lba,double _3367_ub)
{
  _checked_ptr_1<double> _ptr__3366_lba(_3366_lba ? _3366_lba->raw() : nullptr, _3366_lba ? _3366_lba->size(0) : 0);
  std::vector<double> _10594_;
  for (int32_t _3368_i = (int)0, _10595_ = (int)((_3366_lba)->size(0)); _3368_i < _10595_ ; ++_3368_i)
  {
    _10594_.push_back(_3367_ub);
  }
  auto _10596_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10594_.size()),_10594_.begin(),_10594_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3366_lba,_10596_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3366_lba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:441:6-198
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3369_lb,
    std::shared_ptr< monty::ndarray< double,1 > > _3370_uba) { return mosek::fusion::p_Domain::inRange(_3369_lb,_3370_uba); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3369_lb,std::shared_ptr< monty::ndarray< double,1 > > _3370_uba)
{
  _checked_ptr_1<double> _ptr__3370_uba(_3370_uba ? _3370_uba->raw() : nullptr, _3370_uba ? _3370_uba->size(0) : 0);
  std::vector<double> _10597_;
  for (int32_t _3371_i = (int)0, _10598_ = (int)((_3370_uba)->size(0)); _3371_i < _10598_ ; ++_3371_i)
  {
    _10597_.push_back(_3369_lb);
  }
  auto _10599_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10597_.size()),_10597_.begin(),_10597_.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10599_,_3370_uba,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3370_uba)->size(0)))}));
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.inRange
// Method mosek.fusion.Domain.inRange @ src/fusion/domain.mbi:440:6-187
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange
  ( double _3372_lb,
    double _3373_ub) { return mosek::fusion::p_Domain::inRange(_3372_lb,_3373_ub); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3372_lb,double _3373_ub)
{
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3372_lb)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3373_ub)}),nullptr);
}
// End mosek.fusion.Domain.inRange

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:437:6-138
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3374_mx) { return mosek::fusion::p_Domain::greaterThan(_3374_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3374_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_3374_mx);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:436:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3375_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3376_dims) { return mosek::fusion::p_Domain::greaterThan(_3375_a1,_3376_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3375_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3376_dims)
{
  _checked_ptr_1<double> _ptr__3375_a1(_3375_a1 ? _3375_a1->raw() : nullptr, _3375_a1 ? _3375_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3376_dims(_3376_dims ? _3376_dims->raw() : nullptr, _3376_dims ? _3376_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3375_a1),_3376_dims);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:435:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,2 > > _3377_a2) { return mosek::fusion::p_Domain::greaterThan(_3377_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _3377_a2)
{
  std::vector<double> _10600_;
  for (int32_t _3378_i = (int)0, _10601_ = (int)((_3377_a2)->size(0)); _3378_i < _10601_ ; ++_3378_i)
  {
    for (int32_t _3379_j = (int)0, _10602_ = (int)((_3377_a2)->size(1)); _3379_j < _10602_ ; ++_3379_j)
    {
      _10600_.push_back(((*_3377_a2)(_3378_i,_3379_j)));
    }
  }
  auto _10603_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10600_.size()),_10600_.begin(),_10600_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10603_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3377_a2)->size(0))),(int32_t)((int)((_3377_a2)->size(1)))}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:434:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3380_a1) { return mosek::fusion::p_Domain::greaterThan(_3380_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3380_a1)
{
  _checked_ptr_1<double> _ptr__3380_a1(_3380_a1 ? _3380_a1->raw() : nullptr, _3380_a1 ? _3380_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3380_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3380_a1)->size(0)))}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:433:6-183
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3381_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3382_dims) { return mosek::fusion::p_Domain::greaterThan(_3381_b,_3382_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3381_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3382_dims)
{
  _checked_ptr_1<int32_t> _ptr__3382_dims(_3382_dims ? _3382_dims->raw() : nullptr, _3382_dims ? _3382_dims->size(0) : 0);
  std::vector<double> _10604_;
  for (int64_t _3383_i = (int)0, _10605_ = ::mosek::fusion::p_Domain::prod(_3382_dims); _3383_i < _10605_ ; ++_3383_i)
  {
    _10604_.push_back(_3381_b);
  }
  auto _10606_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10604_.size()),_10604_.begin(),_10604_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10606_,_3382_dims);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:432:6-182
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3384_b,
    int32_t _3385_m,
    int32_t _3386_n) { return mosek::fusion::p_Domain::greaterThan(_3384_b,_3385_m,_3386_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3384_b,int32_t _3385_m,int32_t _3386_n)
{
  std::vector<double> _10607_;
  for (int32_t _3387_i = (int)0, _10608_ = safe_mul( _3386_n,_3385_m ); _3387_i < _10608_ ; ++_3387_i)
  {
    _10607_.push_back(_3384_b);
  }
  auto _10609_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10607_.size()),_10607_.begin(),_10607_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10609_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3385_m),(int32_t)(_3386_n)}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:431:6-178
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3388_b,
    int32_t _3389_n) { return mosek::fusion::p_Domain::greaterThan(_3388_b,_3389_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3388_b,int32_t _3389_n)
{
  std::vector<double> _10610_;
  for (int32_t _3390_i = (int)0, _10611_ = _3389_n; _3390_i < _10611_ ; ++_3390_i)
  {
    _10610_.push_back(_3388_b);
  }
  auto _10612_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10610_.size()),_10610_.begin(),_10610_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10612_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3389_n)}));
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.greaterThan
// Method mosek.fusion.Domain.greaterThan @ src/fusion/domain.mbi:430:6-161
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan
  ( double _3391_b) { return mosek::fusion::p_Domain::greaterThan(_3391_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3391_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3391_b)}),nullptr);
}
// End mosek.fusion.Domain.greaterThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:428:6-135
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3392_mx) { return mosek::fusion::p_Domain::lessThan(_3392_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3392_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_3392_mx);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:427:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3393_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3394_dims) { return mosek::fusion::p_Domain::lessThan(_3393_a1,_3394_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3393_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3394_dims)
{
  _checked_ptr_1<double> _ptr__3393_a1(_3393_a1 ? _3393_a1->raw() : nullptr, _3393_a1 ? _3393_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3394_dims(_3394_dims ? _3394_dims->raw() : nullptr, _3394_dims ? _3394_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3393_a1),_3394_dims);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:426:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,2 > > _3395_a2) { return mosek::fusion::p_Domain::lessThan(_3395_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _3395_a2)
{
  std::vector<double> _10613_;
  for (int32_t _3396_i = (int)0, _10614_ = (int)((_3395_a2)->size(0)); _3396_i < _10614_ ; ++_3396_i)
  {
    for (int32_t _3397_j = (int)0, _10615_ = (int)((_3395_a2)->size(1)); _3397_j < _10615_ ; ++_3397_j)
    {
      _10613_.push_back(((*_3395_a2)(_3396_i,_3397_j)));
    }
  }
  auto _10616_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10613_.size()),_10613_.begin(),_10613_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_10616_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3395_a2)->size(0))),(int32_t)((int)((_3395_a2)->size(1)))}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:425:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( std::shared_ptr< monty::ndarray< double,1 > > _3398_a1) { return mosek::fusion::p_Domain::lessThan(_3398_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3398_a1)
{
  _checked_ptr_1<double> _ptr__3398_a1(_3398_a1 ? _3398_a1->raw() : nullptr, _3398_a1 ? _3398_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3398_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3398_a1)->size(0)))}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:424:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3399_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3400_dims) { return mosek::fusion::p_Domain::lessThan(_3399_b,_3400_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3399_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3400_dims)
{
  _checked_ptr_1<int32_t> _ptr__3400_dims(_3400_dims ? _3400_dims->raw() : nullptr, _3400_dims ? _3400_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3399_b)}),_3400_dims);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:423:6-165
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3401_b,
    int32_t _3402_m,
    int32_t _3403_n) { return mosek::fusion::p_Domain::lessThan(_3401_b,_3402_m,_3403_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3401_b,int32_t _3402_m,int32_t _3403_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3401_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3402_m),(int32_t)(_3403_n)}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:422:6-163
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3404_b,
    int32_t _3405_n) { return mosek::fusion::p_Domain::lessThan(_3404_b,_3405_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3404_b,int32_t _3405_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3404_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3405_n)}));
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.lessThan
// Method mosek.fusion.Domain.lessThan @ src/fusion/domain.mbi:421:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan
  ( double _3406_b) { return mosek::fusion::p_Domain::lessThan(_3406_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3406_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3406_b)}),nullptr);
}
// End mosek.fusion.Domain.lessThan

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:418:6-137
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3407_mx) { return mosek::fusion::p_Domain::equalsTo(_3407_mx); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _3407_mx)
{
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_3407_mx);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:417:6-177
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,1 > > _3408_a1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3409_dims) { return mosek::fusion::p_Domain::equalsTo(_3408_a1,_3409_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3408_a1,std::shared_ptr< monty::ndarray< int32_t,1 > > _3409_dims)
{
  _checked_ptr_1<double> _ptr__3408_a1(_3408_a1 ? _3408_a1->raw() : nullptr, _3408_a1 ? _3408_a1->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3409_dims(_3409_dims ? _3409_dims->raw() : nullptr, _3409_dims ? _3409_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3408_a1),_3409_dims);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:416:6-230
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,2 > > _3410_a2) { return mosek::fusion::p_Domain::equalsTo(_3410_a2); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _3410_a2)
{
  std::vector<double> _10617_;
  for (int32_t _3411_i = (int)0, _10618_ = (int)((_3410_a2)->size(0)); _3411_i < _10618_ ; ++_3411_i)
  {
    for (int32_t _3412_j = (int)0, _10619_ = (int)((_3410_a2)->size(1)); _3412_j < _10619_ ; ++_3412_j)
    {
      _10617_.push_back(((*_3410_a2)(_3411_i,_3412_j)));
    }
  }
  auto _10620_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10617_.size()),_10617_.begin(),_10617_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_10620_,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3410_a2)->size(0))),(int32_t)((int)((_3410_a2)->size(1)))}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:415:6-187
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( std::shared_ptr< monty::ndarray< double,1 > > _3413_a1) { return mosek::fusion::p_Domain::equalsTo(_3413_a1); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3413_a1)
{
  _checked_ptr_1<double> _ptr__3413_a1(_3413_a1 ? _3413_a1->raw() : nullptr, _3413_a1 ? _3413_a1->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3413_a1),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_3413_a1)->size(0)))}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:414:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3414_b,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3415_dims) { return mosek::fusion::p_Domain::equalsTo(_3414_b,_3415_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3414_b,std::shared_ptr< monty::ndarray< int32_t,1 > > _3415_dims)
{
  _checked_ptr_1<int32_t> _ptr__3415_dims(_3415_dims ? _3415_dims->raw() : nullptr, _3415_dims ? _3415_dims->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3414_b)}),_3415_dims);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:413:6-165
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3416_b,
    int32_t _3417_m,
    int32_t _3418_n) { return mosek::fusion::p_Domain::equalsTo(_3416_b,_3417_m,_3418_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3416_b,int32_t _3417_m,int32_t _3418_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3416_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3417_m),(int32_t)(_3418_n)}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:412:6-163
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3419_b,
    int32_t _3420_n) { return mosek::fusion::p_Domain::equalsTo(_3419_b,_3420_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3419_b,int32_t _3420_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3419_b)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3420_n)}));
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.equalsTo
// Method mosek.fusion.Domain.equalsTo @ src/fusion/domain.mbi:411:6-159
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo
  ( double _3421_b) { return mosek::fusion::p_Domain::equalsTo(_3421_b); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3421_b)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3421_b)}),nullptr);
}
// End mosek.fusion.Domain.equalsTo

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:408:6-188
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3422_dims) { return mosek::fusion::p_Domain::unbounded(_3422_dims); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int32_t,1 > > _3422_dims)
{
  _checked_ptr_1<int32_t> _ptr__3422_dims(_3422_dims ? _3422_dims->raw() : nullptr, _3422_dims ? _3422_dims->size(0) : 0);
  std::vector<int32_t> _10621_;
  for (int32_t _3423_i = (int)0, _10622_ = (int)((_3422_dims)->size(0)); _3423_i < _10622_ ; ++_3423_i)
  {
    _10621_.push_back(_ptr__3422_dims[_3423_i]);
  }
  auto _10623_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10621_.size()),_10621_.begin(),_10621_.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_10623_);
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:407:6-163
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( int32_t _3424_m,
    int32_t _3425_n) { return mosek::fusion::p_Domain::unbounded(_3424_m,_3425_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int32_t _3424_m,int32_t _3425_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3424_m),(int32_t)(_3425_n)}));
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:406:6-161
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( int32_t _3426_n) { return mosek::fusion::p_Domain::unbounded(_3426_n); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int32_t _3426_n)
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3426_n)}));
}
// End mosek.fusion.Domain.unbounded

// Begin mosek.fusion.Domain.unbounded
// Method mosek.fusion.Domain.unbounded @ src/fusion/domain.mbi:405:6-156
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded
  ( ) { return mosek::fusion::p_Domain::unbounded(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded()
{
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
// End mosek.fusion.Domain.unbounded

void mosek::fusion::p_Domain::destroy()
{
}
void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }
// } class Domain
// class ExprCode { // @ src/fusion/Parameter.monty:3001:4-3121:5
mosek::fusion::ExprCode::ExprCode(mosek::fusion::p_ExprCode *_impl) : _impl(_impl) { /*std::cout << "ExprCode() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ExprCode::~ExprCode() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ExprCode::p_ExprCode
  (::mosek::fusion::ExprCode * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.ExprCode.inplace_relocate
// Method mosek.fusion.ExprCode.inplace_relocate @ src/fusion/Parameter.monty:3115:6-3120:7
void mosek::fusion::ExprCode::inplace_relocate
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3427_code,
    int32_t _3428_from_offset,
    int32_t _3429_num,
    int32_t _3430_const_base) { mosek::fusion::p_ExprCode::inplace_relocate(_3427_code,_3428_from_offset,_3429_num,_3430_const_base); }
void mosek::fusion::p_ExprCode::inplace_relocate(std::shared_ptr< monty::ndarray< int32_t,1 > > _3427_code,int32_t _3428_from_offset,int32_t _3429_num,int32_t _3430_const_base)
{
  _checked_ptr_1<int32_t> _ptr__3427_code(_3427_code ? _3427_code->raw() : nullptr, _3427_code ? _3427_code->size(0) : 0);
  int32_t _10624_ = (int)0;
  int32_t _10625_ = _3429_num;
  int32_t _10626_ = (int)2;
  for (int32_t _3431_i = _10624_; _3431_i < _10625_; _3431_i += _10626_)
  {
    {
      if ((_ptr__3427_code[_3431_i] == (int)2))
      {
        {
          _ptr__3427_code[safe_add( _3431_i,(int)1 )] += _3430_const_base;
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprCode.inplace_relocate

// Begin mosek.fusion.ExprCode.op2str
// Method mosek.fusion.ExprCode.op2str @ src/fusion/Parameter.monty:3102:6-3112:7
std::string mosek::fusion::ExprCode::op2str
  ( int32_t _3432_op) { return mosek::fusion::p_ExprCode::op2str(_3432_op); }
std::string mosek::fusion::p_ExprCode::op2str(int32_t _3432_op)
{
  if ((_3432_op == 0))
  {
    {
      return std::string ("NOP");
    }
  }
  else if((_3432_op == 1))
  {
    {
      return std::string ("PARAMREF");
    }
  }
  else if((_3432_op == 2))
  {
    {
      return std::string ("CONST");
    }
  }
  else if((_3432_op == 3))
  {
    {
      return std::string ("ADD");
    }
  }
  else if((_3432_op == 4))
  {
    {
      return std::string ("NEG");
    }
  }
  else if((_3432_op == 5))
  {
    {
      return std::string ("MUL");
    }
  }
  else if((_3432_op == 6))
  {
    {
      return std::string ("INV");
    }
  }
  else if((_3432_op == 8))
  {
    {
      return std::string ("SUM");
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("?("))->__mosek_2fusion_2Utils_2StringBuffer__a(_3432_op)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
}
// End mosek.fusion.ExprCode.op2str

// Begin mosek.fusion.ExprCode.eval_add_list
// Method mosek.fusion.ExprCode.eval_add_list @ src/fusion/Parameter.monty:3048:6-3099:7
void mosek::fusion::ExprCode::eval_add_list
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3433_code,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3434_ptr,
    std::shared_ptr< monty::ndarray< double,1 > > _3435_consts,
    int32_t _3436_offset,
    std::shared_ptr< monty::ndarray< double,1 > > _3437_target,
    std::shared_ptr< monty::ndarray< double,1 > > _3438_P,
    monty::rc_ptr< ::mosek::fusion::WorkStack > _3439_xs) { mosek::fusion::p_ExprCode::eval_add_list(_3433_code,_3434_ptr,_3435_consts,_3436_offset,_3437_target,_3438_P,_3439_xs); }
void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int32_t,1 > > _3433_code,std::shared_ptr< monty::ndarray< int32_t,1 > > _3434_ptr,std::shared_ptr< monty::ndarray< double,1 > > _3435_consts,int32_t _3436_offset,std::shared_ptr< monty::ndarray< double,1 > > _3437_target,std::shared_ptr< monty::ndarray< double,1 > > _3438_P,monty::rc_ptr< ::mosek::fusion::WorkStack > _3439_xs)
{
  _checked_ptr_1<int32_t> _ptr__3433_code(_3433_code ? _3433_code->raw() : nullptr, _3433_code ? _3433_code->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3434_ptr(_3434_ptr ? _3434_ptr->raw() : nullptr, _3434_ptr ? _3434_ptr->size(0) : 0);
  _checked_ptr_1<double> _ptr__3435_consts(_3435_consts ? _3435_consts->raw() : nullptr, _3435_consts ? _3435_consts->size(0) : 0);
  _checked_ptr_1<double> _ptr__3437_target(_3437_target ? _3437_target->raw() : nullptr, _3437_target ? _3437_target->size(0) : 0);
  _checked_ptr_1<double> _ptr__3438_P(_3438_P ? _3438_P->raw() : nullptr, _3438_P ? _3438_P->size(0) : 0);
  int32_t _3440_stack = _3439_xs->allocf64((int)((_3433_code)->size(0)));
  int32_t _3441_stackp = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _3442_xf64 = mosek::fusion::p_WorkStack::_get_impl(_3439_xs)->f64;
  _checked_ptr_1<double> _ptr__3442_xf64(_3442_xf64 ? _3442_xf64->raw() : nullptr,_3442_xf64 ? _3442_xf64->size(0) : 0);
  int32_t _10627_ = (int)0;
  int32_t _10628_ = ((int)((_3434_ptr)->size(0)) - (int)1);
  for (int32_t _3443_i = _10627_; _3443_i < _10628_; ++_3443_i)
  {
    {
      int32_t _10629_ = _ptr__3434_ptr[_3443_i];
      int32_t _10630_ = _ptr__3434_ptr[safe_add( _3443_i,(int)1 )];
      int32_t _10631_ = (int)2;
      for (int32_t _3444_j = _10629_; _3444_j < _10630_; _3444_j += _10631_)
      {
        {
          if ((_ptr__3433_code[_3444_j] == 0))
          {
            {
            }
          }
          else if((_ptr__3433_code[_3444_j] == 1))
          {
            {
              _ptr__3442_xf64[safe_add( _3440_stack,_3441_stackp )] = _ptr__3438_P[_ptr__3433_code[safe_add( _3444_j,(int)1 )]];
              ++ _3441_stackp;
            }
          }
          else if((_ptr__3433_code[_3444_j] == 2))
          {
            {
              _ptr__3442_xf64[safe_add( _3440_stack,_3441_stackp )] = _ptr__3435_consts[(_3444_j / (int)2)];
              ++ _3441_stackp;
            }
          }
          else if((_ptr__3433_code[_3444_j] == 3))
          {
            {
              _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)2)] = (_ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)1)] + _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)2)]);
              -- _3441_stackp;
            }
          }
          else if((_ptr__3433_code[_3444_j] == 4))
          {
            {
              _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)1)] = (-_ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)1)]);
            }
          }
          else if((_ptr__3433_code[_3444_j] == 5))
          {
            {
              _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)2)] = (_ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)1)] * _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)2)]);
              -- _3441_stackp;
            }
          }
          else if((_ptr__3433_code[_3444_j] == 6))
          {
            {
              _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)1)] = (1.0 / _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)1)]);
            }
          }
          else if((_ptr__3433_code[_3444_j] == 8))
          {
            {
              double _3445_r = 0.0;
              int32_t _10632_ = (int)0;
              int32_t _10633_ = _ptr__3433_code[safe_add( _3444_j,(int)1 )];
              for (int32_t _3446_k = _10632_; _3446_k < _10633_; ++_3446_k)
              {
                {
                  -- _3441_stackp;
                  _3445_r += _ptr__3442_xf64[safe_add( _3440_stack,_3441_stackp )];
                }
              }
              _ptr__3442_xf64[safe_add( _3440_stack,_3441_stackp )] = _3445_r;
              ++ _3441_stackp;
            }
          }
          {}
        }
      }
      _ptr__3437_target[safe_add( _3436_offset,_3443_i )] += _ptr__3442_xf64[(safe_add( _3440_stack,_3441_stackp ) - (int)1)];
    }
  }
  _3439_xs->clear();
}
// End mosek.fusion.ExprCode.eval_add_list

// Begin mosek.fusion.ExprCode.eval_add_list
// Method mosek.fusion.ExprCode.eval_add_list @ src/fusion/Parameter.monty:3044:6-3046:7
void mosek::fusion::ExprCode::eval_add_list
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3447_code,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _3448_ptr,
    std::shared_ptr< monty::ndarray< double,1 > > _3449_consts,
    std::shared_ptr< monty::ndarray< double,1 > > _3450_target,
    std::shared_ptr< monty::ndarray< double,1 > > _3451_P,
    monty::rc_ptr< ::mosek::fusion::WorkStack > _3452_xs) { mosek::fusion::p_ExprCode::eval_add_list(_3447_code,_3448_ptr,_3449_consts,_3450_target,_3451_P,_3452_xs); }
void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int32_t,1 > > _3447_code,std::shared_ptr< monty::ndarray< int32_t,1 > > _3448_ptr,std::shared_ptr< monty::ndarray< double,1 > > _3449_consts,std::shared_ptr< monty::ndarray< double,1 > > _3450_target,std::shared_ptr< monty::ndarray< double,1 > > _3451_P,monty::rc_ptr< ::mosek::fusion::WorkStack > _3452_xs)
{
  _checked_ptr_1<int32_t> _ptr__3447_code(_3447_code ? _3447_code->raw() : nullptr, _3447_code ? _3447_code->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3448_ptr(_3448_ptr ? _3448_ptr->raw() : nullptr, _3448_ptr ? _3448_ptr->size(0) : 0);
  _checked_ptr_1<double> _ptr__3449_consts(_3449_consts ? _3449_consts->raw() : nullptr, _3449_consts ? _3449_consts->size(0) : 0);
  _checked_ptr_1<double> _ptr__3450_target(_3450_target ? _3450_target->raw() : nullptr, _3450_target ? _3450_target->size(0) : 0);
  _checked_ptr_1<double> _ptr__3451_P(_3451_P ? _3451_P->raw() : nullptr, _3451_P ? _3451_P->size(0) : 0);
  ::mosek::fusion::p_ExprCode::eval_add_list(_3447_code,_3448_ptr,_3449_consts,(int)0,_3450_target,_3451_P,_3452_xs);
}
// End mosek.fusion.ExprCode.eval_add_list

// Begin mosek.fusion.ExprCode.emit_sum
// Method mosek.fusion.ExprCode.emit_sum @ src/fusion/Parameter.monty:3037:6-3041:7
int32_t mosek::fusion::ExprCode::emit_sum
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3453_tgt,
    int32_t _3454_ofs,
    int32_t _3455_num) { return mosek::fusion::p_ExprCode::emit_sum(_3453_tgt,_3454_ofs,_3455_num); }
int32_t mosek::fusion::p_ExprCode::emit_sum(std::shared_ptr< monty::ndarray< int32_t,1 > > _3453_tgt,int32_t _3454_ofs,int32_t _3455_num)
{
  _checked_ptr_1<int32_t> _ptr__3453_tgt(_3453_tgt ? _3453_tgt->raw() : nullptr, _3453_tgt ? _3453_tgt->size(0) : 0);
  _ptr__3453_tgt[_3454_ofs] = 8;
  _ptr__3453_tgt[safe_add( _3454_ofs,(int)1 )] = _3455_num;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_sum

// Begin mosek.fusion.ExprCode.emit_inv
// Method mosek.fusion.ExprCode.emit_inv @ src/fusion/Parameter.monty:3032:6-3036:7
int32_t mosek::fusion::ExprCode::emit_inv
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3456_tgt,
    int32_t _3457_ofs) { return mosek::fusion::p_ExprCode::emit_inv(_3456_tgt,_3457_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_inv(std::shared_ptr< monty::ndarray< int32_t,1 > > _3456_tgt,int32_t _3457_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3456_tgt(_3456_tgt ? _3456_tgt->raw() : nullptr, _3456_tgt ? _3456_tgt->size(0) : 0);
  _ptr__3456_tgt[_3457_ofs] = 6;
  _ptr__3456_tgt[safe_add( _3457_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_inv

// Begin mosek.fusion.ExprCode.emit_mul
// Method mosek.fusion.ExprCode.emit_mul @ src/fusion/Parameter.monty:3027:6-3031:7
int32_t mosek::fusion::ExprCode::emit_mul
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3458_tgt,
    int32_t _3459_ofs) { return mosek::fusion::p_ExprCode::emit_mul(_3458_tgt,_3459_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_mul(std::shared_ptr< monty::ndarray< int32_t,1 > > _3458_tgt,int32_t _3459_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3458_tgt(_3458_tgt ? _3458_tgt->raw() : nullptr, _3458_tgt ? _3458_tgt->size(0) : 0);
  _ptr__3458_tgt[_3459_ofs] = 5;
  _ptr__3458_tgt[safe_add( _3459_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_mul

// Begin mosek.fusion.ExprCode.emit_neg
// Method mosek.fusion.ExprCode.emit_neg @ src/fusion/Parameter.monty:3022:6-3026:7
int32_t mosek::fusion::ExprCode::emit_neg
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3460_tgt,
    int32_t _3461_ofs) { return mosek::fusion::p_ExprCode::emit_neg(_3460_tgt,_3461_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_neg(std::shared_ptr< monty::ndarray< int32_t,1 > > _3460_tgt,int32_t _3461_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3460_tgt(_3460_tgt ? _3460_tgt->raw() : nullptr, _3460_tgt ? _3460_tgt->size(0) : 0);
  _ptr__3460_tgt[_3461_ofs] = 4;
  _ptr__3460_tgt[safe_add( _3461_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_neg

// Begin mosek.fusion.ExprCode.emit_add
// Method mosek.fusion.ExprCode.emit_add @ src/fusion/Parameter.monty:3017:6-3021:7
int32_t mosek::fusion::ExprCode::emit_add
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3462_tgt,
    int32_t _3463_ofs) { return mosek::fusion::p_ExprCode::emit_add(_3462_tgt,_3463_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_add(std::shared_ptr< monty::ndarray< int32_t,1 > > _3462_tgt,int32_t _3463_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3462_tgt(_3462_tgt ? _3462_tgt->raw() : nullptr, _3462_tgt ? _3462_tgt->size(0) : 0);
  _ptr__3462_tgt[_3463_ofs] = 3;
  _ptr__3462_tgt[safe_add( _3463_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_add

// Begin mosek.fusion.ExprCode.emit_constref
// Method mosek.fusion.ExprCode.emit_constref @ src/fusion/Parameter.monty:3012:6-3016:7
int32_t mosek::fusion::ExprCode::emit_constref
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3464_tgt,
    int32_t _3465_ofs,
    int32_t _3466_i) { return mosek::fusion::p_ExprCode::emit_constref(_3464_tgt,_3465_ofs,_3466_i); }
int32_t mosek::fusion::p_ExprCode::emit_constref(std::shared_ptr< monty::ndarray< int32_t,1 > > _3464_tgt,int32_t _3465_ofs,int32_t _3466_i)
{
  _checked_ptr_1<int32_t> _ptr__3464_tgt(_3464_tgt ? _3464_tgt->raw() : nullptr, _3464_tgt ? _3464_tgt->size(0) : 0);
  _ptr__3464_tgt[_3465_ofs] = 2;
  _ptr__3464_tgt[safe_add( _3465_ofs,(int)1 )] = _3466_i;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_constref

// Begin mosek.fusion.ExprCode.emit_paramref
// Method mosek.fusion.ExprCode.emit_paramref @ src/fusion/Parameter.monty:3007:6-3011:7
int32_t mosek::fusion::ExprCode::emit_paramref
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3467_tgt,
    int32_t _3468_ofs,
    int32_t _3469_i) { return mosek::fusion::p_ExprCode::emit_paramref(_3467_tgt,_3468_ofs,_3469_i); }
int32_t mosek::fusion::p_ExprCode::emit_paramref(std::shared_ptr< monty::ndarray< int32_t,1 > > _3467_tgt,int32_t _3468_ofs,int32_t _3469_i)
{
  _checked_ptr_1<int32_t> _ptr__3467_tgt(_3467_tgt ? _3467_tgt->raw() : nullptr, _3467_tgt ? _3467_tgt->size(0) : 0);
  _ptr__3467_tgt[_3468_ofs] = 1;
  _ptr__3467_tgt[safe_add( _3468_ofs,(int)1 )] = _3469_i;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_paramref

// Begin mosek.fusion.ExprCode.emit_nop
// Method mosek.fusion.ExprCode.emit_nop @ src/fusion/Parameter.monty:3002:6-3006:7
int32_t mosek::fusion::ExprCode::emit_nop
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _3470_tgt,
    int32_t _3471_ofs) { return mosek::fusion::p_ExprCode::emit_nop(_3470_tgt,_3471_ofs); }
int32_t mosek::fusion::p_ExprCode::emit_nop(std::shared_ptr< monty::ndarray< int32_t,1 > > _3470_tgt,int32_t _3471_ofs)
{
  _checked_ptr_1<int32_t> _ptr__3470_tgt(_3470_tgt ? _3470_tgt->raw() : nullptr, _3470_tgt ? _3470_tgt->size(0) : 0);
  _ptr__3470_tgt[_3471_ofs] = 0;
  _ptr__3470_tgt[safe_add( _3471_ofs,(int)1 )] = (int)0;
  return (int)2;
}
// End mosek.fusion.ExprCode.emit_nop

void mosek::fusion::p_ExprCode::destroy()
{
}
void mosek::fusion::ExprCode::destroy() { mosek::fusion::p_ExprCode::_get_impl(this)->destroy(); }
// } class ExprCode
// class ExprParameter { // @ src/fusion/Parameter.monty:2981:4-2998:5
mosek::fusion::ExprParameter::ExprParameter(mosek::fusion::p_ExprParameter *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprParameter()" << this << std::endl; */ }
mosek::fusion::ExprParameter::~ExprParameter() {  /* std::cout << "~ExprParameter()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprParameter::p_ExprParameter
  (::mosek::fusion::ExprParameter * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprParameter.ctor @ src/fusion/Parameter.monty:2985:6-2988:7
mosek::fusion::ExprParameter::t mosek::fusion::p_ExprParameter::_new_ExprParameter
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3472_p)
{ return new mosek::fusion::ExprParameter(_3472_p); }
mosek::fusion::ExprParameter::ExprParameter
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3472_p) : 
   ExprParameter(new mosek::fusion::p_ExprParameter(this))
{ mosek::fusion::p_ExprParameter::_get_impl(this)->_initialize(_3472_p); }
void mosek::fusion::p_ExprParameter::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3472_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3472_p->getShape());
    mosek::fusion::p_ExprParameter::_get_impl(::mosek::fusion::ExprParameter::t(_pubthis))->p = _3472_p;
  }
}
// mosek.fusion.ExprParameter.ctor

// Begin mosek.fusion.ExprParameter.eval
// Method mosek.fusion.ExprParameter.eval @ src/fusion/Parameter.monty:2995:6-2997:7
void mosek::fusion::ExprParameter :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3473_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3474_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3475_xs) { mosek::fusion::p_ExprParameter::_get_impl(this)->eval(_3473_rs,_3474_ws,_3475_xs); }
void mosek::fusion::p_ExprParameter::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3473_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3474_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3475_xs)
{
  p->eval(_3473_rs,_3474_ws,_3475_xs);
}
// End mosek.fusion.ExprParameter.eval

// Begin mosek.fusion.ExprParameter.slice
// Method mosek.fusion.ExprParameter.slice @ src/fusion/Parameter.monty:2993:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3476_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3477_stop) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3476_start,_3477_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3476_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3477_stop) { return __mosek_2fusion_2ExprParameter__slice(_3476_start,_3477_stop); }
/* override: mosek.fusion.BaseExpression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3476_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3477_stop) { return __mosek_2fusion_2ExprParameter__slice(_3476_start,_3477_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _3476_start,std::shared_ptr< monty::ndarray< int32_t,1 > > _3477_stop)
{
  _checked_ptr_1<int32_t> _ptr__3476_start(_3476_start ? _3476_start->raw() : nullptr, _3476_start ? _3476_start->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__3477_stop(_3477_stop ? _3477_stop->raw() : nullptr, _3477_stop ? _3477_stop->size(0) : 0);
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3476_start,_3477_stop))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ExprParameter.slice

// Begin mosek.fusion.ExprParameter.slice
// Method mosek.fusion.ExprParameter.slice @ src/fusion/Parameter.monty:2992:6-112
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(int32_t _3478_start,int32_t _3479_stop) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3478_start,_3479_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(int32_t _3478_start,int32_t _3479_stop) { return __mosek_2fusion_2ExprParameter__slice(_3478_start,_3479_stop); }
/* override: mosek.fusion.BaseExpression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(int32_t _3478_start,int32_t _3479_stop) { return __mosek_2fusion_2ExprParameter__slice(_3478_start,_3479_stop); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(int32_t _3478_start,int32_t _3479_stop)
{
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3478_start,_3479_stop))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ExprParameter.slice

// Begin mosek.fusion.ExprParameter.toString
// Method mosek.fusion.ExprParameter.toString @ src/fusion/Parameter.monty:2990:6-128
std::string mosek::fusion::ExprParameter :: toString() { return mosek::fusion::p_ExprParameter::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprParameter::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprParameter("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprParameter.toString

void mosek::fusion::p_ExprParameter::destroy()
{
  p.reset();
}
void mosek::fusion::ExprParameter::destroy() { mosek::fusion::p_ExprParameter::_get_impl(this)->destroy(); }
// } class ExprParameter
// class Param { // @ src/fusion/Parameter.monty:2855:4-2978:5
mosek::fusion::Param::Param(mosek::fusion::p_Param *_impl) : _impl(_impl) { /*std::cout << "Param() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Param::~Param() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Param::p_Param
  (::mosek::fusion::Param * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Param.repeat
// Method mosek.fusion.Param.repeat @ src/fusion/Parameter.monty:2977:6-122
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::repeat
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3480_p,
    int32_t _3481_n,
    int32_t _3482_dim) { return mosek::fusion::p_Param::repeat(_3480_p,_3481_n,_3482_dim); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::repeat(monty::rc_ptr< ::mosek::fusion::Parameter > _3480_p,int32_t _3481_n,int32_t _3482_dim)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10634_;
  for (int32_t _3483_i = (int)0, _10635_ = _3481_n; _3483_i < _10635_ ; ++_3483_i)
  {
    _10634_.push_back(_3480_p);
  }
  auto _10636_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10634_.size()),_10634_.begin(),_10634_.end()));
  return ::mosek::fusion::p_Param::stack(_3482_dim,_10636_);
}
// End mosek.fusion.Param.repeat

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2976:6-136
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3484_dim,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3485_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3486_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3487_p3) { return mosek::fusion::p_Param::stack(_3484_dim,_3485_p1,_3486_p2,_3487_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3484_dim,monty::rc_ptr< ::mosek::fusion::Parameter > _3485_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3486_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3487_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3485_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3486_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3487_p3.get())}),_3484_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2975:6-119
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3488_dim,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3489_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3490_p2) { return mosek::fusion::p_Param::stack(_3488_dim,_3489_p1,_3490_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3488_dim,monty::rc_ptr< ::mosek::fusion::Parameter > _3489_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3490_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3489_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3490_p2.get())}),_3488_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2974:6-95
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( int32_t _3491_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3492_p) { return mosek::fusion::p_Param::stack(_3491_dim,_3492_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int32_t _3491_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3492_p)
{
  return ::mosek::fusion::p_Param::dstack(_3492_p,_3491_dim);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.stack
// Method mosek.fusion.Param.stack @ src/fusion/Parameter.monty:2973:6-119
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3493_p) { return mosek::fusion::p_Param::stack(_3493_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3493_p)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10637_;
  for (int32_t _3494_i = (int)0, _10638_ = (int)((_3493_p)->size(0)); _3494_i < _10638_ ; ++_3494_i)
  {
    _10637_.push_back(::mosek::fusion::p_Param::hstack(((*_3493_p)(_3494_i))));
  }
  auto _10639_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10637_.size()),_10637_.begin(),_10637_.end()));
  return ::mosek::fusion::p_Param::vstack(_10639_);
}
// End mosek.fusion.Param.stack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ src/fusion/Parameter.monty:2972:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3495_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3496_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3497_p3) { return mosek::fusion::p_Param::hstack(_3495_p1,_3496_p2,_3497_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3495_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3496_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3497_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3495_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3496_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3497_p3.get())}),(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ src/fusion/Parameter.monty:2971:6-107
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3498_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3499_p2) { return mosek::fusion::p_Param::hstack(_3498_p1,_3499_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3498_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3499_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3498_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3499_p2.get())}),(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.hstack
// Method mosek.fusion.Param.hstack @ src/fusion/Parameter.monty:2970:6-83
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3500_p) { return mosek::fusion::p_Param::hstack(_3500_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3500_p)
{
  return ::mosek::fusion::p_Param::dstack(_3500_p,(int)1);
}
// End mosek.fusion.Param.hstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ src/fusion/Parameter.monty:2969:6-123
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3501_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3502_p2,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3503_p3) { return mosek::fusion::p_Param::vstack(_3501_p1,_3502_p2,_3503_p3); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3501_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3502_p2,monty::rc_ptr< ::mosek::fusion::Parameter > _3503_p3)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3501_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3502_p2.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3503_p3.get())}),(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ src/fusion/Parameter.monty:2968:6-107
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3504_p1,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3505_p2) { return mosek::fusion::p_Param::vstack(_3504_p1,_3505_p2); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3504_p1,monty::rc_ptr< ::mosek::fusion::Parameter > _3505_p2)
{
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3504_p1.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3505_p2.get())}),(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.vstack
// Method mosek.fusion.Param.vstack @ src/fusion/Parameter.monty:2967:6-83
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3506_p) { return mosek::fusion::p_Param::vstack(_3506_p); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3506_p)
{
  return ::mosek::fusion::p_Param::dstack(_3506_p,(int)0);
}
// End mosek.fusion.Param.vstack

// Begin mosek.fusion.Param.dstack
// Method mosek.fusion.Param.dstack @ src/fusion/Parameter.monty:2856:6-2965:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3507_p,int32_t _3508_dim)
{
  if ((_3508_dim < (int)0))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3509_dimsizes = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)((_3507_p)->size(0)))));
  _checked_ptr_1<int32_t> _ptr__3509_dimsizes(_3509_dimsizes ? _3509_dimsizes->raw() : nullptr,_3509_dimsizes ? _3509_dimsizes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3510_itemsizes = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_3507_p)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__3510_itemsizes(_3510_itemsizes ? _3510_itemsizes->raw() : nullptr,_3510_itemsizes ? _3510_itemsizes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3511_rshape;
  _checked_ptr_1<int32_t> _ptr__3511_rshape(_3511_rshape ? _3511_rshape->raw() : nullptr,_3511_rshape ? _3511_rshape->size(0) : 0);
  int32_t _3512_rnd = ((*_3507_p)((int)0))->getND();
  int32_t _10640_ = (int)1;
  int32_t _10641_ = (int)((_3507_p)->size(0));
  for (int32_t _3513_i = _10640_; _3513_i < _10641_; ++_3513_i)
  {
    {
      if ((_3512_rnd < ((*_3507_p)(_3513_i))->getND()))
      {
        {
          _3512_rnd = ((*_3507_p)(_3513_i))->getND();
        }
      }
      {}
    }
  }
  if ((_3508_dim < _3512_rnd))
  {
    {
      int32_t _3514_i = (int)0;
      while ( ((_3514_i < (int)((_3507_p)->size(0))) && (_3512_rnd != ((*_3507_p)(_3514_i))->getND())) )
      {
        {
          ++ _3514_i;
        }
      }
      _3511_rshape = ((*_3507_p)(_3514_i))->getShape();
      _ptr__3511_rshape.update(_3511_rshape ? _3511_rshape->raw() : nullptr, _3511_rshape ? _3511_rshape->size(0) : 0);
      {
        int32_t _3515_i = (int)0;
        while ( ((_3515_i < (int)((_3507_p)->size(0))) && (_3512_rnd != ((*_3507_p)(_3515_i))->getND())) )
        {
          {
            ++ _3515_i;
          }
        }
        _3511_rshape = ((*_3507_p)(_3515_i))->getShape();
        _ptr__3511_rshape.update(_3511_rshape ? _3511_rshape->raw() : nullptr, _3511_rshape ? _3511_rshape->size(0) : 0);
      }
    }
  }
  else
  {
    {
      std::vector<int32_t> _10642_;
      for (int32_t _3516_i = (int)0, _10643_ = safe_add( _3508_dim,(int)1 ); _3516_i < _10643_ ; ++_3516_i)
      {
        _10642_.push_back((int)1);
      }
      auto _10644_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10642_.size()),_10642_.begin(),_10642_.end()));
      _3511_rshape = _10644_;
      _ptr__3511_rshape.update(_3511_rshape ? _3511_rshape->raw() : nullptr, _3511_rshape ? _3511_rshape->size(0) : 0);
      {
        int32_t _3517_i = (int)0;
        while ( ((_3517_i < (int)((_3507_p)->size(0))) && (_3512_rnd != ((*_3507_p)(_3517_i))->getND())) )
        {
          {
            ++ _3517_i;
          }
        }
        int32_t _3518_ndi = ((*_3507_p)(_3517_i))->getND();
        std::shared_ptr< monty::ndarray< int32_t,1 > > _3519_shapei = ((*_3507_p)(_3517_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__3519_shapei(_3519_shapei ? _3519_shapei->raw() : nullptr,_3519_shapei ? _3519_shapei->size(0) : 0);
        int32_t _10645_ = (int)0;
        int32_t _10646_ = _3518_ndi;
        for (int32_t _3520_j = _10645_; _3520_j < _10646_; ++_3520_j)
        {
          {
            _ptr__3511_rshape[_3520_j] = _ptr__3519_shapei[_3520_j];
          }
        }
      }
    }
  }
  _3512_rnd = (int)((_3511_rshape)->size(0));
  int32_t _3521_dimsize = (int)0;
  {
    bool _3522_dimerr = false;
    int32_t _10647_ = (int)0;
    int32_t _10648_ = (int)((_3507_p)->size(0));
    for (int32_t _3523_i = _10647_; _3523_i < _10648_; ++_3523_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _3524_shapei = ((*_3507_p)(_3523_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__3524_shapei(_3524_shapei ? _3524_shapei->raw() : nullptr,_3524_shapei ? _3524_shapei->size(0) : 0);
        _ptr__3510_itemsizes[_3523_i] = ::mosek::fusion::p_Set::size(_3524_shapei);
        int32_t _10649_ = (int)0;
        int32_t _10650_ = (int)((_3524_shapei)->size(0));
        for (int32_t _3525_j = _10649_; _3525_j < _10650_; ++_3525_j)
        {
          {
            _3522_dimerr = (_3522_dimerr && ((_3525_j == _3508_dim) || (_ptr__3524_shapei[_3525_j] == _ptr__3511_rshape[_3525_j])));
          }
        }
        if ((_3508_dim < (int)((_3524_shapei)->size(0))))
        {
          {
            _ptr__3509_dimsizes[_3523_i] = _ptr__3524_shapei[_3508_dim];
            _3521_dimsize += _ptr__3524_shapei[_3508_dim];
            int32_t _10651_ = (int)((_3524_shapei)->size(0));
            int32_t _10652_ = _3512_rnd;
            for (int32_t _3526_j = _10651_; _3526_j < _10652_; ++_3526_j)
            {
              {
                _3522_dimerr = (_3522_dimerr && ((_3526_j == _3508_dim) || (_ptr__3511_rshape[_3526_j] == (int)1)));
              }
            }
          }
        }
        else
        {
          {
            _3521_dimsize += (int)1;
            _ptr__3509_dimsizes[_3523_i] = (int)1;
          }
        }
      }
    }
    if (_3522_dimerr)
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for stacking"));
      }
    }
    {}
  }
  _ptr__3511_rshape[_3508_dim] = _3521_dimsize;
  std::vector<int32_t> _10653_;
  for (int32_t _3528_i = (int)0, _10654_ = (int)((_3507_p)->size(0)); _3528_i < _10654_ ; ++_3528_i)
  {
    _10653_.push_back(((*_3507_p)(_3528_i))->getNumNonzero());
  }
  auto _10655_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10653_.size()),_10653_.begin(),_10653_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3527_nnzs = _10655_;
  _checked_ptr_1<int32_t> _ptr__3527_nnzs(_3527_nnzs ? _3527_nnzs->raw() : nullptr,_3527_nnzs ? _3527_nnzs->size(0) : 0);
  int32_t _3529_rnnz = (int)0;
  int32_t _10656_ = (int)0;
  int32_t _10657_ = (int)((_3527_nnzs)->size(0));
  for (int32_t _3530_i = _10656_; _3530_i < _10657_; ++_3530_i)
  {
    {
      _3529_rnnz += _ptr__3527_nnzs[_3530_i];
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3531_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3529_rnnz)));
  _checked_ptr_1<int64_t> _ptr__3531_sp(_3531_sp ? _3531_sp->raw() : nullptr,_3531_sp ? _3531_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3532_idx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3529_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3532_idx(_3532_idx ? _3532_idx->raw() : nullptr,_3532_idx ? _3532_idx->size(0) : 0);
  int64_t _3533_dim0 = (int)1;
  int32_t _10658_ = (int)0;
  int32_t _10659_ = _3508_dim;
  for (int32_t _3534_i = _10658_; _3534_i < _10659_; ++_3534_i)
  {
    {
      _3533_dim0 *= _ptr__3511_rshape[_3534_i];
    }
  }
  int64_t _3535_dim1 = _3521_dimsize;
  int64_t _3536_dim2 = (int)1;
  int32_t _10660_ = safe_add( _3508_dim,(int)1 );
  int32_t _10661_ = _3512_rnd;
  for (int32_t _3537_i = _10660_; _3537_i < _10661_; ++_3537_i)
  {
    {
      _3536_dim2 *= _ptr__3511_rshape[_3537_i];
    }
  }
  {
    int32_t _3538_ofs = (int)0;
    int64_t _3539_ofsdim = (int)0;
    int32_t _10662_ = (int)0;
    int32_t _10663_ = (int)((_3507_p)->size(0));
    for (int32_t _3540_i = _10662_; _3540_i < _10663_; ++_3540_i)
    {
      {
        int32_t _3541_ni = ((*_3507_p)(_3540_i))->getNumNonzero();
        ((*_3507_p)(_3540_i))->getSp(_3531_sp,_3538_ofs);
        ((*_3507_p)(_3540_i))->getAllIndexes(_3532_idx,_3538_ofs);
        if ((_3508_dim == (int)0))
        {
          {
            int32_t _10664_ = _3538_ofs;
            int32_t _10665_ = safe_add( _3538_ofs,_3541_ni );
            for (int32_t _3542_j = _10664_; _3542_j < _10665_; ++_3542_j)
            {
              {
                _ptr__3531_sp[_3542_j] += _3539_ofsdim;
              }
            }
            _3539_ofsdim += _ptr__3510_itemsizes[_3540_i];
          }
        }
        else
        {
          {
            int32_t _10666_ = _3538_ofs;
            int32_t _10667_ = safe_add( _3538_ofs,_3541_ni );
            for (int32_t _3543_j = _10666_; _3543_j < _10667_; ++_3543_j)
            {
              {
                int64_t _3544_i0 = (_ptr__3531_sp[_3543_j] / safe_mul( _ptr__3509_dimsizes[_3540_i],_3536_dim2 ));
                int64_t _3545_i1 = ((_ptr__3531_sp[_3543_j] / _3536_dim2) % _ptr__3509_dimsizes[_3540_i]);
                int64_t _3546_i2 = (_ptr__3531_sp[_3543_j] % _3536_dim2);
                _ptr__3531_sp[_3543_j] = safe_add( safe_add( safe_mul( _3544_i0,safe_mul( _3521_dimsize,_3536_dim2 ) ),safe_mul( safe_add( _3545_i1,_3539_ofsdim ),_3536_dim2 ) ),_3546_i2 );
              }
            }
            _3539_ofsdim += _ptr__3509_dimsizes[_3540_i];
          }
        }
        _3538_ofs += _3541_ni;
      }
    }
  }
  int32_t _3547_maxdim = _ptr__3511_rshape[(int)0];
  int32_t _10668_ = (int)1;
  int32_t _10669_ = _3512_rnd;
  for (int32_t _3548_i = _10668_; _3548_i < _10669_; ++_3548_i)
  {
    {
      if ((_3547_maxdim < _ptr__3511_rshape[_3548_i]))
      {
        {
          _3547_maxdim = _ptr__3511_rshape[_3548_i];
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3549_ptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _3547_maxdim,(int)1 ))));
  _checked_ptr_1<int32_t> _ptr__3549_ptr(_3549_ptr ? _3549_ptr->raw() : nullptr,_3549_ptr ? _3549_ptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3550_perm = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3529_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3550_perm(_3550_perm ? _3550_perm->raw() : nullptr,_3550_perm ? _3550_perm->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3551_perm2 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_3529_rnnz)));
  _checked_ptr_1<int32_t> _ptr__3551_perm2(_3551_perm2 ? _3551_perm2->raw() : nullptr,_3551_perm2 ? _3551_perm2->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3552_rstrides = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_3512_rnd)));
  _checked_ptr_1<int64_t> _ptr__3552_rstrides(_3552_rstrides ? _3552_rstrides->raw() : nullptr,_3552_rstrides ? _3552_rstrides->size(0) : 0);
  _ptr__3552_rstrides[(_3512_rnd - (int)1)] = (int)1;
  int32_t _10670_ = (int)1;
  int32_t _10671_ = _3512_rnd;
  for (int32_t _3553_i = _10670_; _3553_i < _10671_; ++_3553_i)
  {
    {
      _ptr__3552_rstrides[((_3512_rnd - _3553_i) - (int)1)] = safe_mul( _ptr__3552_rstrides[(_3512_rnd - _3553_i)],_ptr__3511_rshape[(_3512_rnd - _3553_i)] );
    }
  }
  int32_t _10672_ = (int)0;
  int32_t _10673_ = _3529_rnnz;
  for (int32_t _3554_i = _10672_; _3554_i < _10673_; ++_3554_i)
  {
    {
      _ptr__3550_perm[_3554_i] = _3554_i;
    }
  }
  int32_t _10674_ = (int)0;
  int32_t _10675_ = _3512_rnd;
  for (int32_t _3555_d_ = _10674_; _3555_d_ < _10675_; ++_3555_d_)
  {
    {
      int32_t _3556_d = ((_3512_rnd - _3555_d_) - (int)1);
      int32_t _10676_ = (int)0;
      int32_t _10677_ = safe_add( _3547_maxdim,(int)1 );
      for (int32_t _3557_i = _10676_; _3557_i < _10677_; ++_3557_i)
      {
        {
          _ptr__3549_ptr[_3557_i] = (int)0;
        }
      }
      int32_t _10678_ = (int)0;
      int32_t _10679_ = _3529_rnnz;
      for (int32_t _3558_i = _10678_; _3558_i < _10679_; ++_3558_i)
      {
        {
          ++ _ptr__3549_ptr[safe_add( (int)1,((_ptr__3531_sp[_3558_i] / _ptr__3552_rstrides[_3556_d]) % _ptr__3511_rshape[_3556_d]) )];
        }
      }
      int32_t _10680_ = (int)0;
      int32_t _10681_ = _3547_maxdim;
      for (int32_t _3559_i = _10680_; _3559_i < _10681_; ++_3559_i)
      {
        {
          _ptr__3549_ptr[safe_add( _3559_i,(int)1 )] += _ptr__3549_ptr[_3559_i];
        }
      }
      int32_t _10682_ = (int)0;
      int32_t _10683_ = _3529_rnnz;
      for (int32_t _3560_i = _10682_; _3560_i < _10683_; ++_3560_i)
      {
        {
          int64_t _3561_idx = ((_ptr__3531_sp[_ptr__3550_perm[_3560_i]] / _ptr__3552_rstrides[_3556_d]) % _ptr__3511_rshape[_3556_d]);
          _ptr__3551_perm2[_ptr__3549_ptr[_3561_idx]] = _ptr__3550_perm[_3560_i];
          ++ _ptr__3549_ptr[_3561_idx];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3562_tmp = _3551_perm2;
      _checked_ptr_1<int32_t> _ptr__3562_tmp(_3562_tmp ? _3562_tmp->raw() : nullptr,_3562_tmp ? _3562_tmp->size(0) : 0);
      _3551_perm2 = _3550_perm;
      _ptr__3551_perm2.update(_3551_perm2 ? _3551_perm2->raw() : nullptr, _3551_perm2 ? _3551_perm2->size(0) : 0);
      _3550_perm = _3562_tmp;
      _ptr__3550_perm.update(_3550_perm ? _3550_perm->raw() : nullptr, _3550_perm ? _3550_perm->size(0) : 0);
    }
  }
  std::vector<int64_t> _10684_;
  for (int32_t _3564_i = (int)0, _10685_ = _3529_rnnz; _3564_i < _10685_ ; ++_3564_i)
  {
    _10684_.push_back(_ptr__3531_sp[_ptr__3550_perm[_3564_i]]);
  }
  auto _10686_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_10684_.size()),_10684_.begin(),_10684_.end()));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3563_rsp = _10686_;
  _checked_ptr_1<int64_t> _ptr__3563_rsp(_3563_rsp ? _3563_rsp->raw() : nullptr,_3563_rsp ? _3563_rsp->size(0) : 0);
  std::vector<int32_t> _10687_;
  for (int32_t _3566_i = (int)0, _10688_ = _3529_rnnz; _3566_i < _10688_ ; ++_3566_i)
  {
    _10687_.push_back(_ptr__3532_idx[_ptr__3550_perm[_3566_i]]);
  }
  auto _10689_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10687_.size()),_10687_.begin(),_10687_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3565_ridx = _10689_;
  _checked_ptr_1<int32_t> _ptr__3565_ridx(_3565_ridx ? _3565_ridx->raw() : nullptr,_3565_ridx ? _3565_ridx->size(0) : 0);
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(((*_3507_p)((int)0))->__mosek_2fusion_2Parameter__getModel(),_3511_rshape,_3563_rsp,_3565_ridx)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.Param.dstack

void mosek::fusion::p_Param::destroy()
{
}
void mosek::fusion::Param::destroy() { mosek::fusion::p_Param::_get_impl(this)->destroy(); }
// } class Param
// class ExprMulParamScalarExpr { // @ src/fusion/Parameter.monty:2623:4-2768:5
mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr(mosek::fusion::p_ExprMulParamScalarExpr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalarExpr()" << this << std::endl; */ }
mosek::fusion::ExprMulParamScalarExpr::~ExprMulParamScalarExpr() {  /* std::cout << "~ExprMulParamScalarExpr()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamScalarExpr::p_ExprMulParamScalarExpr
  (::mosek::fusion::ExprMulParamScalarExpr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamScalarExpr.ctor @ src/fusion/Parameter.monty:2627:6-2633:7
mosek::fusion::ExprMulParamScalarExpr::t mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3567_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3568_e)
{ return new mosek::fusion::ExprMulParamScalarExpr(_3567_p,_3568_e); }
mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3567_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3568_e) : 
   ExprMulParamScalarExpr(new mosek::fusion::p_ExprMulParamScalarExpr(this))
{ mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->_initialize(_3567_p,_3568_e); }
void mosek::fusion::p_ExprMulParamScalarExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3567_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3568_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3567_p->getShape());
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->p = _3567_p;
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->e = _3568_e;
    if ((_3568_e->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamScalarExpr.ctor

// Begin mosek.fusion.ExprMulParamScalarExpr.eval
// Method mosek.fusion.ExprMulParamScalarExpr.eval @ src/fusion/Parameter.monty:2637:6-2767:7
void mosek::fusion::ExprMulParamScalarExpr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3569_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3570_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3571_xs) { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->eval(_3569_rs,_3570_ws,_3571_xs); }
void mosek::fusion::p_ExprMulParamScalarExpr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3569_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3570_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3571_xs)
{
  e->eval(_3570_ws,_3569_rs,_3571_xs);
  _3570_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3572_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3572_wi32(_3572_wi32 ? _3572_wi32->raw() : nullptr,_3572_wi32 ? _3572_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3573_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3573_wi64(_3573_wi64 ? _3573_wi64->raw() : nullptr,_3573_wi64 ? _3573_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3574_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->f64;
  _checked_ptr_1<double> _ptr__3574_wf64(_3574_wf64 ? _3574_wf64->raw() : nullptr,_3574_wf64 ? _3574_wf64->size(0) : 0);
  int32_t _3575_nd = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->nd;
  if ((_3575_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _3576_nelem = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->nelem;
  int32_t _3577_nnz = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->nnz;
  bool _3578_hassp = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->hassp;
  int32_t _3579_ptr = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->ptr_base;
  int32_t _3580_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->ncodeatom;
  int32_t _3581_sp = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->sp_base;
  int32_t _3582_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->nidxs_base;
  int32_t _3583_cof = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->cof_base;
  int32_t _3584_cconst = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->cconst_base;
  int32_t _3585_ptrcode = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->codeptr_base;
  int32_t _3586_code = mosek::fusion::p_WorkStack::_get_impl(_3570_ws)->code_base;
  int32_t _3587_rnd = p->getND();
  int32_t _3588_rnelem = p->getNumNonzero();
  int32_t _3589_rnnz = safe_mul( _3577_nnz,p->getNumNonzero() );
  bool _3590_rhassp = (p->getNumNonzero() < p->getSize());
  int32_t _10690_;
  bool _10691_ = (_3580_ncodeatom > (int)0);
  if (_10691_)
  {
    _10690_ = safe_add( safe_mul( _3580_ncodeatom,_3588_rnelem ),safe_mul( _3589_rnnz,(int)4 ) );
  }
  else
  {
    _10690_ = safe_mul( _3589_rnnz,(int)3 );
  }
  int32_t _3591_rncodeatom = _10690_;
  int32_t _3592_pidxs = _3571_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3593_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3571_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3593_xi32(_3593_xi32 ? _3593_xi32->raw() : nullptr,_3593_xi32 ? _3593_xi32->size(0) : 0);
  p->getAllIndexes(_3593_xi32,_3592_pidxs);
  _3569_rs->alloc_expr(_3587_rnd,_3588_rnelem,_3589_rnnz,_3590_rhassp,_3591_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3594_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3594_ri64(_3594_ri64 ? _3594_ri64->raw() : nullptr,_3594_ri64 ? _3594_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3595_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->f64;
  _checked_ptr_1<double> _ptr__3595_rf64(_3595_rf64 ? _3595_rf64->raw() : nullptr,_3595_rf64 ? _3595_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3596_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3596_ri32(_3596_ri32 ? _3596_ri32->raw() : nullptr,_3596_ri32 ? _3596_ri32->size(0) : 0);
  int32_t _3597_rptr = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->ptr_base;
  int32_t _3598_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->nidxs_base;
  int32_t _3599_rsp = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->sp_base;
  int32_t _3600_rcof = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->cof_base;
  bool _3601_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->hassp;
  int32_t _3602_rshape = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->shape_base;
  int32_t _3603_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->codeptr_base;
  int32_t _3604_rcode = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->code_base;
  int32_t _3605_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3569_rs)->cconst_base;
  {
    int32_t _10692_ = (int)0;
    int32_t _10693_ = _3589_rnnz;
    for (int32_t _3606_i = _10692_; _3606_i < _10693_; ++_3606_i)
    {
      {
        _ptr__3595_rf64[safe_add( _3600_rcof,_3606_i )] = 0.0;
      }
    }
    int32_t _10694_ = (int)0;
    int32_t _10695_ = safe_add( _3588_rnelem,(int)1 );
    for (int32_t _3607_i = _10694_; _3607_i < _10695_; ++_3607_i)
    {
      {
        _ptr__3596_ri32[safe_add( _3597_rptr,_3607_i )] = safe_mul( _3607_i,_3577_nnz );
      }
    }
    int32_t _10696_ = (int)0;
    int32_t _10697_ = _3587_rnd;
    for (int32_t _3608_i = _10696_; _3608_i < _10697_; ++_3608_i)
    {
      {
        _ptr__3596_ri32[safe_add( _3602_rshape,_3608_i )] = p->getDim(_3608_i);
      }
    }
    if (_3601_rhassp)
    {
      {
        p->getSp(_3594_ri64,_3599_rsp);
      }
    }
    {}
    int32_t _10698_ = (int)0;
    int32_t _10699_ = _3589_rnnz;
    for (int32_t _3609_i = _10698_; _3609_i < _10699_; ++_3609_i)
    {
      {
        _ptr__3594_ri64[safe_add( _3598_rnidxs,_3609_i )] = (-(int)999);
      }
    }
    {
      int32_t _3610_k = (int)0;
      int32_t _10700_ = (int)0;
      int32_t _10701_ = _3588_rnelem;
      for (int32_t _3611_i = _10700_; _3611_i < _10701_; ++_3611_i)
      {
        {
          int32_t _10702_ = (int)0;
          int32_t _10703_ = _3577_nnz;
          for (int32_t _3612_j = _10702_; _3612_j < _10703_; ++_3612_j)
          {
            {
              _ptr__3594_ri64[safe_add( _3598_rnidxs,_3610_k )] = _ptr__3573_wi64[safe_add( _3582_nidxs,_3612_j )];
              ++ _3610_k;
            }
          }
        }
      }
    }
    if ((_3591_rncodeatom > (int)0))
    {
      {
        _ptr__3596_ri32[_3603_rcodeptr] = (int)0;
      }
    }
    {}
    {
      if ((_3580_ncodeatom == (int)0))
      {
        {
          int32_t _3613_nzi = (int)0;
          int32_t _3614_codei = (int)0;
          int32_t _10704_ = (int)0;
          int32_t _10705_ = _3588_rnelem;
          for (int32_t _3615_i = _10704_; _3615_i < _10705_; ++_3615_i)
          {
            {
              int32_t _10706_ = (int)0;
              int32_t _10707_ = _3577_nnz;
              for (int32_t _3616_k = _10706_; _3616_k < _10707_; ++_3616_k)
              {
                {
                  _ptr__3596_ri32[safe_add( _3604_rcode,_3614_codei )] = 2;
                  _ptr__3595_rf64[safe_add( _3605_rcconst,_3614_codei )] = _ptr__3574_wf64[safe_add( _3583_cof,_3616_k )];
                  ++ _3614_codei;
                  _ptr__3596_ri32[safe_add( _3604_rcode,_3614_codei )] = 1;
                  _ptr__3595_rf64[safe_add( _3605_rcconst,_3614_codei )] = _ptr__3593_xi32[safe_add( _3592_pidxs,_3615_i )];
                  ++ _3614_codei;
                  _ptr__3596_ri32[safe_add( _3604_rcode,_3614_codei )] = 5;
                  ++ _3614_codei;
                  _ptr__3596_ri32[safe_add( safe_add( _3603_rcodeptr,_3613_nzi ),(int)1 )] = _3614_codei;
                  ++ _3613_nzi;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _3617_codei = (int)0;
          int32_t _3618_nzi = (int)0;
          int32_t _10708_ = (int)0;
          int32_t _10709_ = _3588_rnelem;
          for (int32_t _3619_i = _10708_; _3619_i < _10709_; ++_3619_i)
          {
            {
              int32_t _10710_ = (int)0;
              int32_t _10711_ = _3577_nnz;
              for (int32_t _3620_k = _10710_; _3620_k < _10711_; ++_3620_k)
              {
                {
                  _ptr__3596_ri32[safe_add( _3604_rcode,_3617_codei )] = 2;
                  _ptr__3595_rf64[safe_add( _3605_rcconst,_3617_codei )] = _ptr__3574_wf64[safe_add( _3583_cof,_3620_k )];
                  ++ _3617_codei;
                  int32_t _10712_ = _ptr__3572_wi32[safe_add( _3585_ptrcode,_3620_k )];
                  int32_t _10713_ = _ptr__3572_wi32[safe_add( safe_add( _3585_ptrcode,_3620_k ),(int)1 )];
                  for (int32_t _3621_l = _10712_; _3621_l < _10713_; ++_3621_l)
                  {
                    {
                      _ptr__3596_ri32[safe_add( _3604_rcode,_3617_codei )] = _ptr__3572_wi32[safe_add( _3586_code,_3621_l )];
                      _ptr__3595_rf64[safe_add( _3605_rcconst,_3617_codei )] = _ptr__3574_wf64[safe_add( _3584_cconst,_3621_l )];
                      ++ _3617_codei;
                    }
                  }
                  _ptr__3596_ri32[safe_add( _3604_rcode,_3617_codei )] = 3;
                  ++ _3617_codei;
                  _ptr__3596_ri32[safe_add( _3604_rcode,_3617_codei )] = 1;
                  _ptr__3595_rf64[safe_add( _3605_rcconst,_3617_codei )] = _ptr__3593_xi32[safe_add( _3592_pidxs,_3619_i )];
                  ++ _3617_codei;
                  _ptr__3596_ri32[safe_add( _3604_rcode,_3617_codei )] = 5;
                  ++ _3617_codei;
                  _ptr__3596_ri32[safe_add( safe_add( _3603_rcodeptr,_3618_nzi ),(int)1 )] = _3617_codei;
                  ++ _3618_nzi;
                }
              }
            }
          }
        }
      }
    }
  }
  _3571_xs->clear();
}
// End mosek.fusion.ExprMulParamScalarExpr.eval

// Begin mosek.fusion.ExprMulParamScalarExpr.toString
// Method mosek.fusion.ExprMulParamScalarExpr.toString @ src/fusion/Parameter.monty:2635:6-160
std::string mosek::fusion::ExprMulParamScalarExpr :: toString() { return mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamScalarExpr::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalarExpr("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamScalarExpr.toString

void mosek::fusion::p_ExprMulParamScalarExpr::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamScalarExpr::destroy() { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->destroy(); }
// } class ExprMulParamScalarExpr
// class ExprMulParamScalar { // @ src/fusion/Parameter.monty:2496:4-2620:5
mosek::fusion::ExprMulParamScalar::ExprMulParamScalar(mosek::fusion::p_ExprMulParamScalar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalar()" << this << std::endl; */ }
mosek::fusion::ExprMulParamScalar::~ExprMulParamScalar() {  /* std::cout << "~ExprMulParamScalar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamScalar::p_ExprMulParamScalar
  (::mosek::fusion::ExprMulParamScalar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamScalar.ctor @ src/fusion/Parameter.monty:2500:6-2507:7
mosek::fusion::ExprMulParamScalar::t mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3622_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3623_e)
{ return new mosek::fusion::ExprMulParamScalar(_3622_p,_3623_e); }
mosek::fusion::ExprMulParamScalar::ExprMulParamScalar
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3622_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3623_e) : 
   ExprMulParamScalar(new mosek::fusion::p_ExprMulParamScalar(this))
{ mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->_initialize(_3622_p,_3623_e); }
void mosek::fusion::p_ExprMulParamScalar::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3622_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3623_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3623_e->getShape());
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->p = _3622_p;
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->e = _3623_e;
    if ((_3622_p->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamScalar.ctor

// Begin mosek.fusion.ExprMulParamScalar.eval
// Method mosek.fusion.ExprMulParamScalar.eval @ src/fusion/Parameter.monty:2511:6-2619:7
void mosek::fusion::ExprMulParamScalar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3624_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3625_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3626_xs) { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->eval(_3624_rs,_3625_ws,_3626_xs); }
void mosek::fusion::p_ExprMulParamScalar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3624_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3625_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3626_xs)
{
  e->eval(_3625_ws,_3624_rs,_3626_xs);
  _3625_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3627_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3627_wi32(_3627_wi32 ? _3627_wi32->raw() : nullptr,_3627_wi32 ? _3627_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3628_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3628_wi64(_3628_wi64 ? _3628_wi64->raw() : nullptr,_3628_wi64 ? _3628_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3629_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->f64;
  _checked_ptr_1<double> _ptr__3629_wf64(_3629_wf64 ? _3629_wf64->raw() : nullptr,_3629_wf64 ? _3629_wf64->size(0) : 0);
  int32_t _3630_nd = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->nd;
  int32_t _3631_nelem = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->nelem;
  int32_t _3632_nnz = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->nnz;
  bool _3633_hassp = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->hassp;
  int32_t _3634_ptr = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->ptr_base;
  int32_t _3635_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->ncodeatom;
  int32_t _3636_shape = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->shape_base;
  int32_t _3637_sp = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->sp_base;
  int32_t _3638_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->nidxs_base;
  int32_t _3639_cof = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->cof_base;
  int32_t _3640_cconst = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->cconst_base;
  int32_t _3641_ptrcode = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->codeptr_base;
  int32_t _3642_code = mosek::fusion::p_WorkStack::_get_impl(_3625_ws)->code_base;
  int32_t _3643_rnd = _3630_nd;
  int32_t _3644_rnelem = _3631_nelem;
  int32_t _3645_rnnz = _3632_nnz;
  bool _3646_rhassp = (p->getNumNonzero() < p->getSize());
  int32_t _10714_;
  bool _10715_ = (_3635_ncodeatom == (int)0);
  if (_10715_)
  {
    _10714_ = safe_mul( _3632_nnz,(int)3 );
  }
  else
  {
    _10714_ = safe_add( safe_mul( _3632_nnz,(int)4 ),_3635_ncodeatom );
  }
  int32_t _3647_rncodeatom = _10714_;
  _3624_rs->alloc_expr(_3643_rnd,_3644_rnelem,_3645_rnnz,_3646_rhassp,_3647_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3648_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3648_ri64(_3648_ri64 ? _3648_ri64->raw() : nullptr,_3648_ri64 ? _3648_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3649_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->f64;
  _checked_ptr_1<double> _ptr__3649_rf64(_3649_rf64 ? _3649_rf64->raw() : nullptr,_3649_rf64 ? _3649_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3650_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3650_ri32(_3650_ri32 ? _3650_ri32->raw() : nullptr,_3650_ri32 ? _3650_ri32->size(0) : 0);
  int32_t _3651_rptr = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->ptr_base;
  int32_t _3652_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->nidxs_base;
  int32_t _3653_rsp = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->sp_base;
  int32_t _3654_rcof = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->cof_base;
  bool _3655_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->hassp;
  int32_t _3656_rshape = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->shape_base;
  int32_t _3657_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->codeptr_base;
  int32_t _3658_rcode = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->code_base;
  int32_t _3659_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3624_rs)->cconst_base;
  int32_t _3660_pidx0 = p->getIndex((int)0);
  {
    int32_t _10716_ = (int)0;
    int32_t _10717_ = _3645_rnnz;
    for (int32_t _3661_i = _10716_; _3661_i < _10717_; ++_3661_i)
    {
      {
        _ptr__3649_rf64[safe_add( _3654_rcof,_3661_i )] = 0.0;
      }
    }
    int32_t _10718_ = (int)0;
    int32_t _10719_ = safe_add( _3644_rnelem,(int)1 );
    for (int32_t _3662_i = _10718_; _3662_i < _10719_; ++_3662_i)
    {
      {
        _ptr__3650_ri32[safe_add( _3651_rptr,_3662_i )] = _ptr__3627_wi32[safe_add( _3634_ptr,_3662_i )];
      }
    }
    int32_t _10720_ = (int)0;
    int32_t _10721_ = _3643_rnd;
    for (int32_t _3663_i = _10720_; _3663_i < _10721_; ++_3663_i)
    {
      {
        _ptr__3650_ri32[safe_add( _3656_rshape,_3663_i )] = _ptr__3627_wi32[safe_add( _3636_shape,_3663_i )];
      }
    }
    int32_t _10722_ = (int)0;
    int32_t _10723_ = _3632_nnz;
    for (int32_t _3664_i = _10722_; _3664_i < _10723_; ++_3664_i)
    {
      {
        _ptr__3648_ri64[safe_add( _3652_rnidxs,_3664_i )] = _ptr__3628_wi64[safe_add( _3638_nidxs,_3664_i )];
      }
    }
    if (_3655_rhassp)
    {
      {
        int32_t _10724_ = (int)0;
        int32_t _10725_ = _3644_rnelem;
        for (int32_t _3665_i = _10724_; _3665_i < _10725_; ++_3665_i)
        {
          {
            _ptr__3648_ri64[safe_add( _3653_rsp,_3665_i )] = _ptr__3628_wi64[safe_add( _3637_sp,_3665_i )];
          }
        }
      }
    }
    {}
    int32_t _3666_codei = (int)0;
    if ((_3647_rncodeatom > (int)0))
    {
      {
        _ptr__3650_ri32[_3657_rcodeptr] = (int)0;
      }
    }
    {}
    int32_t _10726_ = (int)0;
    int32_t _10727_ = _3632_nnz;
    for (int32_t _3667_i = _10726_; _3667_i < _10727_; ++_3667_i)
    {
      {
        _ptr__3650_ri32[safe_add( _3658_rcode,_3666_codei )] = 2;
        _ptr__3649_rf64[safe_add( _3659_rcconst,_3666_codei )] = _ptr__3629_wf64[safe_add( _3639_cof,_3667_i )];
        ++ _3666_codei;
        if ((_3635_ncodeatom > (int)0))
        {
          {
            int32_t _10728_ = _ptr__3627_wi32[safe_add( _3641_ptrcode,_3667_i )];
            int32_t _10729_ = _ptr__3627_wi32[safe_add( safe_add( _3641_ptrcode,_3667_i ),(int)1 )];
            for (int32_t _3668_j = _10728_; _3668_j < _10729_; ++_3668_j)
            {
              {
                _ptr__3650_ri32[safe_add( _3658_rcode,_3666_codei )] = _ptr__3627_wi32[safe_add( _3642_code,_3668_j )];
                _ptr__3649_rf64[safe_add( _3659_rcconst,_3666_codei )] = _ptr__3629_wf64[safe_add( _3640_cconst,_3668_j )];
                ++ _3666_codei;
              }
            }
            _ptr__3650_ri32[safe_add( _3658_rcode,_3666_codei )] = 3;
            ++ _3666_codei;
          }
        }
        {}
        _ptr__3650_ri32[safe_add( _3658_rcode,_3666_codei )] = 1;
        _ptr__3649_rf64[safe_add( _3659_rcconst,_3666_codei )] = _3660_pidx0;
        ++ _3666_codei;
        _ptr__3650_ri32[safe_add( _3658_rcode,_3666_codei )] = 5;
        ++ _3666_codei;
        _ptr__3650_ri32[safe_add( safe_add( _3657_rcodeptr,_3667_i ),(int)1 )] = _3666_codei;
      }
    }
  }
  _3626_xs->clear();
}
// End mosek.fusion.ExprMulParamScalar.eval

// Begin mosek.fusion.ExprMulParamScalar.toString
// Method mosek.fusion.ExprMulParamScalar.toString @ src/fusion/Parameter.monty:2509:6-156
std::string mosek::fusion::ExprMulParamScalar :: toString() { return mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamScalar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalar("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamScalar.toString

void mosek::fusion::p_ExprMulParamScalar::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamScalar::destroy() { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->destroy(); }
// } class ExprMulParamScalar
// class ExprMulParamDiagLeft { // @ src/fusion/Parameter.monty:2127:4-2490:5
mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft(mosek::fusion::p_ExprMulParamDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulParamDiagLeft::~ExprMulParamDiagLeft() {  /* std::cout << "~ExprMulParamDiagLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamDiagLeft::p_ExprMulParamDiagLeft
  (::mosek::fusion::ExprMulParamDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamDiagLeft.ctor @ src/fusion/Parameter.monty:2131:6-2141:7
mosek::fusion::ExprMulParamDiagLeft::t mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3669_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3670_e)
{ return new mosek::fusion::ExprMulParamDiagLeft(_3669_p,_3670_e); }
mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3669_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3670_e) : 
   ExprMulParamDiagLeft(new mosek::fusion::p_ExprMulParamDiagLeft(this))
{ mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->_initialize(_3669_p,_3670_e); }
void mosek::fusion::p_ExprMulParamDiagLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3669_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3670_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3670_e->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->p = _3669_p;
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->e = _3670_e;
    if (((_3669_p->getND() != (int)2) || (_3670_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3669_p->getDim((int)1) != _3670_e->getDim((int)0)) || (_3669_p->getDim((int)0) != _3670_e->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamDiagLeft.ctor

// Begin mosek.fusion.ExprMulParamDiagLeft.eval
// Method mosek.fusion.ExprMulParamDiagLeft.eval @ src/fusion/Parameter.monty:2144:6-2489:7
void mosek::fusion::ExprMulParamDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3671_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3672_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3673_xs) { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->eval(_3671_rs,_3672_ws,_3673_xs); }
void mosek::fusion::p_ExprMulParamDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3671_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3672_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3673_xs)
{
  e->eval(_3672_ws,_3671_rs,_3673_xs);
  _3672_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3674_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3674_wi32(_3674_wi32 ? _3674_wi32->raw() : nullptr,_3674_wi32 ? _3674_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3675_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3675_wi64(_3675_wi64 ? _3675_wi64->raw() : nullptr,_3675_wi64 ? _3675_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3676_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->f64;
  _checked_ptr_1<double> _ptr__3676_wf64(_3676_wf64 ? _3676_wf64->raw() : nullptr,_3676_wf64 ? _3676_wf64->size(0) : 0);
  int32_t _3677_nd = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->nd;
  int32_t _3678_nelem = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->nelem;
  int32_t _3679_nnz = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->nnz;
  bool _3680_hassp = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->hassp;
  int32_t _3681_ptr = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->ptr_base;
  int32_t _3682_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->ncodeatom;
  int32_t _3683_shape = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->shape_base;
  int32_t _3684_sp = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->sp_base;
  int32_t _3685_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->nidxs_base;
  int32_t _3686_cof = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->cof_base;
  int32_t _3687_cconst = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->cconst_base;
  int32_t _3688_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->codeptr_base;
  int32_t _3689_code = mosek::fusion::p_WorkStack::_get_impl(_3672_ws)->code_base;
  if (((_3677_nd != (int)2) || ((_ptr__3674_wi32[_3683_shape] != p->getDim((int)1)) || (_ptr__3674_wi32[safe_add( _3683_shape,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int32_t _3690_pnnz = p->getNumNonzero();
  int32_t _3691_psp = _3673_xs->alloci64(_3690_pnnz);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3692_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3673_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3692_xi64(_3692_xi64 ? _3692_xi64->raw() : nullptr,_3692_xi64 ? _3692_xi64->size(0) : 0);
  p->getSp(_3692_xi64,_3691_psp);
  int32_t _3693_pdim0 = p->getDim((int)0);
  int32_t _3694_pdim1 = p->getDim((int)1);
  int32_t _3695_edim0 = _ptr__3674_wi32[_3683_shape];
  int32_t _3696_edim1 = _ptr__3674_wi32[safe_add( _3683_shape,(int)1 )];
  int32_t _3697_pidxs = _3673_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3698_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3673_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3698_xi32(_3698_xi32 ? _3698_xi32->raw() : nullptr,_3698_xi32 ? _3698_xi32->size(0) : 0);
  p->getAllIndexes(_3698_xi32,_3697_pidxs);
  if (_3680_hassp)
  {
    {
      int32_t _3699_eperm = _3673_xs->alloci32(_3678_nelem);
      int32_t _3700_eptr = _3673_xs->alloci32(safe_add( _3696_edim1,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3701_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3673_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__3701_xi32(_3701_xi32 ? _3701_xi32->raw() : nullptr,_3701_xi32 ? _3701_xi32->size(0) : 0);
      int32_t _10730_ = (int)0;
      int32_t _10731_ = safe_add( _3696_edim1,(int)1 );
      for (int32_t _3702_i = _10730_; _3702_i < _10731_; ++_3702_i)
      {
        {
          _ptr__3701_xi32[safe_add( _3700_eptr,_3702_i )] = (int)0;
        }
      }
      int32_t _10732_ = (int)0;
      int32_t _10733_ = _3678_nelem;
      for (int32_t _3703_i = _10732_; _3703_i < _10733_; ++_3703_i)
      {
        {
          ++ _ptr__3701_xi32[safe_add( safe_add( _3700_eptr,(_ptr__3675_wi64[safe_add( _3684_sp,_3703_i )] % _3696_edim1) ),(int)1 )];
        }
      }
      int32_t _10734_ = (int)0;
      int32_t _10735_ = _3696_edim1;
      for (int32_t _3704_i = _10734_; _3704_i < _10735_; ++_3704_i)
      {
        {
          _ptr__3701_xi32[safe_add( safe_add( _3700_eptr,_3704_i ),(int)1 )] += _ptr__3701_xi32[safe_add( _3700_eptr,_3704_i )];
        }
      }
      int32_t _10736_ = (int)0;
      int32_t _10737_ = _3678_nelem;
      for (int32_t _3705_i = _10736_; _3705_i < _10737_; ++_3705_i)
      {
        {
          int64_t _3706_colidx = (_ptr__3675_wi64[safe_add( _3684_sp,_3705_i )] % _3696_edim1);
          _ptr__3701_xi32[safe_add( _3699_eperm,_ptr__3701_xi32[safe_add( _3700_eptr,_3706_colidx )] )] = _3705_i;
          ++ _ptr__3701_xi32[safe_add( _3700_eptr,_3706_colidx )];
        }
      }
      int32_t _3707_rnelem = (int)0;
      int32_t _3708_rnnz = (int)0;
      int32_t _3709_rncodeatom = (int)0;
      {
        int32_t _3710_pe = (int)0;
        int32_t _3711_pp = (int)0;
        while ( ((_3711_pp < _3690_pnnz) && (_3710_pe < _3678_nelem)) )
        {
          {
            int32_t _3712_eidx = _ptr__3701_xi32[safe_add( _3699_eperm,_3710_pe )];
            int64_t _3713_psubi = (_ptr__3692_xi64[safe_add( _3691_psp,_3711_pp )] / _3694_pdim1);
            int64_t _3714_esubj = (_ptr__3675_wi64[safe_add( _3684_sp,_3712_eidx )] % _3696_edim1);
            if ((_3713_psubi < _3714_esubj))
            {
              {
                while ( ((_3711_pp < _3690_pnnz) && (_ptr__3692_xi64[safe_add( _3691_psp,_3711_pp )] < safe_mul( safe_add( _3713_psubi,(int)1 ),_3694_pdim1 ))) )
                {
                  {
                    ++ _3711_pp;
                  }
                }
              }
            }
            else if((_3714_esubj < _3713_psubi))
            {
              {
                while ( ((_3710_pe < _3690_pnnz) && ((_ptr__3675_wi64[safe_add( _3684_sp,_ptr__3701_xi32[safe_add( _3699_eperm,_3710_pe )] )] % _3696_edim1) == _3714_esubj)) )
                {
                  {
                    ++ _3710_pe;
                  }
                }
              }
            }
            else
            {
              {
                int32_t _3715_ie = _3710_pe;
                int32_t _3716_ip = _3711_pp;
                while ( ((_3711_pp < _3690_pnnz) && (_ptr__3692_xi64[safe_add( _3691_psp,_3711_pp )] < safe_mul( safe_add( _3713_psubi,(int)1 ),_3694_pdim1 ))) )
                {
                  {
                    ++ _3711_pp;
                  }
                }
                while ( ((_3710_pe < _3690_pnnz) && ((_ptr__3675_wi64[safe_add( _3684_sp,_ptr__3701_xi32[safe_add( _3699_eperm,_3710_pe )] )] % _3696_edim1) == _3714_esubj)) )
                {
                  {
                    ++ _3710_pe;
                  }
                }
                bool _3717_haselm = false;
                while ( ((_3716_ip < _3711_pp) && (_3715_ie < _3710_pe)) )
                {
                  {
                    int64_t _3718_psubj = (_ptr__3692_xi64[safe_add( _3691_psp,_3716_ip )] % _3694_pdim1);
                    int32_t _3719_eidx = _ptr__3701_xi32[safe_add( _3699_eperm,_3715_ie )];
                    int64_t _3720_esubi = (_ptr__3675_wi64[safe_add( _3684_sp,_3719_eidx )] / _3696_edim1);
                    if ((_3718_psubj < _3720_esubi))
                    {
                      {
                        ++ _3716_ip;
                      }
                    }
                    else if((_3718_psubj > _3720_esubi))
                    {
                      {
                        ++ _3715_ie;
                      }
                    }
                    else
                    {
                      {
                        _3708_rnnz += (_ptr__3674_wi32[safe_add( safe_add( _3681_ptr,_3719_eidx ),(int)1 )] - _ptr__3674_wi32[safe_add( _3681_ptr,_3719_eidx )]);
                        _3717_haselm = true;
                        int32_t _3721_n = (_ptr__3674_wi32[safe_add( safe_add( _3681_ptr,_3719_eidx ),(int)1 )] - _ptr__3674_wi32[safe_add( _3681_ptr,_3719_eidx )]);
                        int32_t _10738_;
                        bool _10739_ = (_3682_ncodeatom > (int)0);
                        if (_10739_)
                        {
                          _10738_ = safe_add( (_ptr__3674_wi32[safe_add( _3688_codeptr,_ptr__3674_wi32[safe_add( safe_add( _3681_ptr,_3719_eidx ),(int)1 )] )] - _ptr__3674_wi32[safe_add( _3688_codeptr,_ptr__3674_wi32[safe_add( _3681_ptr,_3719_eidx )] )]),safe_mul( (int)4,_3721_n ) );
                        }
                        else
                        {
                          _10738_ = safe_mul( (int)3,_3721_n );
                        }
                        _3709_rncodeatom += _10738_;
                        ++ _3716_ip;
                        ++ _3715_ie;
                      }
                    }
                  }
                }
                if (_3717_haselm)
                {
                  {
                    ++ _3707_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int32_t _3722_rnd = (int)1;
      bool _3723_rhassp = (_3707_rnelem < _3693_pdim0);
      _3671_rs->alloc_expr(_3722_rnd,_3707_rnelem,_3708_rnnz,_3723_rhassp,_3709_rncodeatom);
      int32_t _3724_rptr = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->ptr_base;
      int32_t _3725_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->nidxs_base;
      int32_t _10740_;
      bool _10741_ = _3723_rhassp;
      if (_10741_)
      {
        _10740_ = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->sp_base;
      }
      else
      {
        _10740_ = _3671_rs->alloci64(_3707_rnelem);
      }
      int32_t _3726_rsp = _10740_;
      int32_t _3727_rcof = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->cof_base;
      bool _3728_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->hassp;
      int32_t _3729_rshape = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->shape_base;
      int32_t _3730_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->codeptr_base;
      int32_t _3731_rcode = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->code_base;
      int32_t _3732_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3733_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3733_ri64(_3733_ri64 ? _3733_ri64->raw() : nullptr,_3733_ri64 ? _3733_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3734_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->f64;
      _checked_ptr_1<double> _ptr__3734_rf64(_3734_rf64 ? _3734_rf64->raw() : nullptr,_3734_rf64 ? _3734_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3735_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3735_ri32(_3735_ri32 ? _3735_ri32->raw() : nullptr,_3735_ri32 ? _3735_ri32->size(0) : 0);
      if ((_3707_rnelem > (int)0))
      {
        {
          _ptr__3735_ri32[_3724_rptr] = (int)0;
          if ((_3708_rnnz > (int)0))
          {
            {
              _ptr__3735_ri32[_3730_rcodeptr] = (int)0;
            }
          }
          {}
          _ptr__3735_ri32[_3729_rshape] = (int32_t)_3693_pdim0;
          int32_t _3736_codei = (int)0;
          int32_t _3737_elmi = (int)0;
          int32_t _3738_nzi = (int)0;
          int32_t _3739_pe = (int)0;
          int32_t _3740_pp = (int)0;
          while ( ((_3740_pp < _3690_pnnz) && (_3739_pe < _3678_nelem)) )
          {
            {
              int32_t _3741_eidx = _ptr__3701_xi32[safe_add( _3699_eperm,_3739_pe )];
              int64_t _3742_psubi = (_ptr__3692_xi64[safe_add( _3691_psp,_3740_pp )] / _3694_pdim1);
              int64_t _3743_esubj = (_ptr__3675_wi64[safe_add( _3684_sp,_3741_eidx )] % _3696_edim1);
              if ((_3742_psubi < _3743_esubj))
              {
                {
                  while ( ((_3740_pp < _3690_pnnz) && (_ptr__3692_xi64[safe_add( _3691_psp,_3740_pp )] < safe_mul( safe_add( _3742_psubi,(int)1 ),_3694_pdim1 ))) )
                  {
                    {
                      ++ _3740_pp;
                    }
                  }
                }
              }
              else if((_3743_esubj < _3742_psubi))
              {
                {
                  while ( ((_3739_pe < _3690_pnnz) && ((_ptr__3675_wi64[safe_add( _3684_sp,_ptr__3701_xi32[safe_add( _3699_eperm,_3739_pe )] )] % _3696_edim1) == _3743_esubj)) )
                  {
                    {
                      ++ _3739_pe;
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _3744_ie = _3739_pe;
                  int32_t _3745_ip = _3740_pp;
                  while ( ((_3740_pp < _3690_pnnz) && (_ptr__3692_xi64[safe_add( _3691_psp,_3740_pp )] < safe_mul( safe_add( _3742_psubi,(int)1 ),_3694_pdim1 ))) )
                  {
                    {
                      ++ _3740_pp;
                    }
                  }
                  while ( ((_3739_pe < _3690_pnnz) && ((_ptr__3675_wi64[safe_add( _3684_sp,_ptr__3701_xi32[safe_add( _3699_eperm,_3739_pe )] )] % _3696_edim1) == _3743_esubj)) )
                  {
                    {
                      ++ _3739_pe;
                    }
                  }
                  int32_t _3746_numelm = (int)0;
                  while ( ((_3745_ip < _3740_pp) && (_3744_ie < _3739_pe)) )
                  {
                    {
                      int64_t _3747_psubj = (_ptr__3692_xi64[safe_add( _3691_psp,_3745_ip )] % _3694_pdim1);
                      int32_t _3748_eidx = _ptr__3701_xi32[safe_add( _3699_eperm,_3744_ie )];
                      int64_t _3749_esubi = (_ptr__3675_wi64[safe_add( _3684_sp,_3748_eidx )] / _3696_edim1);
                      if ((_3747_psubj < _3749_esubi))
                      {
                        {
                          ++ _3745_ip;
                        }
                      }
                      else if((_3747_psubj > _3749_esubi))
                      {
                        {
                          ++ _3744_ie;
                        }
                      }
                      else
                      {
                        {
                          int32_t _10742_ = _ptr__3674_wi32[safe_add( _3681_ptr,_3748_eidx )];
                          int32_t _10743_ = _ptr__3674_wi32[safe_add( safe_add( _3681_ptr,_3748_eidx ),(int)1 )];
                          for (int32_t _3750_i = _10742_; _3750_i < _10743_; ++_3750_i)
                          {
                            {
                              _ptr__3734_rf64[safe_add( _3727_rcof,_3738_nzi )] = 0.0;
                              _ptr__3733_ri64[safe_add( _3725_rnidxs,_3738_nzi )] = _ptr__3675_wi64[safe_add( _3685_nidxs,_3750_i )];
                              _ptr__3735_ri32[safe_add( _3731_rcode,_3736_codei )] = 2;
                              _ptr__3734_rf64[safe_add( _3732_rcconst,_3736_codei )] = _ptr__3676_wf64[safe_add( _3686_cof,_3750_i )];
                              ++ _3736_codei;
                              if ((_3682_ncodeatom > (int)0))
                              {
                                {
                                  int32_t _10744_ = _ptr__3674_wi32[safe_add( _3688_codeptr,_3750_i )];
                                  int32_t _10745_ = _ptr__3674_wi32[safe_add( safe_add( _3688_codeptr,_3750_i ),(int)1 )];
                                  for (int32_t _3751_k = _10744_; _3751_k < _10745_; ++_3751_k)
                                  {
                                    {
                                      _ptr__3735_ri32[safe_add( _3731_rcode,_3736_codei )] = _ptr__3674_wi32[safe_add( _3689_code,_3751_k )];
                                      _ptr__3734_rf64[safe_add( _3732_rcconst,_3736_codei )] = _ptr__3676_wf64[safe_add( _3687_cconst,_3751_k )];
                                      ++ _3736_codei;
                                    }
                                  }
                                  _ptr__3735_ri32[safe_add( _3731_rcode,_3736_codei )] = 3;
                                  ++ _3736_codei;
                                }
                              }
                              {}
                              _ptr__3735_ri32[safe_add( _3731_rcode,_3736_codei )] = 1;
                              _ptr__3734_rf64[safe_add( _3732_rcconst,_3736_codei )] = _ptr__3701_xi32[safe_add( _3697_pidxs,_3745_ip )];
                              ++ _3736_codei;
                              _ptr__3735_ri32[safe_add( _3731_rcode,_3736_codei )] = 5;
                              ++ _3736_codei;
                              _ptr__3735_ri32[safe_add( safe_add( _3730_rcodeptr,_3738_nzi ),(int)1 )] = _3736_codei;
                              ++ _3738_nzi;
                            }
                          }
                          ++ _3745_ip;
                          ++ _3744_ie;
                          ++ _3746_numelm;
                        }
                      }
                    }
                  }
                  if ((_3746_numelm > (int)0))
                  {
                    {
                      _ptr__3733_ri64[safe_add( _3726_rsp,_3737_elmi )] = _3742_psubi;
                      _ptr__3735_ri32[safe_add( safe_add( _3724_rptr,_3737_elmi ),(int)1 )] = _3738_nzi;
                      ++ _3737_elmi;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
      {}
      if ((!_3728_rhassp))
      {
        {
          _3671_rs->popi64(_3707_rnelem);
        }
      }
      {}
      _3673_xs->clear();
    }
  }
  else
  {
    {
      int32_t _3752_rnelem = (int)0;
      int32_t _3753_rnnz = (int)0;
      int32_t _3754_rncodeatom = (int)0;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3755_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3673_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__3755_xi32(_3755_xi32 ? _3755_xi32->raw() : nullptr,_3755_xi32 ? _3755_xi32->size(0) : 0);
      {
        int32_t _3756_pi = (int)0;
        while ( (_3756_pi < _3690_pnnz) )
        {
          {
            int64_t _3757_prow = (_ptr__3692_xi64[safe_add( _3691_psp,_3756_pi )] / _3694_pdim1);
            int64_t _3758_prowend = safe_mul( safe_add( _3757_prow,(int)1 ),_3694_pdim1 );
            bool _3759_haselm = false;
            while ( ((_3756_pi < _3690_pnnz) && (_ptr__3692_xi64[safe_add( _3691_psp,_3756_pi )] < _3758_prowend)) )
            {
              {
                int64_t _3760_pcol = (_ptr__3692_xi64[safe_add( _3691_psp,_3756_pi )] % _3694_pdim1);
                int64_t _3761_eidx = safe_add( safe_mul( _3760_pcol,_3696_edim1 ),_3757_prow );
                int32_t _3762_n = (_ptr__3674_wi32[safe_add( safe_add( _3681_ptr,_3761_eidx ),(int)1 )] - _ptr__3674_wi32[safe_add( _3681_ptr,_3761_eidx )]);
                _3753_rnnz += _3762_n;
                _3759_haselm = true;
                int32_t _10746_;
                bool _10747_ = (_3682_ncodeatom > (int)0);
                if (_10747_)
                {
                  _10746_ = safe_add( (_ptr__3674_wi32[safe_add( _3688_codeptr,_ptr__3674_wi32[safe_add( safe_add( _3681_ptr,_3761_eidx ),(int)1 )] )] - _ptr__3674_wi32[safe_add( _3688_codeptr,_ptr__3674_wi32[safe_add( _3681_ptr,_3761_eidx )] )]),safe_mul( _3762_n,(int)4 ) );
                }
                else
                {
                  _10746_ = safe_mul( _3762_n,(int)3 );
                }
                _3754_rncodeatom += _10746_;
                ++ _3756_pi;
              }
            }
            if (_3759_haselm)
            {
              {
                ++ _3752_rnelem;
              }
            }
            {}
          }
        }
      }
      int32_t _3763_rnd = (int)1;
      bool _3764_rhassp = (_3752_rnelem < _3693_pdim0);
      _3671_rs->alloc_expr(_3763_rnd,_3752_rnelem,_3753_rnnz,_3764_rhassp,_3754_rncodeatom);
      int32_t _3765_rptr = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->ptr_base;
      int32_t _3766_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->nidxs_base;
      int32_t _10748_;
      bool _10749_ = _3764_rhassp;
      if (_10749_)
      {
        _10748_ = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->sp_base;
      }
      else
      {
        _10748_ = _3671_rs->alloci64(_3752_rnelem);
      }
      int32_t _3767_rsp = _10748_;
      int32_t _3768_rcof = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->cof_base;
      bool _3769_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->hassp;
      int32_t _3770_rshape = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->shape_base;
      int32_t _3771_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->codeptr_base;
      int32_t _3772_rcode = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->code_base;
      int32_t _3773_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3774_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3774_ri64(_3774_ri64 ? _3774_ri64->raw() : nullptr,_3774_ri64 ? _3774_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3775_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->f64;
      _checked_ptr_1<double> _ptr__3775_rf64(_3775_rf64 ? _3775_rf64->raw() : nullptr,_3775_rf64 ? _3775_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3776_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3671_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3776_ri32(_3776_ri32 ? _3776_ri32->raw() : nullptr,_3776_ri32 ? _3776_ri32->size(0) : 0);
      {
        _ptr__3776_ri32[_3765_rptr] = (int)0;
        if ((_3754_rncodeatom > (int)0))
        {
          {
            _ptr__3776_ri32[_3771_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__3776_ri32[_3770_rshape] = (int32_t)_3693_pdim0;
        int32_t _3777_codei = (int)0;
        int32_t _3778_elmi = (int)0;
        int32_t _3779_nzi = (int)0;
        int32_t _3780_pi = (int)0;
        while ( (_3780_pi < _3690_pnnz) )
        {
          {
            int64_t _3781_psubi = (_ptr__3692_xi64[safe_add( _3691_psp,_3780_pi )] / _3694_pdim1);
            int64_t _3782_prowend = safe_mul( safe_add( _3781_psubi,(int)1 ),_3694_pdim1 );
            int32_t _3783_numelm = (int)0;
            while ( ((_3780_pi < _3690_pnnz) && (_ptr__3692_xi64[safe_add( _3691_psp,_3780_pi )] < _3782_prowend)) )
            {
              {
                int64_t _3784_psubj = (_ptr__3692_xi64[safe_add( _3691_psp,_3780_pi )] % _3694_pdim1);
                int64_t _3785_eidx = safe_add( safe_mul( _3784_psubj,_3696_edim1 ),_3781_psubi );
                int32_t _10750_ = _ptr__3674_wi32[safe_add( _3681_ptr,_3785_eidx )];
                int32_t _10751_ = _ptr__3674_wi32[safe_add( safe_add( _3681_ptr,_3785_eidx ),(int)1 )];
                for (int32_t _3786_k = _10750_; _3786_k < _10751_; ++_3786_k)
                {
                  {
                    _ptr__3774_ri64[safe_add( _3766_rnidxs,_3779_nzi )] = _ptr__3675_wi64[safe_add( _3685_nidxs,_3786_k )];
                    _ptr__3775_rf64[safe_add( _3768_rcof,_3779_nzi )] = 0.0;
                    _ptr__3776_ri32[safe_add( _3772_rcode,_3777_codei )] = 2;
                    _ptr__3775_rf64[safe_add( _3773_rcconst,_3777_codei )] = _ptr__3676_wf64[safe_add( _3686_cof,_3786_k )];
                    ++ _3777_codei;
                    if ((_3682_ncodeatom > (int)0))
                    {
                      {
                        int32_t _10752_ = _ptr__3674_wi32[safe_add( _3688_codeptr,_3786_k )];
                        int32_t _10753_ = _ptr__3674_wi32[safe_add( safe_add( _3688_codeptr,_3786_k ),(int)1 )];
                        for (int32_t _3787_l = _10752_; _3787_l < _10753_; ++_3787_l)
                        {
                          {
                            _ptr__3776_ri32[safe_add( _3772_rcode,_3777_codei )] = _ptr__3674_wi32[safe_add( _3689_code,_3787_l )];
                            _ptr__3775_rf64[safe_add( _3773_rcconst,_3777_codei )] = _ptr__3676_wf64[safe_add( _3687_cconst,_3787_l )];
                            ++ _3777_codei;
                          }
                        }
                        _ptr__3776_ri32[safe_add( _3772_rcode,_3777_codei )] = 3;
                        ++ _3777_codei;
                      }
                    }
                    {}
                    _ptr__3776_ri32[safe_add( _3772_rcode,_3777_codei )] = 1;
                    _ptr__3775_rf64[safe_add( _3773_rcconst,_3777_codei )] = _ptr__3755_xi32[safe_add( _3697_pidxs,_3780_pi )];
                    ++ _3777_codei;
                    _ptr__3776_ri32[safe_add( _3772_rcode,_3777_codei )] = 5;
                    ++ _3777_codei;
                    _ptr__3776_ri32[safe_add( safe_add( _3771_rcodeptr,_3779_nzi ),(int)1 )] = _3777_codei;
                    ++ _3779_nzi;
                  }
                }
                ++ _3783_numelm;
                ++ _3780_pi;
              }
            }
            if ((_3783_numelm > (int)0))
            {
              {
                _ptr__3774_ri64[safe_add( _3767_rsp,_3778_elmi )] = _3781_psubi;
                _ptr__3776_ri32[safe_add( safe_add( _3765_rptr,_3778_elmi ),(int)1 )] = _3779_nzi;
                ++ _3778_elmi;
              }
            }
            {}
          }
        }
      }
      if ((!_3769_rhassp))
      {
        {
          _3671_rs->popi64(_3752_rnelem);
        }
      }
      {}
      _3673_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulParamDiagLeft.eval

// Begin mosek.fusion.ExprMulParamDiagLeft.toString
// Method mosek.fusion.ExprMulParamDiagLeft.toString @ src/fusion/Parameter.monty:2142:6-158
std::string mosek::fusion::ExprMulParamDiagLeft :: toString() { return mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamDiagLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamDiagLeft.toString

void mosek::fusion::p_ExprMulParamDiagLeft::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamDiagLeft::destroy() { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->destroy(); }
// } class ExprMulParamDiagLeft
// class ExprMulParamDiagRight { // @ src/fusion/Parameter.monty:1746:4-2124:5
mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight(mosek::fusion::p_ExprMulParamDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagRight()" << this << std::endl; */ }
mosek::fusion::ExprMulParamDiagRight::~ExprMulParamDiagRight() {  /* std::cout << "~ExprMulParamDiagRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamDiagRight::p_ExprMulParamDiagRight
  (::mosek::fusion::ExprMulParamDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamDiagRight.ctor @ src/fusion/Parameter.monty:1750:6-1760:7
mosek::fusion::ExprMulParamDiagRight::t mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _3788_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3789_p)
{ return new mosek::fusion::ExprMulParamDiagRight(_3788_e,_3789_p); }
mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _3788_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3789_p) : 
   ExprMulParamDiagRight(new mosek::fusion::p_ExprMulParamDiagRight(this))
{ mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->_initialize(_3788_e,_3789_p); }
void mosek::fusion::p_ExprMulParamDiagRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3788_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _3789_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_3788_e->getDim((int)0))}));
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->p = _3789_p;
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->e = _3788_e;
    if (((_3789_p->getND() != (int)2) || (_3788_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3789_p->getDim((int)1) != _3788_e->getDim((int)0)) || (_3789_p->getDim((int)0) != _3788_e->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamDiagRight.ctor

// Begin mosek.fusion.ExprMulParamDiagRight.eval
// Method mosek.fusion.ExprMulParamDiagRight.eval @ src/fusion/Parameter.monty:1764:6-2123:7
void mosek::fusion::ExprMulParamDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3790_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3791_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3792_xs) { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->eval(_3790_rs,_3791_ws,_3792_xs); }
void mosek::fusion::p_ExprMulParamDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3790_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3791_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3792_xs)
{
  e->eval(_3791_ws,_3790_rs,_3792_xs);
  _3791_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3793_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3793_wi32(_3793_wi32 ? _3793_wi32->raw() : nullptr,_3793_wi32 ? _3793_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3794_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3794_wi64(_3794_wi64 ? _3794_wi64->raw() : nullptr,_3794_wi64 ? _3794_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3795_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->f64;
  _checked_ptr_1<double> _ptr__3795_wf64(_3795_wf64 ? _3795_wf64->raw() : nullptr,_3795_wf64 ? _3795_wf64->size(0) : 0);
  int32_t _3796_nd = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->nd;
  int32_t _3797_nelem = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->nelem;
  int32_t _3798_nnz = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->nnz;
  bool _3799_hassp = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->hassp;
  int32_t _3800_ptr = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->ptr_base;
  int32_t _3801_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->ncodeatom;
  int32_t _3802_shape = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->shape_base;
  int32_t _3803_sp = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->sp_base;
  int32_t _3804_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->nidxs_base;
  int32_t _3805_cof = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->cof_base;
  int32_t _3806_cconst = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->cconst_base;
  int32_t _3807_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->codeptr_base;
  int32_t _3808_code = mosek::fusion::p_WorkStack::_get_impl(_3791_ws)->code_base;
  if (((_3796_nd != (int)2) || ((_ptr__3793_wi32[_3802_shape] != p->getDim((int)1)) || (_ptr__3793_wi32[safe_add( _3802_shape,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int32_t _3809_pnnz = p->getNumNonzero();
  int32_t _3810_psp = _3792_xs->alloci64(_3809_pnnz);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3811_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3792_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3811_xi64(_3811_xi64 ? _3811_xi64->raw() : nullptr,_3811_xi64 ? _3811_xi64->size(0) : 0);
  int32_t _3812_pidxs = _3792_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3813_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3792_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3813_xi32(_3813_xi32 ? _3813_xi32->raw() : nullptr,_3813_xi32 ? _3813_xi32->size(0) : 0);
  p->getAllIndexes(_3813_xi32,_3812_pidxs);
  p->getSp(_3811_xi64,_3810_psp);
  int32_t _3814_pdim0 = p->getDim((int)0);
  int32_t _3815_pdim1 = p->getDim((int)1);
  int32_t _3816_edim0 = _ptr__3793_wi32[_3802_shape];
  int32_t _3817_edim1 = _ptr__3793_wi32[safe_add( _3802_shape,(int)1 )];
  int32_t _3818_pperm = _3792_xs->alloci32(_3809_pnnz);
  int32_t _3819_pptr = _3792_xs->alloci32(safe_add( _3815_pdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3820_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3792_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3820_xi32(_3820_xi32 ? _3820_xi32->raw() : nullptr,_3820_xi32 ? _3820_xi32->size(0) : 0);
  int32_t _10754_ = (int)0;
  int32_t _10755_ = safe_add( _3815_pdim1,(int)1 );
  for (int32_t _3821_i = _10754_; _3821_i < _10755_; ++_3821_i)
  {
    {
      _ptr__3820_xi32[safe_add( _3819_pptr,_3821_i )] = (int)0;
    }
  }
  int32_t _10756_ = (int)0;
  int32_t _10757_ = _3809_pnnz;
  for (int32_t _3822_i = _10756_; _3822_i < _10757_; ++_3822_i)
  {
    {
      ++ _ptr__3820_xi32[safe_add( safe_add( _3819_pptr,(_ptr__3811_xi64[safe_add( _3810_psp,_3822_i )] % _3815_pdim1) ),(int)1 )];
    }
  }
  int32_t _10758_ = (int)1;
  int32_t _10759_ = _3815_pdim1;
  for (int32_t _3823_i = _10758_; _3823_i < _10759_; ++_3823_i)
  {
    {
      _ptr__3820_xi32[safe_add( _3819_pptr,_3823_i )] += _ptr__3820_xi32[(safe_add( _3819_pptr,_3823_i ) - (int)1)];
    }
  }
  int32_t _10760_ = (int)0;
  int32_t _10761_ = _3809_pnnz;
  for (int32_t _3824_i = _10760_; _3824_i < _10761_; ++_3824_i)
  {
    {
      int64_t _3825_colidx = (_ptr__3811_xi64[safe_add( _3810_psp,_3824_i )] % _3815_pdim1);
      _ptr__3820_xi32[safe_add( _3818_pperm,_ptr__3820_xi32[safe_add( _3819_pptr,_3825_colidx )] )] = _3824_i;
      ++ _ptr__3820_xi32[safe_add( _3819_pptr,_3825_colidx )];
    }
  }
  if (_3799_hassp)
  {
    {
      int32_t _3826_rncodeatom = (int)0;
      int32_t _3827_rnelem = (int)0;
      int32_t _3828_rnnz = (int)0;
      int32_t _3829_i1 = (int)0;
      int32_t _3830_i0 = (int)0;
      while ( ((_3830_i0 < _3797_nelem) && (_3829_i1 < _3809_pnnz)) )
      {
        {
          int64_t _3831_esubi = (_ptr__3794_wi64[safe_add( _3803_sp,_3830_i0 )] / _3817_edim1);
          int64_t _3832_psubj = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3829_i1 )] )] % _3815_pdim1);
          if ((_3831_esubi < _3832_psubj))
          {
            {
              ++ _3830_i0;
            }
          }
          else if((_3831_esubi > _3832_psubj))
          {
            {
              ++ _3829_i1;
            }
          }
          else
          {
            {
              int32_t _3833_b0 = _3830_i0;
              ++ _3830_i0;
              int32_t _3834_b1 = _3829_i1;
              ++ _3829_i1;
              while ( ((_3830_i0 < _3797_nelem) && ((_ptr__3794_wi64[safe_add( _3803_sp,_3830_i0 )] / _3817_edim1) == _3831_esubi)) )
              {
                {
                  ++ _3830_i0;
                }
              }
              while ( ((_3829_i1 < _3809_pnnz) && ((_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3829_i1 )] )] % _3815_pdim1) == _3832_psubj)) )
              {
                {
                  ++ _3829_i1;
                }
              }
              int32_t _3835_p1 = _3834_b1;
              int32_t _3836_p0 = _3833_b0;
              bool _3837_haselm = false;
              while ( ((_3836_p0 < _3830_i0) && (_3835_p1 < _3829_i1)) )
              {
                {
                  int64_t _3838_esubj = (_ptr__3794_wi64[safe_add( _3803_sp,_3836_p0 )] % _3817_edim1);
                  int64_t _3839_psubi = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3835_p1 )] )] / _3815_pdim1);
                  if ((_3838_esubj < _3839_psubi))
                  {
                    {
                      ++ _3836_p0;
                    }
                  }
                  else if((_3838_esubj > _3839_psubi))
                  {
                    {
                      ++ _3835_p1;
                    }
                  }
                  else
                  {
                    {
                      _3837_haselm = true;
                      int32_t _3840_n = (_ptr__3793_wi32[safe_add( safe_add( _3800_ptr,_3836_p0 ),(int)1 )] - _ptr__3793_wi32[safe_add( _3800_ptr,_3836_p0 )]);
                      _3828_rnnz += _3840_n;
                      int32_t _10762_;
                      bool _10763_ = (_3801_ncodeatom > (int)0);
                      if (_10763_)
                      {
                        _10762_ = safe_add( (_ptr__3793_wi32[safe_add( _3807_codeptr,_ptr__3793_wi32[safe_add( safe_add( _3800_ptr,_3836_p0 ),(int)1 )] )] - _ptr__3793_wi32[safe_add( _3807_codeptr,_ptr__3793_wi32[safe_add( _3800_ptr,_3836_p0 )] )]),safe_mul( _3840_n,(int)4 ) );
                      }
                      else
                      {
                        _10762_ = safe_mul( _3840_n,(int)3 );
                      }
                      _3826_rncodeatom += _10762_;
                      ++ _3836_p0;
                      ++ _3835_p1;
                    }
                  }
                }
              }
              if (_3837_haselm)
              {
                {
                  ++ _3827_rnelem;
                }
              }
              {}
            }
          }
        }
      }
      int32_t _3841_rnd = (int)1;
      bool _3842_rhassp = (_3827_rnelem < _3816_edim0);
      _3790_rs->alloc_expr(_3841_rnd,_3827_rnelem,_3828_rnnz,_3842_rhassp,_3826_rncodeatom);
      int32_t _3843_rptr = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->ptr_base;
      int32_t _3844_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->nidxs_base;
      int32_t _10764_;
      bool _10765_ = _3842_rhassp;
      if (_10765_)
      {
        _10764_ = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->sp_base;
      }
      else
      {
        _10764_ = _3790_rs->alloci64(_3827_rnelem);
      }
      int32_t _3845_rsp = _10764_;
      int32_t _3846_rcof = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->cof_base;
      bool _3847_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->hassp;
      int32_t _3848_rshape = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->shape_base;
      int32_t _3849_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->codeptr_base;
      int32_t _3850_rcode = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->code_base;
      int32_t _3851_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3852_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3852_ri64(_3852_ri64 ? _3852_ri64->raw() : nullptr,_3852_ri64 ? _3852_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3853_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->f64;
      _checked_ptr_1<double> _ptr__3853_rf64(_3853_rf64 ? _3853_rf64->raw() : nullptr,_3853_rf64 ? _3853_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3854_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3854_ri32(_3854_ri32 ? _3854_ri32->raw() : nullptr,_3854_ri32 ? _3854_ri32->size(0) : 0);
      if ((_3827_rnelem > (int)0))
      {
        {
          _ptr__3854_ri32[_3843_rptr] = (int)0;
          if ((_3826_rncodeatom > (int)0))
          {
            {
              _ptr__3854_ri32[_3849_rcodeptr] = (int)0;
            }
          }
          {}
          _ptr__3854_ri32[_3848_rshape] = (int32_t)_3816_edim0;
          int32_t _3855_codei = (int)0;
          int32_t _3856_elmi = (int)0;
          int32_t _3857_nzi = (int)0;
          int32_t _3858_i1 = (int)0;
          int32_t _3859_i0 = (int)0;
          while ( ((_3859_i0 < _3797_nelem) && (_3858_i1 < _3809_pnnz)) )
          {
            {
              int64_t _3860_esubi = (_ptr__3794_wi64[safe_add( _3803_sp,_3859_i0 )] / _3817_edim1);
              int64_t _3861_psubj = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3858_i1 )] )] % _3815_pdim1);
              if ((_3860_esubi < _3861_psubj))
              {
                {
                  while ( ((_3859_i0 < _3797_nelem) && ((_ptr__3794_wi64[safe_add( _3803_sp,_3859_i0 )] / _3817_edim1) == _3860_esubi)) )
                  {
                    {
                      ++ _3859_i0;
                    }
                  }
                }
              }
              else if((_3860_esubi > _3861_psubj))
              {
                {
                  while ( ((_3858_i1 < _3809_pnnz) && ((_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3858_i1 )] )] % _3815_pdim1) == _3861_psubj)) )
                  {
                    {
                      ++ _3858_i1;
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _3862_b0 = _3859_i0;
                  ++ _3859_i0;
                  int32_t _3863_b1 = _3858_i1;
                  ++ _3858_i1;
                  while ( ((_3859_i0 < _3797_nelem) && ((_ptr__3794_wi64[safe_add( _3803_sp,_3859_i0 )] / _3817_edim1) == _3860_esubi)) )
                  {
                    {
                      ++ _3859_i0;
                    }
                  }
                  while ( ((_3858_i1 < _3809_pnnz) && ((_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3858_i1 )] )] % _3815_pdim1) == _3861_psubj)) )
                  {
                    {
                      ++ _3858_i1;
                    }
                  }
                  int32_t _3864_p1 = _3863_b1;
                  int32_t _3865_p0 = _3862_b0;
                  int32_t _3866_numelm = (int)0;
                  while ( ((_3865_p0 < _3859_i0) && (_3864_p1 < _3858_i1)) )
                  {
                    {
                      int64_t _3867_esubj = (_ptr__3794_wi64[safe_add( _3803_sp,_3865_p0 )] % _3817_edim1);
                      int64_t _3868_psubi = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3864_p1 )] )] / _3815_pdim1);
                      if ((_3867_esubj < _3868_psubi))
                      {
                        {
                          ++ _3865_p0;
                        }
                      }
                      else if((_3867_esubj > _3868_psubi))
                      {
                        {
                          ++ _3864_p1;
                        }
                      }
                      else
                      {
                        {
                          int32_t _10766_ = _ptr__3793_wi32[safe_add( _3800_ptr,_3865_p0 )];
                          int32_t _10767_ = _ptr__3793_wi32[safe_add( safe_add( _3800_ptr,_3865_p0 ),(int)1 )];
                          for (int32_t _3869_j = _10766_; _3869_j < _10767_; ++_3869_j)
                          {
                            {
                              _ptr__3852_ri64[safe_add( _3844_rnidxs,_3857_nzi )] = _ptr__3794_wi64[safe_add( _3804_nidxs,_3869_j )];
                              _ptr__3853_rf64[safe_add( _3846_rcof,_3857_nzi )] = 0.0;
                              _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 2;
                              _ptr__3853_rf64[safe_add( _3851_rcconst,_3855_codei )] = _ptr__3795_wf64[safe_add( _3805_cof,_3869_j )];
                              ++ _3855_codei;
                              if ((_3801_ncodeatom > (int)0))
                              {
                                {
                                  int32_t _10768_ = _ptr__3793_wi32[safe_add( _3807_codeptr,_3869_j )];
                                  int32_t _10769_ = _ptr__3793_wi32[safe_add( safe_add( _3807_codeptr,_3869_j ),(int)1 )];
                                  for (int32_t _3870_k = _10768_; _3870_k < _10769_; ++_3870_k)
                                  {
                                    {
                                      _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = _ptr__3793_wi32[safe_add( _3808_code,_3870_k )];
                                      _ptr__3853_rf64[safe_add( _3851_rcconst,_3855_codei )] = _ptr__3795_wf64[safe_add( _3806_cconst,_3870_k )];
                                      ++ _3855_codei;
                                    }
                                  }
                                  _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 3;
                                  ++ _3855_codei;
                                }
                              }
                              {}
                              _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 1;
                              _ptr__3853_rf64[safe_add( _3851_rcconst,_3855_codei )] = _ptr__3820_xi32[safe_add( _3812_pidxs,_ptr__3820_xi32[safe_add( _3818_pperm,_3864_p1 )] )];
                              ++ _3855_codei;
                              _ptr__3854_ri32[safe_add( _3850_rcode,_3855_codei )] = 5;
                              ++ _3855_codei;
                              _ptr__3854_ri32[safe_add( safe_add( _3849_rcodeptr,_3857_nzi ),(int)1 )] = _3855_codei;
                              ++ _3857_nzi;
                            }
                          }
                          ++ _3866_numelm;
                          ++ _3865_p0;
                          ++ _3864_p1;
                        }
                      }
                    }
                  }
                  if ((_3866_numelm > (int)0))
                  {
                    {
                      _ptr__3852_ri64[safe_add( _3845_rsp,_3856_elmi )] = _3860_esubi;
                      _ptr__3854_ri32[safe_add( safe_add( _3843_rptr,_3856_elmi ),(int)1 )] = _3857_nzi;
                      ++ _3856_elmi;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((_3827_rnelem > _ptr__3854_ri32[_3848_rshape]))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
            }
          }
          {}
          if ((_3856_elmi != _3827_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_3857_nzi != _3828_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
        }
      }
      {}
      if ((!_3847_rhassp))
      {
        {
          _3790_rs->popi64(_3827_rnelem);
        }
      }
      {}
      _3792_xs->clear();
    }
  }
  else
  {
    {
      int32_t _3871_rncodeatom = (int)0;
      int32_t _3872_rnelem = (int)0;
      int32_t _3873_rnnz = (int)0;
      int32_t _3874_i1 = (int)0;
      while ( (_3874_i1 < _3809_pnnz) )
      {
        {
          int64_t _3875_psubj = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3874_i1 )] )] % _3815_pdim1);
          int32_t _3876_b1 = _3874_i1;
          ++ _3874_i1;
          while ( ((_3874_i1 < _3809_pnnz) && ((_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3874_i1 )] )] % _3815_pdim1) == _3875_psubj)) )
          {
            {
              ++ _3874_i1;
            }
          }
          int32_t _10770_ = _3876_b1;
          int32_t _10771_ = _3874_i1;
          for (int32_t _3877_k1 = _10770_; _3877_k1 < _10771_; ++_3877_k1)
          {
            {
              int64_t _3878_psubi = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3874_i1 )] )] / _3815_pdim1);
              int64_t _3879_eidx = safe_add( safe_mul( _3875_psubj,_3817_edim1 ),_3878_psubi );
              int32_t _3880_n = (_ptr__3793_wi32[safe_add( safe_add( _3800_ptr,_3879_eidx ),(int)1 )] - _ptr__3793_wi32[safe_add( _3800_ptr,_3879_eidx )]);
              _3873_rnnz += _3880_n;
              int32_t _10772_;
              bool _10773_ = (_3801_ncodeatom > (int)0);
              if (_10773_)
              {
                _10772_ = safe_add( (_ptr__3793_wi32[safe_add( _3807_codeptr,_ptr__3793_wi32[safe_add( safe_add( _3800_ptr,_3879_eidx ),(int)1 )] )] - _ptr__3793_wi32[safe_add( _3807_codeptr,_ptr__3793_wi32[safe_add( _3800_ptr,_3879_eidx )] )]),safe_mul( _3880_n,(int)4 ) );
              }
              else
              {
                _10772_ = safe_mul( _3880_n,(int)3 );
              }
              _3871_rncodeatom += _10772_;
            }
          }
          ++ _3872_rnelem;
        }
      }
      int32_t _3881_rnd = (int)1;
      bool _3882_rhassp = (_3872_rnelem < _3816_edim0);
      _3790_rs->alloc_expr(_3881_rnd,_3872_rnelem,_3873_rnnz,_3882_rhassp,_3871_rncodeatom);
      int32_t _3883_rptr = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->ptr_base;
      int32_t _3884_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->nidxs_base;
      int32_t _10774_;
      bool _10775_ = _3882_rhassp;
      if (_10775_)
      {
        _10774_ = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->sp_base;
      }
      else
      {
        _10774_ = _3790_rs->alloci64(_3872_rnelem);
      }
      int32_t _3885_rsp = _10774_;
      int32_t _3886_rcof = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->cof_base;
      bool _3887_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->hassp;
      int32_t _3888_rshape = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->shape_base;
      int32_t _3889_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->codeptr_base;
      int32_t _3890_rcode = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->code_base;
      int32_t _3891_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _3892_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__3892_ri64(_3892_ri64 ? _3892_ri64->raw() : nullptr,_3892_ri64 ? _3892_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3893_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->f64;
      _checked_ptr_1<double> _ptr__3893_rf64(_3893_rf64 ? _3893_rf64->raw() : nullptr,_3893_rf64 ? _3893_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _3894_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3790_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__3894_ri32(_3894_ri32 ? _3894_ri32->raw() : nullptr,_3894_ri32 ? _3894_ri32->size(0) : 0);
      {
        _ptr__3894_ri32[_3883_rptr] = (int)0;
        if ((_3871_rncodeatom > (int)0))
        {
          {
            _ptr__3894_ri32[_3889_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__3894_ri32[_3888_rshape] = (int32_t)_3816_edim0;
        int32_t _3895_codei = (int)0;
        int32_t _3896_elmi = (int)0;
        int32_t _3897_nzi = (int)0;
        int32_t _3898_i1 = (int)0;
        while ( (_3898_i1 < _3809_pnnz) )
        {
          {
            int64_t _3899_psubj = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3898_i1 )] )] % _3815_pdim1);
            int32_t _3900_b1 = _3898_i1;
            ++ _3898_i1;
            while ( ((_3898_i1 < _3809_pnnz) && ((_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3898_i1 )] )] % _3815_pdim1) == _3899_psubj)) )
            {
              {
                ++ _3898_i1;
              }
            }
            int32_t _10776_ = _3900_b1;
            int32_t _10777_ = _3898_i1;
            for (int32_t _3901_k1 = _10776_; _3901_k1 < _10777_; ++_3901_k1)
            {
              {
                int64_t _3902_psubi = (_ptr__3811_xi64[safe_add( _3810_psp,_ptr__3820_xi32[safe_add( _3818_pperm,_3901_k1 )] )] / _3815_pdim1);
                int64_t _3903_eidx = safe_add( safe_mul( _3899_psubj,_3817_edim1 ),_3902_psubi );
                int32_t _10778_ = _ptr__3793_wi32[safe_add( _3800_ptr,_3903_eidx )];
                int32_t _10779_ = _ptr__3793_wi32[safe_add( safe_add( _3800_ptr,_3903_eidx ),(int)1 )];
                for (int32_t _3904_i = _10778_; _3904_i < _10779_; ++_3904_i)
                {
                  {
                    _ptr__3892_ri64[safe_add( _3884_rnidxs,_3897_nzi )] = _ptr__3794_wi64[safe_add( _3804_nidxs,_3904_i )];
                    _ptr__3893_rf64[safe_add( _3886_rcof,_3897_nzi )] = 0.0;
                    _ptr__3894_ri32[safe_add( _3890_rcode,_3895_codei )] = 2;
                    _ptr__3893_rf64[safe_add( _3891_rcconst,_3895_codei )] = _ptr__3795_wf64[safe_add( _3805_cof,_3904_i )];
                    ++ _3895_codei;
                    if ((_3801_ncodeatom > (int)0))
                    {
                      {
                        int32_t _10780_ = _ptr__3793_wi32[safe_add( _3807_codeptr,_3904_i )];
                        int32_t _10781_ = _ptr__3793_wi32[safe_add( safe_add( _3807_codeptr,_3904_i ),(int)1 )];
                        for (int32_t _3905_k = _10780_; _3905_k < _10781_; ++_3905_k)
                        {
                          {
                            _ptr__3894_ri32[safe_add( _3890_rcode,_3895_codei )] = _ptr__3793_wi32[safe_add( _3808_code,_3905_k )];
                            _ptr__3893_rf64[safe_add( _3891_rcconst,_3895_codei )] = _ptr__3795_wf64[safe_add( _3806_cconst,_3905_k )];
                            ++ _3895_codei;
                          }
                        }
                        _ptr__3894_ri32[safe_add( _3890_rcode,_3895_codei )] = 3;
                        ++ _3895_codei;
                      }
                    }
                    {}
                    _ptr__3894_ri32[safe_add( _3890_rcode,_3895_codei )] = 1;
                    _ptr__3893_rf64[safe_add( _3891_rcconst,_3895_codei )] = _ptr__3820_xi32[safe_add( _3812_pidxs,_ptr__3820_xi32[safe_add( _3818_pperm,_3901_k1 )] )];
                    ++ _3895_codei;
                    _ptr__3894_ri32[safe_add( _3890_rcode,_3895_codei )] = 5;
                    ++ _3895_codei;
                    _ptr__3894_ri32[safe_add( safe_add( _3889_rcodeptr,_3897_nzi ),(int)1 )] = _3895_codei;
                    ++ _3897_nzi;
                  }
                }
              }
            }
            _ptr__3892_ri64[safe_add( _3885_rsp,_3896_elmi )] = _3899_psubj;
            _ptr__3894_ri32[safe_add( safe_add( _3883_rptr,_3896_elmi ),(int)1 )] = _3897_nzi;
            ++ _3896_elmi;
          }
        }
        if ((_3872_rnelem > _ptr__3894_ri32[_3888_rshape]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
          }
        }
        {}
        if ((_3896_elmi != _3872_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
          }
        }
        {}
        if ((_3897_nzi != _3873_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
          }
        }
        {}
      }
      if ((!_3887_rhassp))
      {
        {
          _3790_rs->popi64(_3872_rnelem);
        }
      }
      {}
      _3792_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulParamDiagRight.eval

// Begin mosek.fusion.ExprMulParamDiagRight.toString
// Method mosek.fusion.ExprMulParamDiagRight.toString @ src/fusion/Parameter.monty:1762:6-159
std::string mosek::fusion::ExprMulParamDiagRight :: toString() { return mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamDiagRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamDiagRight.toString

void mosek::fusion::p_ExprMulParamDiagRight::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamDiagRight::destroy() { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->destroy(); }
// } class ExprMulParamDiagRight
// class ExprDotParam { // @ src/fusion/Parameter.monty:1545:4-1741:5
mosek::fusion::ExprDotParam::ExprDotParam(mosek::fusion::p_ExprDotParam *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDotParam()" << this << std::endl; */ }
mosek::fusion::ExprDotParam::~ExprDotParam() {  /* std::cout << "~ExprDotParam()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDotParam::p_ExprDotParam
  (::mosek::fusion::ExprDotParam * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDotParam.ctor @ src/fusion/Parameter.monty:1549:6-1559:7
mosek::fusion::ExprDotParam::t mosek::fusion::p_ExprDotParam::_new_ExprDotParam
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3906_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3907_e)
{ return new mosek::fusion::ExprDotParam(_3906_p,_3907_e); }
mosek::fusion::ExprDotParam::ExprDotParam
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3906_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3907_e) : 
   ExprDotParam(new mosek::fusion::p_ExprDotParam(this))
{ mosek::fusion::p_ExprDotParam::_get_impl(this)->_initialize(_3906_p,_3907_e); }
void mosek::fusion::p_ExprDotParam::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3906_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3907_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->p = _3906_p;
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->e = _3907_e;
    if ((_3906_p->getND() != _3907_e->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int32_t _10782_ = (int)0;
    int32_t _10783_ = _3906_p->getND();
    for (int32_t _3908_i = _10782_; _3908_i < _10783_; ++_3908_i)
    {
      {
        if ((_3906_p->getDim(_3908_i) != _3907_e->getDim(_3908_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprDotParam.ctor

// Begin mosek.fusion.ExprDotParam.eval
// Method mosek.fusion.ExprDotParam.eval @ src/fusion/Parameter.monty:1563:6-1740:7
void mosek::fusion::ExprDotParam :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3909_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3910_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3911_xs) { mosek::fusion::p_ExprDotParam::_get_impl(this)->eval(_3909_rs,_3910_ws,_3911_xs); }
void mosek::fusion::p_ExprDotParam::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3909_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3910_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3911_xs)
{
  e->eval(_3910_ws,_3909_rs,_3911_xs);
  _3910_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3912_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3912_wi32(_3912_wi32 ? _3912_wi32->raw() : nullptr,_3912_wi32 ? _3912_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3913_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3913_wi64(_3913_wi64 ? _3913_wi64->raw() : nullptr,_3913_wi64 ? _3913_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3914_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->f64;
  _checked_ptr_1<double> _ptr__3914_wf64(_3914_wf64 ? _3914_wf64->raw() : nullptr,_3914_wf64 ? _3914_wf64->size(0) : 0);
  int32_t _3915_nd = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->nd;
  int32_t _3916_nelem = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->nelem;
  int32_t _3917_nnz = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->nnz;
  bool _3918_hassp = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->hassp;
  int32_t _3919_ptr = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->ptr_base;
  int32_t _3920_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->ncodeatom;
  int32_t _3921_shape = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->shape_base;
  int32_t _3922_sp = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->sp_base;
  int32_t _3923_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->nidxs_base;
  int32_t _3924_cof = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->cof_base;
  int32_t _3925_cconst = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->cconst_base;
  int32_t _3926_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->codeptr_base;
  int32_t _3927_code = mosek::fusion::p_WorkStack::_get_impl(_3910_ws)->code_base;
  int32_t _3928_pnnz = p->getNumNonzero();
  int32_t _3929_psp = _3911_xs->alloci64(_3928_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3911_xs)->i64,_3929_psp);
  int32_t _3930_pidxs = _3911_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3931_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3911_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3931_xi32(_3931_xi32 ? _3931_xi32->raw() : nullptr,_3931_xi32 ? _3931_xi32->size(0) : 0);
  p->getAllIndexes(_3931_xi32,_3930_pidxs);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3932_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3911_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3932_xi64(_3932_xi64 ? _3932_xi64->raw() : nullptr,_3932_xi64 ? _3932_xi64->size(0) : 0);
  int32_t _3933_rnnz = (int)0;
  int32_t _3934_rnelem = (int)1;
  int32_t _3935_rncodeatom = (int)0;
  if (_3918_hassp)
  {
    {
      int32_t _3936_ei = (int)0;
      int32_t _3937_pi = (int)0;
      while ( ((_3936_ei < _3916_nelem) && (_3937_pi < _3928_pnnz)) )
      {
        {
          if ((_ptr__3913_wi64[safe_add( _3922_sp,_3936_ei )] < _ptr__3932_xi64[safe_add( _3929_psp,_3937_pi )]))
          {
            {
              ++ _3936_ei;
            }
          }
          else if((_ptr__3913_wi64[safe_add( _3922_sp,_3936_ei )] > _ptr__3932_xi64[safe_add( _3929_psp,_3937_pi )]))
          {
            {
              ++ _3937_pi;
            }
          }
          else
          {
            {
              int32_t _3938_n = (_ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_3936_ei ),(int)1 )] - _ptr__3912_wi32[safe_add( _3919_ptr,_3936_ei )]);
              _3933_rnnz += _3938_n;
              int32_t _10784_;
              bool _10785_ = (_3920_ncodeatom > (int)0);
              if (_10785_)
              {
                _10784_ = safe_add( (_ptr__3912_wi32[safe_add( _3926_codeptr,_ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_3936_ei ),(int)1 )] )] - _ptr__3912_wi32[safe_add( _3926_codeptr,_ptr__3912_wi32[safe_add( _3919_ptr,_3936_ei )] )]),safe_mul( (int)4,_3938_n ) );
              }
              else
              {
                _10784_ = safe_mul( (int)3,_3938_n );
              }
              _3935_rncodeatom += _10784_;
              ++ _3936_ei;
              ++ _3937_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _10786_ = (int)0;
      int32_t _10787_ = _3928_pnnz;
      for (int32_t _3939_i = _10786_; _3939_i < _10787_; ++_3939_i)
      {
        {
          _3933_rnnz += (_ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3939_i )] ),(int)1 )] - _ptr__3912_wi32[safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3939_i )] )]);
        }
      }
      if ((_3920_ncodeatom > (int)0))
      {
        {
          int32_t _10788_ = (int)0;
          int32_t _10789_ = _3928_pnnz;
          for (int32_t _3940_i = _10788_; _3940_i < _10789_; ++_3940_i)
          {
            {
              _3935_rncodeatom += safe_add( (_ptr__3912_wi32[safe_add( _3926_codeptr,_ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3940_i )] ),(int)1 )] )] - _ptr__3912_wi32[safe_add( _3926_codeptr,_ptr__3912_wi32[safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3940_i )] )] )]),safe_mul( (int)4,(_ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3940_i )] ),(int)1 )] - _ptr__3912_wi32[safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3940_i )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int32_t _10790_ = (int)0;
          int32_t _10791_ = _3928_pnnz;
          for (int32_t _3941_i = _10790_; _3941_i < _10791_; ++_3941_i)
          {
            {
              _3935_rncodeatom += safe_mul( (int)3,(_ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3941_i )] ),(int)1 )] - _ptr__3912_wi32[safe_add( _3919_ptr,_ptr__3932_xi64[safe_add( _3929_psp,_3941_i )] )]) );
            }
          }
        }
      }
    }
  }
  int64_t _3942_rsz = (int)1;
  int32_t _10792_ = (int)0;
  int32_t _10793_ = _3915_nd;
  for (int32_t _3943_i = _10792_; _3943_i < _10793_; ++_3943_i)
  {
    {
      _3942_rsz *= _ptr__3912_wi32[safe_add( _3921_shape,_3943_i )];
    }
  }
  _3909_rs->alloc_expr((int)0,_3934_rnelem,_3933_rnnz,false,_3935_rncodeatom);
  int32_t _3944_rptr = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->ptr_base;
  int32_t _3945_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->nidxs_base;
  int32_t _3946_rcof = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->cof_base;
  bool _3947_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->hassp;
  int32_t _3948_rshape = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->shape_base;
  int32_t _3949_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->codeptr_base;
  int32_t _3950_rcode = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->code_base;
  int32_t _3951_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3952_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__3952_ri64(_3952_ri64 ? _3952_ri64->raw() : nullptr,_3952_ri64 ? _3952_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3953_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->f64;
  _checked_ptr_1<double> _ptr__3953_rf64(_3953_rf64 ? _3953_rf64->raw() : nullptr,_3953_rf64 ? _3953_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3954_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3909_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__3954_ri32(_3954_ri32 ? _3954_ri32->raw() : nullptr,_3954_ri32 ? _3954_ri32->size(0) : 0);
  _ptr__3954_ri32[_3944_rptr] = (int)0;
  _ptr__3954_ri32[safe_add( _3944_rptr,(int)1 )] = _3933_rnnz;
  if ((_3935_rncodeatom > (int)0))
  {
    {
      _ptr__3954_ri32[_3949_rcodeptr] = (int)0;
    }
  }
  {}
  if (_3918_hassp)
  {
    {
      int32_t _3955_codei = (int)0;
      int32_t _3956_nzi = (int)0;
      int32_t _3957_elmi = (int)0;
      int32_t _3958_ei = (int)0;
      int32_t _3959_pi = (int)0;
      while ( ((_3958_ei < _3916_nelem) && (_3959_pi < _3928_pnnz)) )
      {
        {
          if ((_ptr__3913_wi64[safe_add( _3922_sp,_3958_ei )] < _ptr__3932_xi64[safe_add( _3929_psp,_3959_pi )]))
          {
            {
              ++ _3958_ei;
            }
          }
          else if((_ptr__3913_wi64[safe_add( _3922_sp,_3958_ei )] > _ptr__3932_xi64[safe_add( _3929_psp,_3959_pi )]))
          {
            {
              ++ _3959_pi;
            }
          }
          else
          {
            {
              int32_t _10794_ = _ptr__3912_wi32[safe_add( _3919_ptr,_3958_ei )];
              int32_t _10795_ = _ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_3958_ei ),(int)1 )];
              for (int32_t _3960_i = _10794_; _3960_i < _10795_; ++_3960_i)
              {
                {
                  _ptr__3952_ri64[safe_add( _3945_rnidxs,_3956_nzi )] = _ptr__3913_wi64[safe_add( _3923_nidxs,_3960_i )];
                  _ptr__3953_rf64[safe_add( _3946_rcof,_3956_nzi )] = 0.0;
                  _ptr__3954_ri32[safe_add( _3950_rcode,_3955_codei )] = 2;
                  _ptr__3953_rf64[safe_add( _3951_rcconst,_3955_codei )] = _ptr__3914_wf64[safe_add( _3924_cof,_3960_i )];
                  ++ _3955_codei;
                  if ((_3920_ncodeatom > (int)0))
                  {
                    {
                      int32_t _10796_ = _ptr__3912_wi32[safe_add( _3926_codeptr,_3960_i )];
                      int32_t _10797_ = _ptr__3912_wi32[safe_add( safe_add( _3926_codeptr,_3960_i ),(int)1 )];
                      for (int32_t _3961_k = _10796_; _3961_k < _10797_; ++_3961_k)
                      {
                        {
                          _ptr__3954_ri32[safe_add( _3950_rcode,_3955_codei )] = _ptr__3912_wi32[safe_add( _3927_code,_3961_k )];
                          _ptr__3953_rf64[safe_add( _3951_rcconst,_3955_codei )] = _ptr__3914_wf64[safe_add( _3925_cconst,_3961_k )];
                          ++ _3955_codei;
                        }
                      }
                      _ptr__3954_ri32[safe_add( _3950_rcode,_3955_codei )] = 3;
                      ++ _3955_codei;
                    }
                  }
                  {}
                  _ptr__3954_ri32[safe_add( _3950_rcode,_3955_codei )] = 1;
                  _ptr__3953_rf64[safe_add( _3951_rcconst,_3955_codei )] = _ptr__3931_xi32[safe_add( _3930_pidxs,_3959_pi )];
                  ++ _3955_codei;
                  _ptr__3954_ri32[safe_add( _3950_rcode,_3955_codei )] = 5;
                  ++ _3955_codei;
                  _ptr__3954_ri32[safe_add( safe_add( _3949_rcodeptr,_3956_nzi ),(int)1 )] = _3955_codei;
                  ++ _3956_nzi;
                }
              }
              ++ _3958_ei;
              ++ _3959_pi;
            }
          }
        }
      }
      if ((_3957_elmi != _3934_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3956_nzi != _3933_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3955_codei != _3935_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _3962_codei = (int)0;
      int32_t _3963_nzi = (int)0;
      int32_t _10798_ = (int)0;
      int32_t _10799_ = _3928_pnnz;
      for (int32_t _3964_pi = _10798_; _3964_pi < _10799_; ++_3964_pi)
      {
        {
          int32_t _3965_elmi = _3964_pi;
          int64_t _3966_ei = _ptr__3932_xi64[safe_add( _3929_psp,_3964_pi )];
          int32_t _10800_ = _ptr__3912_wi32[safe_add( _3919_ptr,_3966_ei )];
          int32_t _10801_ = _ptr__3912_wi32[safe_add( safe_add( _3919_ptr,_3966_ei ),(int)1 )];
          for (int32_t _3967_i = _10800_; _3967_i < _10801_; ++_3967_i)
          {
            {
              _ptr__3952_ri64[safe_add( _3945_rnidxs,_3963_nzi )] = _ptr__3913_wi64[safe_add( _3923_nidxs,_3967_i )];
              _ptr__3953_rf64[safe_add( _3946_rcof,_3963_nzi )] = 0.0;
              _ptr__3954_ri32[safe_add( _3950_rcode,_3962_codei )] = 2;
              _ptr__3953_rf64[safe_add( _3951_rcconst,_3962_codei )] = _ptr__3914_wf64[safe_add( _3924_cof,_3967_i )];
              ++ _3962_codei;
              if ((_3920_ncodeatom > (int)0))
              {
                {
                  int32_t _10802_ = _ptr__3912_wi32[safe_add( _3926_codeptr,_3967_i )];
                  int32_t _10803_ = _ptr__3912_wi32[safe_add( safe_add( _3926_codeptr,_3967_i ),(int)1 )];
                  for (int32_t _3968_k = _10802_; _3968_k < _10803_; ++_3968_k)
                  {
                    {
                      _ptr__3954_ri32[safe_add( _3950_rcode,_3962_codei )] = _ptr__3912_wi32[safe_add( _3927_code,_3968_k )];
                      _ptr__3953_rf64[safe_add( _3951_rcconst,_3962_codei )] = _ptr__3914_wf64[safe_add( _3925_cconst,_3968_k )];
                      ++ _3962_codei;
                    }
                  }
                  _ptr__3954_ri32[safe_add( _3950_rcode,_3962_codei )] = 3;
                  ++ _3962_codei;
                }
              }
              {}
              _ptr__3954_ri32[safe_add( _3950_rcode,_3962_codei )] = 1;
              _ptr__3953_rf64[safe_add( _3951_rcconst,_3962_codei )] = _ptr__3931_xi32[safe_add( _3930_pidxs,_3964_pi )];
              ++ _3962_codei;
              _ptr__3954_ri32[safe_add( _3950_rcode,_3962_codei )] = 5;
              ++ _3962_codei;
              _ptr__3954_ri32[safe_add( safe_add( _3949_rcodeptr,_3963_nzi ),(int)1 )] = _3962_codei;
              ++ _3963_nzi;
            }
          }
        }
      }
      if ((_3963_nzi != _3933_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nzi"));
        }
      }
      {}
      if ((_3962_codei != _3935_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
        }
      }
      {}
    }
  }
  _3911_xs->clear();
}
// End mosek.fusion.ExprDotParam.eval

// Begin mosek.fusion.ExprDotParam.toString
// Method mosek.fusion.ExprDotParam.toString @ src/fusion/Parameter.monty:1561:6-150
std::string mosek::fusion::ExprDotParam :: toString() { return mosek::fusion::p_ExprDotParam::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDotParam::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDotParam("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDotParam.toString

void mosek::fusion::p_ExprDotParam::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprDotParam::destroy() { mosek::fusion::p_ExprDotParam::_get_impl(this)->destroy(); }
// } class ExprDotParam
// class ExprMulParamElem { // @ src/fusion/Parameter.monty:1314:4-1540:5
mosek::fusion::ExprMulParamElem::ExprMulParamElem(mosek::fusion::p_ExprMulParamElem *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamElem()" << this << std::endl; */ }
mosek::fusion::ExprMulParamElem::~ExprMulParamElem() {  /* std::cout << "~ExprMulParamElem()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamElem::p_ExprMulParamElem
  (::mosek::fusion::ExprMulParamElem * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamElem.ctor @ src/fusion/Parameter.monty:1318:6-1328:7
mosek::fusion::ExprMulParamElem::t mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3969_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3970_e)
{ return new mosek::fusion::ExprMulParamElem(_3969_p,_3970_e); }
mosek::fusion::ExprMulParamElem::ExprMulParamElem
  (monty::rc_ptr< ::mosek::fusion::Parameter > _3969_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3970_e) : 
   ExprMulParamElem(new mosek::fusion::p_ExprMulParamElem(this))
{ mosek::fusion::p_ExprMulParamElem::_get_impl(this)->_initialize(_3969_p,_3970_e); }
void mosek::fusion::p_ExprMulParamElem::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3969_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _3970_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_3970_e->getShape());
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->p = _3969_p;
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->e = _3970_e;
    if ((_3969_p->getND() != _3970_e->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int32_t _10804_ = (int)0;
    int32_t _10805_ = _3969_p->getND();
    for (int32_t _3971_i = _10804_; _3971_i < _10805_; ++_3971_i)
    {
      {
        if ((_3969_p->getDim(_3971_i) != _3970_e->getDim(_3971_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprMulParamElem.ctor

// Begin mosek.fusion.ExprMulParamElem.eval
// Method mosek.fusion.ExprMulParamElem.eval @ src/fusion/Parameter.monty:1332:6-1539:7
void mosek::fusion::ExprMulParamElem :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3972_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3973_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3974_xs) { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->eval(_3972_rs,_3973_ws,_3974_xs); }
void mosek::fusion::p_ExprMulParamElem::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3972_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _3973_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _3974_xs)
{
  e->eval(_3973_ws,_3972_rs,_3974_xs);
  _3973_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3975_wi32 = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__3975_wi32(_3975_wi32 ? _3975_wi32->raw() : nullptr,_3975_wi32 ? _3975_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3976_wi64 = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__3976_wi64(_3976_wi64 ? _3976_wi64->raw() : nullptr,_3976_wi64 ? _3976_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3977_wf64 = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->f64;
  _checked_ptr_1<double> _ptr__3977_wf64(_3977_wf64 ? _3977_wf64->raw() : nullptr,_3977_wf64 ? _3977_wf64->size(0) : 0);
  int32_t _3978_nd = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->nd;
  int32_t _3979_nelem = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->nelem;
  int32_t _3980_nnz = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->nnz;
  bool _3981_hassp = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->hassp;
  int32_t _3982_ptr = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->ptr_base;
  int32_t _3983_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->ncodeatom;
  int32_t _3984_shape = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->shape_base;
  int32_t _3985_sp = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->sp_base;
  int32_t _3986_nidxs = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->nidxs_base;
  int32_t _3987_cof = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->cof_base;
  int32_t _3988_cconst = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->cconst_base;
  int32_t _3989_codeptr = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->codeptr_base;
  int32_t _3990_code = mosek::fusion::p_WorkStack::_get_impl(_3973_ws)->code_base;
  int32_t _3991_pnnz = p->getNumNonzero();
  int32_t _3992_psp = _3974_xs->alloci64(_3991_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3974_xs)->i64,_3992_psp);
  int32_t _3993_pidxs = _3974_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _3994_xi32 = mosek::fusion::p_WorkStack::_get_impl(_3974_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__3994_xi32(_3994_xi32 ? _3994_xi32->raw() : nullptr,_3994_xi32 ? _3994_xi32->size(0) : 0);
  p->getAllIndexes(_3994_xi32,_3993_pidxs);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _3995_xi64 = mosek::fusion::p_WorkStack::_get_impl(_3974_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__3995_xi64(_3995_xi64 ? _3995_xi64->raw() : nullptr,_3995_xi64 ? _3995_xi64->size(0) : 0);
  int32_t _3996_rnd = _3978_nd;
  int32_t _3997_rnnz = (int)0;
  int32_t _3998_rnelem = (int)0;
  int32_t _3999_rncodeatom = (int)0;
  if (_3981_hassp)
  {
    {
      int32_t _4000_ei = (int)0;
      int32_t _4001_pi = (int)0;
      while ( ((_4000_ei < _3979_nelem) && (_4001_pi < _3991_pnnz)) )
      {
        {
          if ((_ptr__3976_wi64[safe_add( _3985_sp,_4000_ei )] < _ptr__3995_xi64[safe_add( _3992_psp,_4001_pi )]))
          {
            {
              ++ _4000_ei;
            }
          }
          else if((_ptr__3976_wi64[safe_add( _3985_sp,_4000_ei )] > _ptr__3995_xi64[safe_add( _3992_psp,_4001_pi )]))
          {
            {
              ++ _4001_pi;
            }
          }
          else
          {
            {
              int32_t _4002_n = (_ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_4000_ei ),(int)1 )] - _ptr__3975_wi32[safe_add( _3982_ptr,_4000_ei )]);
              _3997_rnnz += _4002_n;
              int32_t _10806_;
              bool _10807_ = (_3983_ncodeatom > (int)0);
              if (_10807_)
              {
                _10806_ = safe_add( (_ptr__3975_wi32[safe_add( _3989_codeptr,_ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_4000_ei ),(int)1 )] )] - _ptr__3975_wi32[safe_add( _3989_codeptr,_ptr__3975_wi32[safe_add( _3982_ptr,_4000_ei )] )]),safe_mul( (int)4,_4002_n ) );
              }
              else
              {
                _10806_ = safe_mul( (int)3,_4002_n );
              }
              _3999_rncodeatom += _10806_;
              _3998_rnelem += (int)1;
              ++ _4000_ei;
              ++ _4001_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _3998_rnelem = _3991_pnnz;
      int32_t _10808_ = (int)0;
      int32_t _10809_ = _3991_pnnz;
      for (int32_t _4003_i = _10808_; _4003_i < _10809_; ++_4003_i)
      {
        {
          _3997_rnnz += (_ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4003_i )] ),(int)1 )] - _ptr__3975_wi32[safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4003_i )] )]);
        }
      }
      if ((_3983_ncodeatom > (int)0))
      {
        {
          int32_t _10810_ = (int)0;
          int32_t _10811_ = _3991_pnnz;
          for (int32_t _4004_i = _10810_; _4004_i < _10811_; ++_4004_i)
          {
            {
              _3999_rncodeatom += safe_add( (_ptr__3975_wi32[safe_add( _3989_codeptr,_ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4004_i )] ),(int)1 )] )] - _ptr__3975_wi32[safe_add( _3989_codeptr,_ptr__3975_wi32[safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4004_i )] )] )]),safe_mul( (int)4,(_ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4004_i )] ),(int)1 )] - _ptr__3975_wi32[safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4004_i )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int32_t _10812_ = (int)0;
          int32_t _10813_ = _3991_pnnz;
          for (int32_t _4005_i = _10812_; _4005_i < _10813_; ++_4005_i)
          {
            {
              _3999_rncodeatom += safe_mul( (int)3,(_ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4005_i )] ),(int)1 )] - _ptr__3975_wi32[safe_add( _3982_ptr,_ptr__3995_xi64[safe_add( _3992_psp,_4005_i )] )]) );
            }
          }
        }
      }
    }
  }
  int64_t _4006_rsz = (int)1;
  int32_t _10814_ = (int)0;
  int32_t _10815_ = _3978_nd;
  for (int32_t _4007_i = _10814_; _4007_i < _10815_; ++_4007_i)
  {
    {
      _4006_rsz *= _ptr__3975_wi32[safe_add( _3984_shape,_4007_i )];
    }
  }
  bool _4008_rhassp = (_3998_rnelem < _4006_rsz);
  _3972_rs->alloc_expr(_3996_rnd,_3998_rnelem,_3997_rnnz,_4008_rhassp,_3999_rncodeatom);
  int32_t _4009_rptr = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->ptr_base;
  int32_t _4010_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->nidxs_base;
  int32_t _10816_;
  bool _10817_ = _4008_rhassp;
  if (_10817_)
  {
    _10816_ = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->sp_base;
  }
  else
  {
    _10816_ = _3972_rs->alloci64(_3998_rnelem);
  }
  int32_t _4011_rsp = _10816_;
  int32_t _4012_rcof = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->cof_base;
  bool _4013_rhassp = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->hassp;
  int32_t _4014_rshape = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->shape_base;
  int32_t _4015_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->codeptr_base;
  int32_t _4016_rcode = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->code_base;
  int32_t _4017_rcconst = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4018_ri64 = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4018_ri64(_4018_ri64 ? _4018_ri64->raw() : nullptr,_4018_ri64 ? _4018_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4019_rf64 = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->f64;
  _checked_ptr_1<double> _ptr__4019_rf64(_4019_rf64 ? _4019_rf64->raw() : nullptr,_4019_rf64 ? _4019_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4020_ri32 = mosek::fusion::p_WorkStack::_get_impl(_3972_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4020_ri32(_4020_ri32 ? _4020_ri32->raw() : nullptr,_4020_ri32 ? _4020_ri32->size(0) : 0);
  int32_t _10818_ = (int)0;
  int32_t _10819_ = _3978_nd;
  for (int32_t _4021_i = _10818_; _4021_i < _10819_; ++_4021_i)
  {
    {
      _ptr__4020_ri32[safe_add( _4014_rshape,_4021_i )] = _ptr__3975_wi32[safe_add( _3984_shape,_4021_i )];
    }
  }
  _ptr__4020_ri32[_4009_rptr] = (int)0;
  if ((_3999_rncodeatom > (int)0))
  {
    {
      _ptr__4020_ri32[_4015_rcodeptr] = (int)0;
    }
  }
  {}
  if (_3981_hassp)
  {
    {
      int32_t _4022_codei = (int)0;
      int32_t _4023_nzi = (int)0;
      int32_t _4024_elmi = (int)0;
      int32_t _4025_ei = (int)0;
      int32_t _4026_pi = (int)0;
      while ( ((_4025_ei < _3979_nelem) && (_4026_pi < _3991_pnnz)) )
      {
        {
          if ((_ptr__3976_wi64[safe_add( _3985_sp,_4025_ei )] < _ptr__3995_xi64[safe_add( _3992_psp,_4026_pi )]))
          {
            {
              ++ _4025_ei;
            }
          }
          else if((_ptr__3976_wi64[safe_add( _3985_sp,_4025_ei )] > _ptr__3995_xi64[safe_add( _3992_psp,_4026_pi )]))
          {
            {
              ++ _4026_pi;
            }
          }
          else
          {
            {
              int32_t _10820_ = _ptr__3975_wi32[safe_add( _3982_ptr,_4025_ei )];
              int32_t _10821_ = _ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_4025_ei ),(int)1 )];
              for (int32_t _4027_i = _10820_; _4027_i < _10821_; ++_4027_i)
              {
                {
                  _ptr__4018_ri64[safe_add( _4010_rnidxs,_4023_nzi )] = _ptr__3976_wi64[safe_add( _3986_nidxs,_4027_i )];
                  _ptr__4019_rf64[safe_add( _4012_rcof,_4023_nzi )] = 0.0;
                  _ptr__4020_ri32[safe_add( _4016_rcode,_4022_codei )] = 2;
                  _ptr__4019_rf64[safe_add( _4017_rcconst,_4022_codei )] = _ptr__3977_wf64[safe_add( _3987_cof,_4027_i )];
                  ++ _4022_codei;
                  if ((_3983_ncodeatom > (int)0))
                  {
                    {
                      int32_t _10822_ = _ptr__3975_wi32[safe_add( _3989_codeptr,_4027_i )];
                      int32_t _10823_ = _ptr__3975_wi32[safe_add( safe_add( _3989_codeptr,_4027_i ),(int)1 )];
                      for (int32_t _4028_k = _10822_; _4028_k < _10823_; ++_4028_k)
                      {
                        {
                          _ptr__4020_ri32[safe_add( _4016_rcode,_4022_codei )] = _ptr__3975_wi32[safe_add( _3990_code,_4028_k )];
                          _ptr__4019_rf64[safe_add( _4017_rcconst,_4022_codei )] = _ptr__3977_wf64[safe_add( _3988_cconst,_4028_k )];
                          ++ _4022_codei;
                        }
                      }
                      _ptr__4020_ri32[safe_add( _4016_rcode,_4022_codei )] = 3;
                      ++ _4022_codei;
                    }
                  }
                  {}
                  _ptr__4020_ri32[safe_add( _4016_rcode,_4022_codei )] = 1;
                  _ptr__4019_rf64[safe_add( _4017_rcconst,_4022_codei )] = _ptr__3994_xi32[safe_add( _3993_pidxs,_4026_pi )];
                  ++ _4022_codei;
                  _ptr__4020_ri32[safe_add( _4016_rcode,_4022_codei )] = 5;
                  ++ _4022_codei;
                  _ptr__4020_ri32[safe_add( safe_add( _4015_rcodeptr,_4023_nzi ),(int)1 )] = _4022_codei;
                  ++ _4023_nzi;
                }
              }
              _ptr__4018_ri64[safe_add( _4011_rsp,_4024_elmi )] = _ptr__3976_wi64[safe_add( _3985_sp,_4025_ei )];
              _ptr__4020_ri32[safe_add( safe_add( _4009_rptr,_4024_elmi ),(int)1 )] = _4023_nzi;
              ++ _4024_elmi;
              ++ _4025_ei;
              ++ _4026_pi;
            }
          }
        }
      }
      if ((_4024_elmi != _3998_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_4023_nzi != _3997_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_4022_codei != _3999_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4029_codei = (int)0;
      int32_t _4030_nzi = (int)0;
      int32_t _10824_ = (int)0;
      int32_t _10825_ = _3991_pnnz;
      for (int32_t _4031_pi = _10824_; _4031_pi < _10825_; ++_4031_pi)
      {
        {
          int32_t _4032_elmi = _4031_pi;
          int64_t _4033_ei = _ptr__3995_xi64[safe_add( _3992_psp,_4031_pi )];
          int32_t _10826_ = _ptr__3975_wi32[safe_add( _3982_ptr,_4033_ei )];
          int32_t _10827_ = _ptr__3975_wi32[safe_add( safe_add( _3982_ptr,_4033_ei ),(int)1 )];
          for (int32_t _4034_i = _10826_; _4034_i < _10827_; ++_4034_i)
          {
            {
              _ptr__4018_ri64[safe_add( _4010_rnidxs,_4030_nzi )] = _ptr__3976_wi64[safe_add( _3986_nidxs,_4034_i )];
              _ptr__4019_rf64[safe_add( _4012_rcof,_4030_nzi )] = 0.0;
              _ptr__4020_ri32[safe_add( _4016_rcode,_4029_codei )] = 2;
              _ptr__4019_rf64[safe_add( _4017_rcconst,_4029_codei )] = _ptr__3977_wf64[safe_add( _3987_cof,_4034_i )];
              ++ _4029_codei;
              if ((_3983_ncodeatom > (int)0))
              {
                {
                  int32_t _10828_ = _ptr__3975_wi32[safe_add( _3989_codeptr,_4034_i )];
                  int32_t _10829_ = _ptr__3975_wi32[safe_add( safe_add( _3989_codeptr,_4034_i ),(int)1 )];
                  for (int32_t _4035_k = _10828_; _4035_k < _10829_; ++_4035_k)
                  {
                    {
                      _ptr__4020_ri32[safe_add( _4016_rcode,_4029_codei )] = _ptr__3975_wi32[safe_add( _3990_code,_4035_k )];
                      _ptr__4019_rf64[safe_add( _4017_rcconst,_4029_codei )] = _ptr__3977_wf64[safe_add( _3988_cconst,_4035_k )];
                      ++ _4029_codei;
                    }
                  }
                  _ptr__4020_ri32[safe_add( _4016_rcode,_4029_codei )] = 3;
                  ++ _4029_codei;
                }
              }
              {}
              _ptr__4020_ri32[safe_add( _4016_rcode,_4029_codei )] = 1;
              _ptr__4019_rf64[safe_add( _4017_rcconst,_4029_codei )] = _ptr__3994_xi32[safe_add( _3993_pidxs,_4031_pi )];
              ++ _4029_codei;
              _ptr__4020_ri32[safe_add( _4016_rcode,_4029_codei )] = 5;
              ++ _4029_codei;
              _ptr__4020_ri32[safe_add( safe_add( _4015_rcodeptr,_4030_nzi ),(int)1 )] = _4029_codei;
              ++ _4030_nzi;
            }
          }
          _ptr__4018_ri64[safe_add( _4011_rsp,_4032_elmi )] = _4033_ei;
          _ptr__4020_ri32[safe_add( safe_add( _4009_rptr,_4032_elmi ),(int)1 )] = _4030_nzi;
        }
      }
      if ((_3999_rncodeatom != _4029_codei))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Invalid code list result"));
        }
      }
      {}
    }
  }
  if ((!_4013_rhassp))
  {
    {
      _3972_rs->popi64(_3998_rnelem);
    }
  }
  {}
  _3974_xs->clear();
}
// End mosek.fusion.ExprMulParamElem.eval

// Begin mosek.fusion.ExprMulParamElem.toString
// Method mosek.fusion.ExprMulParamElem.toString @ src/fusion/Parameter.monty:1330:6-154
std::string mosek::fusion::ExprMulParamElem :: toString() { return mosek::fusion::p_ExprMulParamElem::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamElem::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamElem("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamElem.toString

void mosek::fusion::p_ExprMulParamElem::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamElem::destroy() { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->destroy(); }
// } class ExprMulParamElem
// class ExprMulParamRight { // @ src/fusion/Parameter.monty:932:4-1310:5
mosek::fusion::ExprMulParamRight::ExprMulParamRight(mosek::fusion::p_ExprMulParamRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamRight()" << this << std::endl; */ }
mosek::fusion::ExprMulParamRight::~ExprMulParamRight() {  /* std::cout << "~ExprMulParamRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamRight::p_ExprMulParamRight
  (::mosek::fusion::ExprMulParamRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamRight.ctor @ src/fusion/Parameter.monty:936:6-945:7
mosek::fusion::ExprMulParamRight::t mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _4036_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4037_p)
{ return new mosek::fusion::ExprMulParamRight(_4036_e,_4037_p); }
mosek::fusion::ExprMulParamRight::ExprMulParamRight
  (monty::rc_ptr< ::mosek::fusion::Expression > _4036_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4037_p) : 
   ExprMulParamRight(new mosek::fusion::p_ExprMulParamRight(this))
{ mosek::fusion::p_ExprMulParamRight::_get_impl(this)->_initialize(_4036_e,_4037_p); }
void mosek::fusion::p_ExprMulParamRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4036_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _4037_p)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_4036_e->getDim((int)0)),(int32_t)(_4037_p->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->p = _4037_p;
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->e = _4036_e;
    if (((_4037_p->getND() != (int)2) || (_4036_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_4037_p->getDim((int)0) != _4036_e->getDim((int)1)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamRight.ctor

// Begin mosek.fusion.ExprMulParamRight.eval
// Method mosek.fusion.ExprMulParamRight.eval @ src/fusion/Parameter.monty:949:6-1309:7
void mosek::fusion::ExprMulParamRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4038_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4039_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4040_xs) { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->eval(_4038_rs,_4039_ws,_4040_xs); }
void mosek::fusion::p_ExprMulParamRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4038_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4039_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4040_xs)
{
  e->eval(_4039_ws,_4038_rs,_4040_xs);
  _4039_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4041_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4041_wi32(_4041_wi32 ? _4041_wi32->raw() : nullptr,_4041_wi32 ? _4041_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4042_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4042_wi64(_4042_wi64 ? _4042_wi64->raw() : nullptr,_4042_wi64 ? _4042_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4043_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->f64;
  _checked_ptr_1<double> _ptr__4043_wf64(_4043_wf64 ? _4043_wf64->raw() : nullptr,_4043_wf64 ? _4043_wf64->size(0) : 0);
  int32_t _4044_nd = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->nd;
  int32_t _4045_nelem = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->nelem;
  int32_t _4046_nnz = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->nnz;
  bool _4047_hassp = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->hassp;
  int32_t _4048_ptr = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->ptr_base;
  int32_t _4049_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->ncodeatom;
  int32_t _4050_shape = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->shape_base;
  int32_t _4051_sp = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->sp_base;
  int32_t _4052_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->nidxs_base;
  int32_t _4053_cof = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->cof_base;
  int32_t _4054_cconst = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->cconst_base;
  int32_t _4055_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->codeptr_base;
  int32_t _4056_code = mosek::fusion::p_WorkStack::_get_impl(_4039_ws)->code_base;
  if (((_4044_nd != (int)2) || (p->getDim((int)0) != _ptr__4041_wi32[safe_add( _4050_shape,(int)1 )])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int32_t _4057_edim0 = _ptr__4041_wi32[_4050_shape];
  int32_t _4058_edim1 = _ptr__4041_wi32[safe_add( _4050_shape,(int)1 )];
  int32_t _4059_pdim0 = p->getDim((int)0);
  int32_t _4060_pdim1 = p->getDim((int)1);
  int32_t _4061_pnnz = p->getNumNonzero();
  int32_t _4062_pidxs = _4040_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4063_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4040_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4063_xi32(_4063_xi32 ? _4063_xi32->raw() : nullptr,_4063_xi32 ? _4063_xi32->size(0) : 0);
  p->getAllIndexes(_4063_xi32,_4062_pidxs);
  int32_t _4064_pperm = _4040_xs->alloci32(_4061_pnnz);
  int32_t _4065_psp = _4040_xs->alloci64(_4061_pnnz);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_4040_xs)->i64,_4065_psp);
  {
    int32_t _4066_pptr = _4040_xs->alloci32(safe_add( _4060_pdim1,(int)1 ));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4067_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4040_xs)->i32;
    _checked_ptr_1<int32_t> _ptr__4067_xi32(_4067_xi32 ? _4067_xi32->raw() : nullptr,_4067_xi32 ? _4067_xi32->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4068_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4040_xs)->i64;
    _checked_ptr_1<int64_t> _ptr__4068_xi64(_4068_xi64 ? _4068_xi64->raw() : nullptr,_4068_xi64 ? _4068_xi64->size(0) : 0);
    int32_t _10830_ = (int)0;
    int32_t _10831_ = safe_add( _4060_pdim1,(int)1 );
    for (int32_t _4069_i = _10830_; _4069_i < _10831_; ++_4069_i)
    {
      {
        _ptr__4067_xi32[safe_add( _4066_pptr,_4069_i )] = (int)0;
      }
    }
    int32_t _10832_ = (int)0;
    int32_t _10833_ = _4061_pnnz;
    for (int32_t _4070_i = _10832_; _4070_i < _10833_; ++_4070_i)
    {
      {
        ++ _ptr__4067_xi32[safe_add( safe_add( _4066_pptr,(_ptr__4068_xi64[safe_add( _4065_psp,_4070_i )] % _4060_pdim1) ),(int)1 )];
      }
    }
    int32_t _10834_ = (int)0;
    int32_t _10835_ = _4060_pdim1;
    for (int32_t _4071_i = _10834_; _4071_i < _10835_; ++_4071_i)
    {
      {
        _ptr__4067_xi32[safe_add( safe_add( _4066_pptr,_4071_i ),(int)1 )] += _ptr__4067_xi32[safe_add( _4066_pptr,_4071_i )];
      }
    }
    int32_t _10836_ = (int)0;
    int32_t _10837_ = _4061_pnnz;
    for (int32_t _4072_i = _10836_; _4072_i < _10837_; ++_4072_i)
    {
      {
        _ptr__4067_xi32[safe_add( _4064_pperm,_ptr__4067_xi32[safe_add( _4066_pptr,(_ptr__4068_xi64[safe_add( _4065_psp,_4072_i )] % _4060_pdim1) )] )] = _4072_i;
        ++ _ptr__4067_xi32[safe_add( _4066_pptr,(_ptr__4068_xi64[safe_add( _4065_psp,_4072_i )] % _4060_pdim1) )];
      }
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4073_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4040_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4073_xi32(_4073_xi32 ? _4073_xi32->raw() : nullptr,_4073_xi32 ? _4073_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4074_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4040_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__4074_xi64(_4074_xi64 ? _4074_xi64->raw() : nullptr,_4074_xi64 ? _4074_xi64->size(0) : 0);
  int32_t _4075_rncodeatom = (int)0;
  int32_t _4076_rnelem = (int)0;
  int32_t _4077_rnnz = (int)0;
  if (((!p->isSparse()) && (!_4047_hassp)))
  {
    {
      _4077_rnnz = safe_mul( _4046_nnz,_4060_pdim1 );
      _4076_rnelem = safe_mul( _4057_edim0,_4060_pdim1 );
      int32_t _10838_;
      bool _10839_ = (_4049_ncodeatom > (int)0);
      if (_10839_)
      {
        _10838_ = safe_mul( safe_add( _4049_ncodeatom,safe_mul( _4046_nnz,(int)4 ) ),_4060_pdim1 );
      }
      else
      {
        _10838_ = safe_mul( safe_mul( _4046_nnz,_4060_pdim1 ),(int)3 );
      }
      _4075_rncodeatom = _10838_;
    }
  }
  else if((!_4047_hassp))
  {
    {
      int32_t _4078_i1 = (int)0;
      while ( (_4078_i1 < _4061_pnnz) )
      {
        {
          int64_t _4079_psubj = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4078_i1 )] )] % _4060_pdim1);
          int32_t _4080_b1 = _4078_i1;
          while ( ((_4078_i1 < _4061_pnnz) && ((_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4078_i1 )] )] % _4060_pdim1) == _4079_psubj)) )
          {
            {
              int64_t _4081_psubi = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4078_i1 )] )] / _4060_pdim1);
              int32_t _10840_ = (int)0;
              int32_t _10841_ = _4057_edim0;
              for (int32_t _4082_i0 = _10840_; _4082_i0 < _10841_; ++_4082_i0)
              {
                {
                  int64_t _4083_eidx = safe_add( safe_mul( _4082_i0,_4058_edim1 ),_4081_psubi );
                  int32_t _4084_n = (_ptr__4041_wi32[safe_add( safe_add( _4048_ptr,_4083_eidx ),(int)1 )] - _ptr__4041_wi32[safe_add( _4048_ptr,_4083_eidx )]);
                  _4077_rnnz += _4084_n;
                  int32_t _10842_;
                  bool _10843_ = (_4049_ncodeatom > (int)0);
                  if (_10843_)
                  {
                    _10842_ = safe_add( (_ptr__4041_wi32[safe_add( _4055_codeptr,_ptr__4041_wi32[safe_add( safe_add( _4048_ptr,_4083_eidx ),(int)1 )] )] - _ptr__4041_wi32[safe_add( _4055_codeptr,_ptr__4041_wi32[safe_add( _4048_ptr,_4083_eidx )] )]),safe_mul( _4084_n,(int)4 ) );
                  }
                  else
                  {
                    _10842_ = safe_mul( _4084_n,(int)3 );
                  }
                  _4075_rncodeatom += _10842_;
                }
              }
              ++ _4078_i1;
            }
          }
          _4076_rnelem += _4057_edim0;
        }
      }
    }
  }
  else
  {
    {
      int32_t _4085_i0 = (int)0;
      while ( (_4085_i0 < _4045_nelem) )
      {
        {
          int64_t _4086_erow = (_ptr__4042_wi64[safe_add( _4051_sp,_4085_i0 )] / _4058_edim1);
          int32_t _4087_b0 = _4085_i0;
          int64_t _4088_rowend = safe_mul( safe_add( _4086_erow,(int)1 ),_4058_edim1 );
          while ( ((_4085_i0 < _4045_nelem) && (_ptr__4042_wi64[safe_add( _4051_sp,_4085_i0 )] < _4088_rowend)) )
          {
            {
              ++ _4085_i0;
            }
          }
          int32_t _4089_i1 = (int)0;
          while ( (_4089_i1 < _4061_pnnz) )
          {
            {
              int64_t _4090_pcol = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4089_i1 )] )] % _4060_pdim1);
              int32_t _4091_b1 = _4089_i1;
              while ( ((_4089_i1 < _4061_pnnz) && (_4090_pcol == (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4089_i1 )] )] % _4060_pdim1))) )
              {
                {
                  ++ _4089_i1;
                }
              }
              int32_t _4092_nentryelm = (int)0;
              int32_t _4093_ii1 = _4091_b1;
              int32_t _4094_ii0 = _4087_b0;
              while ( ((_4094_ii0 < _4085_i0) && (_4093_ii1 < _4089_i1)) )
              {
                {
                  int64_t _4095_ecol = (_ptr__4042_wi64[safe_add( _4051_sp,_4094_ii0 )] % _4058_edim1);
                  int64_t _4096_prow = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4093_ii1 )] )] / _4060_pdim1);
                  if ((_4095_ecol < _4096_prow))
                  {
                    {
                      ++ _4094_ii0;
                    }
                  }
                  else if((_4095_ecol > _4096_prow))
                  {
                    {
                      ++ _4093_ii1;
                    }
                  }
                  else
                  {
                    {
                      int32_t _4097_n = (_ptr__4041_wi32[safe_add( safe_add( _4048_ptr,_4094_ii0 ),(int)1 )] - _ptr__4041_wi32[safe_add( _4048_ptr,_4094_ii0 )]);
                      _4077_rnnz += _4097_n;
                      int32_t _10844_;
                      bool _10845_ = (_4049_ncodeatom > (int)0);
                      if (_10845_)
                      {
                        _10844_ = safe_add( (_ptr__4041_wi32[safe_add( _4055_codeptr,_ptr__4041_wi32[safe_add( safe_add( _4048_ptr,_4094_ii0 ),(int)1 )] )] - _ptr__4041_wi32[safe_add( _4055_codeptr,_ptr__4041_wi32[safe_add( _4048_ptr,_4094_ii0 )] )]),safe_mul( _4097_n,(int)4 ) );
                      }
                      else
                      {
                        _10844_ = safe_mul( _4097_n,(int)3 );
                      }
                      _4075_rncodeatom += _10844_;
                      ++ _4094_ii0;
                      ++ _4093_ii1;
                      ++ _4092_nentryelm;
                    }
                  }
                }
              }
              if ((_4092_nentryelm > (int)0))
              {
                {
                  ++ _4076_rnelem;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  int32_t _4098_rnd = (int)2;
  bool _4099_rhassp = (_4076_rnelem < safe_mul( _4060_pdim1,_4057_edim0 ));
  _4038_rs->alloc_expr(_4098_rnd,_4076_rnelem,_4077_rnnz,_4099_rhassp,_4075_rncodeatom);
  int32_t _4100_rptr = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->ptr_base;
  int32_t _4101_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->nidxs_base;
  int32_t _10846_;
  bool _10847_ = _4099_rhassp;
  if (_10847_)
  {
    _10846_ = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->sp_base;
  }
  else
  {
    _10846_ = _4038_rs->alloci64(_4076_rnelem);
  }
  int32_t _4102_rsp = _10846_;
  int32_t _4103_rcof = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->cof_base;
  bool _4104_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->hassp;
  int32_t _4105_rshape = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->shape_base;
  int32_t _4106_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->codeptr_base;
  int32_t _4107_rcode = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->code_base;
  int32_t _4108_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4109_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4109_ri64(_4109_ri64 ? _4109_ri64->raw() : nullptr,_4109_ri64 ? _4109_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4110_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->f64;
  _checked_ptr_1<double> _ptr__4110_rf64(_4110_rf64 ? _4110_rf64->raw() : nullptr,_4110_rf64 ? _4110_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4111_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4038_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4111_ri32(_4111_ri32 ? _4111_ri32->raw() : nullptr,_4111_ri32 ? _4111_ri32->size(0) : 0);
  _ptr__4111_ri32[_4100_rptr] = (int)0;
  if ((_4075_rncodeatom > (int)0))
  {
    {
      _ptr__4111_ri32[_4106_rcodeptr] = (int)0;
    }
  }
  {}
  _ptr__4111_ri32[_4105_rshape] = _4057_edim0;
  _ptr__4111_ri32[safe_add( _4105_rshape,(int)1 )] = _4060_pdim1;
  int32_t _4112_codei = (int)0;
  int32_t _4113_elmi = (int)0;
  int32_t _4114_nzi = (int)0;
  if ((!_4047_hassp))
  {
    {
      int32_t _10848_ = (int)0;
      int32_t _10849_ = _4057_edim0;
      for (int32_t _4115_i = _10848_; _4115_i < _10849_; ++_4115_i)
      {
        {
          int32_t _4116_i1 = (int)0;
          while ( (_4116_i1 < _4061_pnnz) )
          {
            {
              int32_t _4117_b1 = _4116_i1;
              int64_t _4118_psubj = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4116_i1 )] )] % _4060_pdim1);
              while ( ((_4116_i1 < _4061_pnnz) && (_4118_psubj == (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4116_i1 )] )] % _4060_pdim1))) )
              {
                {
                  ++ _4116_i1;
                }
              }
              int32_t _4119_ii1 = _4117_b1;
              while ( (_4119_ii1 < _4116_i1) )
              {
                {
                  int64_t _4120_psubi = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4119_ii1 )] )] / _4060_pdim1);
                  int64_t _4121_eidx = safe_add( safe_mul( _4115_i,_4058_edim1 ),_4120_psubi );
                  int32_t _4122_pidx = _ptr__4073_xi32[safe_add( _4062_pidxs,_ptr__4073_xi32[safe_add( _4064_pperm,_4119_ii1 )] )];
                  int32_t _10850_ = _ptr__4041_wi32[safe_add( _4048_ptr,_4121_eidx )];
                  int32_t _10851_ = _ptr__4041_wi32[safe_add( safe_add( _4048_ptr,_4121_eidx ),(int)1 )];
                  for (int32_t _4123_k = _10850_; _4123_k < _10851_; ++_4123_k)
                  {
                    {
                      _ptr__4109_ri64[safe_add( _4101_rnidxs,_4114_nzi )] = _ptr__4042_wi64[safe_add( _4052_nidxs,_4123_k )];
                      _ptr__4110_rf64[safe_add( _4103_rcof,_4114_nzi )] = (int)0;
                      _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 2;
                      _ptr__4110_rf64[safe_add( _4108_rcconst,_4112_codei )] = _ptr__4043_wf64[safe_add( _4053_cof,_4123_k )];
                      ++ _4112_codei;
                      if ((_4049_ncodeatom > (int)0))
                      {
                        {
                          int32_t _10852_ = _ptr__4041_wi32[safe_add( _4055_codeptr,_4123_k )];
                          int32_t _10853_ = _ptr__4041_wi32[safe_add( safe_add( _4055_codeptr,_4123_k ),(int)1 )];
                          for (int32_t _4124_l = _10852_; _4124_l < _10853_; ++_4124_l)
                          {
                            {
                              _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = _ptr__4041_wi32[safe_add( _4056_code,_4124_l )];
                              _ptr__4110_rf64[safe_add( _4108_rcconst,_4112_codei )] = _ptr__4043_wf64[safe_add( _4054_cconst,_4124_l )];
                              ++ _4112_codei;
                            }
                          }
                          _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 3;
                          ++ _4112_codei;
                        }
                      }
                      {}
                      _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 1;
                      _ptr__4110_rf64[safe_add( _4108_rcconst,_4112_codei )] = _4122_pidx;
                      ++ _4112_codei;
                      _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 5;
                      ++ _4112_codei;
                      _ptr__4111_ri32[safe_add( safe_add( _4106_rcodeptr,_4114_nzi ),(int)1 )] = _4112_codei;
                      ++ _4114_nzi;
                    }
                  }
                  ++ _4119_ii1;
                }
              }
              _ptr__4111_ri32[safe_add( safe_add( _4100_rptr,_4113_elmi ),(int)1 )] = _4114_nzi;
              _ptr__4109_ri64[safe_add( _4102_rsp,_4113_elmi )] = safe_add( safe_mul( _4115_i,_4060_pdim1 ),_4118_psubj );
              ++ _4113_elmi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _4125_i0 = (int)0;
      while ( (_4125_i0 < _4045_nelem) )
      {
        {
          int64_t _4126_erow = (_ptr__4042_wi64[safe_add( _4051_sp,_4125_i0 )] / _4058_edim1);
          int32_t _4127_b0 = _4125_i0;
          int64_t _4128_rowend = safe_mul( safe_add( _4126_erow,(int)1 ),_4058_edim1 );
          while ( ((_4125_i0 < _4045_nelem) && (_ptr__4042_wi64[safe_add( _4051_sp,_4125_i0 )] < _4128_rowend)) )
          {
            {
              ++ _4125_i0;
            }
          }
          int32_t _4129_i1 = (int)0;
          while ( (_4129_i1 < _4061_pnnz) )
          {
            {
              int64_t _4130_pcol = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4129_i1 )] )] % _4060_pdim1);
              int32_t _4131_b1 = _4129_i1;
              while ( ((_4129_i1 < _4061_pnnz) && (_4130_pcol == (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4129_i1 )] )] % _4060_pdim1))) )
              {
                {
                  ++ _4129_i1;
                }
              }
              int32_t _4132_nentryelm = (int)0;
              int32_t _4133_ii1 = _4131_b1;
              int32_t _4134_ii0 = _4127_b0;
              while ( ((_4134_ii0 < _4125_i0) && (_4133_ii1 < _4129_i1)) )
              {
                {
                  int64_t _4135_ecol = (_ptr__4042_wi64[safe_add( _4051_sp,_4134_ii0 )] % _4058_edim1);
                  int64_t _4136_prow = (_ptr__4074_xi64[safe_add( _4065_psp,_ptr__4073_xi32[safe_add( _4064_pperm,_4133_ii1 )] )] / _4060_pdim1);
                  if ((_4135_ecol < _4136_prow))
                  {
                    {
                      ++ _4134_ii0;
                    }
                  }
                  else if((_4135_ecol > _4136_prow))
                  {
                    {
                      ++ _4133_ii1;
                    }
                  }
                  else
                  {
                    {
                      int32_t _4137_pidx = _ptr__4073_xi32[safe_add( _4062_pidxs,_ptr__4073_xi32[safe_add( _4064_pperm,_4133_ii1 )] )];
                      int32_t _10854_ = _ptr__4041_wi32[safe_add( _4048_ptr,_4134_ii0 )];
                      int32_t _10855_ = _ptr__4041_wi32[safe_add( safe_add( _4048_ptr,_4134_ii0 ),(int)1 )];
                      for (int32_t _4138_k = _10854_; _4138_k < _10855_; ++_4138_k)
                      {
                        {
                          _ptr__4109_ri64[safe_add( _4101_rnidxs,_4114_nzi )] = _ptr__4042_wi64[safe_add( _4052_nidxs,_4138_k )];
                          _ptr__4110_rf64[safe_add( _4103_rcof,_4114_nzi )] = (int)0;
                          _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 2;
                          _ptr__4110_rf64[safe_add( _4108_rcconst,_4112_codei )] = _ptr__4043_wf64[safe_add( _4053_cof,_4138_k )];
                          ++ _4112_codei;
                          if ((_4049_ncodeatom > (int)0))
                          {
                            {
                              int32_t _10856_ = _ptr__4041_wi32[safe_add( _4055_codeptr,_4138_k )];
                              int32_t _10857_ = _ptr__4041_wi32[safe_add( safe_add( _4055_codeptr,_4138_k ),(int)1 )];
                              for (int32_t _4139_l = _10856_; _4139_l < _10857_; ++_4139_l)
                              {
                                {
                                  _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = _ptr__4041_wi32[safe_add( _4056_code,_4139_l )];
                                  _ptr__4110_rf64[safe_add( _4108_rcconst,_4112_codei )] = _ptr__4043_wf64[safe_add( _4054_cconst,_4139_l )];
                                  ++ _4112_codei;
                                }
                              }
                              _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 3;
                              ++ _4112_codei;
                            }
                          }
                          {}
                          _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 1;
                          _ptr__4110_rf64[safe_add( _4108_rcconst,_4112_codei )] = _4137_pidx;
                          ++ _4112_codei;
                          _ptr__4111_ri32[safe_add( _4107_rcode,_4112_codei )] = 5;
                          ++ _4112_codei;
                          _ptr__4111_ri32[safe_add( safe_add( _4106_rcodeptr,_4114_nzi ),(int)1 )] = _4112_codei;
                          ++ _4114_nzi;
                        }
                      }
                      ++ _4134_ii0;
                      ++ _4133_ii1;
                      ++ _4132_nentryelm;
                    }
                  }
                }
              }
              if ((_4132_nentryelm > (int)0))
              {
                {
                  _ptr__4111_ri32[safe_add( safe_add( _4100_rptr,_4113_elmi ),(int)1 )] = _4114_nzi;
                  _ptr__4109_ri64[safe_add( _4102_rsp,_4113_elmi )] = safe_add( safe_mul( _4126_erow,_4060_pdim1 ),_4130_pcol );
                  ++ _4113_elmi;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((!_4104_rhassp))
  {
    {
      _4038_rs->popi64(_4076_rnelem);
    }
  }
  {}
  if ((_4113_elmi != _4076_rnelem))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken elmi"));
    }
  }
  {}
  if ((_4114_nzi != _4077_rnnz))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken nzi"));
    }
  }
  {}
  if ((_4112_codei != _4075_rncodeatom))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken codei"));
    }
  }
  {}
  _4040_xs->clear();
}
// End mosek.fusion.ExprMulParamRight.eval

// Begin mosek.fusion.ExprMulParamRight.toString
// Method mosek.fusion.ExprMulParamRight.toString @ src/fusion/Parameter.monty:947:6-155
std::string mosek::fusion::ExprMulParamRight :: toString() { return mosek::fusion::p_ExprMulParamRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamRight.toString

void mosek::fusion::p_ExprMulParamRight::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamRight::destroy() { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->destroy(); }
// } class ExprMulParamRight
// class ExprMulParamLeft { // @ src/fusion/Parameter.monty:437:4-927:5
mosek::fusion::ExprMulParamLeft::ExprMulParamLeft(mosek::fusion::p_ExprMulParamLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulParamLeft::~ExprMulParamLeft() {  /* std::cout << "~ExprMulParamLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulParamLeft::p_ExprMulParamLeft
  (::mosek::fusion::ExprMulParamLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulParamLeft.ctor @ src/fusion/Parameter.monty:441:6-450:7
mosek::fusion::ExprMulParamLeft::t mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4140_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4141_e)
{ return new mosek::fusion::ExprMulParamLeft(_4140_p,_4141_e); }
mosek::fusion::ExprMulParamLeft::ExprMulParamLeft
  (monty::rc_ptr< ::mosek::fusion::Parameter > _4140_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4141_e) : 
   ExprMulParamLeft(new mosek::fusion::p_ExprMulParamLeft(this))
{ mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->_initialize(_4140_p,_4141_e); }
void mosek::fusion::p_ExprMulParamLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _4140_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _4141_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_4140_p->getDim((int)0)),(int32_t)(_4141_e->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->p = _4140_p;
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->e = _4141_e;
    if (((_4140_p->getND() != (int)2) || (_4141_e->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_4140_p->getDim((int)1) != _4141_e->getDim((int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulParamLeft.ctor

// Begin mosek.fusion.ExprMulParamLeft.eval
// Method mosek.fusion.ExprMulParamLeft.eval @ src/fusion/Parameter.monty:454:6-926:7
void mosek::fusion::ExprMulParamLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4142_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4143_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4144_xs) { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->eval(_4142_rs,_4143_ws,_4144_xs); }
void mosek::fusion::p_ExprMulParamLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4142_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4143_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4144_xs)
{
  e->eval(_4143_ws,_4142_rs,_4144_xs);
  _4143_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4145_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4145_wi32(_4145_wi32 ? _4145_wi32->raw() : nullptr,_4145_wi32 ? _4145_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4146_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4146_wi64(_4146_wi64 ? _4146_wi64->raw() : nullptr,_4146_wi64 ? _4146_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4147_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->f64;
  _checked_ptr_1<double> _ptr__4147_wf64(_4147_wf64 ? _4147_wf64->raw() : nullptr,_4147_wf64 ? _4147_wf64->size(0) : 0);
  int32_t _4148_nd = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->nd;
  int32_t _4149_nelem = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->nelem;
  int32_t _4150_nnz = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->nnz;
  bool _4151_hassp = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->hassp;
  int32_t _4152_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->ncodeatom;
  int32_t _4153_ptr = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->ptr_base;
  int32_t _4154_code = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->code_base;
  int32_t _4155_cconst = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->cconst_base;
  int32_t _4156_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->codeptr_base;
  int32_t _4157_shape = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->shape_base;
  int32_t _4158_sp = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->sp_base;
  int32_t _4159_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->nidxs_base;
  int32_t _4160_cof = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->cof_base;
  int32_t _4161_consts = mosek::fusion::p_WorkStack::_get_impl(_4143_ws)->cconst_base;
  if (((_4148_nd != (int)2) || (_ptr__4145_wi32[_4157_shape] != p->getDim((int)1))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int32_t _4162_pdim0 = p->getDim((int)0);
  int32_t _4163_pdim1 = p->getDim((int)1);
  int32_t _4164_edim0 = _ptr__4145_wi32[_4157_shape];
  int32_t _4165_edim1 = _ptr__4145_wi32[safe_add( _4157_shape,(int)1 )];
  int32_t _4166_pnnz = p->getNumNonzero();
  int32_t _4167_pidxs = _4144_xs->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4168_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4144_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4168_xi32(_4168_xi32 ? _4168_xi32->raw() : nullptr,_4168_xi32 ? _4168_xi32->size(0) : 0);
  p->getAllIndexes(_4168_xi32,_4167_pidxs);
  if (((!_4151_hassp) && (!p->isSparse())))
  {
    {
      int32_t _4169_rnd = (int)2;
      int32_t _4170_rnelem = safe_mul( _4165_edim1,p->getDim((int)0) );
      int32_t _4171_rnnz = safe_mul( _4150_nnz,p->getDim((int)0) );
      int32_t _10858_;
      bool _10859_ = (_4152_ncodeatom > (int)0);
      if (_10859_)
      {
        _10858_ = safe_add( safe_mul( p->getDim((int)0),_4152_ncodeatom ),safe_mul( (int)4,_4171_rnnz ) );
      }
      else
      {
        _10858_ = safe_mul( (int)3,_4171_rnnz );
      }
      int32_t _4172_rncodeatom = _10858_;
      bool _4173_rhassp = false;
      _4142_rs->alloc_expr(_4169_rnd,_4170_rnelem,_4171_rnnz,_4173_rhassp,_4172_rncodeatom);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4174_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4174_ri64(_4174_ri64 ? _4174_ri64->raw() : nullptr,_4174_ri64 ? _4174_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4175_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->f64;
      _checked_ptr_1<double> _ptr__4175_rf64(_4175_rf64 ? _4175_rf64->raw() : nullptr,_4175_rf64 ? _4175_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4176_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4176_ri32(_4176_ri32 ? _4176_ri32->raw() : nullptr,_4176_ri32 ? _4176_ri32->size(0) : 0);
      int32_t _4177_rptr = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->ptr_base;
      int32_t _4178_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->nidxs_base;
      int32_t _4179_rcof = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->cof_base;
      int32_t _4180_rcode = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->code_base;
      int32_t _4181_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->codeptr_base;
      int32_t _4182_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->cconst_base;
      bool _4183_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->hassp;
      int32_t _4184_rshape = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->shape_base;
      _ptr__4176_ri32[_4184_rshape] = _4162_pdim0;
      _ptr__4176_ri32[safe_add( _4184_rshape,(int)1 )] = _4165_edim1;
      {
        _ptr__4176_ri32[_4177_rptr] = (int)0;
        _ptr__4176_ri32[_4181_rcodeptr] = (int)0;
        int32_t _4185_nzi = (int)0;
        int32_t _4186_elmi = (int)0;
        int32_t _4187_codei = (int)0;
        int32_t _10860_ = (int)0;
        int32_t _10861_ = p->getDim((int)0);
        for (int32_t _4188_i = _10860_; _4188_i < _10861_; ++_4188_i)
        {
          {
            int32_t _10862_ = (int)0;
            int32_t _10863_ = e->getDim((int)1);
            for (int32_t _4189_j = _10862_; _4189_j < _10863_; ++_4189_j)
            {
              {
                int32_t _10864_ = (int)0;
                int32_t _10865_ = p->getDim((int)1);
                for (int32_t _4190_k = _10864_; _4190_k < _10865_; ++_4190_k)
                {
                  {
                    int32_t _10866_ = _ptr__4145_wi32[safe_add( safe_add( _4153_ptr,safe_mul( _4190_k,_4165_edim1 ) ),_4189_j )];
                    int32_t _10867_ = _ptr__4145_wi32[safe_add( safe_add( safe_add( _4153_ptr,safe_mul( _4190_k,_4165_edim1 ) ),_4189_j ),(int)1 )];
                    for (int32_t _4191_l = _10866_; _4191_l < _10867_; ++_4191_l)
                    {
                      {
                        _ptr__4174_ri64[safe_add( _4178_rnidxs,_4185_nzi )] = _ptr__4146_wi64[safe_add( _4159_nidxs,_4191_l )];
                        _ptr__4175_rf64[safe_add( _4179_rcof,_4185_nzi )] = 0.0;
                        _ptr__4176_ri32[safe_add( _4180_rcode,_4187_codei )] = 2;
                        _ptr__4175_rf64[safe_add( _4182_rcconst,_4187_codei )] = _ptr__4147_wf64[safe_add( _4160_cof,_4191_l )];
                        ++ _4187_codei;
                        if ((_4152_ncodeatom > (int)0))
                        {
                          {
                            int32_t _10868_ = _ptr__4145_wi32[safe_add( _4156_codeptr,_4191_l )];
                            int32_t _10869_ = _ptr__4145_wi32[safe_add( safe_add( _4156_codeptr,_4191_l ),(int)1 )];
                            for (int32_t _4192_m = _10868_; _4192_m < _10869_; ++_4192_m)
                            {
                              {
                                _ptr__4176_ri32[safe_add( _4180_rcode,_4187_codei )] = _ptr__4145_wi32[safe_add( _4154_code,_4192_m )];
                                _ptr__4175_rf64[safe_add( _4182_rcconst,_4187_codei )] = _ptr__4147_wf64[safe_add( _4155_cconst,_4192_m )];
                                ++ _4187_codei;
                              }
                            }
                            _ptr__4176_ri32[safe_add( _4180_rcode,_4187_codei )] = 3;
                            ++ _4187_codei;
                          }
                        }
                        {}
                        _ptr__4176_ri32[safe_add( _4180_rcode,_4187_codei )] = 1;
                        _ptr__4175_rf64[safe_add( _4182_rcconst,_4187_codei )] = _ptr__4168_xi32[safe_add( safe_add( _4167_pidxs,safe_mul( _4188_i,_4163_pdim1 ) ),_4190_k )];
                        ++ _4187_codei;
                        _ptr__4176_ri32[safe_add( _4180_rcode,_4187_codei )] = 5;
                        ++ _4187_codei;
                        _ptr__4176_ri32[safe_add( safe_add( _4181_rcodeptr,_4185_nzi ),(int)1 )] = _4187_codei;
                        ++ _4185_nzi;
                      }
                    }
                  }
                }
                _ptr__4176_ri32[safe_add( safe_add( _4177_rptr,_4186_elmi ),(int)1 )] = _4185_nzi;
                ++ _4186_elmi;
              }
            }
          }
        }
        if ((_4187_codei != _4172_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4185_nzi != _4171_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4186_elmi != _4170_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        int32_t _10870_ = (int)0;
        int32_t _10871_ = _4170_rnelem;
        for (int32_t _4193_i = _10870_; _4193_i < _10871_; ++_4193_i)
        {
          {
            if ((_ptr__4176_ri32[safe_add( _4177_rptr,_4193_i )] > _ptr__4176_ri32[safe_add( safe_add( _4177_rptr,_4193_i ),(int)1 )]))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr indexes"));
              }
            }
            {}
          }
        }
      }
    }
  }
  else if((!_4151_hassp))
  {
    {
      int32_t _4194_numpnz = _4149_nelem;
      int32_t _4195_pnelem = _4166_pnnz;
      int32_t _4196_xpsp = _4144_xs->alloci64(_4195_pnelem);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4197_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4144_xs)->i64;
      _checked_ptr_1<int64_t> _ptr__4197_xi64(_4197_xi64 ? _4197_xi64->raw() : nullptr,_4197_xi64 ? _4197_xi64->size(0) : 0);
      p->getSp(_4197_xi64,_4196_xpsp);
      int32_t _4198_rnelem = (int)0;
      int32_t _4199_rnnz = (int)0;
      int32_t _4200_rncodeatom = (int)0;
      {
        int32_t _4201_i0 = (int)0;
        while ( (_4201_i0 < _4166_pnnz) )
        {
          {
            int32_t _4202_ii = (int32_t)(_ptr__4197_xi64[safe_add( _4196_xpsp,_4201_i0 )] / _4163_pdim1);
            int32_t _4203_prowb = _4201_i0;
            ++ _4201_i0;
            while ( ((_4201_i0 < _4166_pnnz) && (_ptr__4197_xi64[safe_add( _4196_xpsp,_4201_i0 )] < safe_mul( safe_add( _4202_ii,(int)1 ),_4163_pdim1 ))) )
            {
              {
                ++ _4201_i0;
              }
            }
            int32_t _4204_prowe = _4201_i0;
            int32_t _10872_ = (int)0;
            int32_t _10873_ = _4165_edim1;
            for (int32_t _4205_jj = _10872_; _4205_jj < _10873_; ++_4205_jj)
            {
              {
                int32_t _10874_ = _4203_prowb;
                int32_t _10875_ = _4204_prowe;
                for (int32_t _4206_i = _10874_; _4206_i < _10875_; ++_4206_i)
                {
                  {
                    int64_t _4207_eidx = safe_add( safe_mul( (_ptr__4197_xi64[safe_add( _4196_xpsp,_4206_i )] % _4163_pdim1),_4165_edim1 ),_4205_jj );
                    int32_t _4208_n = (_ptr__4145_wi32[safe_add( safe_add( _4153_ptr,_4207_eidx ),(int)1 )] - _ptr__4145_wi32[safe_add( _4153_ptr,_4207_eidx )]);
                    _4199_rnnz += _4208_n;
                    if ((_4152_ncodeatom > (int)0))
                    {
                      {
                        _4200_rncodeatom += safe_add( (_ptr__4145_wi32[safe_add( _4156_codeptr,_ptr__4145_wi32[safe_add( safe_add( _4153_ptr,_4207_eidx ),(int)1 )] )] - _ptr__4145_wi32[safe_add( _4156_codeptr,_ptr__4145_wi32[safe_add( _4153_ptr,_4207_eidx )] )]),safe_mul( (int)4,_4208_n ) );
                      }
                    }
                    else
                    {
                      {
                        _4200_rncodeatom += safe_mul( (int)3,_4208_n );
                      }
                    }
                  }
                }
                ++ _4198_rnelem;
              }
            }
          }
        }
      }
      bool _4209_rhassp = (_4198_rnelem < safe_mul( _4162_pdim0,_4165_edim1 ));
      int32_t _4210_rnd = (int)2;
      _4142_rs->alloc_expr(_4210_rnd,_4198_rnelem,_4199_rnnz,_4209_rhassp,_4200_rncodeatom);
      int32_t _4211_rptr = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->ptr_base;
      int32_t _4212_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->nidxs_base;
      int32_t _10876_;
      bool _10877_ = _4209_rhassp;
      if (_10877_)
      {
        _10876_ = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->sp_base;
      }
      else
      {
        _10876_ = _4142_rs->alloci64(_4198_rnelem);
      }
      int32_t _4213_rsp = _10876_;
      int32_t _4214_rcof = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->cof_base;
      bool _4215_rhassp = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->hassp;
      int32_t _4216_rshape = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->shape_base;
      int32_t _4217_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->codeptr_base;
      int32_t _4218_rcode = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->code_base;
      int32_t _4219_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4220_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4220_ri64(_4220_ri64 ? _4220_ri64->raw() : nullptr,_4220_ri64 ? _4220_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4221_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->f64;
      _checked_ptr_1<double> _ptr__4221_rf64(_4221_rf64 ? _4221_rf64->raw() : nullptr,_4221_rf64 ? _4221_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4222_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4222_ri32(_4222_ri32 ? _4222_ri32->raw() : nullptr,_4222_ri32 ? _4222_ri32->size(0) : 0);
      _ptr__4222_ri32[_4216_rshape] = _4162_pdim0;
      _ptr__4222_ri32[safe_add( _4216_rshape,(int)1 )] = _4165_edim1;
      {
        int32_t _4223_nzi = (int)0;
        int32_t _4224_elmi = (int)0;
        int32_t _4225_codei = (int)0;
        if ((_4200_rncodeatom > (int)0))
        {
          {
            _ptr__4222_ri32[_4217_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__4222_ri32[_4211_rptr] = (int)0;
        int32_t _10878_ = (int)0;
        int32_t _10879_ = _4199_rnnz;
        for (int32_t _4226_i = _10878_; _4226_i < _10879_; ++_4226_i)
        {
          {
            _ptr__4221_rf64[safe_add( _4214_rcof,_4226_i )] = 0.0;
          }
        }
        int32_t _4227_i0 = (int)0;
        while ( (_4227_i0 < _4166_pnnz) )
        {
          {
            int32_t _4228_ii = (int32_t)(_ptr__4197_xi64[safe_add( _4196_xpsp,_4227_i0 )] / _4163_pdim1);
            int32_t _4229_prowb = _4227_i0;
            ++ _4227_i0;
            while ( ((_4227_i0 < _4166_pnnz) && (_ptr__4197_xi64[safe_add( _4196_xpsp,_4227_i0 )] < safe_mul( safe_add( _4228_ii,(int)1 ),_4163_pdim1 ))) )
            {
              {
                ++ _4227_i0;
              }
            }
            int32_t _4230_prowe = _4227_i0;
            int32_t _10880_ = (int)0;
            int32_t _10881_ = _4165_edim1;
            for (int32_t _4231_jj = _10880_; _4231_jj < _10881_; ++_4231_jj)
            {
              {
                int32_t _10882_ = _4229_prowb;
                int32_t _10883_ = _4230_prowe;
                for (int32_t _4232_i = _10882_; _4232_i < _10883_; ++_4232_i)
                {
                  {
                    int64_t _4233_eidx = safe_add( safe_mul( (_ptr__4197_xi64[safe_add( _4196_xpsp,_4232_i )] % _4163_pdim1),_4165_edim1 ),_4231_jj );
                    int32_t _10884_ = _ptr__4145_wi32[safe_add( _4153_ptr,_4233_eidx )];
                    int32_t _10885_ = _ptr__4145_wi32[safe_add( safe_add( _4153_ptr,_4233_eidx ),(int)1 )];
                    for (int32_t _4234_k = _10884_; _4234_k < _10885_; ++_4234_k)
                    {
                      {
                        _ptr__4220_ri64[safe_add( _4212_rnidxs,_4223_nzi )] = _ptr__4146_wi64[safe_add( _4159_nidxs,_4234_k )];
                        _ptr__4222_ri32[safe_add( _4218_rcode,_4225_codei )] = 2;
                        _ptr__4221_rf64[safe_add( _4219_rcconst,_4225_codei )] = _ptr__4147_wf64[safe_add( _4160_cof,_4234_k )];
                        ++ _4225_codei;
                        if ((_4152_ncodeatom > (int)0))
                        {
                          {
                            int32_t _10886_ = _ptr__4145_wi32[safe_add( _4156_codeptr,_4234_k )];
                            int32_t _10887_ = _ptr__4145_wi32[safe_add( safe_add( _4156_codeptr,_4234_k ),(int)1 )];
                            for (int32_t _4235_l = _10886_; _4235_l < _10887_; ++_4235_l)
                            {
                              {
                                _ptr__4222_ri32[safe_add( _4218_rcode,_4225_codei )] = _ptr__4145_wi32[safe_add( _4154_code,_4235_l )];
                                _ptr__4221_rf64[safe_add( _4219_rcconst,_4225_codei )] = _ptr__4147_wf64[safe_add( _4155_cconst,_4235_l )];
                                ++ _4225_codei;
                              }
                            }
                            _ptr__4222_ri32[safe_add( _4218_rcode,_4225_codei )] = 3;
                            ++ _4225_codei;
                          }
                        }
                        {}
                        _ptr__4222_ri32[safe_add( _4218_rcode,_4225_codei )] = 1;
                        _ptr__4221_rf64[safe_add( _4219_rcconst,_4225_codei )] = _ptr__4168_xi32[safe_add( _4167_pidxs,_4232_i )];
                        ++ _4225_codei;
                        _ptr__4222_ri32[safe_add( _4218_rcode,_4225_codei )] = 5;
                        ++ _4225_codei;
                        _ptr__4222_ri32[safe_add( safe_add( _4217_rcodeptr,_4223_nzi ),(int)1 )] = _4225_codei;
                        ++ _4223_nzi;
                      }
                    }
                  }
                }
                _ptr__4222_ri32[safe_add( safe_add( _4211_rptr,_4224_elmi ),(int)1 )] = _4223_nzi;
                _ptr__4220_ri64[safe_add( _4213_rsp,_4224_elmi )] = safe_add( safe_mul( (int64_t)_4228_ii,_4165_edim1 ),_4231_jj );
                ++ _4224_elmi;
              }
            }
          }
        }
        if ((_4225_codei != _4200_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect code list"));
          }
        }
        {}
        if ((_4223_nzi != _4199_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4224_elmi != _4198_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4222_ri32[safe_add( _4211_rptr,_4198_rnelem )] != _4199_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4215_rhassp))
      {
        {
          _4142_rs->popi64(_4198_rnelem);
        }
      }
      {}
      _4144_xs->clear();
    }
  }
  else
  {
    {
      int32_t _4236_numpnz = _4149_nelem;
      int32_t _4237_xperm = _4144_xs->alloci32(_4236_numpnz);
      int32_t _4238_pnelem = p->getNumNonzero();
      int32_t _4239_xpsp = _4144_xs->alloci64(_4238_pnelem);
      int32_t _4240_xptr = _4144_xs->alloci32(safe_add( _ptr__4145_wi32[safe_add( _4157_shape,(int)1 )],(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4241_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4144_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4241_xi32(_4241_xi32 ? _4241_xi32->raw() : nullptr,_4241_xi32 ? _4241_xi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4242_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4144_xs)->i64;
      _checked_ptr_1<int64_t> _ptr__4242_xi64(_4242_xi64 ? _4242_xi64->raw() : nullptr,_4242_xi64 ? _4242_xi64->size(0) : 0);
      p->getSp(_4242_xi64,_4239_xpsp);
      {
        int32_t _4243_d1 = _ptr__4145_wi32[safe_add( _4157_shape,(int)1 )];
        int32_t _10888_ = (int)0;
        int32_t _10889_ = safe_add( _ptr__4145_wi32[safe_add( _4157_shape,(int)1 )],(int)1 );
        for (int32_t _4244_i = _10888_; _4244_i < _10889_; ++_4244_i)
        {
          {
            _ptr__4241_xi32[safe_add( _4240_xptr,_4244_i )] = (int)0;
          }
        }
        int32_t _10890_ = (int)0;
        int32_t _10891_ = _4149_nelem;
        for (int32_t _4245_i = _10890_; _4245_i < _10891_; ++_4245_i)
        {
          {
            ++ _ptr__4241_xi32[safe_add( safe_add( _4240_xptr,(_ptr__4146_wi64[safe_add( _4158_sp,_4245_i )] % _4243_d1) ),(int)1 )];
          }
        }
        int32_t _10892_ = (int)0;
        int32_t _10893_ = _4243_d1;
        for (int32_t _4246_i = _10892_; _4246_i < _10893_; ++_4246_i)
        {
          {
            _ptr__4241_xi32[safe_add( safe_add( _4240_xptr,_4246_i ),(int)1 )] += _ptr__4241_xi32[safe_add( _4240_xptr,_4246_i )];
          }
        }
        int32_t _10894_ = (int)0;
        int32_t _10895_ = _4149_nelem;
        for (int32_t _4247_i = _10894_; _4247_i < _10895_; ++_4247_i)
        {
          {
            _ptr__4241_xi32[safe_add( _4237_xperm,_ptr__4241_xi32[safe_add( _4240_xptr,(_ptr__4146_wi64[safe_add( _4158_sp,_4247_i )] % _4243_d1) )] )] = _4247_i;
            ++ _ptr__4241_xi32[safe_add( _4240_xptr,(_ptr__4146_wi64[safe_add( _4158_sp,_4247_i )] % _4243_d1) )];
          }
        }
      }
      int32_t _4248_rnelem = (int)0;
      int32_t _4249_rnnz = (int)0;
      int32_t _4250_rncodeatom = (int)0;
      int32_t _4251_edim1 = _ptr__4145_wi32[safe_add( _4157_shape,(int)1 )];
      int32_t _4252_edim0 = _ptr__4145_wi32[_4157_shape];
      int32_t _4253_pdim1 = p->getDim((int)1);
      int32_t _4254_pdim0 = p->getDim((int)0);
      {
        int32_t _4255_prowp = (int)0;
        while ( (_4255_prowp < _4238_pnelem) )
        {
          {
            int32_t _4256_prowb = _4255_prowp;
            int64_t _4257_ri = (_ptr__4242_xi64[safe_add( _4239_xpsp,_4255_prowp )] / _4253_pdim1);
            while ( ((_4255_prowp < _4238_pnelem) && (_ptr__4242_xi64[safe_add( _4239_xpsp,_4255_prowp )] < safe_mul( safe_add( _4257_ri,(int)1 ),_4253_pdim1 ))) )
            {
              {
                ++ _4255_prowp;
              }
            }
            int32_t _4258_ecolp = (int)0;
            while ( (_4258_ecolp < _4149_nelem) )
            {
              {
                int32_t _4259_ecolb = _4258_ecolp;
                int64_t _4260_rj = (_ptr__4146_wi64[safe_add( _4158_sp,_ptr__4241_xi32[safe_add( _4237_xperm,_4258_ecolp )] )] % _4251_edim1);
                ++ _4258_ecolp;
                while ( ((_4258_ecolp < _4149_nelem) && ((_ptr__4146_wi64[safe_add( _4158_sp,_ptr__4241_xi32[safe_add( _4237_xperm,_4258_ecolp )] )] % _4251_edim1) == _4260_rj)) )
                {
                  {
                    ++ _4258_ecolp;
                  }
                }
                int32_t _4261_ep = _4259_ecolb;
                int32_t _4262_pp = _4256_prowb;
                bool _4263_exist = false;
                int32_t _4264_rownnz = (int)0;
                while ( ((_4262_pp < _4255_prowp) && (_4261_ep < _4258_ecolp)) )
                {
                  {
                    int32_t _4265_eidx = _ptr__4241_xi32[safe_add( _4237_xperm,_4261_ep )];
                    if (((_ptr__4242_xi64[safe_add( _4239_xpsp,_4262_pp )] % _4253_pdim1) < (_ptr__4146_wi64[safe_add( _4158_sp,_4265_eidx )] / _4251_edim1)))
                    {
                      {
                        ++ _4262_pp;
                      }
                    }
                    else if(((_ptr__4242_xi64[safe_add( _4239_xpsp,_4262_pp )] % _4253_pdim1) > (_ptr__4146_wi64[safe_add( _4158_sp,_4265_eidx )] / _4251_edim1)))
                    {
                      {
                        ++ _4261_ep;
                      }
                    }
                    else
                    {
                      {
                        int32_t _4266_n = (_ptr__4145_wi32[safe_add( safe_add( _4153_ptr,_4265_eidx ),(int)1 )] - _ptr__4145_wi32[safe_add( _4153_ptr,_4265_eidx )]);
                        _4249_rnnz += _4266_n;
                        int32_t _10896_;
                        bool _10897_ = (_4152_ncodeatom > (int)0);
                        if (_10897_)
                        {
                          _10896_ = safe_add( (_ptr__4145_wi32[safe_add( _4156_codeptr,_ptr__4145_wi32[safe_add( safe_add( _4153_ptr,_4265_eidx ),(int)1 )] )] - _ptr__4145_wi32[safe_add( _4156_codeptr,_ptr__4145_wi32[safe_add( _4153_ptr,_4265_eidx )] )]),safe_mul( (int)4,_4266_n ) );
                        }
                        else
                        {
                          _10896_ = safe_mul( (int)3,_4266_n );
                        }
                        _4250_rncodeatom += _10896_;
                        ++ _4261_ep;
                        ++ _4262_pp;
                        ++ _4264_rownnz;
                      }
                    }
                  }
                }
                if ((_4264_rownnz > (int)0))
                {
                  {
                    ++ _4248_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int32_t _4267_rnd = (int)2;
      bool _4268_rhassp = (_4248_rnelem < safe_mul( _4254_pdim0,_4251_edim1 ));
      _4142_rs->alloc_expr(_4267_rnd,_4248_rnelem,_4249_rnnz,_4268_rhassp,_4250_rncodeatom);
      int32_t _4269_rptr = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->ptr_base;
      int32_t _4270_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->nidxs_base;
      int32_t _10898_;
      bool _10899_ = _4268_rhassp;
      if (_10899_)
      {
        _10898_ = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->sp_base;
      }
      else
      {
        _10898_ = _4142_rs->alloci64(_4248_rnelem);
      }
      int32_t _4271_rsp = _10898_;
      int32_t _4272_rcof = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->cof_base;
      int32_t _4273_rshape = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->shape_base;
      int32_t _4274_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->codeptr_base;
      int32_t _4275_rcode = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->code_base;
      int32_t _4276_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4277_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4277_ri64(_4277_ri64 ? _4277_ri64->raw() : nullptr,_4277_ri64 ? _4277_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4278_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->f64;
      _checked_ptr_1<double> _ptr__4278_rf64(_4278_rf64 ? _4278_rf64->raw() : nullptr,_4278_rf64 ? _4278_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4279_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4142_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4279_ri32(_4279_ri32 ? _4279_ri32->raw() : nullptr,_4279_ri32 ? _4279_ri32->size(0) : 0);
      int32_t _10900_ = (int)0;
      int32_t _10901_ = safe_add( _4248_rnelem,(int)1 );
      for (int32_t _4280_i = _10900_; _4280_i < _10901_; ++_4280_i)
      {
        {
          _ptr__4279_ri32[safe_add( _4269_rptr,_4280_i )] = (-(int)9999);
        }
      }
      {
        _ptr__4279_ri32[_4269_rptr] = (int)0;
        if ((_4250_rncodeatom > (int)0))
        {
          {
            _ptr__4279_ri32[_4274_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__4279_ri32[_4273_rshape] = _4254_pdim0;
        _ptr__4279_ri32[safe_add( _4273_rshape,(int)1 )] = _4251_edim1;
        int32_t _4281_nzi = (int)0;
        int32_t _4282_elmi = (int)0;
        int32_t _4283_codei = (int)0;
        int32_t _10902_ = (int)0;
        int32_t _10903_ = _4249_rnnz;
        for (int32_t _4284_i = _10902_; _4284_i < _10903_; ++_4284_i)
        {
          {
            _ptr__4278_rf64[safe_add( _4272_rcof,_4284_i )] = 0.0;
          }
        }
        int32_t _4285_prowp = (int)0;
        while ( (_4285_prowp < _4238_pnelem) )
        {
          {
            int32_t _4286_prowb = _4285_prowp;
            int64_t _4287_ri = (_ptr__4242_xi64[safe_add( _4239_xpsp,_4285_prowp )] / _4253_pdim1);
            while ( ((_4285_prowp < _4238_pnelem) && (_ptr__4242_xi64[safe_add( _4239_xpsp,_4285_prowp )] < safe_mul( safe_add( _4287_ri,(int)1 ),_4253_pdim1 ))) )
            {
              {
                ++ _4285_prowp;
              }
            }
            int32_t _4288_ecolp = (int)0;
            while ( (_4288_ecolp < _4149_nelem) )
            {
              {
                int32_t _4289_ecolb = _4288_ecolp;
                int64_t _4290_rj = (_ptr__4146_wi64[safe_add( _4158_sp,_ptr__4241_xi32[safe_add( _4237_xperm,_4288_ecolp )] )] % _4251_edim1);
                ++ _4288_ecolp;
                while ( ((_4288_ecolp < _4149_nelem) && ((_ptr__4146_wi64[safe_add( _4158_sp,_ptr__4241_xi32[safe_add( _4237_xperm,_4288_ecolp )] )] % _4251_edim1) == _4290_rj)) )
                {
                  {
                    ++ _4288_ecolp;
                  }
                }
                int32_t _4291_ep = _4289_ecolb;
                int32_t _4292_pp = _4286_prowb;
                int32_t _4293_nsumelm = (int)0;
                while ( ((_4292_pp < _4285_prowp) && (_4291_ep < _4288_ecolp)) )
                {
                  {
                    int32_t _4294_eidx = _ptr__4241_xi32[safe_add( _4237_xperm,_4291_ep )];
                    if (((_ptr__4242_xi64[safe_add( _4239_xpsp,_4292_pp )] % _4253_pdim1) < (_ptr__4146_wi64[safe_add( _4158_sp,_4294_eidx )] / _4251_edim1)))
                    {
                      {
                        ++ _4292_pp;
                      }
                    }
                    else if(((_ptr__4242_xi64[safe_add( _4239_xpsp,_4292_pp )] % _4253_pdim1) > (_ptr__4146_wi64[safe_add( _4158_sp,_4294_eidx )] / _4251_edim1)))
                    {
                      {
                        ++ _4291_ep;
                      }
                    }
                    else
                    {
                      {
                        int32_t _10904_ = _ptr__4145_wi32[safe_add( _4153_ptr,_4294_eidx )];
                        int32_t _10905_ = _ptr__4145_wi32[safe_add( safe_add( _4153_ptr,_4294_eidx ),(int)1 )];
                        for (int32_t _4295_i = _10904_; _4295_i < _10905_; ++_4295_i)
                        {
                          {
                            _ptr__4277_ri64[safe_add( _4270_rnidxs,_4281_nzi )] = _ptr__4146_wi64[safe_add( _4159_nidxs,_4295_i )];
                            _ptr__4279_ri32[safe_add( _4275_rcode,_4283_codei )] = 2;
                            _ptr__4278_rf64[safe_add( _4276_rcconst,_4283_codei )] = _ptr__4147_wf64[safe_add( _4160_cof,_4295_i )];
                            ++ _4283_codei;
                            if ((_4152_ncodeatom > (int)0))
                            {
                              {
                                int32_t _10906_ = _ptr__4145_wi32[safe_add( _4156_codeptr,_4295_i )];
                                int32_t _10907_ = _ptr__4145_wi32[safe_add( safe_add( _4156_codeptr,_4295_i ),(int)1 )];
                                for (int32_t _4296_k = _10906_; _4296_k < _10907_; ++_4296_k)
                                {
                                  {
                                    _ptr__4279_ri32[safe_add( _4275_rcode,_4283_codei )] = _ptr__4145_wi32[safe_add( _4154_code,_4296_k )];
                                    _ptr__4278_rf64[safe_add( _4276_rcconst,_4283_codei )] = _ptr__4147_wf64[safe_add( _4155_cconst,_4296_k )];
                                    ++ _4283_codei;
                                  }
                                }
                                _ptr__4279_ri32[safe_add( _4275_rcode,_4283_codei )] = 3;
                                ++ _4283_codei;
                              }
                            }
                            {}
                            _ptr__4279_ri32[safe_add( _4275_rcode,_4283_codei )] = 1;
                            _ptr__4278_rf64[safe_add( _4276_rcconst,_4283_codei )] = _ptr__4241_xi32[safe_add( _4167_pidxs,_4292_pp )];
                            ++ _4283_codei;
                            _ptr__4279_ri32[safe_add( _4275_rcode,_4283_codei )] = 5;
                            ++ _4283_codei;
                            _ptr__4279_ri32[safe_add( safe_add( _4274_rcodeptr,_4281_nzi ),(int)1 )] = _4283_codei;
                            ++ _4281_nzi;
                          }
                        }
                        ++ _4293_nsumelm;
                        ++ _4292_pp;
                        ++ _4291_ep;
                      }
                    }
                  }
                }
                if ((_4293_nsumelm > (int)0))
                {
                  {
                    _ptr__4277_ri64[safe_add( _4271_rsp,_4282_elmi )] = safe_add( safe_mul( _4287_ri,_4251_edim1 ),_4290_rj );
                    _ptr__4279_ri32[safe_add( safe_add( _4269_rptr,_4282_elmi ),(int)1 )] = _4281_nzi;
                    ++ _4282_elmi;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_4283_codei != _4250_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4281_nzi != _4249_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4282_elmi != _4248_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4279_ri32[safe_add( _4269_rptr,_4282_elmi )] != _4249_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4268_rhassp))
      {
        {
          _4142_rs->popi64(_4248_rnelem);
        }
      }
      {}
    }
  }
  _4144_xs->clear();
}
// End mosek.fusion.ExprMulParamLeft.eval

// Begin mosek.fusion.ExprMulParamLeft.toString
// Method mosek.fusion.ExprMulParamLeft.toString @ src/fusion/Parameter.monty:452:6-154
std::string mosek::fusion::ExprMulParamLeft :: toString() { return mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulParamLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulParamLeft.toString

void mosek::fusion::p_ExprMulParamLeft::destroy()
{
  e.reset();
  p.reset();
}
void mosek::fusion::ExprMulParamLeft::destroy() { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->destroy(); }
// } class ExprMulParamLeft
// class ParameterImpl { // @ src/fusion/Parameter.monty:105:4-418:5
mosek::fusion::ParameterImpl::ParameterImpl(mosek::fusion::p_ParameterImpl *_impl) : _impl(_impl) { /*std::cout << "ParameterImpl() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::ParameterImpl::~ParameterImpl() { delete _impl; _impl = nullptr; }
mosek::fusion::p_ParameterImpl::p_ParameterImpl
  (::mosek::fusion::ParameterImpl * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.ParameterImpl.ctor @ src/fusion/Parameter.monty:123:6-129:7
mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4297_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4298_model)
{ return new mosek::fusion::ParameterImpl(_4297_other,_4298_model); }
mosek::fusion::ParameterImpl::ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4297_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4298_model) : 
   ParameterImpl(new mosek::fusion::p_ParameterImpl(this))
{ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4297_other,_4298_model); }
void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4297_other,
    monty::rc_ptr< ::mosek::fusion::Model > _4298_model)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4298_model;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = mosek::fusion::p_ParameterImpl::_get_impl(_4297_other)->shape;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = mosek::fusion::p_ParameterImpl::_get_impl(_4297_other)->sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = mosek::fusion::p_ParameterImpl::_get_impl(_4297_other)->size;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = mosek::fusion::p_ParameterImpl::_get_impl(_4297_other)->nidxs;
  }
}
// mosek.fusion.ParameterImpl.ctor

// mosek.fusion.ParameterImpl.ctor @ src/fusion/Parameter.monty:112:6-121:7
mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::Model > _4299_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4300_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4301_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4302_nidxs)
{ return new mosek::fusion::ParameterImpl(_4299_model,_4300_shape,_4301_sp,_4302_nidxs); }
mosek::fusion::ParameterImpl::ParameterImpl
  (monty::rc_ptr< ::mosek::fusion::Model > _4299_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4300_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4301_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4302_nidxs) : 
   ParameterImpl(new mosek::fusion::p_ParameterImpl(this))
{ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4299_model,_4300_shape,_4301_sp,_4302_nidxs); }
void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _4299_model,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4300_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4301_sp,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4302_nidxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4300_shape(_4300_shape ? _4300_shape->raw() : nullptr, _4300_shape ? _4300_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4301_sp(_4301_sp ? _4301_sp->raw() : nullptr, _4301_sp ? _4301_sp->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__4302_nidxs(_4302_nidxs ? _4302_nidxs->raw() : nullptr, _4302_nidxs ? _4302_nidxs->size(0) : 0);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4299_model;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = ::mosek::fusion::Utils::Tools::arraycopy(_4300_shape);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = _4301_sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = ::mosek::fusion::p_Set::size(_4300_shape);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = ::mosek::fusion::Utils::Tools::arraycopy(_4302_nidxs);
  }
}
// mosek.fusion.ParameterImpl.ctor

// Begin mosek.fusion.ParameterImpl.clone
// Method mosek.fusion.ParameterImpl.clone @ src/fusion/Parameter.monty:415:6-417:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4303_m) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__clone(_4303_m); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::clone(monty::rc_ptr< ::mosek::fusion::Model > _4303_m) { return __mosek_2fusion_2ParameterImpl__clone(_4303_m); }
/* override: mosek.fusion.Parameter.clone*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__clone(monty::rc_ptr< ::mosek::fusion::Model > _4303_m) { return __mosek_2fusion_2ParameterImpl__clone(_4303_m); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4303_m)
{
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::ParameterImpl::t(_pubthis),_4303_m)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.clone

// Begin mosek.fusion.ParameterImpl.toString
// Method mosek.fusion.ParameterImpl.toString @ src/fusion/Parameter.monty:400:6-412:7
std::string mosek::fusion::ParameterImpl :: toString() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ParameterImpl::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4304_r = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Parameter(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _4304_r->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int32_t _10908_ = (int)1;
      int32_t _10909_ = (int)((shape)->size(0));
      for (int32_t _4305_i = _10908_; _4305_i < _10909_; ++_4305_i)
      {
        {
          _4304_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_4305_i)));
        }
      }
    }
  }
  {}
  _4304_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sp.get()))
  {
    {
      _4304_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _4304_r->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4304_r->toString();
}
// End mosek.fusion.ParameterImpl.toString

// Begin mosek.fusion.ParameterImpl.pick
// Method mosek.fusion.ParameterImpl.pick @ src/fusion/Parameter.monty:395:6-397:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4306_indexrows) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4306_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4306_indexrows) { return __mosek_2fusion_2ParameterImpl__pick(_4306_indexrows); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4306_indexrows) { return __mosek_2fusion_2ParameterImpl__pick(_4306_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _4306_indexrows)
{
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
// End mosek.fusion.ParameterImpl.pick

// Begin mosek.fusion.ParameterImpl.pick
// Method mosek.fusion.ParameterImpl.pick @ src/fusion/Parameter.monty:391:6-393:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4307_indexes) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4307_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4307_indexes) { return __mosek_2fusion_2ParameterImpl__pick(_4307_indexes); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4307_indexes) { return __mosek_2fusion_2ParameterImpl__pick(_4307_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _4307_indexes)
{
  _checked_ptr_1<int32_t> _ptr__4307_indexes(_4307_indexes ? _4307_indexes->raw() : nullptr, _4307_indexes ? _4307_indexes->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
// End mosek.fusion.ParameterImpl.pick

// Begin mosek.fusion.ParameterImpl.index
// Method mosek.fusion.ParameterImpl.index @ src/fusion/Parameter.monty:363:6-389:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4308_indexes) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4308_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4308_indexes) { return __mosek_2fusion_2ParameterImpl__index(_4308_indexes); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4308_indexes) { return __mosek_2fusion_2ParameterImpl__index(_4308_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _4308_indexes)
{
  _checked_ptr_1<int32_t> _ptr__4308_indexes(_4308_indexes ? _4308_indexes->raw() : nullptr, _4308_indexes ? _4308_indexes->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)((_4308_indexes)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else
  {
    {
      int32_t _10910_ = (int)0;
      int32_t _10911_ = (int)((_4308_indexes)->size(0));
      for (int32_t _4309_i = _10910_; _4309_i < _10911_; ++_4309_i)
      {
        {
          if (((_ptr__4308_indexes[_4309_i] < (int)0) || (_ptr__4308_indexes[_4309_i] >= ((*shape)(_4309_i)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
            }
          }
          {}
        }
      }
    }
  }
  if ((NULL == sp.get()))
  {
    {
      int32_t _4310_nd = (int)((_4308_indexes)->size(0));
      int64_t _4311_ix = _ptr__4308_indexes[(_4310_nd - (int)1)];
      int32_t _10912_ = (int)1;
      int32_t _10913_ = _4310_nd;
      for (int32_t _4312_i = _10912_; _4312_i < _10913_; ++_4312_i)
      {
        {
          _4311_ix = safe_add( safe_mul( _4311_ix,((*shape)((_4310_nd - _4312_i))) ),_ptr__4308_indexes[((_4310_nd - _4312_i) - (int)1)] );
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4311_ix)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _4313_nd = (int)((_4308_indexes)->size(0));
      int64_t _4314_ix = _ptr__4308_indexes[(_4313_nd - (int)1)];
      int32_t _10914_ = (int)1;
      int32_t _10915_ = _4313_nd;
      for (int32_t _4315_i = _10914_; _4315_i < _10915_; ++_4315_i)
      {
        {
          _4314_ix = safe_add( safe_mul( _4314_ix,((*shape)((_4313_nd - _4315_i))) ),_ptr__4308_indexes[((_4313_nd - _4315_i) - (int)1)] );
        }
      }
      int32_t _4316_j = (int)0;
      while ( ((_4316_j < (int)((sp)->size(0))) && (((*sp)(_4316_j)) < _4314_ix)) )
      {
        {
          ++ _4316_j;
        }
      }
      if (((_4316_j < (int)((sp)->size(0))) && (((*sp)(_4316_j)) == _4314_ix)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4316_j)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.index

// Begin mosek.fusion.ParameterImpl.index
// Method mosek.fusion.ParameterImpl.index @ src/fusion/Parameter.monty:345:6-361:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(int32_t _4317_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4317_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(int32_t _4317_i) { return __mosek_2fusion_2ParameterImpl__index(_4317_i); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(int32_t _4317_i) { return __mosek_2fusion_2ParameterImpl__index(_4317_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(int32_t _4317_i)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else if(((_4317_i < (int)0) || (_4317_i >= ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4317_i)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _4318_j = (int)0;
      while ( ((_4318_j < (int)((sp)->size(0))) && (((*sp)(_4318_j)) < _4317_i)) )
      {
        {
          ++ _4318_j;
        }
      }
      if (((_4318_j < (int)((sp)->size(0))) && (((*sp)(_4318_j)) == _4317_i)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((*nidxs)(_4318_j)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.index

// Begin mosek.fusion.ParameterImpl.eval
// Method mosek.fusion.ParameterImpl.eval @ src/fusion/Parameter.monty:304:6-342:7
void mosek::fusion::ParameterImpl :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4319_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4320_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4321_xs) { mosek::fusion::p_ParameterImpl::_get_impl(this)->eval(_4319_rs,_4320_ws,_4321_xs); }
void mosek::fusion::p_ParameterImpl::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4319_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4320_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4321_xs)
{
  int32_t _4322_nd = (int)((shape)->size(0));
  int32_t _4323_nelem = (int)((nidxs)->size(0));
  bool _4324_hassp = (NULL != sp.get());
  _4319_rs->alloc_expr(_4322_nd,_4323_nelem,(int)((nidxs)->size(0)),_4324_hassp,(int)((nidxs)->size(0)));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4325_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4325_ri32(_4325_ri32 ? _4325_ri32->raw() : nullptr,_4325_ri32 ? _4325_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4326_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4326_ri64(_4326_ri64 ? _4326_ri64->raw() : nullptr,_4326_ri64 ? _4326_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4327_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->f64;
  _checked_ptr_1<double> _ptr__4327_rf64(_4327_rf64 ? _4327_rf64->raw() : nullptr,_4327_rf64 ? _4327_rf64->size(0) : 0);
  int32_t _4328_rptr = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->ptr_base;
  int32_t _4329_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->nidxs_base;
  int32_t _4330_rcof = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->cof_base;
  int32_t _4331_rshape = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->shape_base;
  int32_t _4332_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->codeptr_base;
  int32_t _4333_rcode = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->code_base;
  int32_t _4334_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->cconst_base;
  int32_t _4335_rsp = mosek::fusion::p_WorkStack::_get_impl(_4319_rs)->sp_base;
  {
    _ptr__4325_ri32[_4328_rptr] = (int)0;
    int32_t _10916_ = (int)0;
    int32_t _10917_ = _4322_nd;
    for (int32_t _4336_i = _10916_; _4336_i < _10917_; ++_4336_i)
    {
      {
        _ptr__4325_ri32[safe_add( _4331_rshape,_4336_i )] = ((*shape)(_4336_i));
      }
    }
    int32_t _10918_ = (int)0;
    int32_t _10919_ = _4323_nelem;
    for (int32_t _4337_i = _10918_; _4337_i < _10919_; ++_4337_i)
    {
      {
        _ptr__4326_ri64[safe_add( _4329_rnidxs,_4337_i )] = (int)0;
      }
    }
    int32_t _10920_ = (int)0;
    int32_t _10921_ = _4323_nelem;
    for (int32_t _4338_i = _10920_; _4338_i < _10921_; ++_4338_i)
    {
      {
        _ptr__4327_rf64[safe_add( _4330_rcof,_4338_i )] = 0.0;
      }
    }
    int32_t _10922_ = (int)0;
    int32_t _10923_ = safe_add( _4323_nelem,(int)1 );
    for (int32_t _4339_i = _10922_; _4339_i < _10923_; ++_4339_i)
    {
      {
        _ptr__4325_ri32[safe_add( _4328_rptr,_4339_i )] = _4339_i;
      }
    }
    if ((_4323_nelem > (int)0))
    {
      {
        int32_t _10924_ = (int)0;
        int32_t _10925_ = safe_add( _4323_nelem,(int)1 );
        for (int32_t _4340_i = _10924_; _4340_i < _10925_; ++_4340_i)
        {
          {
            _ptr__4325_ri32[safe_add( _4332_rcodeptr,_4340_i )] = _4340_i;
          }
        }
      }
    }
    {}
    if (_4324_hassp)
    {
      {
        int32_t _10926_ = (int)0;
        int32_t _10927_ = _4323_nelem;
        for (int32_t _4341_i = _10926_; _4341_i < _10927_; ++_4341_i)
        {
          {
            _ptr__4326_ri64[safe_add( _4335_rsp,_4341_i )] = ((*sp)(_4341_i));
          }
        }
      }
    }
    {}
    int32_t _10928_ = (int)0;
    int32_t _10929_ = _4323_nelem;
    for (int32_t _4342_i = _10928_; _4342_i < _10929_; ++_4342_i)
    {
      {
        _ptr__4325_ri32[safe_add( _4333_rcode,_4342_i )] = (int)1;
        _ptr__4327_rf64[safe_add( _4334_rcconst,_4342_i )] = ((*nidxs)(_4342_i));
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.eval

// Begin mosek.fusion.ParameterImpl.getSp
// Method mosek.fusion.ParameterImpl.getSp @ src/fusion/Parameter.monty:294:6-301:7
void mosek::fusion::ParameterImpl :: getSp(std::shared_ptr< monty::ndarray< int64_t,1 > > _4343_dest,int32_t _4344_offset) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getSp(_4343_dest,_4344_offset); }
void mosek::fusion::p_ParameterImpl::getSp(std::shared_ptr< monty::ndarray< int64_t,1 > > _4343_dest,int32_t _4344_offset)
{
  _checked_ptr_1<int64_t> _ptr__4343_dest(_4343_dest ? _4343_dest->raw() : nullptr, _4343_dest ? _4343_dest->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      int32_t _10930_ = (int)0;
      int32_t _10931_ = (int)((sp)->size(0));
      for (int32_t _4345_i = _10930_; _4345_i < _10931_; ++_4345_i)
      {
        {
          _ptr__4343_dest[safe_add( _4345_i,_4344_offset )] = ((*sp)(_4345_i));
        }
      }
    }
  }
  else
  {
    {
      int32_t _10932_ = (int)0;
      int32_t _10933_ = (int)((nidxs)->size(0));
      for (int32_t _4346_i = _10932_; _4346_i < _10933_; ++_4346_i)
      {
        {
          _ptr__4343_dest[safe_add( _4346_i,_4344_offset )] = _4346_i;
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.getSp

// Begin mosek.fusion.ParameterImpl.isSparse
// Method mosek.fusion.ParameterImpl.isSparse @ src/fusion/Parameter.monty:292:6-58
bool mosek::fusion::ParameterImpl :: isSparse() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_ParameterImpl::isSparse()
{
  return (NULL != sp.get());
}
// End mosek.fusion.ParameterImpl.isSparse

// Begin mosek.fusion.ParameterImpl.slice
// Method mosek.fusion.ParameterImpl.slice @ src/fusion/Parameter.monty:234:6-290:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4347_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4348_astop) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4347_astart,_4348_astop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4347_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4348_astop) { return __mosek_2fusion_2ParameterImpl__slice(_4347_astart,_4348_astop); }
/* override: mosek.fusion.Parameter.slice*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4347_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4348_astop) { return __mosek_2fusion_2ParameterImpl__slice(_4347_astart,_4348_astop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4347_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4348_astop)
{
  _checked_ptr_1<int32_t> _ptr__4347_astart(_4347_astart ? _4347_astart->raw() : nullptr, _4347_astart ? _4347_astart->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4348_astop(_4348_astop ? _4348_astop->raw() : nullptr, _4348_astop ? _4348_astop->size(0) : 0);
  if ((((int)((_4347_astart)->size(0)) != (int)((_4348_astop)->size(0))) || ((int)((_4347_astart)->size(0)) != (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int32_t _4349_nd = (int)((_4347_astart)->size(0));
  int32_t _10934_ = (int)0;
  int32_t _10935_ = _4349_nd;
  for (int32_t _4350_i = _10934_; _4350_i < _10935_; ++_4350_i)
  {
    {
      if (((_ptr__4347_astart[_4350_i] < (int)0) || ((_ptr__4347_astart[_4350_i] >= _ptr__4348_astop[_4350_i]) || (_ptr__4348_astop[_4350_i] > ((*shape)(_4350_i))))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4351_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4349_nd)));
  _checked_ptr_1<int64_t> _ptr__4351_stride(_4351_stride ? _4351_stride->raw() : nullptr,_4351_stride ? _4351_stride->size(0) : 0);
  _ptr__4351_stride[(_4349_nd - (int)1)] = (int)1;
  int32_t _10936_ = (int)1;
  int32_t _10937_ = _4349_nd;
  for (int32_t _4352_i = _10936_; _4352_i < _10937_; ++_4352_i)
  {
    {
      _ptr__4351_stride[((_4349_nd - _4352_i) - (int)1)] = safe_mul( _ptr__4351_stride[(_4349_nd - _4352_i)],((*shape)(_4352_i)) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4353_index = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4349_nd)));
  _checked_ptr_1<int32_t> _ptr__4353_index(_4353_index ? _4353_index->raw() : nullptr,_4353_index ? _4353_index->size(0) : 0);
  std::vector<int32_t> _10938_;
  for (int32_t _4355_i = (int)0, _10939_ = _4349_nd; _4355_i < _10939_ ; ++_4355_i)
  {
    _10938_.push_back((_ptr__4348_astop[_4355_i] - _ptr__4347_astart[_4355_i]));
  }
  auto _10940_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10938_.size()),_10938_.begin(),_10938_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4354_rshape = _10940_;
  _checked_ptr_1<int32_t> _ptr__4354_rshape(_4354_rshape ? _4354_rshape->raw() : nullptr,_4354_rshape ? _4354_rshape->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      int32_t _4356_count = (int)1;
      int32_t _10941_ = (int)0;
      int32_t _10942_ = _4349_nd;
      for (int32_t _4357_i = _10941_; _4357_i < _10942_; ++_4357_i)
      {
        {
          _4356_count *= _ptr__4354_rshape[_4357_i];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4358_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4356_count)));
      _checked_ptr_1<int32_t> _ptr__4358_rnidxs(_4358_rnidxs ? _4358_rnidxs->raw() : nullptr,_4358_rnidxs ? _4358_rnidxs->size(0) : 0);
      int32_t _4359_k = (int)0;
      int32_t _10943_ = (int)0;
      int32_t _10944_ = (int)((nidxs)->size(0));
      for (int32_t _4360_i = _10943_; _4360_i < _10944_; ++_4360_i)
      {
        {
          int32_t _10945_ = (int)0;
          int32_t _10946_ = _4349_nd;
          for (int32_t _4361_j = _10945_; _4361_j < _10946_; ++_4361_j)
          {
            {
              _ptr__4353_index[_4361_j] = (int32_t)((_4360_i / _ptr__4351_stride[_4361_j]) % ((*shape)(_4361_j)));
            }
          }
          bool _4362_inslice = true;
          int32_t _10947_ = (int)0;
          int32_t _10948_ = _4349_nd;
          for (int32_t _4363_j = _10947_; _4363_j < _10948_; ++_4363_j)
          {
            {
              _4362_inslice = (_4362_inslice && ((_ptr__4347_astart[_4363_j] <= _ptr__4353_index[_4363_j]) && (_ptr__4353_index[_4363_j] < _ptr__4348_astop[_4363_j])));
            }
          }
          if (_4362_inslice)
          {
            {
              _ptr__4358_rnidxs[_4359_k] = ((*nidxs)(_4360_i));
              ++ _4359_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4354_rshape,nullptr,_4358_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int32_t _4364_count = (int)0;
      int32_t _10949_ = (int)0;
      int32_t _10950_ = (int)((nidxs)->size(0));
      for (int32_t _4365_i = _10949_; _4365_i < _10950_; ++_4365_i)
      {
        {
          int32_t _10951_ = (int)0;
          int32_t _10952_ = _4349_nd;
          for (int32_t _4366_j = _10951_; _4366_j < _10952_; ++_4366_j)
          {
            {
              _ptr__4353_index[_4366_j] = (int32_t)((((*sp)(_4365_i)) / _ptr__4351_stride[_4366_j]) % ((*shape)(_4366_j)));
            }
          }
          bool _4367_inslice = true;
          int32_t _10953_ = (int)0;
          int32_t _10954_ = _4349_nd;
          for (int32_t _4368_j = _10953_; _4368_j < _10954_; ++_4368_j)
          {
            {
              _4367_inslice = (_4367_inslice && ((_ptr__4347_astart[_4368_j] <= _ptr__4353_index[_4368_j]) && (_ptr__4353_index[_4368_j] < _ptr__4348_astop[_4368_j])));
            }
          }
          if (_4367_inslice)
          {
            {
              ++ _4364_count;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4369_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4364_count)));
      _checked_ptr_1<int32_t> _ptr__4369_rnidxs(_4369_rnidxs ? _4369_rnidxs->raw() : nullptr,_4369_rnidxs ? _4369_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4370_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4364_count)));
      _checked_ptr_1<int64_t> _ptr__4370_rsp(_4370_rsp ? _4370_rsp->raw() : nullptr,_4370_rsp ? _4370_rsp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4371_rstride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4349_nd)));
      _checked_ptr_1<int64_t> _ptr__4371_rstride(_4371_rstride ? _4371_rstride->raw() : nullptr,_4371_rstride ? _4371_rstride->size(0) : 0);
      _ptr__4371_rstride[(_4349_nd - (int)1)] = (int)1;
      int32_t _10955_ = (int)1;
      int32_t _10956_ = _4349_nd;
      for (int32_t _4372_i = _10955_; _4372_i < _10956_; ++_4372_i)
      {
        {
          _ptr__4371_rstride[((_4349_nd - _4372_i) - (int)1)] = safe_mul( _ptr__4371_rstride[(_4349_nd - _4372_i)],_ptr__4354_rshape[_4372_i] );
        }
      }
      int32_t _4373_k = (int)0;
      int32_t _10957_ = (int)0;
      int32_t _10958_ = (int)((nidxs)->size(0));
      for (int32_t _4374_i = _10957_; _4374_i < _10958_; ++_4374_i)
      {
        {
          int32_t _10959_ = (int)0;
          int32_t _10960_ = _4349_nd;
          for (int32_t _4375_j = _10959_; _4375_j < _10960_; ++_4375_j)
          {
            {
              _ptr__4353_index[_4374_i] = (int32_t)((((*sp)(_4374_i)) / _ptr__4351_stride[_4375_j]) % ((*shape)(_4375_j)));
            }
          }
          bool _4376_inslice = true;
          int32_t _10961_ = (int)0;
          int32_t _10962_ = _4349_nd;
          for (int32_t _4377_j = _10961_; _4377_j < _10962_; ++_4377_j)
          {
            {
              _4376_inslice = (_4376_inslice && ((_ptr__4347_astart[_4377_j] <= _ptr__4353_index[_4377_j]) && (_ptr__4353_index[_4377_j] < _ptr__4348_astop[_4377_j])));
            }
          }
          if (_4376_inslice)
          {
            {
              int64_t _4378_ri = (int64_t)0;
              int32_t _10963_ = (int)0;
              int32_t _10964_ = _4349_nd;
              for (int32_t _4379_j = _10963_; _4379_j < _10964_; ++_4379_j)
              {
                {
                  _4378_ri += safe_mul( (_ptr__4353_index[_4379_j] - _ptr__4347_astart[_4379_j]),_ptr__4371_rstride[_4379_j] );
                }
              }
              _ptr__4370_rsp[_4373_k] = _4378_ri;
              _ptr__4369_rnidxs[_4373_k] = ((*nidxs)(_4374_i));
              ++ _4373_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4354_rshape,_4370_rsp,_4369_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
}
// End mosek.fusion.ParameterImpl.slice

// Begin mosek.fusion.ParameterImpl.slice
// Method mosek.fusion.ParameterImpl.slice @ src/fusion/Parameter.monty:207:6-232:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(int32_t _4380_start,int32_t _4381_stop) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4380_start,_4381_stop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(int32_t _4380_start,int32_t _4381_stop) { return __mosek_2fusion_2ParameterImpl__slice(_4380_start,_4381_stop); }
/* override: mosek.fusion.Parameter.slice*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(int32_t _4380_start,int32_t _4381_stop) { return __mosek_2fusion_2ParameterImpl__slice(_4380_start,_4381_stop); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(int32_t _4380_start,int32_t _4381_stop)
{
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  if (((_4380_start < (int)0) || ((_4381_stop >= _4381_stop) || (_4381_stop > size))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<int32_t> _10965_;
      for (int32_t _4382_i = _4380_start, _10966_ = _4381_stop; _4382_i < _10966_ ; ++_4382_i)
      {
        _10965_.push_back(((*nidxs)(_4382_i)));
      }
      auto _10967_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10965_.size()),_10965_.begin(),_10965_.end()));
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((_4381_stop - _4380_start))}),nullptr,_10967_)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int32_t _4383_count = (int)0;
      int32_t _10968_ = (int)0;
      int32_t _10969_ = (int)((sp)->size(0));
      for (int32_t _4384_i = _10968_; _4384_i < _10969_; ++_4384_i)
      {
        {
          if (((_4380_start <= ((*sp)(_4384_i))) && (((*sp)(_4384_i)) < _4381_stop)))
          {
            {
              ++ _4383_count;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4385_rnidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4383_count)));
      _checked_ptr_1<int32_t> _ptr__4385_rnidxs(_4385_rnidxs ? _4385_rnidxs->raw() : nullptr,_4385_rnidxs ? _4385_rnidxs->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4386_rsp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4383_count)));
      _checked_ptr_1<int64_t> _ptr__4386_rsp(_4386_rsp ? _4386_rsp->raw() : nullptr,_4386_rsp ? _4386_rsp->size(0) : 0);
      int32_t _4387_k = (int)0;
      int32_t _10970_ = (int)0;
      int32_t _10971_ = (int)((sp)->size(0));
      for (int32_t _4388_i = _10970_; _4388_i < _10971_; ++_4388_i)
      {
        {
          if (((_4380_start <= ((*sp)(_4388_i))) && (((*sp)(_4388_i)) < _4381_stop)))
          {
            {
              _ptr__4385_rnidxs[_4387_k] = ((*nidxs)(_4388_i));
              _ptr__4386_rsp[_4387_k] = (((*sp)(_4387_k)) - _4380_start);
              ++ _4387_k;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)0),(int32_t)((_4381_stop - _4380_start))}),_4386_rsp,_4385_rnidxs)).as<::mosek::fusion::Parameter>();
    }
  }
}
// End mosek.fusion.ParameterImpl.slice

// Begin mosek.fusion.ParameterImpl.reshape
// Method mosek.fusion.ParameterImpl.reshape @ src/fusion/Parameter.monty:201:6-205:7
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4389_dims) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__reshape(_4389_dims); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4389_dims) { return __mosek_2fusion_2ParameterImpl__reshape(_4389_dims); }
/* override: mosek.fusion.Parameter.reshape*/
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4389_dims) { return __mosek_2fusion_2ParameterImpl__reshape(_4389_dims); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4389_dims)
{
  _checked_ptr_1<int32_t> _ptr__4389_dims(_4389_dims ? _4389_dims->raw() : nullptr, _4389_dims ? _4389_dims->size(0) : 0);
  if ((::mosek::fusion::p_Set::size(_4389_dims) != ::mosek::fusion::p_Set::size(shape)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incompatible shape for resize"));
    }
  }
  {}
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4389_dims,sp,nidxs)).as<::mosek::fusion::Parameter>();
}
// End mosek.fusion.ParameterImpl.reshape

// Begin mosek.fusion.ParameterImpl.asExpr
// Method mosek.fusion.ParameterImpl.asExpr @ src/fusion/Parameter.monty:199:6-75
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__asExpr() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
/* override: mosek.fusion.Parameter.asExpr*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__asExpr()
{
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter((::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.ParameterImpl.asExpr

// Begin mosek.fusion.ParameterImpl.getSize
// Method mosek.fusion.ParameterImpl.getSize @ src/fusion/Parameter.monty:197:6-69
int64_t mosek::fusion::ParameterImpl :: getSize() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_ParameterImpl::getSize()
{
  return ::mosek::fusion::p_Set::size(shape);
}
// End mosek.fusion.ParameterImpl.getSize

// Begin mosek.fusion.ParameterImpl.getNumNonzero
// Method mosek.fusion.ParameterImpl.getNumNonzero @ src/fusion/Parameter.monty:196:6-64
int32_t mosek::fusion::ParameterImpl :: getNumNonzero() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getNumNonzero(); }
int32_t mosek::fusion::p_ParameterImpl::getNumNonzero()
{
  return (int)((nidxs)->size(0));
}
// End mosek.fusion.ParameterImpl.getNumNonzero

// Begin mosek.fusion.ParameterImpl.getND
// Method mosek.fusion.ParameterImpl.getND @ src/fusion/Parameter.monty:195:6-64
int32_t mosek::fusion::ParameterImpl :: getND() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_ParameterImpl::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.ParameterImpl.getND

// Begin mosek.fusion.ParameterImpl.getShape
// Method mosek.fusion.ParameterImpl.getShape @ src/fusion/Parameter.monty:194:6-82
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::ParameterImpl :: getShape() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ParameterImpl::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.ParameterImpl.getShape

// Begin mosek.fusion.ParameterImpl.getDim
// Method mosek.fusion.ParameterImpl.getDim @ src/fusion/Parameter.monty:193:6-69
int32_t mosek::fusion::ParameterImpl :: getDim(int32_t _4390_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getDim(_4390_i); }
int32_t mosek::fusion::p_ParameterImpl::getDim(int32_t _4390_i)
{
  return ((*shape)(_4390_i));
}
// End mosek.fusion.ParameterImpl.getDim

// Begin mosek.fusion.ParameterImpl.getAllIndexes
// Method mosek.fusion.ParameterImpl.getAllIndexes @ src/fusion/Parameter.monty:188:6-191:7
void mosek::fusion::ParameterImpl :: getAllIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _4391_dst,int32_t _4392_ofs) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getAllIndexes(_4391_dst,_4392_ofs); }
void mosek::fusion::p_ParameterImpl::getAllIndexes(std::shared_ptr< monty::ndarray< int32_t,1 > > _4391_dst,int32_t _4392_ofs)
{
  _checked_ptr_1<int32_t> _ptr__4391_dst(_4391_dst ? _4391_dst->raw() : nullptr, _4391_dst ? _4391_dst->size(0) : 0);
  int32_t _10972_ = (int)0;
  int32_t _10973_ = (int)((nidxs)->size(0));
  for (int32_t _4393_i = _10972_; _4393_i < _10973_; ++_4393_i)
  {
    {
      _ptr__4391_dst[safe_add( _4392_ofs,_4393_i )] = ((*nidxs)(_4393_i));
    }
  }
}
// End mosek.fusion.ParameterImpl.getAllIndexes

// Begin mosek.fusion.ParameterImpl.getIndex
// Method mosek.fusion.ParameterImpl.getIndex @ src/fusion/Parameter.monty:185:6-187:7
int32_t mosek::fusion::ParameterImpl :: getIndex(int32_t _4394_i) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getIndex(_4394_i); }
int32_t mosek::fusion::p_ParameterImpl::getIndex(int32_t _4394_i)
{
  return ((*nidxs)(_4394_i));
}
// End mosek.fusion.ParameterImpl.getIndex

// Begin mosek.fusion.ParameterImpl.getValue
// Method mosek.fusion.ParameterImpl.getValue @ src/fusion/Parameter.monty:180:6-182:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ParameterImpl :: getValue() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getValue(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_ParameterImpl::getValue()
{
  return mosek::fusion::p_Model::_get_impl(model.get())->getParameterValue(nidxs);
}
// End mosek.fusion.ParameterImpl.getValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ src/fusion/Parameter.monty:158:6-176:7
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,2 > > _4395_values2) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4395_values2); }
void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,2 > > _4395_values2)
{
  if (((_pubthis->getND() != (int)2) || (((int)((_4395_values2)->size(0)) != ((*shape)((int)0))) || ((int)((_4395_values2)->size(1)) != ((*shape)((int)1))))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching value shape"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4396_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( ((*shape)((int)0)),((*shape)((int)1)) ))));
      _checked_ptr_1<double> _ptr__4396_vals(_4396_vals ? _4396_vals->raw() : nullptr,_4396_vals ? _4396_vals->size(0) : 0);
      int32_t _10974_ = (int)0;
      int32_t _10975_ = ((*shape)((int)0));
      for (int32_t _4397_i = _10974_; _4397_i < _10975_; ++_4397_i)
      {
        {
          int32_t _10976_ = (int)0;
          int32_t _10977_ = ((*shape)((int)1));
          for (int32_t _4398_j = _10976_; _4398_j < _10977_; ++_4398_j)
          {
            {
              _ptr__4396_vals[safe_add( safe_mul( _4397_i,((*shape)((int)1)) ),_4398_j )] = ((*_4395_values2)(_4397_i,_4398_j));
            }
          }
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4396_vals);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _4399_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((sp)->size(0)))));
      _checked_ptr_1<double> _ptr__4399_vals(_4399_vals ? _4399_vals->raw() : nullptr,_4399_vals ? _4399_vals->size(0) : 0);
      int32_t _10978_ = (int)0;
      int32_t _10979_ = (int)((sp)->size(0));
      for (int32_t _4400_i = _10978_; _4400_i < _10979_; ++_4400_i)
      {
        {
          _ptr__4399_vals[_4400_i] = ((*_4395_values2)((((*sp)(_4400_i)) / ((*shape)((int)1))),(((*sp)(_4400_i)) % ((*shape)((int)1)))));
        }
      }
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4399_vals);
    }
  }
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ src/fusion/Parameter.monty:139:6-156:7
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,1 > > _4401_values) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4401_values); }
void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,1 > > _4401_values)
{
  _checked_ptr_1<double> _ptr__4401_values(_4401_values ? _4401_values->raw() : nullptr, _4401_values ? _4401_values->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      if (((int)((_4401_values)->size(0)) != (int)((nidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4401_values);
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_4401_values)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _4402_cvals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nidxs)->size(0)))));
          _checked_ptr_1<double> _ptr__4402_cvals(_4402_cvals ? _4402_cvals->raw() : nullptr,_4402_cvals ? _4402_cvals->size(0) : 0);
          int32_t _10980_ = (int)0;
          int32_t _10981_ = (int)((nidxs)->size(0));
          for (int32_t _4403_i = _10980_; _4403_i < _10981_; ++_4403_i)
          {
            {
              _ptr__4402_cvals[_4403_i] = _ptr__4401_values[((*sp)(_4403_i))];
            }
          }
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4402_cvals);
        }
      }
    }
  }
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.setValue
// Method mosek.fusion.ParameterImpl.setValue @ src/fusion/Parameter.monty:132:6-137:7
void mosek::fusion::ParameterImpl :: setValue(double _4404_value) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4404_value); }
void mosek::fusion::p_ParameterImpl::setValue(double _4404_value)
{
  std::shared_ptr< monty::ndarray< double,1 > > _4405_vals = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(size)));
  _checked_ptr_1<double> _ptr__4405_vals(_4405_vals ? _4405_vals->raw() : nullptr,_4405_vals ? _4405_vals->size(0) : 0);
  int32_t _10982_ = (int)0;
  int64_t _10983_ = size;
  for (int64_t _4406_i = _10982_; _4406_i < _10983_; ++_4406_i)
  {
    {
      _ptr__4405_vals[_4406_i] = _4404_value;
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4405_vals);
}
// End mosek.fusion.ParameterImpl.setValue

// Begin mosek.fusion.ParameterImpl.getModel
// Method mosek.fusion.ParameterImpl.getModel @ src/fusion/Parameter.monty:131:6-54
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__getModel() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
/* override: mosek.fusion.Parameter.getModel*/
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__getModel()
{
  return model;
}
// End mosek.fusion.ParameterImpl.getModel

void mosek::fusion::p_ParameterImpl::destroy()
{
  nidxs.reset();
  sp.reset();
  shape.reset();
  model.reset();
}
void mosek::fusion::ParameterImpl::destroy() { mosek::fusion::p_ParameterImpl::_get_impl(this)->destroy(); }
// } class ParameterImpl
// class Parameter { // @ src/fusion/Parameter.monty:71:4-102:5
// Begin mosek.fusion.Parameter.clone
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::clone(monty::rc_ptr< ::mosek::fusion::Model > _4407_m) { return __mosek_2fusion_2Parameter__clone(_4407_m); }
// End mosek.fusion.Parameter.clone

// Begin mosek.fusion.Parameter.getModel
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Parameter::getModel() { return __mosek_2fusion_2Parameter__getModel(); }
// End mosek.fusion.Parameter.getModel

// Begin mosek.fusion.Parameter.getSize
// End mosek.fusion.Parameter.getSize

// Begin mosek.fusion.Parameter.getAllIndexes
// End mosek.fusion.Parameter.getAllIndexes

// Begin mosek.fusion.Parameter.getIndex
// End mosek.fusion.Parameter.getIndex

// Begin mosek.fusion.Parameter.getSp
// End mosek.fusion.Parameter.getSp

// Begin mosek.fusion.Parameter.getShape
// End mosek.fusion.Parameter.getShape

// Begin mosek.fusion.Parameter.getND
// End mosek.fusion.Parameter.getND

// Begin mosek.fusion.Parameter.getDim
// End mosek.fusion.Parameter.getDim

// Begin mosek.fusion.Parameter.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4414_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4415_astop) { return __mosek_2fusion_2Parameter__slice(_4414_astart,_4415_astop); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _4414_astart,std::shared_ptr< monty::ndarray< int32_t,1 > > _4415_astop) { return __mosek_2fusion_2Parameter__slice(_4414_astart,_4415_astop); }
// End mosek.fusion.Parameter.slice

// Begin mosek.fusion.Parameter.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(int32_t _4416_start,int32_t _4417_stop) { return __mosek_2fusion_2Parameter__slice(_4416_start,_4417_stop); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(int32_t _4416_start,int32_t _4417_stop) { return __mosek_2fusion_2Parameter__slice(_4416_start,_4417_stop); }
// End mosek.fusion.Parameter.slice

// Begin mosek.fusion.Parameter.isSparse
// End mosek.fusion.Parameter.isSparse

// Begin mosek.fusion.Parameter.reshape
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::reshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4418_dims) { return __mosek_2fusion_2Parameter__reshape(_4418_dims); }
// End mosek.fusion.Parameter.reshape

// Begin mosek.fusion.Parameter.getNumNonzero
// End mosek.fusion.Parameter.getNumNonzero

// Begin mosek.fusion.Parameter.asExpr
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::asExpr() { return __mosek_2fusion_2Parameter__asExpr(); }
// End mosek.fusion.Parameter.asExpr

// Begin mosek.fusion.Parameter.getValue
// End mosek.fusion.Parameter.getValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// Begin mosek.fusion.Parameter.setValue
// End mosek.fusion.Parameter.setValue

// } class Parameter
// class ExprOptimizeCode { // @ src/fusion/ExprCompress.monty:514:4-1215:5
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode(mosek::fusion::p_ExprOptimizeCode *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprOptimizeCode()" << this << std::endl; */ }
mosek::fusion::ExprOptimizeCode::~ExprOptimizeCode() {  /* std::cout << "~ExprOptimizeCode()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprOptimizeCode::p_ExprOptimizeCode
  (::mosek::fusion::ExprOptimizeCode * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprOptimizeCode.ctor @ src/fusion/ExprCompress.monty:516:6-519:7
mosek::fusion::ExprOptimizeCode::t mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode
  (monty::rc_ptr< ::mosek::fusion::Expression > _4422_expr)
{ return new mosek::fusion::ExprOptimizeCode(_4422_expr); }
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode
  (monty::rc_ptr< ::mosek::fusion::Expression > _4422_expr) : 
   ExprOptimizeCode(new mosek::fusion::p_ExprOptimizeCode(this))
{ mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->_initialize(_4422_expr); }
void mosek::fusion::p_ExprOptimizeCode::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4422_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4422_expr->getShape());
    mosek::fusion::p_ExprOptimizeCode::_get_impl(::mosek::fusion::ExprOptimizeCode::t(_pubthis))->expr = _4422_expr;
  }
}
// mosek.fusion.ExprOptimizeCode.ctor

// Begin mosek.fusion.ExprOptimizeCode.compress_code
// Method mosek.fusion.ExprOptimizeCode.compress_code @ src/fusion/ExprCompress.monty:772:6-1214:7
void mosek::fusion::p_ExprOptimizeCode::compress_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _4423_xs,int32_t _4424_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _4425_code,int32_t _4426_code_base,std::shared_ptr< monty::ndarray< int32_t,1 > > _4427_ptr,int32_t _4428_ptr_base,std::shared_ptr< monty::ndarray< double,1 > > _4429_fixterm,int32_t _4430_fixterm_base,std::shared_ptr< monty::ndarray< double,1 > > _4431_code_consts,int32_t _4432_code_consts_base,int32_t _4433_target_code_base,int32_t _4434_target_const_base,int32_t _4435_target_ptr_base)
{
  _checked_ptr_1<int32_t> _ptr__4425_code(_4425_code ? _4425_code->raw() : nullptr, _4425_code ? _4425_code->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4427_ptr(_4427_ptr ? _4427_ptr->raw() : nullptr, _4427_ptr ? _4427_ptr->size(0) : 0);
  _checked_ptr_1<double> _ptr__4429_fixterm(_4429_fixterm ? _4429_fixterm->raw() : nullptr, _4429_fixterm ? _4429_fixterm->size(0) : 0);
  _checked_ptr_1<double> _ptr__4431_code_consts(_4431_code_consts ? _4431_code_consts->raw() : nullptr, _4431_code_consts ? _4431_code_consts->size(0) : 0);
  int32_t _4436_ncodeatoms = _ptr__4427_ptr[safe_add( _4428_ptr_base,_4424_n )];
  int32_t _4437_stack = _4423_xs->alloci32(safe_add( _4436_ncodeatoms,(int)2 ));
  int32_t _4438_stackp = (int)0;
  int32_t _4439_chld = _4423_xs->alloci32(safe_add( _4436_ncodeatoms,(int)2 ));
  int32_t _4440_chld_ptr = _4423_xs->alloci32(safe_add( _4436_ncodeatoms,(int)3 ));
  int32_t _4441_tcconst = _4423_xs->allocf64(safe_add( _4436_ncodeatoms,(int)2 ));
  int32_t _4442_tcode = _4423_xs->alloci32(safe_add( _4436_ncodeatoms,(int)2 ));
  int32_t _4443_tcodep = (int)0;
  int32_t _4444_error_at = (-(int)1);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4445_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4445_xi32(_4445_xi32 ? _4445_xi32->raw() : nullptr,_4445_xi32 ? _4445_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4446_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->f64;
  _checked_ptr_1<double> _ptr__4446_xf64(_4446_xf64 ? _4446_xf64->raw() : nullptr,_4446_xf64 ? _4446_xf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4447_target_code = _4445_xi32;
  _checked_ptr_1<int32_t> _ptr__4447_target_code(_4447_target_code ? _4447_target_code->raw() : nullptr,_4447_target_code ? _4447_target_code->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4448_target_const = _4446_xf64;
  _checked_ptr_1<double> _ptr__4448_target_const(_4448_target_const ? _4448_target_const->raw() : nullptr,_4448_target_const ? _4448_target_const->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4449_target_ptr = _4445_xi32;
  _checked_ptr_1<int32_t> _ptr__4449_target_ptr(_4449_target_ptr ? _4449_target_ptr->raw() : nullptr,_4449_target_ptr ? _4449_target_ptr->size(0) : 0);
  int32_t _4450_xpi32 = mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->pi32;
  int32_t _4451_xpi64 = mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->pi64;
  int32_t _4452_xpf64 = mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->pf64;
  _ptr__4449_target_ptr[_4435_target_ptr_base] = (int)0;
  int32_t _4453_codei = (int)0;
  int32_t _10984_ = (int)0;
  int32_t _10985_ = _4424_n;
  for (int32_t _4454_i = _10984_; _4454_i < _10985_; ++_4454_i)
  {
    {
      int32_t _4455_e = _ptr__4427_ptr[safe_add( safe_add( _4428_ptr_base,_4454_i ),(int)1 )];
      int32_t _4456_b = _ptr__4427_ptr[safe_add( _4428_ptr_base,_4454_i )];
      if ((_4444_error_at < (int)0))
      {
        {
          _4438_stackp = (int)0;
          _4443_tcodep = (int)0;
          _ptr__4445_xi32[_4440_chld_ptr] = (int)0;
          int32_t _10986_ = (int)0;
          int32_t _10987_ = (_4455_e - _4456_b);
          for (int32_t _4457_j = _10986_; _4457_j < _10987_; ++_4457_j)
          {
            {
              _ptr__4447_target_code[safe_add( _4442_tcode,_4457_j )] = (-(int)9999);
            }
          }
          int32_t _10988_ = _4456_b;
          int32_t _10989_ = _4455_e;
          for (int32_t _4458_j = _10988_; _4458_j < _10989_; ++_4458_j)
          {
            {
              int32_t _4459_opcode = _ptr__4425_code[safe_add( _4426_code_base,_4458_j )];
              double _4460_oparg = _ptr__4431_code_consts[safe_add( _4432_code_consts_base,_4458_j )];
              if ((_4459_opcode == 0))
              {
                {
                }
              }
              else if((_4459_opcode == 2))
              {
                {
                  _ptr__4447_target_code[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                  _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = _4460_oparg;
                  _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                  _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                  ++ _4438_stackp;
                  ++ _4443_tcodep;
                }
              }
              else if((_4459_opcode == 1))
              {
                {
                  _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = _4459_opcode;
                  _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = _4460_oparg;
                  _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                  _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                  ++ _4438_stackp;
                  ++ _4443_tcodep;
                }
              }
              else if((_4459_opcode == 3))
              {
                {
                  if ((_4438_stackp >= (int)2))
                  {
                    {
                      int32_t _4461_i1 = _ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)];
                      -- _4438_stackp;
                      int32_t _4462_i0 = _ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)];
                      -- _4438_stackp;
                      if (((_ptr__4445_xi32[safe_add( _4442_tcode,_4462_i0 )] == 2) && (_ptr__4445_xi32[safe_add( _4442_tcode,_4461_i1 )] == 2)))
                      {
                        {
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = (_ptr__4446_xf64[safe_add( _4441_tcconst,_4462_i0 )] + _ptr__4446_xf64[safe_add( _4441_tcconst,_4461_i1 )]);
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else if(((_ptr__4445_xi32[safe_add( _4442_tcode,_4462_i0 )] == 2) && ((_ptr__4446_xf64[safe_add( _4441_tcconst,_4462_i0 )] <= 0.0) && (_ptr__4446_xf64[safe_add( _4441_tcconst,_4462_i0 )] >= 0.0))))
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = 0.0;
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4461_i1;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else if(((_ptr__4445_xi32[safe_add( _4442_tcode,_4461_i1 )] == 2) && ((_ptr__4446_xf64[safe_add( _4441_tcconst,_4461_i1 )] <= 0.0) && (_ptr__4446_xf64[safe_add( _4441_tcconst,_4461_i1 )] >= 0.0))))
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4462_i0;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],(int)2 );
                          _ptr__4445_xi32[safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] )] = _4462_i0;
                          _ptr__4445_xi32[safe_add( safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] ),(int)1 )] = _4461_i1;
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = _4459_opcode;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = _4460_oparg;
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4444_error_at = _4458_j;
                    }
                  }
                }
              }
              else if((_4459_opcode == 5))
              {
                {
                  if ((_4438_stackp >= (int)2))
                  {
                    {
                      int32_t _4463_i1 = _ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)];
                      -- _4438_stackp;
                      int32_t _4464_i0 = _ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)];
                      -- _4438_stackp;
                      if (((_ptr__4445_xi32[safe_add( _4442_tcode,_4464_i0 )] == 2) && (_ptr__4445_xi32[safe_add( _4442_tcode,_4463_i1 )] == 2)))
                      {
                        {
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = (_ptr__4446_xf64[safe_add( _4441_tcconst,_4464_i0 )] * _ptr__4446_xf64[safe_add( _4441_tcconst,_4463_i1 )]);
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else if(((_ptr__4445_xi32[safe_add( _4442_tcode,_4464_i0 )] == 2) && ((_ptr__4446_xf64[safe_add( _4441_tcconst,_4464_i0 )] <= 0.0) && (_ptr__4446_xf64[safe_add( _4441_tcconst,_4464_i0 )] >= 0.0))))
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = 0.0;
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else if(((_ptr__4445_xi32[safe_add( _4442_tcode,_4463_i1 )] == 2) && ((_ptr__4446_xf64[safe_add( _4441_tcconst,_4463_i1 )] <= 0.0) && (_ptr__4446_xf64[safe_add( _4441_tcconst,_4463_i1 )] >= 0.0))))
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = 0.0;
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else if(((_ptr__4445_xi32[safe_add( _4442_tcode,_4463_i1 )] == 2) && ((_ptr__4446_xf64[safe_add( _4441_tcconst,_4463_i1 )] <= 1.0) && (_ptr__4446_xf64[safe_add( _4441_tcconst,_4463_i1 )] >= 1.0))))
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],(int)1 );
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4464_i0;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else if(((_ptr__4445_xi32[safe_add( _4442_tcode,_4464_i0 )] == 2) && ((_ptr__4446_xf64[safe_add( _4441_tcconst,_4464_i0 )] <= 1.0) && (_ptr__4446_xf64[safe_add( _4441_tcconst,_4464_i0 )] >= 1.0))))
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],(int)1 );
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4463_i1;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],(int)2 );
                          _ptr__4445_xi32[safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] )] = _4464_i0;
                          _ptr__4445_xi32[safe_add( safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] ),(int)1 )] = _4463_i1;
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 5;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = _4460_oparg;
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4444_error_at = _4458_j;
                    }
                  }
                }
              }
              else if((_4459_opcode == 4))
              {
                {
                  if ((_4438_stackp >= (int)1))
                  {
                    {
                      int32_t _4465_i0 = _ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)];
                      -- _4438_stackp;
                      if ((_ptr__4445_xi32[safe_add( _4442_tcode,_4465_i0 )] == 2))
                      {
                        {
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = (-_ptr__4446_xf64[safe_add( _4441_tcconst,_4465_i0 )]);
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = _ptr__4425_code[safe_add( _4426_code_base,_4458_j )];
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],(int)1 );
                          _ptr__4445_xi32[safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] )] = _4465_i0;
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4444_error_at = _4458_j;
                    }
                  }
                }
              }
              else if((_4459_opcode == 6))
              {
                {
                  if ((_4438_stackp >= (int)1))
                  {
                    {
                      int32_t _4466_i0 = _ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)];
                      -- _4438_stackp;
                      if ((_ptr__4445_xi32[safe_add( _4442_tcode,_4466_i0 )] == 2))
                      {
                        {
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                          _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = (1.0 / _ptr__4446_xf64[safe_add( _4441_tcconst,_4466_i0 )]);
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = _ptr__4425_code[safe_add( _4426_code_base,_4458_j )];
                          _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],(int)1 );
                          _ptr__4445_xi32[safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] )] = _4466_i0;
                          _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                          ++ _4438_stackp;
                          ++ _4443_tcodep;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4444_error_at = _4458_j;
                    }
                  }
                }
              }
              else if((_4459_opcode == 8))
              {
                {
                  int32_t _4467_num = (int32_t)_4460_oparg;
                  if ((_4467_num < (int)0))
                  {
                    {
                      _4444_error_at = _4458_j;
                    }
                  }
                  else if((_4467_num > _4438_stackp))
                  {
                    {
                      _4444_error_at = _4458_j;
                    }
                  }
                  else if((_4467_num == (int)0))
                  {
                    {
                      _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                      _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = 0.0;
                      _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                      _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                      ++ _4438_stackp;
                      ++ _4443_tcodep;
                    }
                  }
                  else if((_4467_num == (int)1))
                  {
                    {
                      _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = (int)0;
                      _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                      _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                      ++ _4438_stackp;
                      ++ _4443_tcodep;
                    }
                  }
                  else
                  {
                    {
                      std::vector<int32_t> _10990_;
                      for (int32_t _4469_j = (int)0, _10991_ = _4467_num; _4469_j < _10991_ ; ++_4469_j)
                      {
                        _10990_.push_back(_ptr__4445_xi32[((safe_add( _4437_stack,_4438_stackp ) - (int)1) - _4469_j)]);
                      }
                      auto _10992_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_10990_.size()),_10990_.begin(),_10990_.end()));
                      std::shared_ptr< monty::ndarray< int32_t,1 > > _4468_ii = _10992_;
                      _checked_ptr_1<int32_t> _ptr__4468_ii(_4468_ii ? _4468_ii->raw() : nullptr,_4468_ii ? _4468_ii->size(0) : 0);
                      _4438_stackp -= _4467_num;
                      {
                        int32_t _4470_i1 = (_4467_num - (int)1);
                        int32_t _4471_i0 = (int)0;
                        while ( (_4471_i0 < _4470_i1) )
                        {
                          {
                            while ( ((_4471_i0 < _4470_i1) && (_ptr__4445_xi32[safe_add( _4442_tcode,_ptr__4468_ii[_4471_i0] )] == 2)) )
                            {
                              {
                                ++ _4471_i0;
                              }
                            }
                            while ( ((_4471_i0 < _4470_i1) && (_ptr__4445_xi32[safe_add( _4442_tcode,_ptr__4468_ii[_4470_i1] )] != 2)) )
                            {
                              {
                                -- _4470_i1;
                              }
                            }
                            if ((_4471_i0 < _4470_i1))
                            {
                              {
                                int32_t _4472_t = _ptr__4468_ii[_4471_i0];
                                _ptr__4468_ii[_4471_i0] = _ptr__4468_ii[_4470_i1];
                                _ptr__4468_ii[_4470_i1] = _4472_t;
                                ++ _4471_i0;
                                -- _4470_i1;
                              }
                            }
                            {}
                          }
                        }
                        double _4473_val = 0.0;
                        int32_t _4474_numconstelm = (int)0;
                        while ( ((_4474_numconstelm < _4467_num) && (_ptr__4445_xi32[safe_add( _4442_tcode,_ptr__4468_ii[_4474_numconstelm] )] == 2)) )
                        {
                          {
                            _4473_val += _ptr__4446_xf64[safe_add( _4441_tcconst,_ptr__4468_ii[_4474_numconstelm] )];
                            ++ _4474_numconstelm;
                          }
                        }
                        int32_t _10993_;
                        bool _10994_ = (_4474_numconstelm > (int)0);
                        if (_10994_)
                        {
                          _10993_ = safe_add( (_4467_num - _4474_numconstelm),(int)1 );
                        }
                        else
                        {
                          _10993_ = _4467_num;
                        }
                        int32_t _4475_numsumelm = _10993_;
                        int32_t _4476_p = (int)0;
                        if ((_4474_numconstelm < (int)2))
                        {
                          {
                            int32_t _10995_ = (int)0;
                            int32_t _10996_ = _4467_num;
                            for (int32_t _4477_j = _10995_; _4477_j < _10996_; ++_4477_j)
                            {
                              {
                                _ptr__4445_xi32[safe_add( safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] ),_4477_j )] = _ptr__4468_ii[_4477_j];
                              }
                            }
                            _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],_4467_num );
                            _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 8;
                            _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = _4467_num;
                            _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                            ++ _4438_stackp;
                            ++ _4443_tcodep;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 2;
                            _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = _4473_val;
                            _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )];
                            ++ _4443_tcodep;
                            if ((_4474_numconstelm == _4467_num))
                            {
                              {
                                _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = (_4443_tcodep - (int)1);
                                ++ _4438_stackp;
                              }
                            }
                            else
                            {
                              {
                                _ptr__4445_xi32[safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] )] = (_4443_tcodep - (int)1);
                                int32_t _10997_ = _4474_numconstelm;
                                int32_t _10998_ = _4467_num;
                                for (int32_t _4478_j = _10997_; _4478_j < _10998_; ++_4478_j)
                                {
                                  {
                                    _ptr__4445_xi32[safe_add( (safe_add( safe_add( _4439_chld,_ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )] ),_4478_j ) - _4474_numconstelm),(int)1 )] = _ptr__4468_ii[_4478_j];
                                  }
                                }
                                _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4443_tcodep ),(int)1 )] = safe_add( _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4443_tcodep )],_4475_numsumelm );
                                _ptr__4445_xi32[safe_add( _4442_tcode,_4443_tcodep )] = 8;
                                _ptr__4446_xf64[safe_add( _4441_tcconst,_4443_tcodep )] = _4475_numsumelm;
                                _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _4443_tcodep;
                                ++ _4438_stackp;
                                ++ _4443_tcodep;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                {
                  _4444_error_at = _4458_j;
                }
              }
            }
          }
        }
      }
      {}
      if (((_4444_error_at < (int)0) && (_4438_stackp != (int)1)))
      {
        {
          _4444_error_at = _4443_tcodep;
        }
      }
      {}
      if ((_4444_error_at < (int)0))
      {
        {
          int32_t _4479_p0 = _4453_codei;
          int32_t _4480_p = _4479_p0;
          if ((_ptr__4445_xi32[safe_add( _4442_tcode,_ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)] )] == 2))
          {
            {
              _ptr__4429_fixterm[safe_add( _4430_fixterm_base,_4454_i )] += _ptr__4446_xf64[safe_add( _4441_tcconst,_ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)] )];
              _ptr__4447_target_code[safe_add( _4433_target_code_base,_4480_p )] = 10;
              _ptr__4448_target_const[safe_add( _4434_target_const_base,_4480_p )] = 0.0;
              ++ _4480_p;
            }
          }
          else
          {
            {
              if (((_ptr__4429_fixterm[safe_add( _4430_fixterm_base,_4454_i )] < (int)0) || ((int)0 < _ptr__4429_fixterm[safe_add( _4430_fixterm_base,_4454_i )])))
              {
                {
                  _ptr__4447_target_code[safe_add( _4433_target_code_base,_4480_p )] = 3;
                  ++ _4480_p;
                  _ptr__4447_target_code[safe_add( _4433_target_code_base,_4480_p )] = 2;
                  _ptr__4448_target_const[safe_add( _4434_target_const_base,_4480_p )] = _ptr__4429_fixterm[safe_add( _4430_fixterm_base,_4454_i )];
                  ++ _4480_p;
                  _ptr__4429_fixterm[safe_add( _4430_fixterm_base,_4454_i )] = (int)0;
                }
              }
              {}
              while ( (_4438_stackp > (int)0) )
              {
                {
                  int32_t _4481_k = _ptr__4445_xi32[(safe_add( _4437_stack,_4438_stackp ) - (int)1)];
                  -- _4438_stackp;
                  int32_t _4482_op = _ptr__4445_xi32[safe_add( _4442_tcode,_4481_k )];
                  double _4483_arg = _ptr__4446_xf64[safe_add( _4441_tcconst,_4481_k )];
                  _ptr__4447_target_code[safe_add( _4433_target_code_base,_4480_p )] = _4482_op;
                  _ptr__4448_target_const[safe_add( _4434_target_const_base,_4480_p )] = _4483_arg;
                  ++ _4480_p;
                  int32_t _10999_ = _ptr__4445_xi32[safe_add( _4440_chld_ptr,_4481_k )];
                  int32_t _11000_ = _ptr__4445_xi32[safe_add( safe_add( _4440_chld_ptr,_4481_k ),(int)1 )];
                  for (int32_t _4484_l = _10999_; _4484_l < _11000_; ++_4484_l)
                  {
                    {
                      _ptr__4445_xi32[safe_add( _4437_stack,_4438_stackp )] = _ptr__4445_xi32[safe_add( _4439_chld,_4484_l )];
                      ++ _4438_stackp;
                    }
                  }
                }
              }
              int32_t _4485_p1 = _4480_p;
              -- _4485_p1;
              while ( (_4479_p0 < _4485_p1) )
              {
                {
                  int32_t _4486_ta = _ptr__4447_target_code[safe_add( _4433_target_code_base,_4479_p0 )];
                  double _4487_v = _ptr__4448_target_const[safe_add( _4434_target_const_base,_4479_p0 )];
                  _ptr__4447_target_code[safe_add( _4433_target_code_base,_4479_p0 )] = _ptr__4447_target_code[safe_add( _4433_target_code_base,_4485_p1 )];
                  _ptr__4448_target_const[safe_add( _4434_target_const_base,_4479_p0 )] = _ptr__4448_target_const[safe_add( _4434_target_const_base,_4485_p1 )];
                  _ptr__4447_target_code[safe_add( _4433_target_code_base,_4485_p1 )] = _4486_ta;
                  _ptr__4448_target_const[safe_add( _4434_target_const_base,_4485_p1 )] = _4487_v;
                  ++ _4479_p0;
                  -- _4485_p1;
                }
              }
            }
          }
          _ptr__4449_target_ptr[safe_add( safe_add( _4435_target_ptr_base,_4454_i ),(int)1 )] = _4480_p;
          _4453_codei = _4480_p;
        }
      }
      {}
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->pi32 = _4450_xpi32;
  mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->pi64 = _4451_xpi64;
  mosek::fusion::p_WorkStack::_get_impl(_4423_xs)->pf64 = _4452_xpf64;
  if ((_4444_error_at >= (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid parameterization code list"));
    }
  }
  {}
}
// End mosek.fusion.ExprOptimizeCode.compress_code

// Begin mosek.fusion.ExprOptimizeCode.eval
// Method mosek.fusion.ExprOptimizeCode.eval @ src/fusion/ExprCompress.monty:525:6-755:7
void mosek::fusion::ExprOptimizeCode :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4488_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4489_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4490_xs) { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->eval(_4488_rs,_4489_ws,_4490_xs); }
void mosek::fusion::p_ExprOptimizeCode::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4488_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4489_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4490_xs)
{
  expr->eval(_4489_ws,_4488_rs,_4490_xs);
  _4489_ws->peek_expr();
  _4489_ws->pop_expr();
  int32_t _4491_nd = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->nd;
  int32_t _4492_shape = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->shape_base;
  int32_t _4493_nelem = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->nelem;
  int32_t _4494_nnz = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->nnz;
  bool _4495_hassp = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->hassp;
  int32_t _4496_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->ncodeatom;
  int32_t _4497_ptr = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->ptr_base;
  int32_t _4498_sp = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->sp_base;
  int32_t _4499_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->nidxs_base;
  int32_t _4500_cof = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->cof_base;
  int32_t _4501_code = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->code_base;
  int32_t _4502_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->codeptr_base;
  int32_t _4503_cconst = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4504_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4504_wi32(_4504_wi32 ? _4504_wi32->raw() : nullptr,_4504_wi32 ? _4504_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4505_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4505_wi64(_4505_wi64 ? _4505_wi64->raw() : nullptr,_4505_wi64 ? _4505_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4506_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4489_ws)->f64;
  _checked_ptr_1<double> _ptr__4506_wf64(_4506_wf64 ? _4506_wf64->raw() : nullptr,_4506_wf64 ? _4506_wf64->size(0) : 0);
  if ((_4496_ncodeatom == (int)0))
  {
    {
      _4488_rs->alloc_expr(_4491_nd,_4493_nelem,_4494_nnz,_4495_hassp,(int)0);
      int32_t _4507_rptr = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->ptr_base;
      int32_t _4508_rsp = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->sp_base;
      int32_t _4509_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->nidxs_base;
      int32_t _4510_rcof = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->cof_base;
      int32_t _4511_rshape = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->shape_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4512_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4512_ri32(_4512_ri32 ? _4512_ri32->raw() : nullptr,_4512_ri32 ? _4512_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4513_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4513_ri64(_4513_ri64 ? _4513_ri64->raw() : nullptr,_4513_ri64 ? _4513_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4514_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->f64;
      _checked_ptr_1<double> _ptr__4514_rf64(_4514_rf64 ? _4514_rf64->raw() : nullptr,_4514_rf64 ? _4514_rf64->size(0) : 0);
      int32_t _11001_ = (int)0;
      int32_t _11002_ = safe_add( _4493_nelem,(int)1 );
      for (int32_t _4515_i = _11001_; _4515_i < _11002_; ++_4515_i)
      {
        {
          _ptr__4512_ri32[safe_add( _4507_rptr,_4515_i )] = _ptr__4504_wi32[safe_add( _4497_ptr,_4515_i )];
        }
      }
      int32_t _11003_ = (int)0;
      int32_t _11004_ = _4491_nd;
      for (int32_t _4516_i = _11003_; _4516_i < _11004_; ++_4516_i)
      {
        {
          _ptr__4512_ri32[safe_add( _4511_rshape,_4516_i )] = _ptr__4504_wi32[safe_add( _4492_shape,_4516_i )];
        }
      }
      int32_t _11005_ = (int)0;
      int32_t _11006_ = _4494_nnz;
      for (int32_t _4517_i = _11005_; _4517_i < _11006_; ++_4517_i)
      {
        {
          _ptr__4513_ri64[safe_add( _4509_rnidxs,_4517_i )] = _ptr__4505_wi64[safe_add( _4499_nidxs,_4517_i )];
        }
      }
      int32_t _11007_ = (int)0;
      int32_t _11008_ = _4494_nnz;
      for (int32_t _4518_i = _11007_; _4518_i < _11008_; ++_4518_i)
      {
        {
          _ptr__4514_rf64[safe_add( _4510_rcof,_4518_i )] = _ptr__4506_wf64[safe_add( _4500_cof,_4518_i )];
        }
      }
      if (_4495_hassp)
      {
        {
          int32_t _11009_ = (int)0;
          int32_t _11010_ = _4493_nelem;
          for (int32_t _4519_i = _11009_; _4519_i < _11010_; ++_4519_i)
          {
            {
              _ptr__4513_ri64[safe_add( _4508_rsp,_4519_i )] = _ptr__4505_wi64[safe_add( _4498_sp,_4519_i )];
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4520_xcode = _4490_xs->alloci32(safe_add( _4496_ncodeatom,safe_mul( _4494_nnz,(int)2 ) ));
      int32_t _4521_xcodeptr = _4490_xs->alloci32(safe_add( _4494_nnz,(int)1 ));
      int32_t _4522_xcconst = _4490_xs->allocf64(safe_add( _4496_ncodeatom,safe_mul( _4494_nnz,(int)2 ) ));
      ::mosek::fusion::p_ExprOptimizeCode::compress_code(_4490_xs,_4494_nnz,_4504_wi32,_4501_code,_4504_wi32,_4502_codeptr,_4506_wf64,_4500_cof,_4506_wf64,_4503_cconst,_4520_xcode,_4522_xcconst,_4521_xcodeptr);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4523_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4490_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4523_xi32(_4523_xi32 ? _4523_xi32->raw() : nullptr,_4523_xi32 ? _4523_xi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4524_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4490_xs)->f64;
      _checked_ptr_1<double> _ptr__4524_xf64(_4524_xf64 ? _4524_xf64->raw() : nullptr,_4524_xf64 ? _4524_xf64->size(0) : 0);
      int32_t _4525_rncodeatom = (int)0;
      int32_t _4526_rnnz = (int)0;
      int32_t _4527_rnelem = (int)0;
      int32_t _11011_ = (int)0;
      int32_t _11012_ = _4493_nelem;
      for (int32_t _4528_i = _11011_; _4528_i < _11012_; ++_4528_i)
      {
        {
          int32_t _4529_elmnz = (int)0;
          int32_t _11013_ = _ptr__4504_wi32[safe_add( _4497_ptr,_4528_i )];
          int32_t _11014_ = _ptr__4504_wi32[safe_add( safe_add( _4497_ptr,_4528_i ),(int)1 )];
          for (int32_t _4530_j = _11013_; _4530_j < _11014_; ++_4530_j)
          {
            {
              if (((_ptr__4506_wf64[safe_add( _4500_cof,_4530_j )] < (int)0) || ((int)0 < _ptr__4506_wf64[safe_add( _4500_cof,_4530_j )])))
              {
                {
                  ++ _4526_rnnz;
                  ++ _4529_elmnz;
                  ++ _4525_rncodeatom;
                }
              }
              else
              {
                {
                  if (((_ptr__4523_xi32[safe_add( safe_add( _4521_xcodeptr,_4530_j ),(int)1 )] - _ptr__4523_xi32[safe_add( _4521_xcodeptr,_4530_j )]) > (int)1))
                  {
                    {
                      ++ _4526_rnnz;
                      ++ _4529_elmnz;
                      _4525_rncodeatom += (_ptr__4523_xi32[safe_add( safe_add( _4521_xcodeptr,_4530_j ),(int)1 )] - _ptr__4523_xi32[safe_add( _4521_xcodeptr,_4530_j )]);
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__4523_xi32[safe_add( _4520_xcode,_ptr__4523_xi32[safe_add( _4521_xcodeptr,_4530_j )] )] != 10))
                      {
                        {
                          ++ _4526_rnnz;
                          ++ _4529_elmnz;
                          ++ _4525_rncodeatom;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((_4529_elmnz > (int)0))
          {
            {
              ++ _4527_rnelem;
            }
          }
          {}
        }
      }
      bool _4531_rhassp = false;
      {
        int64_t _4532_sz = (int64_t)1;
        int32_t _11015_ = (int)0;
        int32_t _11016_ = _4491_nd;
        for (int32_t _4533_i = _11015_; _4533_i < _11016_; ++_4533_i)
        {
          {
            _4532_sz *= _ptr__4504_wi32[safe_add( _4492_shape,_4533_i )];
          }
        }
        _4531_rhassp = (_4532_sz > _4527_rnelem);
      }
      _4488_rs->alloc_expr(_4491_nd,_4527_rnelem,_4526_rnnz,_4531_rhassp,_4525_rncodeatom);
      int32_t _4534_rptr = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->ptr_base;
      int32_t _4535_rsp = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->sp_base;
      int32_t _4536_rshape = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->shape_base;
      int32_t _4537_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->nidxs_base;
      int32_t _4538_rcof = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->cof_base;
      int32_t _4539_rcode = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->code_base;
      int32_t _4540_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->codeptr_base;
      int32_t _4541_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4542_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4542_ri32(_4542_ri32 ? _4542_ri32->raw() : nullptr,_4542_ri32 ? _4542_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4543_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4543_ri64(_4543_ri64 ? _4543_ri64->raw() : nullptr,_4543_ri64 ? _4543_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4544_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4488_rs)->f64;
      _checked_ptr_1<double> _ptr__4544_rf64(_4544_rf64 ? _4544_rf64->raw() : nullptr,_4544_rf64 ? _4544_rf64->size(0) : 0);
      int32_t _11017_ = (int)0;
      int32_t _11018_ = _4491_nd;
      for (int32_t _4545_i = _11017_; _4545_i < _11018_; ++_4545_i)
      {
        {
          _ptr__4542_ri32[safe_add( _4536_rshape,_4545_i )] = _ptr__4504_wi32[safe_add( _4492_shape,_4545_i )];
        }
      }
      if ((_4525_rncodeatom == (int)0))
      {
        {
          int32_t _11019_ = (int)0;
          int32_t _11020_ = _4494_nnz;
          for (int32_t _4546_i = _11019_; _4546_i < _11020_; ++_4546_i)
          {
            {
              _ptr__4543_ri64[safe_add( _4537_rnidxs,_4546_i )] = _ptr__4505_wi64[safe_add( _4499_nidxs,_4546_i )];
            }
          }
          int32_t _11021_ = (int)0;
          int32_t _11022_ = _4494_nnz;
          for (int32_t _4547_i = _11021_; _4547_i < _11022_; ++_4547_i)
          {
            {
              _ptr__4544_rf64[safe_add( _4538_rcof,_4547_i )] = _ptr__4506_wf64[safe_add( _4500_cof,_4547_i )];
            }
          }
          int32_t _11023_ = (int)0;
          int32_t _11024_ = safe_add( _4493_nelem,(int)1 );
          for (int32_t _4548_i = _11023_; _4548_i < _11024_; ++_4548_i)
          {
            {
              _ptr__4542_ri32[safe_add( _4534_rptr,_4548_i )] = _ptr__4542_ri32[safe_add( _4497_ptr,_4548_i )];
            }
          }
          if (_4495_hassp)
          {
            {
              int32_t _11025_ = (int)0;
              int32_t _11026_ = _4493_nelem;
              for (int32_t _4549_i = _11025_; _4549_i < _11026_; ++_4549_i)
              {
                {
                  _ptr__4543_ri64[safe_add( _4535_rsp,_4549_i )] = _ptr__4543_ri64[safe_add( _4498_sp,_4549_i )];
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _4550_codei = (int)0;
          int32_t _4551_elmi = (int)0;
          int32_t _4552_nzi = (int)0;
          _ptr__4542_ri32[_4534_rptr] = (int)0;
          if ((_4525_rncodeatom > (int)0))
          {
            {
              _ptr__4542_ri32[_4540_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11027_ = (int)0;
          int32_t _11028_ = _4493_nelem;
          for (int32_t _4553_i = _11027_; _4553_i < _11028_; ++_4553_i)
          {
            {
              int32_t _4554_elmnz = (int)0;
              int32_t _11029_ = _ptr__4504_wi32[safe_add( _4497_ptr,_4553_i )];
              int32_t _11030_ = _ptr__4504_wi32[safe_add( safe_add( _4497_ptr,_4553_i ),(int)1 )];
              for (int32_t _4555_j = _11029_; _4555_j < _11030_; ++_4555_j)
              {
                {
                  if (((_ptr__4506_wf64[safe_add( _4500_cof,_4555_j )] < (int)0) || ((int)0 < _ptr__4506_wf64[safe_add( _4500_cof,_4555_j )])))
                  {
                    {
                      _ptr__4543_ri64[safe_add( _4537_rnidxs,_4552_nzi )] = _ptr__4505_wi64[safe_add( _4499_nidxs,_4555_j )];
                      _ptr__4544_rf64[safe_add( _4538_rcof,_4552_nzi )] = _ptr__4506_wf64[safe_add( _4500_cof,_4555_j )];
                      _ptr__4542_ri32[safe_add( _4539_rcode,_4550_codei )] = _ptr__4523_xi32[safe_add( _4520_xcode,_ptr__4523_xi32[safe_add( _4521_xcodeptr,_4555_j )] )];
                      _ptr__4544_rf64[safe_add( _4541_rcconst,_4550_codei )] = _ptr__4524_xf64[safe_add( _4522_xcconst,_ptr__4523_xi32[safe_add( _4521_xcodeptr,_4555_j )] )];
                      ++ _4550_codei;
                      _ptr__4542_ri32[safe_add( safe_add( _4540_rcodeptr,_4552_nzi ),(int)1 )] = _4550_codei;
                      ++ _4552_nzi;
                      ++ _4554_elmnz;
                    }
                  }
                  else
                  {
                    {
                      if ((((_ptr__4523_xi32[safe_add( safe_add( _4521_xcodeptr,_4555_j ),(int)1 )] - _ptr__4523_xi32[safe_add( _4521_xcodeptr,_4555_j )]) > (int)1) || (_ptr__4523_xi32[safe_add( _4520_xcode,_ptr__4523_xi32[safe_add( _4521_xcodeptr,_4555_j )] )] != 10)))
                      {
                        {
                          _ptr__4543_ri64[safe_add( _4537_rnidxs,_4552_nzi )] = _ptr__4505_wi64[safe_add( _4499_nidxs,_4555_j )];
                          _ptr__4544_rf64[safe_add( _4538_rcof,_4552_nzi )] = 0.0;
                          int32_t _11031_ = _ptr__4523_xi32[safe_add( _4521_xcodeptr,_4555_j )];
                          int32_t _11032_ = _ptr__4523_xi32[safe_add( safe_add( _4521_xcodeptr,_4555_j ),(int)1 )];
                          for (int32_t _4556_k = _11031_; _4556_k < _11032_; ++_4556_k)
                          {
                            {
                              _ptr__4542_ri32[safe_add( _4539_rcode,_4550_codei )] = _ptr__4523_xi32[safe_add( _4520_xcode,_4556_k )];
                              _ptr__4544_rf64[safe_add( _4541_rcconst,_4550_codei )] = _ptr__4524_xf64[safe_add( _4522_xcconst,_4556_k )];
                              ++ _4550_codei;
                            }
                          }
                          _ptr__4542_ri32[safe_add( safe_add( _4540_rcodeptr,_4552_nzi ),(int)1 )] = _4550_codei;
                          ++ _4552_nzi;
                          ++ _4554_elmnz;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              if ((_4554_elmnz > (int)0))
              {
                {
                  _ptr__4542_ri32[safe_add( safe_add( _4534_rptr,_4551_elmi ),(int)1 )] = _4552_nzi;
                  if (_4531_rhassp)
                  {
                    {
                      _ptr__4543_ri64[safe_add( _4535_rsp,_4551_elmi )] = _ptr__4505_wi64[safe_add( _4498_sp,_4553_i )];
                    }
                  }
                  {}
                  ++ _4551_elmi;
                }
              }
              {}
            }
          }
          if ((_4551_elmi != _4527_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nelem"));
            }
          }
          {}
          if ((_4552_nzi != _4526_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nnz"));
            }
          }
          {}
          if ((_4550_codei != _4525_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result num code atoms"));
            }
          }
          {}
          if ((_4525_rncodeatom > (int)0))
          {
            {
              if ((_ptr__4542_ri32[safe_add( _4540_rcodeptr,_4526_rnnz )] != _4525_rncodeatom))
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
}
// End mosek.fusion.ExprOptimizeCode.eval

// Begin mosek.fusion.ExprOptimizeCode.toString
// Method mosek.fusion.ExprOptimizeCode.toString @ src/fusion/ExprCompress.monty:521:6-523:7
std::string mosek::fusion::ExprOptimizeCode :: toString() { return mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprOptimizeCode::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprOptimizeCode("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprOptimizeCode.toString

void mosek::fusion::p_ExprOptimizeCode::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprOptimizeCode::destroy() { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->destroy(); }
// } class ExprOptimizeCode
// class ExprCompress { // @ src/fusion/ExprCompress.monty:11:4-503:5
mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }
mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprCompress::p_ExprCompress
  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprCompress.ctor @ src/fusion/ExprCompress.monty:16:6-19:7
mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress
  (monty::rc_ptr< ::mosek::fusion::Expression > _4557_expr)
{ return new mosek::fusion::ExprCompress(_4557_expr); }
mosek::fusion::ExprCompress::ExprCompress
  (monty::rc_ptr< ::mosek::fusion::Expression > _4557_expr) : 
   ExprCompress(new mosek::fusion::p_ExprCompress(this))
{ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4557_expr); }
void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4557_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_4557_expr->getShape());
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4557_expr;
  }
}
// mosek.fusion.ExprCompress.ctor

// Begin mosek.fusion.ExprCompress.arg_sort
// Method mosek.fusion.ExprCompress.arg_sort @ src/fusion/ExprCompress.monty:371:6-502:7
void mosek::fusion::ExprCompress::arg_sort
  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4558_ws,
    monty::rc_ptr< ::mosek::fusion::WorkStack > _4559_xs,
    int32_t _4560_perm,
    int32_t _4561_nelem,
    int32_t _4562_nnz,
    int32_t _4563_ptr,
    int32_t _4564_nidxs) { mosek::fusion::p_ExprCompress::arg_sort(_4558_ws,_4559_xs,_4560_perm,_4561_nelem,_4562_nnz,_4563_ptr,_4564_nidxs); }
void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4558_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4559_xs,int32_t _4560_perm,int32_t _4561_nelem,int32_t _4562_nnz,int32_t _4563_ptr,int32_t _4564_nidxs)
{
  int32_t _4565_maxrow = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4566_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4558_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4566_wi32(_4566_wi32 ? _4566_wi32->raw() : nullptr,_4566_wi32 ? _4566_wi32->size(0) : 0);
  int32_t _11033_ = (int)0;
  int32_t _11034_ = _4561_nelem;
  for (int32_t _4567_i = _11033_; _4567_i < _11034_; ++_4567_i)
  {
    {
      if (((_ptr__4566_wi32[safe_add( safe_add( _4563_ptr,_4567_i ),(int)1 )] - _ptr__4566_wi32[safe_add( _4563_ptr,_4567_i )]) > _4565_maxrow))
      {
        {
          _4565_maxrow = (_ptr__4566_wi32[safe_add( safe_add( _4563_ptr,_4567_i ),(int)1 )] - _ptr__4566_wi32[safe_add( _4563_ptr,_4567_i )]);
        }
      }
      {}
    }
  }
  int32_t _11035_;
  bool _11036_ = (_4565_maxrow > (int)2);
  if (_11036_)
  {
    _11035_ = _4559_xs->alloci32(safe_mul( _4565_maxrow,(int)2 ));
  }
  else
  {
    _11035_ = (int)99999;
  }
  int32_t _4568_workspace = _11035_;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4569_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4559_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__4569_xi32(_4569_xi32 ? _4569_xi32->raw() : nullptr,_4569_xi32 ? _4569_xi32->size(0) : 0);
  _4566_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4558_ws)->i32;
  _ptr__4566_wi32.update(_4566_wi32 ? _4566_wi32->raw() : nullptr, _4566_wi32 ? _4566_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4570_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4558_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4570_wi64(_4570_wi64 ? _4570_wi64->raw() : nullptr,_4570_wi64 ? _4570_wi64->size(0) : 0);
  int32_t _11037_ = (int)0;
  int32_t _11038_ = _4561_nelem;
  for (int32_t _4571_i = _11037_; _4571_i < _11038_; ++_4571_i)
  {
    {
      int32_t _4572_p0 = _ptr__4566_wi32[safe_add( _4563_ptr,_4571_i )];
      int32_t _4573_p1 = _ptr__4566_wi32[safe_add( safe_add( _4563_ptr,_4571_i ),(int)1 )];
      int32_t _4574_n = (_4573_p1 - _4572_p0);
      if ((_4574_n == (int)0))
      {
        {
        }
      }
      else if((_4574_n == (int)1))
      {
        {
          _ptr__4569_xi32[safe_add( _4560_perm,_4572_p0 )] = _4572_p0;
        }
      }
      else if((_4574_n == (int)2))
      {
        {
          if ((_ptr__4570_wi64[safe_add( _4564_nidxs,_4572_p0 )] <= _ptr__4570_wi64[safe_add( safe_add( _4564_nidxs,_4572_p0 ),(int)1 )]))
          {
            {
              _ptr__4569_xi32[safe_add( _4560_perm,_4572_p0 )] = _4572_p0;
              _ptr__4569_xi32[safe_add( safe_add( _4560_perm,_4572_p0 ),(int)1 )] = safe_add( _4572_p0,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4569_xi32[safe_add( _4560_perm,_4572_p0 )] = safe_add( _4572_p0,(int)1 );
              _ptr__4569_xi32[safe_add( safe_add( _4560_perm,_4572_p0 ),(int)1 )] = _4572_p0;
            }
          }
        }
      }
      else
      {
        {
          int64_t _4575_vmin = _ptr__4570_wi64[safe_add( _4564_nidxs,_4572_p0 )];
          int64_t _4576_vmax = _ptr__4570_wi64[safe_add( _4564_nidxs,_4572_p0 )];
          bool _4577_sorted = false;
          int32_t _11039_ = safe_add( _4572_p0,(int)1 );
          int32_t _11040_ = _4573_p1;
          for (int32_t _4578_i = _11039_; _4578_i < _11040_; ++_4578_i)
          {
            {
              _4577_sorted = (_4577_sorted && (_ptr__4570_wi64[(safe_add( _4564_nidxs,_4578_i ) - (int)1)] <= _ptr__4570_wi64[safe_add( _4564_nidxs,_4578_i )]));
              if ((_4575_vmin > _ptr__4570_wi64[safe_add( _4564_nidxs,_4578_i )]))
              {
                {
                  _4575_vmin = _ptr__4570_wi64[safe_add( _4564_nidxs,_4578_i )];
                }
              }
              {}
              if ((_4576_vmax < _ptr__4570_wi64[safe_add( _4564_nidxs,_4578_i )]))
              {
                {
                  _4576_vmax = _ptr__4570_wi64[safe_add( _4564_nidxs,_4578_i )];
                }
              }
              {}
            }
          }
          if (_4577_sorted)
          {
            {
              int32_t _11041_ = _4572_p0;
              int32_t _11042_ = _4573_p1;
              for (int32_t _4579_i = _11041_; _4579_i < _11042_; ++_4579_i)
              {
                {
                  _ptr__4569_xi32[safe_add( _4560_perm,_4579_i )] = _4579_i;
                }
              }
            }
          }
          else if((safe_add( (_4576_vmax - _4575_vmin),(int)1 ) <= _4574_n))
          {
            {
              int64_t _4580_m = safe_add( (_4576_vmax - _4575_vmin),(int)1 );
              int32_t _11043_ = (int)0;
              int64_t _11044_ = safe_add( _4580_m,(int)1 );
              for (int64_t _4581_j = _11043_; _4581_j < _11044_; ++_4581_j)
              {
                {
                  _ptr__4569_xi32[safe_add( _4568_workspace,_4581_j )] = (int)0;
                }
              }
              int32_t _11045_ = _4572_p0;
              int32_t _11046_ = _4573_p1;
              for (int32_t _4582_j = _11045_; _4582_j < _11046_; ++_4582_j)
              {
                {
                  ++ _ptr__4569_xi32[safe_add( (safe_add( _4568_workspace,_ptr__4570_wi64[safe_add( _4564_nidxs,_4582_j )] ) - _4575_vmin),(int)1 )];
                }
              }
              int32_t _11047_ = (int)0;
              int64_t _11048_ = _4580_m;
              for (int64_t _4583_j = _11047_; _4583_j < _11048_; ++_4583_j)
              {
                {
                  _ptr__4569_xi32[safe_add( safe_add( _4568_workspace,_4583_j ),(int)1 )] += _ptr__4569_xi32[safe_add( _4568_workspace,_4583_j )];
                }
              }
              int32_t _11049_ = _4572_p0;
              int32_t _11050_ = _4573_p1;
              for (int32_t _4584_j = _11049_; _4584_j < _11050_; ++_4584_j)
              {
                {
                  _ptr__4569_xi32[safe_add( safe_add( _4560_perm,_4572_p0 ),_ptr__4569_xi32[(safe_add( _4568_workspace,_ptr__4570_wi64[safe_add( _4564_nidxs,_4584_j )] ) - _4575_vmin)] )] = _4584_j;
                  ++ _ptr__4569_xi32[(safe_add( _4568_workspace,_ptr__4570_wi64[safe_add( _4564_nidxs,_4584_j )] ) - _4575_vmin)];
                }
              }
            }
          }
          else
          {
            {
              int32_t _4585_blocksize = (int)1;
              int32_t _4586_perm1 = _4568_workspace;
              int32_t _4587_perm2 = safe_add( _4568_workspace,_4574_n );
              int32_t _11051_ = (int)0;
              int32_t _11052_ = _4574_n;
              for (int32_t _4588_j = _11051_; _4588_j < _11052_; ++_4588_j)
              {
                {
                  _ptr__4569_xi32[safe_add( _4586_perm1,_4588_j )] = _4588_j;
                }
              }
              while ( (_4585_blocksize < _4574_n) )
              {
                {
                  int32_t _4589_mergesize = safe_mul( _4585_blocksize,(int)2 );
                  int32_t _4590_nummerges = (_4574_n / _4589_mergesize);
                  if ((safe_add( safe_mul( _4590_nummerges,_4589_mergesize ),_4585_blocksize ) < _4574_n))
                  {
                    {
                      ++ _4590_nummerges;
                    }
                  }
                  {}
                  int32_t _4591_k = (int)0;
                  int32_t _11053_ = (int)0;
                  int32_t _11054_ = _4590_nummerges;
                  for (int32_t _4592_j = _11053_; _4592_j < _11054_; ++_4592_j)
                  {
                    {
                      int32_t _4593_a0 = safe_mul( _4592_j,_4589_mergesize );
                      int32_t _4594_a1 = safe_add( _4593_a0,_4585_blocksize );
                      int32_t _4595_b0 = _4594_a1;
                      int32_t _4596_b1 = safe_add( _4595_b0,_4585_blocksize );
                      if ((_4596_b1 > _4574_n))
                      {
                        {
                          _4596_b1 = _4574_n;
                        }
                      }
                      {}
                      while ( ((_4593_a0 < _4594_a1) && (_4595_b0 < _4596_b1)) )
                      {
                        {
                          if ((_ptr__4570_wi64[safe_add( safe_add( _4564_nidxs,_ptr__4569_xi32[safe_add( _4586_perm1,_4593_a0 )] ),_4572_p0 )] <= _ptr__4570_wi64[safe_add( safe_add( _4564_nidxs,_ptr__4569_xi32[safe_add( _4586_perm1,_4595_b0 )] ),_4572_p0 )]))
                          {
                            {
                              _ptr__4569_xi32[safe_add( _4587_perm2,_4591_k )] = _ptr__4569_xi32[safe_add( _4586_perm1,_4593_a0 )];
                              ++ _4591_k;
                              ++ _4593_a0;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4569_xi32[safe_add( _4587_perm2,_4591_k )] = _ptr__4569_xi32[safe_add( _4586_perm1,_4595_b0 )];
                              ++ _4591_k;
                              ++ _4595_b0;
                            }
                          }
                        }
                      }
                      while ( (_4593_a0 < _4594_a1) )
                      {
                        {
                          _ptr__4569_xi32[safe_add( _4587_perm2,_4591_k )] = _ptr__4569_xi32[safe_add( _4586_perm1,_4593_a0 )];
                          ++ _4591_k;
                          ++ _4593_a0;
                        }
                      }
                      while ( (_4595_b0 < _4596_b1) )
                      {
                        {
                          _ptr__4569_xi32[safe_add( _4587_perm2,_4591_k )] = _ptr__4569_xi32[safe_add( _4586_perm1,_4595_b0 )];
                          ++ _4591_k;
                          ++ _4595_b0;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4590_nummerges,_4589_mergesize ) < _4574_n))
                  {
                    {
                      int32_t _4597_b = safe_mul( _4590_nummerges,_4589_mergesize );
                      while ( (_4597_b < _4574_n) )
                      {
                        {
                          _ptr__4569_xi32[safe_add( _4587_perm2,_4591_k )] = _ptr__4569_xi32[safe_add( _4586_perm1,_4597_b )];
                          ++ _4597_b;
                          ++ _4591_k;
                        }
                      }
                    }
                  }
                  {}
                  int32_t _4598_tmp = _4586_perm1;
                  _4586_perm1 = _4587_perm2;
                  _4587_perm2 = _4598_tmp;
                  _4585_blocksize *= (int)2;
                }
              }
              int32_t _11055_ = (int)0;
              int32_t _11056_ = _4574_n;
              for (int32_t _4599_i = _11055_; _4599_i < _11056_; ++_4599_i)
              {
                {
                  _ptr__4569_xi32[safe_add( safe_add( _4560_perm,_4572_p0 ),_4599_i )] = safe_add( _ptr__4569_xi32[safe_add( _4586_perm1,_4599_i )],_4572_p0 );
                }
              }
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprCompress.arg_sort

// Begin mosek.fusion.ExprCompress.merge_sort
// Method mosek.fusion.ExprCompress.merge_sort @ src/fusion/ExprCompress.monty:310:6-369:7
void mosek::fusion::ExprCompress::merge_sort
  ( int32_t _4600_origperm1,
    int32_t _4601_origperm2,
    int32_t _4602_nelem,
    int32_t _4603_nnz,
    int32_t _4604_ptr_base,
    int32_t _4605_nidxs_base,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4606_wi32,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4607_wi64) { mosek::fusion::p_ExprCompress::merge_sort(_4600_origperm1,_4601_origperm2,_4602_nelem,_4603_nnz,_4604_ptr_base,_4605_nidxs_base,_4606_wi32,_4607_wi64); }
void mosek::fusion::p_ExprCompress::merge_sort(int32_t _4600_origperm1,int32_t _4601_origperm2,int32_t _4602_nelem,int32_t _4603_nnz,int32_t _4604_ptr_base,int32_t _4605_nidxs_base,std::shared_ptr< monty::ndarray< int32_t,1 > > _4606_wi32,std::shared_ptr< monty::ndarray< int64_t,1 > > _4607_wi64)
{
  _checked_ptr_1<int32_t> _ptr__4606_wi32(_4606_wi32 ? _4606_wi32->raw() : nullptr, _4606_wi32 ? _4606_wi32->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__4607_wi64(_4607_wi64 ? _4607_wi64->raw() : nullptr, _4607_wi64 ? _4607_wi64->size(0) : 0);
  int32_t _4608_perm1 = _4600_origperm1;
  int32_t _4609_perm2 = _4601_origperm2;
  int32_t _11057_ = (int)0;
  int32_t _11058_ = _4603_nnz;
  for (int32_t _4610_j = _11057_; _4610_j < _11058_; ++_4610_j)
  {
    {
      _ptr__4606_wi32[safe_add( _4608_perm1,_4610_j )] = _4610_j;
    }
  }
  int32_t _11059_ = (int)0;
  int32_t _11060_ = _4602_nelem;
  for (int32_t _4611_i = _11059_; _4611_i < _11060_; ++_4611_i)
  {
    {
      _4608_perm1 = _4600_origperm1;
      _4609_perm2 = _4601_origperm2;
      int32_t _4612_p1 = _ptr__4606_wi32[safe_add( safe_add( _4604_ptr_base,_4611_i ),(int)1 )];
      int32_t _4613_p0 = _ptr__4606_wi32[safe_add( _4604_ptr_base,_4611_i )];
      if ((safe_add( _4613_p0,(int)1 ) < _4612_p1))
      {
        {
          int32_t _4614_n = (_4612_p1 - _4613_p0);
          int32_t _4615_lg2n = (int)0;
          while ( (_4614_n > (int)1) )
          {
            {
              ++ _4615_lg2n;
              _4614_n /= (int)2;
            }
          }
          _4614_n = (_4612_p1 - _4613_p0);
          int32_t _4616_blocksz = (int)1;
          int32_t _11061_ = (int)0;
          int32_t _11062_ = safe_add( _4615_lg2n,(int)1 );
          for (int32_t _4617_k = _11061_; _4617_k < _11062_; ++_4617_k)
          {
            {
              int32_t _4618_numblocks = ((safe_add( _4614_n,_4616_blocksz ) - (int)1) / _4616_blocksz);
              int32_t _4619_nmerge = (_4618_numblocks / (int)2);
              int32_t _4620_kk = _4613_p0;
              int32_t _11063_ = (int)0;
              int32_t _11064_ = _4619_nmerge;
              for (int32_t _4621_ii_ = _11063_; _4621_ii_ < _11064_; ++_4621_ii_)
              {
                {
                  int32_t _4622_ii = safe_mul( safe_mul( _4621_ii_,_4616_blocksz ),(int)2 );
                  int32_t _11065_;
                  bool _11066_ = (safe_add( safe_add( _4613_p0,_4622_ii ),safe_mul( (int)2,_4616_blocksz ) ) < _4612_p1);
                  if (_11066_)
                  {
                    _11065_ = safe_add( safe_add( _4613_p0,_4622_ii ),safe_mul( (int)2,_4616_blocksz ) );
                  }
                  else
                  {
                    _11065_ = _4612_p1;
                  }
                  int32_t _4623_jj1e = _11065_;
                  int32_t _4624_jj1 = safe_add( safe_add( _4613_p0,_4622_ii ),_4616_blocksz );
                  int32_t _4625_jj0e = safe_add( safe_add( _4613_p0,_4622_ii ),_4616_blocksz );
                  int32_t _4626_jj0 = safe_add( _4613_p0,_4622_ii );
                  while ( ((_4626_jj0 < _4625_jj0e) && (_4624_jj1 < _4623_jj1e)) )
                  {
                    {
                      if ((_ptr__4607_wi64[safe_add( _4605_nidxs_base,_ptr__4606_wi32[safe_add( _4608_perm1,_4626_jj0 )] )] <= _ptr__4607_wi64[safe_add( _4605_nidxs_base,_ptr__4606_wi32[safe_add( _4608_perm1,_4624_jj1 )] )]))
                      {
                        {
                          _ptr__4606_wi32[safe_add( _4609_perm2,_4620_kk )] = _ptr__4606_wi32[safe_add( _4608_perm1,_4626_jj0 )];
                          ++ _4620_kk;
                          ++ _4626_jj0;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4606_wi32[safe_add( _4609_perm2,_4620_kk )] = _ptr__4606_wi32[safe_add( _4608_perm1,_4624_jj1 )];
                          ++ _4620_kk;
                          ++ _4624_jj1;
                        }
                      }
                    }
                  }
                  while ( (_4626_jj0 < _4625_jj0e) )
                  {
                    {
                      _ptr__4606_wi32[safe_add( _4609_perm2,_4620_kk )] = _ptr__4606_wi32[safe_add( _4608_perm1,_4626_jj0 )];
                      ++ _4620_kk;
                      ++ _4626_jj0;
                    }
                  }
                  while ( (_4624_jj1 < _4623_jj1e) )
                  {
                    {
                      _ptr__4606_wi32[safe_add( _4609_perm2,_4620_kk )] = _ptr__4606_wi32[safe_add( _4608_perm1,_4624_jj1 )];
                      ++ _4620_kk;
                      ++ _4624_jj1;
                    }
                  }
                }
              }
              int32_t _11067_ = _4620_kk;
              int32_t _11068_ = _4612_p1;
              for (int32_t _4627_ii = _11067_; _4627_ii < _11068_; ++_4627_ii)
              {
                {
                  _ptr__4606_wi32[safe_add( _4609_perm2,_4627_ii )] = _ptr__4606_wi32[safe_add( _4608_perm1,_4627_ii )];
                }
              }
              int32_t _4628_tmp = _4608_perm1;
              _4608_perm1 = _4609_perm2;
              _4609_perm2 = _4628_tmp;
              _4616_blocksz *= (int)2;
            }
          }
        }
      }
      {}
      int32_t _11069_ = _4613_p0;
      int32_t _11070_ = _4612_p1;
      for (int32_t _4629_i = _11069_; _4629_i < _11070_; ++_4629_i)
      {
        {
          _ptr__4606_wi32[safe_add( _4600_origperm1,_4629_i )] = _ptr__4606_wi32[safe_add( _4608_perm1,_4629_i )];
        }
      }
    }
  }
}
// End mosek.fusion.ExprCompress.merge_sort

// Begin mosek.fusion.ExprCompress.eval
// Method mosek.fusion.ExprCompress.eval @ src/fusion/ExprCompress.monty:21:6-306:7
void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4630_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4631_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4632_xs) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4630_rs,_4631_ws,_4632_xs); }
void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4630_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4631_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4632_xs)
{
  expr->eval(_4631_ws,_4630_rs,_4632_xs);
  _4631_ws->pop_expr();
  int32_t _4633_nd = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->nd;
  int32_t _4634_shape = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->shape_base;
  int32_t _4635_nelem = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->nelem;
  int32_t _4636_nnz = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->nnz;
  bool _4637_hassp = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->hassp;
  int32_t _4638_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->ncodeatom;
  int32_t _4639_ptr = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->ptr_base;
  int32_t _4640_sp = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->sp_base;
  int32_t _4641_nidxs = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->nidxs_base;
  int32_t _4642_cof = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->cof_base;
  int32_t _4643_code = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->code_base;
  int32_t _4644_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->codeptr_base;
  int32_t _4645_cconst = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4646_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4646_wi32(_4646_wi32 ? _4646_wi32->raw() : nullptr,_4646_wi32 ? _4646_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4647_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4647_wi64(_4647_wi64 ? _4647_wi64->raw() : nullptr,_4647_wi64 ? _4647_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4648_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4631_ws)->f64;
  _checked_ptr_1<double> _ptr__4648_wf64(_4648_wf64 ? _4648_wf64->raw() : nullptr,_4648_wf64 ? _4648_wf64->size(0) : 0);
  bool _4649_iscompact = true;
  {
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4650_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4632_xs)->i32;
    _checked_ptr_1<int32_t> _ptr__4650_xi32(_4650_xi32 ? _4650_xi32->raw() : nullptr,_4650_xi32 ? _4650_xi32->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4651_xi64 = mosek::fusion::p_WorkStack::_get_impl(_4632_xs)->i64;
    _checked_ptr_1<int64_t> _ptr__4651_xi64(_4651_xi64 ? _4651_xi64->raw() : nullptr,_4651_xi64 ? _4651_xi64->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _4652_xf64 = mosek::fusion::p_WorkStack::_get_impl(_4632_xs)->f64;
    _checked_ptr_1<double> _ptr__4652_xf64(_4652_xf64 ? _4652_xf64->raw() : nullptr,_4652_xf64 ? _4652_xf64->size(0) : 0);
    int32_t _11071_ = (int)0;
    int32_t _11072_ = _4635_nelem;
    for (int32_t _4653_i = _11071_; _4653_i < _11072_; ++_4653_i)
    {
      {
        int32_t _11073_ = _ptr__4646_wi32[safe_add( _4639_ptr,_4653_i )];
        int32_t _11074_ = (_ptr__4646_wi32[safe_add( safe_add( _4639_ptr,_4653_i ),(int)1 )] - (int)1);
        for (int32_t _4654_j = _11073_; _4654_j < _11074_; ++_4654_j)
        {
          {
            _4649_iscompact = (_4649_iscompact && (_ptr__4647_wi64[safe_add( _4641_nidxs,_4654_j )] < _ptr__4647_wi64[safe_add( safe_add( _4641_nidxs,_4654_j ),(int)1 )]));
          }
        }
      }
    }
    if (_4649_iscompact)
    {
      {
        if ((_4638_ncodeatom > (int)0))
        {
          {
            int32_t _11075_ = (int)0;
            int32_t _11076_ = _4636_nnz;
            for (int32_t _4655_j = _11075_; _4655_j < _11076_; ++_4655_j)
            {
              {
                _4649_iscompact = (_4649_iscompact && ((!((_ptr__4648_wf64[safe_add( _4642_cof,_4655_j )] >= 0.0) && (0.0 >= _ptr__4648_wf64[safe_add( _4642_cof,_4655_j )]))) || (((_ptr__4646_wi32[safe_add( safe_add( _4644_codeptr,_4655_j ),(int)1 )] - _ptr__4646_wi32[safe_add( _4644_codeptr,_4655_j )]) == (int)0) || (!(((_ptr__4646_wi32[safe_add( safe_add( _4644_codeptr,_4655_j ),(int)1 )] - _ptr__4646_wi32[safe_add( _4644_codeptr,_4655_j )]) == (int)1) && ((_ptr__4646_wi32[safe_add( _4643_code,_ptr__4646_wi32[safe_add( _4644_codeptr,_4655_j )] )] == 2) && (!((_ptr__4648_wf64[safe_add( _4645_cconst,_ptr__4646_wi32[safe_add( _4644_codeptr,_4655_j )] )] <= 0.0) && (_ptr__4648_wf64[safe_add( _4645_cconst,_ptr__4646_wi32[safe_add( _4644_codeptr,_4655_j )] )] >= 0.0)))))))));
              }
            }
          }
        }
        else
        {
          {
            int32_t _11077_ = (int)0;
            int32_t _11078_ = _4636_nnz;
            for (int32_t _4656_j = _11077_; _4656_j < _11078_; ++_4656_j)
            {
              {
                _4649_iscompact = (_4649_iscompact && (!((_ptr__4648_wf64[safe_add( _4642_cof,_4656_j )] <= 0.0) && (0.0 <= _ptr__4648_wf64[safe_add( _4642_cof,_4656_j )]))));
              }
            }
          }
        }
      }
    }
    {}
  }
  if (_4649_iscompact)
  {
    {
      _4630_rs->alloc_expr(_4633_nd,_4635_nelem,_4636_nnz,_4637_hassp,_4638_ncodeatom);
      int32_t _4657_rptr = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->ptr_base;
      int32_t _4658_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->nidxs_base;
      int32_t _4659_rsp = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->sp_base;
      int32_t _4660_rcof = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->cof_base;
      int32_t _4661_rshape = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->shape_base;
      int32_t _4662_rcode = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->code_base;
      int32_t _4663_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->codeptr_base;
      int32_t _4664_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4665_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4665_ri32(_4665_ri32 ? _4665_ri32->raw() : nullptr,_4665_ri32 ? _4665_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4666_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4666_ri64(_4666_ri64 ? _4666_ri64->raw() : nullptr,_4666_ri64 ? _4666_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4667_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->f64;
      _checked_ptr_1<double> _ptr__4667_rf64(_4667_rf64 ? _4667_rf64->raw() : nullptr,_4667_rf64 ? _4667_rf64->size(0) : 0);
      {
        int32_t _11079_ = (int)0;
        int32_t _11080_ = _4633_nd;
        for (int32_t _4668_i = _11079_; _4668_i < _11080_; ++_4668_i)
        {
          {
            _ptr__4665_ri32[safe_add( _4661_rshape,_4668_i )] = _ptr__4646_wi32[safe_add( _4634_shape,_4668_i )];
          }
        }
        int32_t _11081_ = (int)0;
        int32_t _11082_ = safe_add( _4635_nelem,(int)1 );
        for (int32_t _4669_i = _11081_; _4669_i < _11082_; ++_4669_i)
        {
          {
            _ptr__4665_ri32[safe_add( _4657_rptr,_4669_i )] = _ptr__4646_wi32[safe_add( _4639_ptr,_4669_i )];
          }
        }
        int32_t _11083_ = (int)0;
        int32_t _11084_ = _4636_nnz;
        for (int32_t _4670_i = _11083_; _4670_i < _11084_; ++_4670_i)
        {
          {
            _ptr__4666_ri64[safe_add( _4658_rnidxs,_4670_i )] = _ptr__4647_wi64[safe_add( _4641_nidxs,_4670_i )];
          }
        }
        int32_t _11085_ = (int)0;
        int32_t _11086_ = _4636_nnz;
        for (int32_t _4671_i = _11085_; _4671_i < _11086_; ++_4671_i)
        {
          {
            _ptr__4667_rf64[safe_add( _4660_rcof,_4671_i )] = _ptr__4648_wf64[safe_add( _4642_cof,_4671_i )];
          }
        }
        if (_4637_hassp)
        {
          {
            int32_t _11087_ = (int)0;
            int32_t _11088_ = _4635_nelem;
            for (int32_t _4672_i = _11087_; _4672_i < _11088_; ++_4672_i)
            {
              {
                _ptr__4666_ri64[safe_add( _4659_rsp,_4672_i )] = _ptr__4647_wi64[safe_add( _4640_sp,_4672_i )];
              }
            }
          }
        }
        {}
        if ((_4638_ncodeatom > (int)0))
        {
          {
            int32_t _11089_ = (int)0;
            int32_t _11090_ = _4638_ncodeatom;
            for (int32_t _4673_i = _11089_; _4673_i < _11090_; ++_4673_i)
            {
              {
                _ptr__4665_ri32[safe_add( _4662_rcode,_4673_i )] = _ptr__4646_wi32[safe_add( _4643_code,_4673_i )];
              }
            }
            int32_t _11091_ = (int)0;
            int32_t _11092_ = _4638_ncodeatom;
            for (int32_t _4674_i = _11091_; _4674_i < _11092_; ++_4674_i)
            {
              {
                _ptr__4667_rf64[safe_add( _4664_rcconst,_4674_i )] = _ptr__4648_wf64[safe_add( _4645_cconst,_4674_i )];
              }
            }
            int32_t _11093_ = (int)0;
            int32_t _11094_ = safe_add( _4636_nnz,(int)1 );
            for (int32_t _4675_i = _11093_; _4675_i < _11094_; ++_4675_i)
            {
              {
                _ptr__4665_ri32[safe_add( _4663_rcodeptr,_4675_i )] = _ptr__4646_wi32[safe_add( _4644_codeptr,_4675_i )];
              }
            }
          }
        }
        {}
      }
      if ((_4638_ncodeatom > (int)0))
      {
        {
          if ((_ptr__4665_ri32[safe_add( _4663_rcodeptr,_4636_nnz )] != _4638_ncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _4676_perm1 = _4632_xs->alloci32(_4636_nnz);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4631_ws,_4632_xs,_4676_perm1,_4635_nelem,_4636_nnz,_4639_ptr,_4641_nidxs);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4677_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4632_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4677_xi32(_4677_xi32 ? _4677_xi32->raw() : nullptr,_4677_xi32 ? _4677_xi32->size(0) : 0);
      int32_t _4678_rnnz = (int)0;
      int32_t _4679_rncodeatom = _4638_ncodeatom;
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _4680_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->i32;
        _checked_ptr_1<int32_t> _ptr__4680_ri32(_4680_ri32 ? _4680_ri32->raw() : nullptr,_4680_ri32 ? _4680_ri32->size(0) : 0);
        int32_t _11095_ = (int)0;
        int32_t _11096_ = _4635_nelem;
        for (int32_t _4681_i = _11095_; _4681_i < _11096_; ++_4681_i)
        {
          {
            int32_t _4682_pe = _ptr__4646_wi32[safe_add( safe_add( _4639_ptr,_4681_i ),(int)1 )];
            int32_t _4683_pb = _ptr__4646_wi32[safe_add( _4639_ptr,_4681_i )];
            if ((_4683_pb < _4682_pe))
            {
              {
                int32_t _4684_p = _4683_pb;
                while ( (_4684_p < _4682_pe) )
                {
                  {
                    double _4685_c = 0.0;
                    bool _4686_cnonzero = false;
                    int64_t _4687_varidx = _ptr__4647_wi64[safe_add( _4641_nidxs,_ptr__4677_xi32[safe_add( _4676_perm1,_4684_p )] )];
                    int32_t _4688_p0 = _4684_p;
                    while ( ((_4684_p < _4682_pe) && (_ptr__4647_wi64[safe_add( _4641_nidxs,_ptr__4677_xi32[safe_add( _4676_perm1,_4684_p )] )] == _4687_varidx)) )
                    {
                      {
                        double _4689_ci = _ptr__4648_wf64[safe_add( _4642_cof,_ptr__4677_xi32[safe_add( _4676_perm1,_4684_p )] )];
                        _4686_cnonzero = (_4686_cnonzero || (!((_4689_ci <= 0.0) && (_4689_ci >= 0.0))));
                        _4685_c += _4689_ci;
                        ++ _4684_p;
                      }
                    }
                    if ((_4686_cnonzero || (_4638_ncodeatom > (int)0)))
                    {
                      {
                        ++ _4678_rnnz;
                        if (((safe_add( _4688_p0,(int)1 ) < _4684_p) && (_4638_ncodeatom > (int)0)))
                        {
                          {
                            _4679_rncodeatom += (int)1;
                          }
                        }
                        {}
                      }
                    }
                    {}
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4630_rs->alloc_expr(_4633_nd,_4635_nelem,_4678_rnnz,_4637_hassp,_4679_rncodeatom);
      int32_t _4690_rnidx = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->nidxs_base;
      int32_t _4691_rshape = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->shape_base;
      int32_t _4692_rsp = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->sp_base;
      int32_t _4693_rcof = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->cof_base;
      int32_t _4694_rptr = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->ptr_base;
      int32_t _4695_rcode = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->code_base;
      int32_t _4696_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->codeptr_base;
      int32_t _4697_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4698_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4698_ri32(_4698_ri32 ? _4698_ri32->raw() : nullptr,_4698_ri32 ? _4698_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4699_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4699_ri64(_4699_ri64 ? _4699_ri64->raw() : nullptr,_4699_ri64 ? _4699_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4700_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4630_rs)->f64;
      _checked_ptr_1<double> _ptr__4700_rf64(_4700_rf64 ? _4700_rf64->raw() : nullptr,_4700_rf64 ? _4700_rf64->size(0) : 0);
      {
        int32_t _11097_ = (int)0;
        int32_t _11098_ = _4633_nd;
        for (int32_t _4701_i = _11097_; _4701_i < _11098_; ++_4701_i)
        {
          {
            _ptr__4698_ri32[safe_add( _4691_rshape,_4701_i )] = _ptr__4646_wi32[safe_add( _4634_shape,_4701_i )];
          }
        }
        if (_4637_hassp)
        {
          {
            int32_t _11099_ = (int)0;
            int32_t _11100_ = _4635_nelem;
            for (int32_t _4702_i = _11099_; _4702_i < _11100_; ++_4702_i)
            {
              {
                _ptr__4699_ri64[safe_add( _4692_rsp,_4702_i )] = _ptr__4647_wi64[safe_add( _4640_sp,_4702_i )];
              }
            }
          }
        }
        {}
        int32_t _4703_nzi = (int)0;
        int32_t _4704_codei = (int)0;
        {
          _ptr__4698_ri32[_4694_rptr] = (int)0;
          if ((_4679_rncodeatom > (int)0))
          {
            {
              _ptr__4698_ri32[_4696_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11101_ = (int)0;
          int32_t _11102_ = _4635_nelem;
          for (int32_t _4705_elmi = _11101_; _4705_elmi < _11102_; ++_4705_elmi)
          {
            {
              int32_t _4706_pe = _ptr__4646_wi32[safe_add( safe_add( _4639_ptr,_4705_elmi ),(int)1 )];
              int32_t _4707_pb = _ptr__4646_wi32[safe_add( _4639_ptr,_4705_elmi )];
              if ((_4707_pb < _4706_pe))
              {
                {
                  int32_t _4708_p = _4707_pb;
                  int32_t _4709_p0 = _4708_p;
                  while ( (_4708_p < _4706_pe) )
                  {
                    {
                      double _4710_c = 0.0;
                      bool _4711_cnonzero = false;
                      int32_t _4712_p0e = safe_add( _4708_p,(int)1 );
                      int32_t _4713_p0b = _4708_p;
                      int64_t _4714_varidx = _ptr__4647_wi64[safe_add( _4641_nidxs,_ptr__4677_xi32[safe_add( _4676_perm1,_4713_p0b )] )];
                      while ( ((_4712_p0e < _4706_pe) && (_ptr__4647_wi64[safe_add( _4641_nidxs,_ptr__4677_xi32[safe_add( _4676_perm1,_4712_p0e )] )] == _4714_varidx)) )
                      {
                        {
                          ++ _4712_p0e;
                        }
                      }
                      if ((_4638_ncodeatom > (int)0))
                      {
                        {
                          while ( (_4708_p < _4712_p0e) )
                          {
                            {
                              double _4715_ci = _ptr__4648_wf64[safe_add( _4642_cof,_ptr__4677_xi32[safe_add( _4676_perm1,_4708_p )] )];
                              _4711_cnonzero = (_4711_cnonzero || (!((_4715_ci <= 0.0) && (_4715_ci >= 0.0))));
                              _4710_c += _4715_ci;
                              int32_t _11103_ = _ptr__4646_wi32[safe_add( _4644_codeptr,_ptr__4677_xi32[safe_add( _4676_perm1,_4708_p )] )];
                              int32_t _11104_ = _ptr__4646_wi32[safe_add( safe_add( _4644_codeptr,_ptr__4677_xi32[safe_add( _4676_perm1,_4708_p )] ),(int)1 )];
                              for (int32_t _4716_l = _11103_; _4716_l < _11104_; ++_4716_l)
                              {
                                {
                                  _ptr__4698_ri32[safe_add( _4695_rcode,_4704_codei )] = _ptr__4646_wi32[safe_add( _4643_code,_4716_l )];
                                  _ptr__4700_rf64[safe_add( _4697_rcconst,_4704_codei )] = _ptr__4648_wf64[safe_add( _4645_cconst,_4716_l )];
                                  ++ _4704_codei;
                                }
                              }
                              ++ _4708_p;
                            }
                          }
                          if (((_4712_p0e - _4713_p0b) > (int)1))
                          {
                            {
                              _ptr__4698_ri32[safe_add( _4695_rcode,_4704_codei )] = 8;
                              _ptr__4700_rf64[safe_add( _4697_rcconst,_4704_codei )] = (_4712_p0e - _4713_p0b);
                              ++ _4704_codei;
                            }
                          }
                          {}
                          _ptr__4698_ri32[safe_add( safe_add( _4696_rcodeptr,_4703_nzi ),(int)1 )] = _4704_codei;
                          _ptr__4699_ri64[safe_add( _4690_rnidx,_4703_nzi )] = _4714_varidx;
                          _ptr__4700_rf64[safe_add( _4693_rcof,_4703_nzi )] = _4710_c;
                          ++ _4703_nzi;
                        }
                      }
                      else
                      {
                        {
                          while ( (_4708_p < _4712_p0e) )
                          {
                            {
                              double _4717_ci = _ptr__4648_wf64[safe_add( _4642_cof,_ptr__4677_xi32[safe_add( _4676_perm1,_4708_p )] )];
                              _4711_cnonzero = (_4711_cnonzero || (!((_4717_ci <= 0.0) && (_4717_ci >= 0.0))));
                              _4710_c += _4717_ci;
                              ++ _4708_p;
                            }
                          }
                          if (_4711_cnonzero)
                          {
                            {
                              _ptr__4699_ri64[safe_add( _4690_rnidx,_4703_nzi )] = _4714_varidx;
                              _ptr__4700_rf64[safe_add( _4693_rcof,_4703_nzi )] = _4710_c;
                              ++ _4703_nzi;
                            }
                          }
                          {}
                        }
                      }
                    }
                  }
                }
              }
              {}
              _ptr__4698_ri32[safe_add( safe_add( _4694_rptr,_4705_elmi ),(int)1 )] = _4703_nzi;
            }
          }
        }
        if ((_4679_rncodeatom != _4704_codei))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ncodeatom"));
          }
        }
        {}
        if ((_4703_nzi != _4678_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
          }
        }
        {}
        if ((_4678_rnnz != _ptr__4698_ri32[safe_add( _4694_rptr,_4635_nelem )]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
          }
        }
        {}
      }
      if ((_4679_rncodeatom > (int)0))
      {
        {
          if ((_ptr__4698_ri32[safe_add( _4696_rcodeptr,_4678_rnnz )] != _4679_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  _4632_xs->clear();
}
// End mosek.fusion.ExprCompress.eval

// Begin mosek.fusion.ExprCompress.toString
// Method mosek.fusion.ExprCompress.toString @ src/fusion/ExprCompress.monty:14:6-130
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprCompress::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprCompress.toString

void mosek::fusion::p_ExprCompress::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }
// } class ExprCompress
// class ExprConst { // @ src/fusion/ExprConst.monty:4:4-80:5
mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }
mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprConst::p_ExprConst
  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprConst.ctor @ src/fusion/ExprConst.monty:37:6-42:7
mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4718_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4719_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4720_bfix)
{ return new mosek::fusion::ExprConst(_4718_shape,_4719_sparsity,_4720_bfix); }
mosek::fusion::ExprConst::ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4718_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4719_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4720_bfix) : 
   ExprConst(new mosek::fusion::p_ExprConst(this))
{ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4718_shape,_4719_sparsity,_4720_bfix); }
void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4718_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4719_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _4720_bfix)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4718_shape(_4718_shape ? _4718_shape->raw() : nullptr, _4718_shape ? _4718_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4719_sparsity(_4719_sparsity ? _4719_sparsity->raw() : nullptr, _4719_sparsity ? _4719_sparsity->size(0) : 0);
    _checked_ptr_1<double> _ptr__4720_bfix(_4720_bfix ? _4720_bfix->raw() : nullptr, _4720_bfix ? _4720_bfix->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4718_shape);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_4720_bfix);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _11105_;
    bool _11106_ = (NULL != _4719_sparsity.get());
    if (_11106_)
    {
      _11105_ = ::mosek::fusion::Utils::Tools::arraycopy(_4719_sparsity);
    }
    else
    {
      _11105_ = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _11105_;
    ::mosek::fusion::p_ExprConst::validate(_4718_shape,_4720_bfix,_4719_sparsity);
  }
}
// mosek.fusion.ExprConst.ctor

// mosek.fusion.ExprConst.ctor @ src/fusion/ExprConst.monty:28:6-35:7
mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4721_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4722_sparsity,
    double _4723_bfix)
{ return new mosek::fusion::ExprConst(_4721_shape,_4722_sparsity,_4723_bfix); }
mosek::fusion::ExprConst::ExprConst
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4721_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4722_sparsity,
    double _4723_bfix) : 
   ExprConst(new mosek::fusion::p_ExprConst(this))
{ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4721_shape,_4722_sparsity,_4723_bfix); }
void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4721_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4722_sparsity,
    double _4723_bfix)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4721_shape(_4721_shape ? _4721_shape->raw() : nullptr, _4721_shape ? _4721_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__4722_sparsity(_4722_sparsity ? _4722_sparsity->raw() : nullptr, _4722_sparsity ? _4722_sparsity->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4721_shape);
    int64_t _11107_;
    bool _11108_ = (NULL == _4722_sparsity.get());
    if (_11108_)
    {
      _11107_ = ::mosek::fusion::p_Set::size(_4721_shape);
    }
    else
    {
      _11107_ = (int)((_4722_sparsity)->size(0));
    }
    int64_t _4724_n = _11107_;
    std::vector<double> _11109_;
    for (int64_t _4725_i = (int)0, _11110_ = _4724_n; _4725_i < _11110_ ; ++_4725_i)
    {
      _11109_.push_back(_4723_bfix);
    }
    auto _11111_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11109_.size()),_11109_.begin(),_11109_.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _11111_;
    std::shared_ptr< monty::ndarray< int64_t,1 > > _11112_;
    bool _11113_ = (NULL != _4722_sparsity.get());
    if (_11113_)
    {
      _11112_ = ::mosek::fusion::Utils::Tools::arraycopy(_4722_sparsity);
    }
    else
    {
      _11112_ = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _11112_;
    ::mosek::fusion::p_ExprConst::validate(_4721_shape,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_4722_sparsity);
  }
}
// mosek.fusion.ExprConst.ctor

// Begin mosek.fusion.ExprConst.eval
// Method mosek.fusion.ExprConst.eval @ src/fusion/ExprConst.monty:44:6-79:7
void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4726_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4727_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4728_xs) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_4726_rs,_4727_ws,_4728_xs); }
void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4726_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4727_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4728_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4729_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__4729_shape(_4729_shape ? _4729_shape->raw() : nullptr,_4729_shape ? _4729_shape->size(0) : 0);
  int32_t _4730_nd = (int)((_4729_shape)->size(0));
  int32_t _4731_nnz = (int)0;
  int32_t _11114_ = (int)0;
  int32_t _11115_ = (int)((bfix)->size(0));
  for (int32_t _4732_i = _11114_; _4732_i < _11115_; ++_4732_i)
  {
    {
      if ((!((((*bfix)(_4732_i)) <= 0.0) && (((*bfix)(_4732_i)) >= 0.0))))
      {
        {
          ++ _4731_nnz;
        }
      }
      {}
    }
  }
  int32_t _4733_nelem = (int)((bfix)->size(0));
  bool _4734_hassp = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_4729_shape)));
  _4726_rs->alloc_expr(_4730_nd,_4733_nelem,_4731_nnz,_4734_hassp,(int)0);
  int32_t _4735_rshape = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->shape_base;
  int32_t _4736_rptr = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->ptr_base;
  int32_t _4737_rsp = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->sp_base;
  int32_t _4738_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->nidxs_base;
  int32_t _4739_rcof = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4740_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4740_ri32(_4740_ri32 ? _4740_ri32->raw() : nullptr,_4740_ri32 ? _4740_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4741_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4741_ri64(_4741_ri64 ? _4741_ri64->raw() : nullptr,_4741_ri64 ? _4741_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4742_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4726_rs)->f64;
  _checked_ptr_1<double> _ptr__4742_rf64(_4742_rf64 ? _4742_rf64->raw() : nullptr,_4742_rf64 ? _4742_rf64->size(0) : 0);
  int32_t _11116_ = (int)0;
  int32_t _11117_ = _4730_nd;
  for (int32_t _4743_i = _11116_; _4743_i < _11117_; ++_4743_i)
  {
    {
      _ptr__4740_ri32[safe_add( _4735_rshape,_4743_i )] = _ptr__4729_shape[_4743_i];
    }
  }
  int32_t _4744_nzi = (int)0;
  _ptr__4740_ri32[_4736_rptr] = (int)0;
  if (_4734_hassp)
  {
    {
      int32_t _11118_ = (int)0;
      int32_t _11119_ = _4733_nelem;
      for (int32_t _4745_i = _11118_; _4745_i < _11119_; ++_4745_i)
      {
        {
          _ptr__4741_ri64[safe_add( _4737_rsp,_4745_i )] = ((*sparsity)(_4745_i));
        }
      }
    }
  }
  {}
  int32_t _11120_ = (int)0;
  int32_t _11121_ = _4733_nelem;
  for (int32_t _4746_i = _11120_; _4746_i < _11121_; ++_4746_i)
  {
    {
      if ((!((((*bfix)(_4746_i)) <= 0.0) && (((*bfix)(_4746_i)) >= 0.0))))
      {
        {
          _ptr__4741_ri64[safe_add( _4738_rnidxs,_4744_nzi )] = (int)0;
          _ptr__4742_rf64[safe_add( _4739_rcof,_4744_nzi )] = ((*bfix)(_4746_i));
          ++ _4744_nzi;
        }
      }
      {}
      _ptr__4740_ri32[safe_add( safe_add( _4736_rptr,_4746_i ),(int)1 )] = _4744_nzi;
    }
  }
}
// End mosek.fusion.ExprConst.eval

// Begin mosek.fusion.ExprConst.validate
// Method mosek.fusion.ExprConst.validate @ src/fusion/ExprConst.monty:10:6-26:7
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int32_t,1 > > _4747_shape,std::shared_ptr< monty::ndarray< double,1 > > _4748_bfix,std::shared_ptr< monty::ndarray< int64_t,1 > > _4749_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__4747_shape(_4747_shape ? _4747_shape->raw() : nullptr, _4747_shape ? _4747_shape->size(0) : 0);
  _checked_ptr_1<double> _ptr__4748_bfix(_4748_bfix ? _4748_bfix->raw() : nullptr, _4748_bfix ? _4748_bfix->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__4749_sparsity(_4749_sparsity ? _4749_sparsity->raw() : nullptr, _4749_sparsity ? _4749_sparsity->size(0) : 0);
  int64_t _4750_sz = ::mosek::fusion::p_Set::size(_4747_shape);
  if ((NULL != _4749_sparsity.get()))
  {
    {
      if (((int)((_4749_sparsity)->size(0)) != (int)((_4748_bfix)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _4751_err = false;
      int32_t _11122_ = (int)0;
      int32_t _11123_ = (int)((_4749_sparsity)->size(0));
      for (int32_t _4752_i = _11122_; _4752_i < _11123_; ++_4752_i)
      {
        {
          if (((_ptr__4749_sparsity[_4752_i] < (int)0) || (_ptr__4749_sparsity[_4752_i] >= _4750_sz)))
          {
            {
              _4751_err = true;
            }
          }
          {}
        }
      }
      if (_4751_err)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_4748_bfix)->size(0)) != _4750_sz))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprConst.validate

// Begin mosek.fusion.ExprConst.toString
// Method mosek.fusion.ExprConst.toString @ src/fusion/ExprConst.monty:8:6-63
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprConst::toString()
{
  return std::string ("ExprConst()");
}
// End mosek.fusion.ExprConst.toString

void mosek::fusion::p_ExprConst::destroy()
{
  sparsity.reset();
  bfix.reset();
}
void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }
// } class ExprConst
// class ExprPick { // @ src/fusion/ExprSlice.monty:186:4-386:5
mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }
mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprPick::p_ExprPick
  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprPick.ctor @ src/fusion/ExprSlice.monty:209:6-238:7
mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4753_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4754_idxs)
{ return new mosek::fusion::ExprPick(_4753_expr,_4754_idxs); }
mosek::fusion::ExprPick::ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4753_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4754_idxs) : 
   ExprPick(new mosek::fusion::p_ExprPick(this))
{ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4753_expr,_4754_idxs); }
void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4753_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _4754_idxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4754_idxs)->size(0)))}));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4755_shape = _4753_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4755_shape(_4755_shape ? _4755_shape->raw() : nullptr,_4755_shape ? _4755_shape->size(0) : 0);
    int32_t _4756_nd = (int)((_4755_shape)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4753_expr;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_4754_idxs)->size(0)))));
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4757_this_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<int64_t> _ptr__4757_this_idxs(_4757_this_idxs ? _4757_this_idxs->raw() : nullptr,_4757_this_idxs ? _4757_this_idxs->size(0) : 0);
    if (((int)((_4754_idxs)->size(1)) != _4756_nd))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _4758_wrongindex = false;
    int32_t _11124_ = (int)0;
    int32_t _11125_ = (int)((_4754_idxs)->size(0));
    for (int32_t _4759_i = _11124_; _4759_i < _11125_; ++_4759_i)
    {
      {
        int32_t _11126_ = (int)0;
        int32_t _11127_ = _4756_nd;
        for (int32_t _4760_j = _11126_; _4760_j < _11127_; ++_4760_j)
        {
          {
            if (((((*_4754_idxs)(_4759_i,_4760_j)) < (int)0) || (((*_4754_idxs)(_4759_i,_4760_j)) >= _ptr__4755_shape[_4760_j])))
            {
              {
                _4758_wrongindex = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_4758_wrongindex)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4761_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4756_nd)));
      _checked_ptr_1<int64_t> _ptr__4761_st(_4761_st ? _4761_st->raw() : nullptr,_4761_st ? _4761_st->size(0) : 0);
      _ptr__4761_st[(_4756_nd - (int)1)] = (int)1;
      int32_t _11128_ = (int)1;
      int32_t _11129_ = _4756_nd;
      for (int32_t _4762_i = _11128_; _4762_i < _11129_; ++_4762_i)
      {
        {
          _ptr__4761_st[((_4756_nd - _4762_i) - (int)1)] = safe_mul( _ptr__4761_st[(_4756_nd - _4762_i)],_ptr__4755_shape[(_4756_nd - _4762_i)] );
        }
      }
      int32_t _11130_ = (int)0;
      int32_t _11131_ = (int)((_4754_idxs)->size(0));
      for (int32_t _4763_i = _11130_; _4763_i < _11131_; ++_4763_i)
      {
        {
          int64_t _4764_ii = (int64_t)0;
          int32_t _11132_ = (int)0;
          int32_t _11133_ = _4756_nd;
          for (int32_t _4765_j = _11132_; _4765_j < _11133_; ++_4765_j)
          {
            {
              _4764_ii += safe_mul( _ptr__4761_st[_4765_j],((*_4754_idxs)(_4763_i,_4765_j)) );
            }
          }
          _ptr__4757_this_idxs[_4763_i] = _4764_ii;
        }
      }
    }
  }
}
// mosek.fusion.ExprPick.ctor

// mosek.fusion.ExprPick.ctor @ src/fusion/ExprSlice.monty:190:6-205:7
mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4766_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4767_idxs)
{ return new mosek::fusion::ExprPick(_4766_expr,_4767_idxs); }
mosek::fusion::ExprPick::ExprPick
  (monty::rc_ptr< ::mosek::fusion::Expression > _4766_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4767_idxs) : 
   ExprPick(new mosek::fusion::p_ExprPick(this))
{ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4766_expr,_4767_idxs); }
void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4766_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _4767_idxs)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__4767_idxs(_4767_idxs ? _4767_idxs->raw() : nullptr, _4767_idxs ? _4767_idxs->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_4767_idxs)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4766_expr;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4768_shape = _4766_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4768_shape(_4768_shape ? _4768_shape->raw() : nullptr,_4768_shape ? _4768_shape->size(0) : 0);
    int64_t _4769_size = ::mosek::fusion::p_Set::size(_4768_shape);
    bool _4770_wrongindex = false;
    int32_t _11134_ = (int)0;
    int32_t _11135_ = (int)((_4767_idxs)->size(0));
    for (int32_t _4771_i = _11134_; _4771_i < _11135_; ++_4771_i)
    {
      {
        if (((_ptr__4767_idxs[_4771_i] < (int)0) || (_ptr__4767_idxs[_4771_i] >= _4769_size)))
        {
          {
            _4770_wrongindex = true;
          }
        }
        {}
      }
    }
    if (_4770_wrongindex)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_4767_idxs);
  }
}
// mosek.fusion.ExprPick.ctor

// Begin mosek.fusion.ExprPick.eval
// Method mosek.fusion.ExprPick.eval @ src/fusion/ExprSlice.monty:240:6-385:7
void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4772_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4773_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4774_xs) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_4772_rs,_4773_ws,_4774_xs); }
void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4772_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4773_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4774_xs)
{
  expr->eval(_4773_ws,_4772_rs,_4774_xs);
  _4773_ws->pop_expr();
  int32_t _4775_nd = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->nd;
  int32_t _4776_shape = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->shape_base;
  int32_t _4777_nelem = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->nelem;
  int32_t _4778_nnz = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->nnz;
  int32_t _4779_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->ncodeatom;
  bool _4780_hassp = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->hassp;
  int32_t _4781_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->ptr_base;
  int32_t _4782_sp_base = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->sp_base;
  int32_t _4783_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->nidxs_base;
  int32_t _4784_cof_base = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->cof_base;
  int32_t _4785_code = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->code_base;
  int32_t _4786_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->codeptr_base;
  int32_t _4787_cconst = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4788_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4788_wi32(_4788_wi32 ? _4788_wi32->raw() : nullptr,_4788_wi32 ? _4788_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4789_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4789_wi64(_4789_wi64 ? _4789_wi64->raw() : nullptr,_4789_wi64 ? _4789_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4790_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4773_ws)->f64;
  _checked_ptr_1<double> _ptr__4790_wf64(_4790_wf64 ? _4790_wf64->raw() : nullptr,_4790_wf64 ? _4790_wf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4791_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<int64_t> _ptr__4791_idxs(_4791_idxs ? _4791_idxs->raw() : nullptr,_4791_idxs ? _4791_idxs->size(0) : 0);
  if ((!_4780_hassp))
  {
    {
      int32_t _4792_rnelem = (int)((_4791_idxs)->size(0));
      int32_t _4793_rnd = (int)1;
      int32_t _4794_rnnz = (int)0;
      int32_t _4795_rncodeatom = (int)0;
      int32_t _11136_ = (int)0;
      int32_t _11137_ = (int)((_4791_idxs)->size(0));
      for (int32_t _4796_i = _11136_; _4796_i < _11137_; ++_4796_i)
      {
        {
          _4794_rnnz += (_ptr__4788_wi32[safe_add( safe_add( _4781_ptr_base,_ptr__4791_idxs[_4796_i] ),(int)1 )] - _ptr__4788_wi32[safe_add( _4781_ptr_base,_ptr__4791_idxs[_4796_i] )]);
          if ((_4779_ncodeatom > (int)0))
          {
            {
              _4795_rncodeatom += (_ptr__4788_wi32[safe_add( _4786_codeptr,_ptr__4788_wi32[safe_add( safe_add( _4781_ptr_base,_ptr__4791_idxs[_4796_i] ),(int)1 )] )] - _ptr__4788_wi32[safe_add( _4786_codeptr,_ptr__4788_wi32[safe_add( _4781_ptr_base,_ptr__4791_idxs[_4796_i] )] )]);
            }
          }
          {}
        }
      }
      _4772_rs->alloc_expr(_4793_rnd,_4792_rnelem,_4794_rnnz,false,_4795_rncodeatom);
      int32_t _4797_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->cof_base;
      int32_t _4798_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->nidxs_base;
      int32_t _4799_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->ptr_base;
      int32_t _4800_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->shape_base;
      int32_t _4801_rcode = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->code_base;
      int32_t _4802_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->codeptr_base;
      int32_t _4803_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->cconst_base;
      {
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4804_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4804_ri32(_4804_ri32 ? _4804_ri32->raw() : nullptr,_4804_ri32 ? _4804_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4805_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4805_ri64(_4805_ri64 ? _4805_ri64->raw() : nullptr,_4805_ri64 ? _4805_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4806_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->f64;
      _checked_ptr_1<double> _ptr__4806_rf64(_4806_rf64 ? _4806_rf64->raw() : nullptr,_4806_rf64 ? _4806_rf64->size(0) : 0);
      _ptr__4804_ri32[_4800_rshape_base] = (int)((_4791_idxs)->size(0));
      int32_t _4807_codei = (int)0;
      int32_t _4808_knz = (int)0;
      _ptr__4804_ri32[_4799_rptr_base] = (int)0;
      int32_t _11138_ = (int)0;
      int32_t _11139_ = (int)((_4791_idxs)->size(0));
      for (int32_t _4809_i = _11138_; _4809_i < _11139_; ++_4809_i)
      {
        {
          int32_t _11140_ = _ptr__4788_wi32[safe_add( _4781_ptr_base,_ptr__4791_idxs[_4809_i] )];
          int32_t _11141_ = _ptr__4788_wi32[safe_add( safe_add( _4781_ptr_base,_ptr__4791_idxs[_4809_i] ),(int)1 )];
          for (int32_t _4810_j = _11140_; _4810_j < _11141_; ++_4810_j)
          {
            {
              _ptr__4805_ri64[safe_add( _4798_rnidxs_base,_4808_knz )] = _ptr__4789_wi64[safe_add( _4783_nidxs_base,_4810_j )];
              _ptr__4806_rf64[safe_add( _4797_rcof_base,_4808_knz )] = _ptr__4790_wf64[safe_add( _4784_cof_base,_4810_j )];
              if ((_4779_ncodeatom > (int)0))
              {
                {
                  int32_t _11142_ = _ptr__4788_wi32[safe_add( _4786_codeptr,_4810_j )];
                  int32_t _11143_ = _ptr__4788_wi32[safe_add( safe_add( _4786_codeptr,_4810_j ),(int)1 )];
                  for (int32_t _4811_k = _11142_; _4811_k < _11143_; ++_4811_k)
                  {
                    {
                      _ptr__4804_ri32[safe_add( _4801_rcode,_4807_codei )] = _ptr__4788_wi32[safe_add( _4785_code,_4811_k )];
                      _ptr__4806_rf64[safe_add( _4803_rcconst,_4807_codei )] = _ptr__4790_wf64[safe_add( _4787_cconst,_4811_k )];
                      ++ _4807_codei;
                    }
                  }
                  _ptr__4804_ri32[safe_add( safe_add( _4802_rcodeptr,_4808_knz ),(int)1 )] = _4807_codei;
                }
              }
              {}
              ++ _4808_knz;
            }
          }
          _ptr__4804_ri32[safe_add( safe_add( _4799_rptr_base,_4809_i ),(int)1 )] = _4808_knz;
        }
      }
    }
  }
  else
  {
    {
      int32_t _4812_rnd = (int)1;
      int32_t _4813_rnelem = (int)((_4791_idxs)->size(0));
      int32_t _4814_rnnz = (int)0;
      int32_t _4815_rncodeatom = (int)0;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4816_idxs = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<int64_t> _ptr__4816_idxs(_4816_idxs ? _4816_idxs->raw() : nullptr,_4816_idxs ? _4816_idxs->size(0) : 0);
      int32_t _4817_tidxs = _4774_xs->alloci32((int)((_4816_idxs)->size(0)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4818_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4774_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__4818_xi32(_4818_xi32 ? _4818_xi32->raw() : nullptr,_4818_xi32 ? _4818_xi32->size(0) : 0);
      int32_t _11144_ = (int)0;
      int32_t _11145_ = (int)((_4816_idxs)->size(0));
      for (int32_t _4819_i = _11144_; _4819_i < _11145_; ++_4819_i)
      {
        {
          int32_t _4820_b1 = _4777_nelem;
          int32_t _4821_b0 = (int)0;
          while ( (_4821_b0 < (_4820_b1 - (int)1)) )
          {
            {
              int32_t _4822_pi = (safe_add( safe_add( _4820_b1,_4821_b0 ),(int)1 ) / (int)2);
              if ((_ptr__4789_wi64[safe_add( _4782_sp_base,_4822_pi )] >= _ptr__4816_idxs[_4819_i]))
              {
                {
                  _4820_b1 = _4822_pi;
                }
              }
              else
              {
                {
                  _4821_b0 = _4822_pi;
                }
              }
            }
          }
          ++ _4821_b0;
          if (((_4821_b0 < _4777_nelem) && (_ptr__4789_wi64[safe_add( _4782_sp_base,_4821_b0 )] == _ptr__4816_idxs[_4819_i])))
          {
            {
              _ptr__4818_xi32[safe_add( _4817_tidxs,_4819_i )] = _4821_b0;
              _4814_rnnz += (_ptr__4788_wi32[safe_add( safe_add( _4781_ptr_base,_4821_b0 ),(int)1 )] - _ptr__4788_wi32[safe_add( _4781_ptr_base,_4821_b0 )]);
              if ((_4779_ncodeatom > (int)0))
              {
                {
                  _4815_rncodeatom += (_ptr__4788_wi32[safe_add( _4786_codeptr,_ptr__4788_wi32[safe_add( safe_add( _4781_ptr_base,_ptr__4816_idxs[_4819_i] ),(int)1 )] )] - _ptr__4788_wi32[safe_add( _4786_codeptr,_ptr__4788_wi32[safe_add( _4781_ptr_base,_ptr__4816_idxs[_4819_i] )] )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _ptr__4818_xi32[safe_add( _4817_tidxs,_4819_i )] = (-(int)1);
            }
          }
        }
      }
      _4772_rs->alloc_expr(_4812_rnd,_4813_rnelem,_4814_rnnz,false,_4815_rncodeatom);
      int32_t _4823_rptr = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->ptr_base;
      int32_t _4824_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->nidxs_base;
      int32_t _4825_rcof = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->cof_base;
      int32_t _4826_rshape = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->shape_base;
      int32_t _4827_rcode = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->code_base;
      int32_t _4828_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->codeptr_base;
      int32_t _4829_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4830_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__4830_ri32(_4830_ri32 ? _4830_ri32->raw() : nullptr,_4830_ri32 ? _4830_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4831_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__4831_ri64(_4831_ri64 ? _4831_ri64->raw() : nullptr,_4831_ri64 ? _4831_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4832_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4772_rs)->f64;
      _checked_ptr_1<double> _ptr__4832_rf64(_4832_rf64 ? _4832_rf64->raw() : nullptr,_4832_rf64 ? _4832_rf64->size(0) : 0);
      _ptr__4830_ri32[_4826_rshape] = (int)((_4816_idxs)->size(0));
      _ptr__4830_ri32[_4823_rptr] = (int)0;
      int32_t _4833_codei = (int)0;
      int32_t _4834_k = (int)0;
      int32_t _11146_ = (int)0;
      int32_t _11147_ = (int)((_4816_idxs)->size(0));
      for (int32_t _4835_i = _11146_; _4835_i < _11147_; ++_4835_i)
      {
        {
          if ((_ptr__4818_xi32[safe_add( _4817_tidxs,_4835_i )] >= (int)0))
          {
            {
              int32_t _4836_b0 = _ptr__4818_xi32[safe_add( _4817_tidxs,_4835_i )];
              int32_t _11148_ = _ptr__4788_wi32[safe_add( _4781_ptr_base,_4836_b0 )];
              int32_t _11149_ = _ptr__4788_wi32[safe_add( safe_add( _4781_ptr_base,_4836_b0 ),(int)1 )];
              for (int32_t _4837_j = _11148_; _4837_j < _11149_; ++_4837_j)
              {
                {
                  _ptr__4831_ri64[safe_add( _4824_rnidxs,_4834_k )] = _ptr__4789_wi64[safe_add( _4783_nidxs_base,_4837_j )];
                  _ptr__4832_rf64[safe_add( _4825_rcof,_4834_k )] = _ptr__4790_wf64[safe_add( _4784_cof_base,_4837_j )];
                  if ((_4779_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11150_ = _ptr__4788_wi32[safe_add( _4786_codeptr,_4837_j )];
                      int32_t _11151_ = _ptr__4788_wi32[safe_add( safe_add( _4786_codeptr,_4837_j ),(int)1 )];
                      for (int32_t _4838_l = _11150_; _4838_l < _11151_; ++_4838_l)
                      {
                        {
                          _ptr__4830_ri32[safe_add( _4827_rcode,_4833_codei )] = _ptr__4788_wi32[safe_add( _4785_code,_4838_l )];
                          _ptr__4832_rf64[safe_add( _4829_rcconst,_4833_codei )] = _ptr__4790_wf64[safe_add( _4787_cconst,_4838_l )];
                          ++ _4833_codei;
                        }
                      }
                      _ptr__4830_ri32[safe_add( safe_add( _4828_rcodeptr,_4834_k ),(int)1 )] = _4833_codei;
                    }
                  }
                  {}
                  ++ _4834_k;
                }
              }
            }
          }
          {}
          _ptr__4830_ri32[safe_add( safe_add( _4823_rptr,_4835_i ),(int)1 )] = _4834_k;
        }
      }
    }
  }
}
// End mosek.fusion.ExprPick.eval

// Begin mosek.fusion.ExprPick.toString
// Method mosek.fusion.ExprPick.toString @ src/fusion/ExprSlice.monty:207:6-62
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprPick::toString()
{
  return std::string ("ExprPick()");
}
// End mosek.fusion.ExprPick.toString

void mosek::fusion::p_ExprPick::destroy()
{
  idxs.reset();
  expr.reset();
}
void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }
// } class ExprPick
// class ExprSlice { // @ src/fusion/ExprSlice.monty:4:4-182:5
mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }
mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSlice::p_ExprSlice
  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSlice.ctor @ src/fusion/ExprSlice.monty:28:6-34:7
mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice
  (monty::rc_ptr< ::mosek::fusion::Expression > _4839_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4840_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4841_last)
{ return new mosek::fusion::ExprSlice(_4839_expr,_4840_first,_4841_last); }
mosek::fusion::ExprSlice::ExprSlice
  (monty::rc_ptr< ::mosek::fusion::Expression > _4839_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4840_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4841_last) : 
   ExprSlice(new mosek::fusion::p_ExprSlice(this))
{ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_4839_expr,_4840_first,_4841_last); }
void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4839_expr,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4840_first,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4841_last)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4840_first(_4840_first ? _4840_first->raw() : nullptr, _4840_first ? _4840_first->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__4841_last(_4841_last ? _4841_last->raw() : nullptr, _4841_last ? _4841_last->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_4839_expr->getShape(),_4840_first,_4841_last));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _4839_expr;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _4840_first;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _4841_last;
  }
}
// mosek.fusion.ExprSlice.ctor

// Begin mosek.fusion.ExprSlice.eval
// Method mosek.fusion.ExprSlice.eval @ src/fusion/ExprSlice.monty:36:6-181:7
void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4842_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4843_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4844_xs) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_4842_rs,_4843_ws,_4844_xs); }
void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4842_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4843_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4844_xs)
{
  expr->eval(_4843_ws,_4842_rs,_4844_xs);
  _4843_ws->pop_expr();
  int32_t _4845_nd = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->nd;
  int32_t _4846_nelem = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->nelem;
  int32_t _4847_nnz = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->nnz;
  int32_t _4848_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->ncodeatom;
  bool _4849_hassp = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->hassp;
  int32_t _4850_shape_base = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->shape_base;
  int32_t _4851_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->ptr_base;
  int32_t _4852_sp_base = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->sp_base;
  int32_t _4853_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->nidxs_base;
  int32_t _4854_cof_base = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->cof_base;
  int32_t _4855_code = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->code_base;
  int32_t _4856_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->codeptr_base;
  int32_t _4857_cconst = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4858_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4858_wi32(_4858_wi32 ? _4858_wi32->raw() : nullptr,_4858_wi32 ? _4858_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4859_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4859_wi64(_4859_wi64 ? _4859_wi64->raw() : nullptr,_4859_wi64 ? _4859_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4860_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4843_ws)->f64;
  _checked_ptr_1<double> _ptr__4860_wf64(_4860_wf64 ? _4860_wf64->raw() : nullptr,_4860_wf64 ? _4860_wf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4861_st = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4845_nd)));
  _checked_ptr_1<int64_t> _ptr__4861_st(_4861_st ? _4861_st->raw() : nullptr,_4861_st ? _4861_st->size(0) : 0);
  _ptr__4861_st[(_4845_nd - (int)1)] = (int)1;
  int32_t _11152_ = (int)1;
  int32_t _11153_ = _4845_nd;
  for (int32_t _4862_i = _11152_; _4862_i < _11153_; ++_4862_i)
  {
    {
      _ptr__4861_st[((_4845_nd - _4862_i) - (int)1)] = safe_mul( _ptr__4861_st[(_4845_nd - _4862_i)],_ptr__4858_wi32[(safe_add( _4850_shape_base,_4845_nd ) - _4862_i)] );
    }
  }
  int32_t _4863_rncodeatom = (int)0;
  int32_t _4864_rnelem = (int)0;
  int32_t _4865_rnnz = (int)0;
  if (_4849_hassp)
  {
    {
      int32_t _11154_ = (int)0;
      int32_t _11155_ = _4846_nelem;
      for (int32_t _4866_i = _11154_; _4866_i < _11155_; ++_4866_i)
      {
        {
          bool _4867_in_bounds = true;
          int32_t _11156_ = (int)0;
          int32_t _11157_ = _4845_nd;
          for (int32_t _4868_j = _11156_; _4868_j < _11157_; ++_4868_j)
          {
            {
              int64_t _4869_kj = ((_ptr__4859_wi64[safe_add( _4852_sp_base,_4866_i )] / _ptr__4861_st[_4868_j]) % _ptr__4858_wi32[safe_add( _4850_shape_base,_4868_j )]);
              _4867_in_bounds = (_4867_in_bounds && ((_4869_kj >= ((*first)(_4868_j))) && (_4869_kj < ((*last)(_4868_j)))));
            }
          }
          if (_4867_in_bounds)
          {
            {
              _4865_rnnz += (_ptr__4858_wi32[safe_add( safe_add( _4851_ptr_base,_4866_i ),(int)1 )] - _ptr__4858_wi32[safe_add( _4851_ptr_base,_4866_i )]);
              if ((_4848_ncodeatom > (int)0))
              {
                {
                  _4863_rncodeatom += (_ptr__4858_wi32[safe_add( _4856_codeptr,_ptr__4858_wi32[safe_add( safe_add( _4851_ptr_base,_4866_i ),(int)1 )] )] - _ptr__4858_wi32[safe_add( _4856_codeptr,_ptr__4858_wi32[safe_add( _4851_ptr_base,_4866_i )] )]);
                }
              }
              {}
              ++ _4864_rnelem;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _4864_rnelem = (int)1;
      int32_t _11158_ = (int)0;
      int32_t _11159_ = _4845_nd;
      for (int32_t _4870_i = _11158_; _4870_i < _11159_; ++_4870_i)
      {
        {
          _4864_rnelem *= (((*last)(_4870_i)) - ((*first)(_4870_i)));
        }
      }
      int32_t _11160_ = (int)0;
      int32_t _11161_ = _4846_nelem;
      for (int32_t _4871_i = _11160_; _4871_i < _11161_; ++_4871_i)
      {
        {
          bool _4872_in_bounds = true;
          int32_t _11162_ = (int)0;
          int32_t _11163_ = _4845_nd;
          for (int32_t _4873_j = _11162_; _4873_j < _11163_; ++_4873_j)
          {
            {
              int64_t _4874_kj = ((_4871_i / _ptr__4861_st[_4873_j]) % _ptr__4858_wi32[safe_add( _4850_shape_base,_4873_j )]);
              _4872_in_bounds = (_4872_in_bounds && ((_4874_kj >= ((*first)(_4873_j))) && (_4874_kj < ((*last)(_4873_j)))));
            }
          }
          if (_4872_in_bounds)
          {
            {
              _4865_rnnz += (_ptr__4858_wi32[safe_add( safe_add( _4851_ptr_base,_4871_i ),(int)1 )] - _ptr__4858_wi32[safe_add( _4851_ptr_base,_4871_i )]);
              if ((_4848_ncodeatom > (int)0))
              {
                {
                  _4863_rncodeatom += (_ptr__4858_wi32[safe_add( _4856_codeptr,_ptr__4858_wi32[safe_add( safe_add( _4851_ptr_base,_4871_i ),(int)1 )] )] - _ptr__4858_wi32[safe_add( _4856_codeptr,_ptr__4858_wi32[safe_add( _4851_ptr_base,_4871_i )] )]);
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int32_t> _11164_;
  for (int32_t _4876_i = (int)0, _11165_ = _4845_nd; _4876_i < _11165_ ; ++_4876_i)
  {
    _11164_.push_back((((*last)(_4876_i)) - ((*first)(_4876_i))));
  }
  auto _11166_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11164_.size()),_11164_.begin(),_11164_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4875_rshape = _11166_;
  _checked_ptr_1<int32_t> _ptr__4875_rshape(_4875_rshape ? _4875_rshape->raw() : nullptr,_4875_rshape ? _4875_rshape->size(0) : 0);
  bool _4877_rhassp = (_4864_rnelem < ::mosek::fusion::p_Set::size(_4875_rshape));
  _4842_rs->alloc_expr(_4845_nd,_4864_rnelem,_4865_rnnz,_4877_rhassp,_4863_rncodeatom);
  int32_t _4878_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->shape_base;
  int32_t _4879_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->cof_base;
  int32_t _4880_rnidx_base = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->nidxs_base;
  int32_t _11167_;
  bool _11168_ = _4877_rhassp;
  if (_11168_)
  {
    _11167_ = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->sp_base;
  }
  else
  {
    _11167_ = _4842_rs->alloci64(_4864_rnelem);
  }
  int32_t _4881_rsp_base = _11167_;
  int32_t _4882_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->ptr_base;
  int32_t _4883_rcode = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->code_base;
  int32_t _4884_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->codeptr_base;
  int32_t _4885_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4886_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4886_ri32(_4886_ri32 ? _4886_ri32->raw() : nullptr,_4886_ri32 ? _4886_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4887_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4887_ri64(_4887_ri64 ? _4887_ri64->raw() : nullptr,_4887_ri64 ? _4887_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4888_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4842_rs)->f64;
  _checked_ptr_1<double> _ptr__4888_rf64(_4888_rf64 ? _4888_rf64->raw() : nullptr,_4888_rf64 ? _4888_rf64->size(0) : 0);
  int32_t _11169_ = (int)0;
  int32_t _11170_ = _4845_nd;
  for (int32_t _4889_i = _11169_; _4889_i < _11170_; ++_4889_i)
  {
    {
      _ptr__4886_ri32[safe_add( _4878_rshape_base,_4889_i )] = _ptr__4875_rshape[_4889_i];
    }
  }
  _ptr__4886_ri32[_4882_rptr_base] = (int)0;
  if ((_4848_ncodeatom > (int)0))
  {
    {
      _ptr__4886_ri32[_4884_rcodeptr] = (int)0;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4890_rst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4845_nd)));
  _checked_ptr_1<int64_t> _ptr__4890_rst(_4890_rst ? _4890_rst->raw() : nullptr,_4890_rst ? _4890_rst->size(0) : 0);
  _ptr__4890_rst[(_4845_nd - (int)1)] = (int)1;
  int32_t _11171_ = (int)1;
  int32_t _11172_ = _4845_nd;
  for (int32_t _4891_j = _11171_; _4891_j < _11172_; ++_4891_j)
  {
    {
      _ptr__4890_rst[((_4845_nd - _4891_j) - (int)1)] = safe_mul( _ptr__4890_rst[(_4845_nd - _4891_j)],_ptr__4875_rshape[(_4845_nd - _4891_j)] );
    }
  }
  int32_t _4892_codei = (int)0;
  int32_t _4893_kelem = (int)0;
  int32_t _4894_knz = (int)0;
  if (_4849_hassp)
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _4895_key = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4845_nd)));
      _checked_ptr_1<int32_t> _ptr__4895_key(_4895_key ? _4895_key->raw() : nullptr,_4895_key ? _4895_key->size(0) : 0);
      int32_t _11173_ = (int)0;
      int32_t _11174_ = _4846_nelem;
      for (int32_t _4896_i = _11173_; _4896_i < _11174_; ++_4896_i)
      {
        {
          bool _4897_in_bounds = true;
          int32_t _11175_ = (int)0;
          int32_t _11176_ = _4845_nd;
          for (int32_t _4898_j = _11175_; _4898_j < _11176_; ++_4898_j)
          {
            {
              _ptr__4895_key[_4898_j] = (int32_t)((_ptr__4859_wi64[safe_add( _4852_sp_base,_4896_i )] / _ptr__4861_st[_4898_j]) % _ptr__4858_wi32[safe_add( _4850_shape_base,_4898_j )]);
              _4897_in_bounds = (_4897_in_bounds && ((_ptr__4895_key[_4898_j] >= ((*first)(_4898_j))) && (_ptr__4895_key[_4898_j] < ((*last)(_4898_j)))));
            }
          }
          if (_4897_in_bounds)
          {
            {
              int32_t _11177_ = _ptr__4858_wi32[safe_add( _4851_ptr_base,_4896_i )];
              int32_t _11178_ = _ptr__4858_wi32[safe_add( safe_add( _4851_ptr_base,_4896_i ),(int)1 )];
              for (int32_t _4899_j = _11177_; _4899_j < _11178_; ++_4899_j)
              {
                {
                  _ptr__4887_ri64[safe_add( _4880_rnidx_base,_4894_knz )] = _ptr__4859_wi64[safe_add( _4853_nidxs_base,_4899_j )];
                  _ptr__4888_rf64[safe_add( _4879_rcof_base,_4894_knz )] = _ptr__4860_wf64[safe_add( _4854_cof_base,_4899_j )];
                  if ((_4848_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11179_ = _ptr__4858_wi32[safe_add( _4856_codeptr,_4899_j )];
                      int32_t _11180_ = _ptr__4858_wi32[safe_add( safe_add( _4856_codeptr,_4899_j ),(int)1 )];
                      for (int32_t _4900_k = _11179_; _4900_k < _11180_; ++_4900_k)
                      {
                        {
                          _ptr__4886_ri32[safe_add( _4883_rcode,_4892_codei )] = _ptr__4858_wi32[safe_add( _4855_code,_4900_k )];
                          _ptr__4888_rf64[safe_add( _4885_rcconst,_4892_codei )] = _ptr__4860_wf64[safe_add( _4857_cconst,_4900_k )];
                          ++ _4892_codei;
                        }
                      }
                      _ptr__4886_ri32[safe_add( safe_add( _4884_rcodeptr,_4894_knz ),(int)1 )] = _4892_codei;
                    }
                  }
                  {}
                  ++ _4894_knz;
                }
              }
              int64_t _4901_newidx = (int64_t)0;
              int32_t _11181_ = (int)0;
              int32_t _11182_ = _4845_nd;
              for (int32_t _4902_j = _11181_; _4902_j < _11182_; ++_4902_j)
              {
                {
                  _4901_newidx += safe_mul( _ptr__4890_rst[_4902_j],(_ptr__4895_key[_4902_j] - ((*first)(_4902_j))) );
                }
              }
              _ptr__4887_ri64[safe_add( _4881_rsp_base,_4893_kelem )] = _4901_newidx;
              _ptr__4886_ri32[safe_add( safe_add( _4882_rptr_base,_4893_kelem ),(int)1 )] = _4894_knz;
              ++ _4893_kelem;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _11183_ = (int)0;
      int32_t _11184_ = _4846_nelem;
      for (int32_t _4903_i = _11183_; _4903_i < _11184_; ++_4903_i)
      {
        {
          bool _4904_in_bounds = true;
          int32_t _11185_ = (int)0;
          int32_t _11186_ = _4845_nd;
          for (int32_t _4905_j = _11185_; _4905_j < _11186_; ++_4905_j)
          {
            {
              int64_t _4906_kj = ((_4903_i / _ptr__4861_st[_4905_j]) % _ptr__4858_wi32[safe_add( _4850_shape_base,_4905_j )]);
              _4904_in_bounds = (_4904_in_bounds && ((_4906_kj >= ((*first)(_4905_j))) && (_4906_kj < ((*last)(_4905_j)))));
            }
          }
          if (_4904_in_bounds)
          {
            {
              int32_t _11187_ = _ptr__4858_wi32[safe_add( _4851_ptr_base,_4903_i )];
              int32_t _11188_ = _ptr__4858_wi32[safe_add( safe_add( _4851_ptr_base,_4903_i ),(int)1 )];
              for (int32_t _4907_j = _11187_; _4907_j < _11188_; ++_4907_j)
              {
                {
                  _ptr__4887_ri64[safe_add( _4880_rnidx_base,_4894_knz )] = _ptr__4859_wi64[safe_add( _4853_nidxs_base,_4907_j )];
                  _ptr__4888_rf64[safe_add( _4879_rcof_base,_4894_knz )] = _ptr__4860_wf64[safe_add( _4854_cof_base,_4907_j )];
                  if ((_4848_ncodeatom > (int)0))
                  {
                    {
                      int32_t _11189_ = _ptr__4858_wi32[safe_add( _4856_codeptr,_4907_j )];
                      int32_t _11190_ = _ptr__4858_wi32[safe_add( safe_add( _4856_codeptr,_4907_j ),(int)1 )];
                      for (int32_t _4908_k = _11189_; _4908_k < _11190_; ++_4908_k)
                      {
                        {
                          _ptr__4886_ri32[safe_add( _4883_rcode,_4892_codei )] = _ptr__4858_wi32[safe_add( _4855_code,_4908_k )];
                          _ptr__4888_rf64[safe_add( _4885_rcconst,_4892_codei )] = _ptr__4860_wf64[safe_add( _4857_cconst,_4908_k )];
                          ++ _4892_codei;
                        }
                      }
                      _ptr__4886_ri32[safe_add( safe_add( _4884_rcodeptr,_4894_knz ),(int)1 )] = _4892_codei;
                    }
                  }
                  {}
                  ++ _4894_knz;
                }
              }
              _ptr__4886_ri32[safe_add( safe_add( _4882_rptr_base,_4893_kelem ),(int)1 )] = _4894_knz;
              ++ _4893_kelem;
            }
          }
          {}
        }
      }
    }
  }
  if ((!_4877_rhassp))
  {
    {
      _4842_rs->popi64(_4864_rnelem);
    }
  }
  {}
}
// End mosek.fusion.ExprSlice.eval

// Begin mosek.fusion.ExprSlice.makeShape
// Method mosek.fusion.ExprSlice.makeShape @ src/fusion/ExprSlice.monty:17:6-24:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4909_shape,std::shared_ptr< monty::ndarray< int32_t,1 > > _4910_first,std::shared_ptr< monty::ndarray< int32_t,1 > > _4911_last)
{
  _checked_ptr_1<int32_t> _ptr__4909_shape(_4909_shape ? _4909_shape->raw() : nullptr, _4909_shape ? _4909_shape->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4910_first(_4910_first ? _4910_first->raw() : nullptr, _4910_first ? _4910_first->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4911_last(_4911_last ? _4911_last->raw() : nullptr, _4911_last ? _4911_last->size(0) : 0);
  if ((((int)((_4909_shape)->size(0)) != (int)((_4910_first)->size(0))) || ((int)((_4909_shape)->size(0)) != (int)((_4911_last)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int32_t _11191_ = (int)0;
  int32_t _11192_ = (int)((_4909_shape)->size(0));
  for (int32_t _4912_i = _11191_; _4912_i < _11192_; ++_4912_i)
  {
    {
      if (((_ptr__4910_first[_4912_i] < (int)0) || ((_ptr__4911_last[_4912_i] < _ptr__4910_first[_4912_i]) || (_ptr__4911_last[_4912_i] > _ptr__4909_shape[_4912_i]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _11193_;
  for (int32_t _4913_i = (int)0, _11194_ = (int)((_4909_shape)->size(0)); _4913_i < _11194_ ; ++_4913_i)
  {
    _11193_.push_back((_ptr__4911_last[_4913_i] - _ptr__4910_first[_4913_i]));
  }
  auto _11195_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11193_.size()),_11193_.begin(),_11193_.end()));
  return _11195_;
}
// End mosek.fusion.ExprSlice.makeShape

// Begin mosek.fusion.ExprSlice.toString
// Method mosek.fusion.ExprSlice.toString @ src/fusion/ExprSlice.monty:9:6-15:7
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSlice::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4914_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int32_t _11196_ = (int)1;
  int32_t _11197_ = (int)((first)->size(0));
  for (int32_t _4915_i = _11196_; _4915_i < _11197_; ++_4915_i)
  {
    {
      _4914_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_4915_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_4915_i)));
    }
  }
  _4914_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4914_sb->toString();
}
// End mosek.fusion.ExprSlice.toString

void mosek::fusion::p_ExprSlice::destroy()
{
  last.reset();
  first.reset();
  expr.reset();
}
void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }
// } class ExprSlice
// class ExprPermuteDims { // @ src/fusion/ExprTranspose.monty:153:4-295:5
mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }
mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims
  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprPermuteDims.ctor @ src/fusion/ExprTranspose.monty:167:6-184:7
mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4916_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4917_expr)
{ return new mosek::fusion::ExprPermuteDims(_4916_perm,_4917_expr); }
mosek::fusion::ExprPermuteDims::ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4916_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4917_expr) : 
   ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this))
{ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4916_perm,_4917_expr); }
void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4916_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4917_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4916_perm(_4916_perm ? _4916_perm->raw() : nullptr, _4916_perm ? _4916_perm->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_4916_perm,_4917_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4918_shape = _4917_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__4918_shape(_4918_shape ? _4918_shape->raw() : nullptr,_4918_shape ? _4918_shape->size(0) : 0);
    if (((int)((_4916_perm)->size(0)) != (int)((_4918_shape)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int32_t> _11198_;
    for (int32_t _4920_i = (int)0, _11199_ = (int)((_4916_perm)->size(0)); _4920_i < _11199_ ; ++_4920_i)
    {
      _11198_.push_back((int)0);
    }
    auto _11200_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11198_.size()),_11198_.begin(),_11198_.end()));
    std::shared_ptr< monty::ndarray< int32_t,1 > > _4919_check = _11200_;
    _checked_ptr_1<int32_t> _ptr__4919_check(_4919_check ? _4919_check->raw() : nullptr,_4919_check ? _4919_check->size(0) : 0);
    int32_t _11201_ = (int)0;
    int32_t _11202_ = (int)((_4919_check)->size(0));
    for (int32_t _4921_i = _11201_; _4921_i < _11202_; ++_4921_i)
    {
      {
        if (((_ptr__4916_perm[_4921_i] < (int)0) || (_ptr__4916_perm[_4921_i] > (int)((_4918_shape)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__4919_check[_ptr__4916_perm[_4921_i]];
      }
    }
    int32_t _11203_ = (int)0;
    int32_t _11204_ = (int)((_4919_check)->size(0));
    for (int32_t _4922_i = _11203_; _4922_i < _11204_; ++_4922_i)
    {
      {
        if (((_ptr__4919_check[_4922_i] < (int)1) || (_ptr__4919_check[_4922_i] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprPermuteDims.ctor

// mosek.fusion.ExprPermuteDims.ctor @ src/fusion/ExprTranspose.monty:161:6-165:7
mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4923_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4924_expr,
    int32_t _4925_validated)
{ return new mosek::fusion::ExprPermuteDims(_4923_perm,_4924_expr,_4925_validated); }
mosek::fusion::ExprPermuteDims::ExprPermuteDims
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4923_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4924_expr,
    int32_t _4925_validated) : 
   ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this))
{ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4923_perm,_4924_expr,_4925_validated); }
void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _4923_perm,
    monty::rc_ptr< ::mosek::fusion::Expression > _4924_expr,
    int32_t _4925_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__4923_perm(_4923_perm ? _4923_perm->raw() : nullptr, _4923_perm ? _4923_perm->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_4923_perm,_4924_expr->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _4924_expr;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_4923_perm);
  }
}
// mosek.fusion.ExprPermuteDims.ctor

// Begin mosek.fusion.ExprPermuteDims.eval
// Method mosek.fusion.ExprPermuteDims.eval @ src/fusion/ExprTranspose.monty:186:6-294:7
void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4926_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4927_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4928_xs) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_4926_rs,_4927_ws,_4928_xs); }
void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4926_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4927_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4928_xs)
{
  expr->eval(_4927_ws,_4926_rs,_4928_xs);
  _4927_ws->pop_expr();
  int32_t _4929_nd = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->nd;
  int32_t _4930_nelem = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->nelem;
  int32_t _4931_nnz = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->nnz;
  int32_t _4932_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->ncodeatom;
  bool _4933_hassp = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->hassp;
  int32_t _4934_shape_base = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->shape_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4935_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4929_nd)));
  _checked_ptr_1<int64_t> _ptr__4935_stride(_4935_stride ? _4935_stride->raw() : nullptr,_4935_stride ? _4935_stride->size(0) : 0);
  _ptr__4935_stride[(_4929_nd - (int)1)] = (int)1;
  int32_t _11205_ = (int)1;
  int32_t _11206_ = _4929_nd;
  for (int32_t _4936_i = _11205_; _4936_i < _11206_; ++_4936_i)
  {
    {
      _ptr__4935_stride[((_4929_nd - _4936_i) - (int)1)] = safe_mul( _ptr__4935_stride[(_4929_nd - _4936_i)],((*mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->i32)((safe_add( _4934_shape_base,_4929_nd ) - _4936_i))) );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4937_dstride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_4929_nd)));
  _checked_ptr_1<int32_t> _ptr__4937_dstride(_4937_dstride ? _4937_dstride->raw() : nullptr,_4937_dstride ? _4937_dstride->size(0) : 0);
  _ptr__4937_dstride[(_4929_nd - (int)1)] = (int)1;
  int32_t _11207_ = (int)1;
  int32_t _11208_ = _4929_nd;
  for (int32_t _4938_i = _11207_; _4938_i < _11208_; ++_4938_i)
  {
    {
      _ptr__4937_dstride[((_4929_nd - _4938_i) - (int)1)] = safe_mul( _ptr__4937_dstride[(_4929_nd - _4938_i)],((*mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->i32)(safe_add( _4934_shape_base,((*dperm)((_4929_nd - _4938_i))) ))) );
    }
  }
  int32_t _4939_eptr_base = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->ptr_base;
  int32_t _4940_esp_base = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->sp_base;
  int32_t _4941_enidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->nidxs_base;
  int32_t _4942_ecof_base = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->cof_base;
  int32_t _4943_code = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->code_base;
  int32_t _4944_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->codeptr_base;
  int32_t _4945_cconst = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4946_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__4946_wi32(_4946_wi32 ? _4946_wi32->raw() : nullptr,_4946_wi32 ? _4946_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4947_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__4947_wi64(_4947_wi64 ? _4947_wi64->raw() : nullptr,_4947_wi64 ? _4947_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4948_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4927_ws)->f64;
  _checked_ptr_1<double> _ptr__4948_wf64(_4948_wf64 ? _4948_wf64->raw() : nullptr,_4948_wf64 ? _4948_wf64->size(0) : 0);
  _4926_rs->alloc_expr(_4929_nd,_4930_nelem,_4931_nnz,_4933_hassp,_4932_ncodeatom);
  int32_t _4949_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->ptr_base;
  int32_t _4950_rshape = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->shape_base;
  int32_t _4951_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->nidxs_base;
  int32_t _4952_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->sp_base;
  int32_t _4953_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->cof_base;
  int32_t _4954_rcode = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->code_base;
  int32_t _4955_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->codeptr_base;
  int32_t _4956_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _4957_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__4957_ri32(_4957_ri32 ? _4957_ri32->raw() : nullptr,_4957_ri32 ? _4957_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _4958_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__4958_ri64(_4958_ri64 ? _4958_ri64->raw() : nullptr,_4958_ri64 ? _4958_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4959_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4926_rs)->f64;
  _checked_ptr_1<double> _ptr__4959_rf64(_4959_rf64 ? _4959_rf64->raw() : nullptr,_4959_rf64 ? _4959_rf64->size(0) : 0);
  int32_t _11209_ = (int)0;
  int32_t _11210_ = _4929_nd;
  for (int32_t _4960_i = _11209_; _4960_i < _11210_; ++_4960_i)
  {
    {
      _ptr__4957_ri32[safe_add( _4950_rshape,_4960_i )] = _ptr__4946_wi32[safe_add( _4934_shape_base,((*dperm)(_4960_i)) )];
    }
  }
  if (_4933_hassp)
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4961_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_4930_nelem)));
      _checked_ptr_1<int64_t> _ptr__4961_sp(_4961_sp ? _4961_sp->raw() : nullptr,_4961_sp ? _4961_sp->size(0) : 0);
      {
        int32_t _11211_ = (int)0;
        int32_t _11212_ = _4930_nelem;
        for (int32_t _4962_i = _11211_; _4962_i < _11212_; ++_4962_i)
        {
          {
            int64_t _4963_p = (int64_t)0;
            int32_t _11213_ = (int)0;
            int32_t _11214_ = _4929_nd;
            for (int32_t _4964_j = _11213_; _4964_j < _11214_; ++_4964_j)
            {
              {
                _4963_p += safe_mul( ((_ptr__4947_wi64[safe_add( _4940_esp_base,_4962_i )] / _ptr__4935_stride[_4964_j]) % _ptr__4946_wi32[safe_add( _4934_shape_base,_4964_j )]),_ptr__4937_dstride[((*dperm)(_4964_j))] );
              }
            }
            _ptr__4961_sp[_4962_i] = _4963_p;
          }
        }
      }
      std::vector<int64_t> _11215_;
      for (int32_t _4966_i = (int)0, _11216_ = _4930_nelem; _4966_i < _11216_ ; ++_4966_i)
      {
        _11215_.push_back(_4966_i);
      }
      auto _11217_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_11215_.size()),_11215_.begin(),_11215_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _4965_perm = _11217_;
      _checked_ptr_1<int64_t> _ptr__4965_perm(_4965_perm ? _4965_perm->raw() : nullptr,_4965_perm ? _4965_perm->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_4965_perm,_4961_sp,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)((int)0),(int64_t)(_4930_nelem));
      _ptr__4957_ri32[_4949_rptr_base] = (int)0;
      if ((_4932_ncodeatom > (int)0))
      {
        {
          _ptr__4957_ri32[_4955_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _4967_codei = (int)0;
      int32_t _4968_kelem = (int)0;
      int32_t _4969_knz = (int)0;
      int32_t _11218_ = (int)0;
      int32_t _11219_ = _4930_nelem;
      for (int32_t _4970_i = _11218_; _4970_i < _11219_; ++_4970_i)
      {
        {
          int64_t _4971_ii = _ptr__4965_perm[_4970_i];
          int32_t _11220_ = _ptr__4946_wi32[safe_add( _4939_eptr_base,_4971_ii )];
          int32_t _11221_ = _ptr__4946_wi32[safe_add( safe_add( _4939_eptr_base,_4971_ii ),(int)1 )];
          for (int32_t _4972_j = _11220_; _4972_j < _11221_; ++_4972_j)
          {
            {
              _ptr__4958_ri64[safe_add( _4951_rnidxs_base,_4969_knz )] = _ptr__4947_wi64[safe_add( _4941_enidxs_base,_4972_j )];
              _ptr__4959_rf64[safe_add( _4953_rcof_base,_4969_knz )] = _ptr__4948_wf64[safe_add( _4942_ecof_base,_4972_j )];
              if ((_4932_ncodeatom > (int)0))
              {
                {
                  int32_t _11222_ = _ptr__4946_wi32[safe_add( _4944_codeptr,_4972_j )];
                  int32_t _11223_ = _ptr__4946_wi32[safe_add( safe_add( _4944_codeptr,_4972_j ),(int)1 )];
                  for (int32_t _4973_l = _11222_; _4973_l < _11223_; ++_4973_l)
                  {
                    {
                      _ptr__4957_ri32[safe_add( _4954_rcode,_4967_codei )] = _ptr__4946_wi32[safe_add( _4943_code,_4973_l )];
                      _ptr__4959_rf64[safe_add( _4956_rcconst,_4967_codei )] = _ptr__4948_wf64[safe_add( _4945_cconst,_4973_l )];
                      ++ _4967_codei;
                    }
                  }
                  _ptr__4957_ri32[safe_add( safe_add( _4955_rcodeptr,_4969_knz ),(int)1 )] = _4967_codei;
                }
              }
              {}
              ++ _4969_knz;
            }
          }
          _ptr__4958_ri64[safe_add( _4952_rsp_base,_4970_i )] = _ptr__4961_sp[_4971_ii];
          ++ _4968_kelem;
          _ptr__4957_ri32[safe_add( safe_add( _4949_rptr_base,_4970_i ),(int)1 )] = _4969_knz;
        }
      }
    }
  }
  else
  {
    {
      _ptr__4957_ri32[_4949_rptr_base] = (int)0;
      if ((_4932_ncodeatom > (int)0))
      {
        {
          _ptr__4957_ri32[_4955_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _4974_codei = (int)0;
      int32_t _4975_kelem = (int)0;
      int32_t _4976_knz = (int)0;
      int32_t _11224_ = (int)0;
      int32_t _11225_ = _4930_nelem;
      for (int32_t _4977_i = _11224_; _4977_i < _11225_; ++_4977_i)
      {
        {
          int64_t _4978_ii = (int64_t)0;
          int32_t _11226_ = (int)0;
          int32_t _11227_ = _4929_nd;
          for (int32_t _4979_j = _11226_; _4979_j < _11227_; ++_4979_j)
          {
            {
              _4978_ii += safe_mul( ((_4977_i / _ptr__4935_stride[((*dperm)(_4979_j))]) % _ptr__4946_wi32[safe_add( _4934_shape_base,((*dperm)(_4979_j)) )]),_ptr__4937_dstride[_4979_j] );
            }
          }
          int32_t _11228_ = _ptr__4946_wi32[safe_add( _4939_eptr_base,_4978_ii )];
          int32_t _11229_ = _ptr__4946_wi32[safe_add( safe_add( _4939_eptr_base,_4978_ii ),(int)1 )];
          for (int32_t _4980_j = _11228_; _4980_j < _11229_; ++_4980_j)
          {
            {
              _ptr__4958_ri64[safe_add( _4951_rnidxs_base,_4976_knz )] = _ptr__4947_wi64[safe_add( _4941_enidxs_base,_4980_j )];
              _ptr__4959_rf64[safe_add( _4953_rcof_base,_4976_knz )] = _ptr__4948_wf64[safe_add( _4942_ecof_base,_4980_j )];
              if ((_4932_ncodeatom > (int)0))
              {
                {
                  int32_t _11230_ = _ptr__4946_wi32[safe_add( _4944_codeptr,_4980_j )];
                  int32_t _11231_ = _ptr__4946_wi32[safe_add( safe_add( _4944_codeptr,_4980_j ),(int)1 )];
                  for (int32_t _4981_l = _11230_; _4981_l < _11231_; ++_4981_l)
                  {
                    {
                      _ptr__4957_ri32[safe_add( _4954_rcode,_4974_codei )] = _ptr__4946_wi32[safe_add( _4943_code,_4981_l )];
                      _ptr__4959_rf64[safe_add( _4956_rcconst,_4974_codei )] = _ptr__4948_wf64[safe_add( _4945_cconst,_4981_l )];
                      ++ _4974_codei;
                    }
                  }
                  _ptr__4957_ri32[safe_add( safe_add( _4955_rcodeptr,_4976_knz ),(int)1 )] = _4974_codei;
                }
              }
              {}
              ++ _4976_knz;
            }
          }
          ++ _4975_kelem;
          _ptr__4957_ri32[safe_add( _4949_rptr_base,_4975_kelem )] = _4976_knz;
        }
      }
    }
  }
}
// End mosek.fusion.ExprPermuteDims.eval

// Begin mosek.fusion.ExprPermuteDims.computeshape
// Method mosek.fusion.ExprPermuteDims.computeshape @ src/fusion/ExprTranspose.monty:157:6-159:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int32_t,1 > > _4982_perm,std::shared_ptr< monty::ndarray< int32_t,1 > > _4983_shape)
{
  _checked_ptr_1<int32_t> _ptr__4982_perm(_4982_perm ? _4982_perm->raw() : nullptr, _4982_perm ? _4982_perm->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__4983_shape(_4983_shape ? _4983_shape->raw() : nullptr, _4983_shape ? _4983_shape->size(0) : 0);
  std::vector<int32_t> _11232_;
  for (int32_t _4984_i = (int)0, _11233_ = (int)((_4982_perm)->size(0)); _4984_i < _11233_ ; ++_4984_i)
  {
    _11232_.push_back(_ptr__4983_shape[_ptr__4982_perm[_4984_i]]);
  }
  auto _11234_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11232_.size()),_11232_.begin(),_11232_.end()));
  return _11234_;
}
// End mosek.fusion.ExprPermuteDims.computeshape

void mosek::fusion::p_ExprPermuteDims::destroy()
{
  dperm.reset();
  expr.reset();
}
void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }
// } class ExprPermuteDims
// class ExprTranspose { // @ src/fusion/ExprTranspose.monty:4:4-145:5
mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }
mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprTranspose::p_ExprTranspose
  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprTranspose.ctor @ src/fusion/ExprTranspose.monty:19:6-22:7
mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose
  (monty::rc_ptr< ::mosek::fusion::Expression > _4985_expr)
{ return new mosek::fusion::ExprTranspose(_4985_expr); }
mosek::fusion::ExprTranspose::ExprTranspose
  (monty::rc_ptr< ::mosek::fusion::Expression > _4985_expr) : 
   ExprTranspose(new mosek::fusion::p_ExprTranspose(this))
{ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_4985_expr); }
void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4985_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_4985_expr->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _4985_expr;
  }
}
// mosek.fusion.ExprTranspose.ctor

// Begin mosek.fusion.ExprTranspose.eval
// Method mosek.fusion.ExprTranspose.eval @ src/fusion/ExprTranspose.monty:24:6-144:7
void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4986_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4987_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4988_xs) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_4986_rs,_4987_ws,_4988_xs); }
void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4986_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _4987_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _4988_xs)
{
  expr->eval(_4987_ws,_4986_rs,_4988_xs);
  _4987_ws->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int32_t _4989_shape_base = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->shape_base;
      int32_t _4990_nelem = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->nelem;
      int32_t _4991_nnz = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->nnz;
      bool _4992_hassp = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->hassp;
      int32_t _4993_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->ncodeatom;
      int32_t _4994_eptr_base = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->ptr_base;
      int32_t _4995_esp_base = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->sp_base;
      int32_t _4996_enidx_base = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->nidxs_base;
      int32_t _4997_ecof_base = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->cof_base;
      int32_t _4998_code = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->code_base;
      int32_t _4999_codeptr = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->codeptr_base;
      int32_t _5000_cconst = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->cconst_base;
      int32_t _5001_dim0 = ((*mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->i32)(_4989_shape_base));
      int32_t _5002_dim1 = ((*mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->i32)(safe_add( _4989_shape_base,(int)1 )));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5003_wi32 = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->i32;
      _checked_ptr_1<int32_t> _ptr__5003_wi32(_5003_wi32 ? _5003_wi32->raw() : nullptr,_5003_wi32 ? _5003_wi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5004_wi64 = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->i64;
      _checked_ptr_1<int64_t> _ptr__5004_wi64(_5004_wi64 ? _5004_wi64->raw() : nullptr,_5004_wi64 ? _5004_wi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5005_wf64 = mosek::fusion::p_WorkStack::_get_impl(_4987_ws)->f64;
      _checked_ptr_1<double> _ptr__5005_wf64(_5005_wf64 ? _5005_wf64->raw() : nullptr,_5005_wf64 ? _5005_wf64->size(0) : 0);
      _4986_rs->alloc_expr((int)2,_4990_nelem,_4991_nnz,_4992_hassp,_4993_ncodeatom);
      int32_t _5006_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->ptr_base;
      int32_t _5007_rnidx_base = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->nidxs_base;
      int32_t _5008_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->sp_base;
      int32_t _5009_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->cof_base;
      int32_t _5010_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->shape_base;
      int32_t _5011_rcode = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->code_base;
      int32_t _5012_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->codeptr_base;
      int32_t _5013_rcconst = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5014_ri32 = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5014_ri32(_5014_ri32 ? _5014_ri32->raw() : nullptr,_5014_ri32 ? _5014_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5015_ri64 = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5015_ri64(_5015_ri64 ? _5015_ri64->raw() : nullptr,_5015_ri64 ? _5015_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5016_rf64 = mosek::fusion::p_WorkStack::_get_impl(_4986_rs)->f64;
      _checked_ptr_1<double> _ptr__5016_rf64(_5016_rf64 ? _5016_rf64->raw() : nullptr,_5016_rf64 ? _5016_rf64->size(0) : 0);
      _ptr__5014_ri32[_5010_rshape_base] = _5002_dim1;
      _ptr__5014_ri32[safe_add( _5010_rshape_base,(int)1 )] = _5001_dim0;
      _ptr__5014_ri32[_5006_rptr_base] = (int)0;
      if ((_4993_ncodeatom > (int)0))
      {
        {
          _ptr__5014_ri32[_5012_rcodeptr] = (int)0;
        }
      }
      {}
      if (_4992_hassp)
      {
        {
          int32_t _5017_perm = _4988_xs->alloci32(_4990_nelem);
          int32_t _5018_ptr = _4988_xs->alloci32(safe_add( _5002_dim1,(int)1 ));
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5019_xi32 = mosek::fusion::p_WorkStack::_get_impl(_4988_xs)->i32;
          _checked_ptr_1<int32_t> _ptr__5019_xi32(_5019_xi32 ? _5019_xi32->raw() : nullptr,_5019_xi32 ? _5019_xi32->size(0) : 0);
          {
            int32_t _11235_ = (int)0;
            int32_t _11236_ = safe_add( _5002_dim1,(int)1 );
            for (int32_t _5020_i = _11235_; _5020_i < _11236_; ++_5020_i)
            {
              {
                _ptr__5019_xi32[safe_add( _5018_ptr,_5020_i )] = (int)0;
              }
            }
            int32_t _11237_ = (int)0;
            int32_t _11238_ = _4990_nelem;
            for (int32_t _5021_i = _11237_; _5021_i < _11238_; ++_5021_i)
            {
              {
                ++ _ptr__5019_xi32[safe_add( safe_add( _5018_ptr,(_ptr__5004_wi64[safe_add( _4995_esp_base,_5021_i )] % _5002_dim1) ),(int)1 )];
              }
            }
            int32_t _11239_ = (int)0;
            int32_t _11240_ = _5002_dim1;
            for (int32_t _5022_i = _11239_; _5022_i < _11240_; ++_5022_i)
            {
              {
                _ptr__5019_xi32[safe_add( safe_add( _5018_ptr,_5022_i ),(int)1 )] += _ptr__5019_xi32[safe_add( _5018_ptr,_5022_i )];
              }
            }
            int32_t _11241_ = (int)0;
            int32_t _11242_ = _4990_nelem;
            for (int32_t _5023_i = _11241_; _5023_i < _11242_; ++_5023_i)
            {
              {
                int64_t _5024_j = (_ptr__5004_wi64[safe_add( _4995_esp_base,_5023_i )] % _5002_dim1);
                _ptr__5019_xi32[safe_add( _5017_perm,_ptr__5019_xi32[safe_add( _5018_ptr,_5024_j )] )] = _5023_i;
                ++ _ptr__5019_xi32[safe_add( _5018_ptr,_5024_j )];
              }
            }
            _ptr__5014_ri32[_5006_rptr_base] = (int)0;
            int32_t _5025_codei = (int)0;
            int32_t _5026_p = (int)0;
            int32_t _11243_ = (int)0;
            int32_t _11244_ = _4990_nelem;
            for (int32_t _5027_i = _11243_; _5027_i < _11244_; ++_5027_i)
            {
              {
                int32_t _5028_j = _ptr__5019_xi32[safe_add( _5017_perm,_5027_i )];
                int32_t _11245_ = _ptr__5003_wi32[safe_add( _4994_eptr_base,_5028_j )];
                int32_t _11246_ = _ptr__5003_wi32[safe_add( safe_add( _4994_eptr_base,_5028_j ),(int)1 )];
                for (int32_t _5029_k = _11245_; _5029_k < _11246_; ++_5029_k)
                {
                  {
                    _ptr__5015_ri64[safe_add( _5007_rnidx_base,_5026_p )] = _ptr__5004_wi64[safe_add( _4996_enidx_base,_5029_k )];
                    _ptr__5016_rf64[safe_add( _5009_rcof_base,_5026_p )] = _ptr__5005_wf64[safe_add( _4997_ecof_base,_5029_k )];
                    if ((_4993_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11247_ = _ptr__5003_wi32[safe_add( _4999_codeptr,_5029_k )];
                        int32_t _11248_ = _ptr__5003_wi32[safe_add( safe_add( _4999_codeptr,_5029_k ),(int)1 )];
                        for (int32_t _5030_l = _11247_; _5030_l < _11248_; ++_5030_l)
                        {
                          {
                            _ptr__5014_ri32[safe_add( _5011_rcode,_5025_codei )] = _ptr__5003_wi32[safe_add( _4998_code,_5030_l )];
                            _ptr__5016_rf64[safe_add( _5013_rcconst,_5025_codei )] = _ptr__5005_wf64[safe_add( _5000_cconst,_5030_l )];
                            ++ _5025_codei;
                          }
                        }
                        _ptr__5014_ri32[safe_add( safe_add( _5012_rcodeptr,_5026_p ),(int)1 )] = _5025_codei;
                      }
                    }
                    {}
                    ++ _5026_p;
                  }
                }
                int64_t _5031_ii = (_ptr__5004_wi64[safe_add( _4995_esp_base,_5028_j )] / _5002_dim1);
                int64_t _5032_jj = (_ptr__5004_wi64[safe_add( _4995_esp_base,_5028_j )] % _5002_dim1);
                _ptr__5014_ri32[safe_add( safe_add( _5006_rptr_base,_5027_i ),(int)1 )] = _5026_p;
                _ptr__5015_ri64[safe_add( _5008_rsp_base,_5027_i )] = safe_add( safe_mul( _5032_jj,_5001_dim0 ),_5031_ii );
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__5014_ri32[_5006_rptr_base] = (int)0;
          int32_t _5033_codei = (int)0;
          int32_t _5034_rinz = (int)0;
          int32_t _5035_wi = (int)0;
          int32_t _11249_ = (int)0;
          int32_t _11250_ = _5002_dim1;
          for (int32_t _5036_i = _11249_; _5036_i < _11250_; ++_5036_i)
          {
            {
              int32_t _11251_ = (int)0;
              int32_t _11252_ = _5001_dim0;
              for (int32_t _5037_j = _11251_; _5037_j < _11252_; ++_5037_j)
              {
                {
                  int32_t _5038_p = safe_add( safe_mul( _5037_j,_5002_dim1 ),_5036_i );
                  int32_t _11253_ = _ptr__5003_wi32[safe_add( _4994_eptr_base,_5038_p )];
                  int32_t _11254_ = _ptr__5003_wi32[safe_add( safe_add( _4994_eptr_base,_5038_p ),(int)1 )];
                  for (int32_t _5039_k = _11253_; _5039_k < _11254_; ++_5039_k)
                  {
                    {
                      _ptr__5015_ri64[safe_add( _5007_rnidx_base,_5034_rinz )] = _ptr__5004_wi64[safe_add( _4996_enidx_base,_5039_k )];
                      _ptr__5016_rf64[safe_add( _5009_rcof_base,_5034_rinz )] = _ptr__5005_wf64[safe_add( _4997_ecof_base,_5039_k )];
                      if ((_4993_ncodeatom > (int)0))
                      {
                        {
                          int32_t _11255_ = _ptr__5003_wi32[safe_add( _4999_codeptr,_5039_k )];
                          int32_t _11256_ = _ptr__5003_wi32[safe_add( safe_add( _4999_codeptr,_5039_k ),(int)1 )];
                          for (int32_t _5040_l = _11255_; _5040_l < _11256_; ++_5040_l)
                          {
                            {
                              _ptr__5014_ri32[safe_add( _5011_rcode,_5033_codei )] = _ptr__5003_wi32[safe_add( _4998_code,_5040_l )];
                              _ptr__5016_rf64[safe_add( _5013_rcconst,_5033_codei )] = _ptr__5005_wf64[safe_add( _5000_cconst,_5040_l )];
                              ++ _5033_codei;
                            }
                          }
                          _ptr__5014_ri32[safe_add( safe_add( _5012_rcodeptr,_5034_rinz ),(int)1 )] = _5033_codei;
                        }
                      }
                      {}
                      ++ _5034_rinz;
                    }
                  }
                  _ptr__5014_ri32[safe_add( safe_add( _5006_rptr_base,_5035_wi ),(int)1 )] = _5034_rinz;
                  ++ _5035_wi;
                }
              }
            }
          }
        }
      }
      _4988_xs->clear();
    }
  }
}
// End mosek.fusion.ExprTranspose.eval

// Begin mosek.fusion.ExprTranspose.toString
// Method mosek.fusion.ExprTranspose.toString @ src/fusion/ExprTranspose.monty:14:6-16:7
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprTranspose::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprTranspose.toString

// Begin mosek.fusion.ExprTranspose.transposeShape
// Method mosek.fusion.ExprTranspose.transposeShape @ src/fusion/ExprTranspose.monty:7:6-12:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int32_t,1 > > _5041_shape)
{
  _checked_ptr_1<int32_t> _ptr__5041_shape(_5041_shape ? _5041_shape->raw() : nullptr, _5041_shape ? _5041_shape->size(0) : 0);
  if (((int)((_5041_shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__5041_shape[(int)1]),(int32_t)(_ptr__5041_shape[(int)0])});
    }
  }
}
// End mosek.fusion.ExprTranspose.transposeShape

void mosek::fusion::p_ExprTranspose::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }
// } class ExprTranspose
// class ExprRepeat { // @ src/fusion/ExprStack.monty:435:4-628:5
mosek::fusion::ExprRepeat::ExprRepeat(mosek::fusion::p_ExprRepeat *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprRepeat()" << this << std::endl; */ }
mosek::fusion::ExprRepeat::~ExprRepeat() {  /* std::cout << "~ExprRepeat()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprRepeat::p_ExprRepeat
  (::mosek::fusion::ExprRepeat * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprRepeat.ctor @ src/fusion/ExprStack.monty:459:6-464:7
mosek::fusion::ExprRepeat::t mosek::fusion::p_ExprRepeat::_new_ExprRepeat
  (monty::rc_ptr< ::mosek::fusion::Expression > _5042_expr,
    int32_t _5043_dim,
    int32_t _5044_n)
{ return new mosek::fusion::ExprRepeat(_5042_expr,_5043_dim,_5044_n); }
mosek::fusion::ExprRepeat::ExprRepeat
  (monty::rc_ptr< ::mosek::fusion::Expression > _5042_expr,
    int32_t _5043_dim,
    int32_t _5044_n) : 
   ExprRepeat(new mosek::fusion::p_ExprRepeat(this))
{ mosek::fusion::p_ExprRepeat::_get_impl(this)->_initialize(_5042_expr,_5043_dim,_5044_n); }
void mosek::fusion::p_ExprRepeat::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5042_expr,
    int32_t _5043_dim,
    int32_t _5044_n)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprRepeat::getshape(_5042_expr,_5043_dim,_5044_n));
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->expr = _5042_expr;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->dim = _5043_dim;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->n = _5044_n;
  }
}
// mosek.fusion.ExprRepeat.ctor

// Begin mosek.fusion.ExprRepeat.eval
// Method mosek.fusion.ExprRepeat.eval @ src/fusion/ExprStack.monty:466:6-627:7
void mosek::fusion::ExprRepeat :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5045_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5046_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5047_xs) { mosek::fusion::p_ExprRepeat::_get_impl(this)->eval(_5045_rs,_5046_ws,_5047_xs); }
void mosek::fusion::p_ExprRepeat::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5045_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5046_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5047_xs)
{
  expr->eval(_5046_ws,_5045_rs,_5047_xs);
  _5046_ws->pop_expr();
  int32_t _5048_nd = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->nd;
  int32_t _5049_shape = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->shape_base;
  int32_t _5050_nelem = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->nelem;
  int32_t _5051_nnz = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->nnz;
  int32_t _5052_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->ncodeatom;
  bool _5053_hassp = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->hassp;
  int32_t _5054_ptr = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->ptr_base;
  int32_t _5055_sp = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->sp_base;
  int32_t _5056_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->nidxs_base;
  int32_t _5057_cof = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->cof_base;
  int32_t _5058_code = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->code_base;
  int32_t _5059_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->codeptr_base;
  int32_t _5060_cconst = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5061_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5061_wi32(_5061_wi32 ? _5061_wi32->raw() : nullptr,_5061_wi32 ? _5061_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5062_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5062_wi64(_5062_wi64 ? _5062_wi64->raw() : nullptr,_5062_wi64 ? _5062_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5063_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5046_ws)->f64;
  _checked_ptr_1<double> _ptr__5063_wf64(_5063_wf64 ? _5063_wf64->raw() : nullptr,_5063_wf64 ? _5063_wf64->size(0) : 0);
  int32_t _11257_;
  bool _11258_ = (dim < _5048_nd);
  if (_11258_)
  {
    _11257_ = _5048_nd;
  }
  else
  {
    _11257_ = safe_add( _5048_nd,(int)1 );
  }
  int32_t _5064_rnd = _11257_;
  int32_t _5065_rnelem = safe_mul( _5050_nelem,n );
  int32_t _5066_rnnz = safe_mul( _5051_nnz,n );
  int32_t _5067_rncodeatom = safe_mul( _5052_ncodeatom,n );
  _5045_rs->alloc_expr(_5064_rnd,_5065_rnelem,_5066_rnnz,_5053_hassp,_5067_rncodeatom);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5068_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5068_ri32(_5068_ri32 ? _5068_ri32->raw() : nullptr,_5068_ri32 ? _5068_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5069_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5069_ri64(_5069_ri64 ? _5069_ri64->raw() : nullptr,_5069_ri64 ? _5069_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5070_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->f64;
  _checked_ptr_1<double> _ptr__5070_rf64(_5070_rf64 ? _5070_rf64->raw() : nullptr,_5070_rf64 ? _5070_rf64->size(0) : 0);
  int32_t _5071_rshape = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->shape_base;
  int32_t _5072_rptr = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->ptr_base;
  int32_t _5073_rsp = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->sp_base;
  int32_t _5074_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->nidxs_base;
  int32_t _5075_rcof = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->cof_base;
  int32_t _5076_rcode = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->code_base;
  int32_t _5077_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->codeptr_base;
  int32_t _5078_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5045_rs)->cconst_base;
  int32_t _5079_d0 = (int)1;
  int32_t _11259_ = (int)0;
  int32_t _11260_ = dim;
  for (int32_t _5080_i = _11259_; _5080_i < _11260_; ++_5080_i)
  {
    {
      _5079_d0 *= _ptr__5061_wi32[safe_add( _5049_shape,_5080_i )];
    }
  }
  int32_t _11261_;
  bool _11262_ = (dim < _5048_nd);
  if (_11262_)
  {
    _11261_ = _ptr__5061_wi32[safe_add( _5049_shape,dim )];
  }
  else
  {
    _11261_ = (int)1;
  }
  int32_t _5081_d1 = _11261_;
  int32_t _5082_rd1 = safe_mul( n,_5081_d1 );
  int32_t _5083_d2 = (int)1;
  int32_t _11263_ = safe_add( dim,(int)1 );
  int32_t _11264_ = _5048_nd;
  for (int32_t _5084_i = _11263_; _5084_i < _11264_; ++_5084_i)
  {
    {
      _5083_d2 *= _ptr__5061_wi32[safe_add( _5049_shape,_5084_i )];
    }
  }
  {
    int32_t _11265_ = (int)0;
    int32_t _11266_ = _5048_nd;
    for (int32_t _5085_i = _11265_; _5085_i < _11266_; ++_5085_i)
    {
      {
        _ptr__5068_ri32[safe_add( _5071_rshape,_5085_i )] = _ptr__5061_wi32[safe_add( _5049_shape,_5085_i )];
      }
    }
    _ptr__5068_ri32[safe_add( _5071_rshape,dim )] = _5082_rd1;
    _ptr__5068_ri32[_5072_rptr] = (int)0;
    if ((_5067_rncodeatom != (int)0))
    {
      {
        _ptr__5068_ri32[_5077_rcodeptr] = (int)0;
      }
    }
    {}
    if (_5053_hassp)
    {
      {
        int32_t _5086_codei = (int)0;
        int32_t _5087_ni = (int)0;
        int32_t _5088_ei = (int)0;
        int32_t _5089_elmi = (int)0;
        int32_t _5090_nzi = (int)0;
        while ( (_5088_ei < _5050_nelem) )
        {
          {
            int64_t _5091_nidx = _ptr__5062_wi64[safe_add( _5055_sp,_5088_ei )];
            int64_t _5092_ninext = safe_add( (_5091_nidx - (_5091_nidx % safe_mul( _5081_d1,_5083_d2 ))),safe_mul( _5081_d1,_5083_d2 ) );
            int32_t _5093_eb = _5088_ei;
            ++ _5088_ei;
            while ( ((_5088_ei < _5050_nelem) && (_ptr__5062_wi64[safe_add( _5055_sp,_5088_ei )] < _5092_ninext)) )
            {
              {
                ++ _5088_ei;
              }
            }
            int32_t _5094_ee = _5088_ei;
            int32_t _11267_ = (int)0;
            int32_t _11268_ = n;
            for (int32_t _5095_i = _11267_; _5095_i < _11268_; ++_5095_i)
            {
              {
                int32_t _11269_ = _5093_eb;
                int32_t _11270_ = _5094_ee;
                for (int32_t _5096_j = _11269_; _5096_j < _11270_; ++_5096_j)
                {
                  {
                    int64_t _5097_i0 = (_ptr__5062_wi64[safe_add( _5055_sp,_5096_j )] / safe_mul( _5081_d1,_5083_d2 ));
                    int64_t _5098_i1 = ((_ptr__5062_wi64[safe_add( _5055_sp,_5096_j )] / _5083_d2) % _5081_d1);
                    int64_t _5099_i2 = (_ptr__5062_wi64[safe_add( _5055_sp,_5096_j )] % _5083_d2);
                    int32_t _11271_ = _ptr__5061_wi32[safe_add( _5054_ptr,_5096_j )];
                    int32_t _11272_ = _ptr__5061_wi32[safe_add( safe_add( _5054_ptr,_5096_j ),(int)1 )];
                    for (int32_t _5100_k = _11271_; _5100_k < _11272_; ++_5100_k)
                    {
                      {
                        _ptr__5069_ri64[safe_add( _5074_rnidxs,_5090_nzi )] = _ptr__5062_wi64[safe_add( _5056_nidxs,_5100_k )];
                        _ptr__5070_rf64[safe_add( _5075_rcof,_5090_nzi )] = _ptr__5063_wf64[safe_add( _5057_cof,_5100_k )];
                        if ((_5052_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11273_ = _ptr__5061_wi32[safe_add( _5059_codeptr,_5100_k )];
                            int32_t _11274_ = _ptr__5061_wi32[safe_add( safe_add( _5059_codeptr,_5100_k ),(int)1 )];
                            for (int32_t _5101_l = _11273_; _5101_l < _11274_; ++_5101_l)
                            {
                              {
                                _ptr__5068_ri32[safe_add( _5076_rcode,_5086_codei )] = _ptr__5061_wi32[safe_add( _5058_code,_5101_l )];
                                _ptr__5070_rf64[safe_add( _5078_rcconst,_5086_codei )] = _ptr__5063_wf64[safe_add( _5060_cconst,_5101_l )];
                                ++ _5086_codei;
                              }
                            }
                            _ptr__5068_ri32[safe_add( safe_add( _5077_rcodeptr,_5090_nzi ),(int)1 )] = _5086_codei;
                          }
                        }
                        {}
                        ++ _5090_nzi;
                      }
                    }
                    _ptr__5068_ri32[safe_add( safe_add( _5072_rptr,_5089_elmi ),(int)1 )] = _5090_nzi;
                    _ptr__5069_ri64[safe_add( _5073_rsp,_5089_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5097_i0,_5082_rd1 ),safe_mul( _5095_i,_5081_d1 ) ),_5098_i1 ),_5083_d2 ),_5099_i2 );
                    ++ _5089_elmi;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int32_t _5102_codei = (int)0;
        int32_t _5103_elmi = (int)0;
        int32_t _5104_nzi = (int)0;
        int32_t _5105_p0 = (int)0;
        int32_t _11275_ = (int)0;
        int32_t _11276_ = _5079_d0;
        for (int32_t _5106_i0 = _11275_; _5106_i0 < _11276_; ++_5106_i0)
        {
          {
            int32_t _11277_ = (int)0;
            int32_t _11278_ = n;
            for (int32_t _5107_i1 = _11277_; _5107_i1 < _11278_; ++_5107_i1)
            {
              {
                int32_t _5108_p = safe_mul( safe_mul( _5106_i0,_5081_d1 ),_5083_d2 );
                int32_t _11279_ = (int)0;
                int32_t _11280_ = safe_mul( _5081_d1,_5083_d2 );
                for (int32_t _5109_i2 = _11279_; _5109_i2 < _11280_; ++_5109_i2)
                {
                  {
                    int32_t _11281_ = _ptr__5061_wi32[safe_add( _5054_ptr,_5108_p )];
                    int32_t _11282_ = _ptr__5061_wi32[safe_add( safe_add( _5054_ptr,_5108_p ),(int)1 )];
                    for (int32_t _5110_k = _11281_; _5110_k < _11282_; ++_5110_k)
                    {
                      {
                        _ptr__5069_ri64[safe_add( _5074_rnidxs,_5104_nzi )] = _ptr__5062_wi64[safe_add( _5056_nidxs,_5110_k )];
                        _ptr__5070_rf64[safe_add( _5075_rcof,_5104_nzi )] = _ptr__5063_wf64[safe_add( _5057_cof,_5110_k )];
                        if ((_5052_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11283_ = _ptr__5061_wi32[safe_add( _5059_codeptr,_5110_k )];
                            int32_t _11284_ = _ptr__5061_wi32[safe_add( safe_add( _5059_codeptr,_5110_k ),(int)1 )];
                            for (int32_t _5111_l = _11283_; _5111_l < _11284_; ++_5111_l)
                            {
                              {
                                _ptr__5068_ri32[safe_add( _5076_rcode,_5102_codei )] = _ptr__5061_wi32[safe_add( _5058_code,_5111_l )];
                                _ptr__5070_rf64[safe_add( _5078_rcconst,_5102_codei )] = _ptr__5063_wf64[safe_add( _5060_cconst,_5111_l )];
                                ++ _5102_codei;
                              }
                            }
                            _ptr__5068_ri32[safe_add( safe_add( _5077_rcodeptr,_5104_nzi ),(int)1 )] = _5102_codei;
                          }
                        }
                        {}
                        ++ _5104_nzi;
                      }
                    }
                    _ptr__5068_ri32[safe_add( safe_add( _5072_rptr,_5103_elmi ),(int)1 )] = _5104_nzi;
                    ++ _5103_elmi;
                    ++ _5108_p;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprRepeat.eval

// Begin mosek.fusion.ExprRepeat.getshape
// Method mosek.fusion.ExprRepeat.getshape @ src/fusion/ExprStack.monty:444:6-457:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprRepeat::getshape(monty::rc_ptr< ::mosek::fusion::Expression > _5112_e,int32_t _5113_dim,int32_t _5114_n)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5115_shape_ = _5112_e->getShape();
  _checked_ptr_1<int32_t> _ptr__5115_shape_(_5115_shape_ ? _5115_shape_->raw() : nullptr,_5115_shape_ ? _5115_shape_->size(0) : 0);
  int32_t _5116_nd = (int)((_5115_shape_)->size(0));
  if ((_5113_dim < _5116_nd))
  {
    {
      _ptr__5115_shape_[_5113_dim] *= _5114_n;
      return _5115_shape_;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _11285_;
      bool _11286_ = (_5113_dim == _5116_nd);
      if (_11286_)
      {
        _11285_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _5116_nd,(int)1 ))));
      }
      else
      {
        _11285_ = _5115_shape_;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5117_shape = _11285_;
      _checked_ptr_1<int32_t> _ptr__5117_shape(_5117_shape ? _5117_shape->raw() : nullptr,_5117_shape ? _5117_shape->size(0) : 0);
      int32_t _11287_ = (int)0;
      int32_t _11288_ = _5116_nd;
      for (int32_t _5118_i = _11287_; _5118_i < _11288_; ++_5118_i)
      {
        {
          _ptr__5117_shape[_5118_i] = _ptr__5115_shape_[_5118_i];
        }
      }
      _ptr__5117_shape[_5113_dim] = _5114_n;
      return _5117_shape;
    }
  }
}
// End mosek.fusion.ExprRepeat.getshape

// Begin mosek.fusion.ExprRepeat.toString
// Method mosek.fusion.ExprRepeat.toString @ src/fusion/ExprStack.monty:440:6-442:7
std::string mosek::fusion::ExprRepeat :: toString() { return mosek::fusion::p_ExprRepeat::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprRepeat::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprRepeat(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprRepeat.toString

void mosek::fusion::p_ExprRepeat::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprRepeat::destroy() { mosek::fusion::p_ExprRepeat::_get_impl(this)->destroy(); }
// } class ExprRepeat
// class ExprStack { // @ src/fusion/ExprStack.monty:4:4-431:5
mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }
mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprStack::p_ExprStack
  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprStack.ctor @ src/fusion/ExprStack.monty:49:6-53:7
mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5119_exprs,
    int32_t _5120_dim)
{ return new mosek::fusion::ExprStack(_5119_exprs,_5120_dim); }
mosek::fusion::ExprStack::ExprStack
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5119_exprs,
    int32_t _5120_dim) : 
   ExprStack(new mosek::fusion::p_ExprStack(this))
{ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_5119_exprs,_5120_dim); }
void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5119_exprs,
    int32_t _5120_dim)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_5119_exprs,_5120_dim));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11289_;
    for (int32_t _5121_i = (int)0, _11290_ = (int)((_5119_exprs)->size(0)); _5121_i < _11290_ ; ++_5121_i)
    {
      _11289_.push_back(((*_5119_exprs)(_5121_i)));
    }
    auto _11291_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11289_.size()),_11289_.begin(),_11289_.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _11291_;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _5120_dim;
  }
}
// mosek.fusion.ExprStack.ctor

// Begin mosek.fusion.ExprStack.eval
// Method mosek.fusion.ExprStack.eval @ src/fusion/ExprStack.monty:55:6-430:7
void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5122_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5123_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5124_xs) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_5122_rs,_5123_ws,_5124_xs); }
void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5122_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5123_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5124_xs)
{
  int32_t _5125_n = (int)((exprs)->size(0));
  if ((_5125_n == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_5122_rs,_5123_ws,_5124_xs);
    }
  }
  else
  {
    {
      int32_t _11292_ = (int)0;
      int32_t _11293_ = _5125_n;
      for (int32_t _5126_i = _11292_; _5126_i < _11293_; ++_5126_i)
      {
        {
          ((*exprs)(((_5125_n - _5126_i) - (int)1)))->eval(_5123_ws,_5122_rs,_5124_xs);
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5127_nds = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5127_nds(_5127_nds ? _5127_nds->raw() : nullptr,_5127_nds ? _5127_nds->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5128_shape_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5128_shape_base(_5128_shape_base ? _5128_shape_base->raw() : nullptr,_5128_shape_base ? _5128_shape_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5129_nelem = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5129_nelem(_5129_nelem ? _5129_nelem->raw() : nullptr,_5129_nelem ? _5129_nelem->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5130_nnz = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5130_nnz(_5130_nnz ? _5130_nnz->raw() : nullptr,_5130_nnz ? _5130_nnz->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5131_ncodeatom = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5131_ncodeatom(_5131_ncodeatom ? _5131_ncodeatom->raw() : nullptr,_5131_ncodeatom ? _5131_ncodeatom->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5132_hassp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5132_hassp(_5132_hassp ? _5132_hassp->raw() : nullptr,_5132_hassp ? _5132_hassp->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5133_ptr_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5133_ptr_base(_5133_ptr_base ? _5133_ptr_base->raw() : nullptr,_5133_ptr_base ? _5133_ptr_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5134_nidxs_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5134_nidxs_base(_5134_nidxs_base ? _5134_nidxs_base->raw() : nullptr,_5134_nidxs_base ? _5134_nidxs_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5135_sp_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5135_sp_base(_5135_sp_base ? _5135_sp_base->raw() : nullptr,_5135_sp_base ? _5135_sp_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5136_cof_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5136_cof_base(_5136_cof_base ? _5136_cof_base->raw() : nullptr,_5136_cof_base ? _5136_cof_base->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5137_code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5137_code(_5137_code ? _5137_code->raw() : nullptr,_5137_code ? _5137_code->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5138_codeptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5138_codeptr(_5138_codeptr ? _5138_codeptr->raw() : nullptr,_5138_codeptr ? _5138_codeptr->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5139_cconst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5139_cconst(_5139_cconst ? _5139_cconst->raw() : nullptr,_5139_cconst ? _5139_cconst->size(0) : 0);
      int32_t _11294_ = (int)0;
      int32_t _11295_ = _5125_n;
      for (int32_t _5140_i = _11294_; _5140_i < _11295_; ++_5140_i)
      {
        {
          _5123_ws->pop_expr();
          _ptr__5127_nds[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->nd;
          _ptr__5128_shape_base[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->shape_base;
          _ptr__5129_nelem[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->nelem;
          _ptr__5130_nnz[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->nnz;
          _ptr__5131_ncodeatom[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->ncodeatom;
          int32_t _11296_;
          bool _11297_ = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->hassp;
          if (_11297_)
          {
            _11296_ = (int)1;
          }
          else
          {
            _11296_ = (int)0;
          }
          _ptr__5132_hassp[_5140_i] = _11296_;
          _ptr__5133_ptr_base[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->ptr_base;
          _ptr__5135_sp_base[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->sp_base;
          _ptr__5134_nidxs_base[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->nidxs_base;
          _ptr__5136_cof_base[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->cof_base;
          _ptr__5137_code[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->code_base;
          _ptr__5138_codeptr[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->codeptr_base;
          _ptr__5139_cconst[_5140_i] = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->cconst_base;
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5141_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->i32;
      _checked_ptr_1<int32_t> _ptr__5141_wi32(_5141_wi32 ? _5141_wi32->raw() : nullptr,_5141_wi32 ? _5141_wi32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5142_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->i64;
      _checked_ptr_1<int64_t> _ptr__5142_wi64(_5142_wi64 ? _5142_wi64->raw() : nullptr,_5142_wi64 ? _5142_wi64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5143_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5123_ws)->f64;
      _checked_ptr_1<double> _ptr__5143_wf64(_5143_wf64 ? _5143_wf64->raw() : nullptr,_5143_wf64 ? _5143_wf64->size(0) : 0);
      int32_t _5144_nd = _ptr__5127_nds[(int)0];
      int32_t _5145_shape = _ptr__5128_shape_base[(int)0];
      bool _5146_dense = (_ptr__5132_hassp[(int)0] == (int)0);
      bool _5147_mismatching_dims = false;
      int32_t _11298_ = (int)1;
      int32_t _11299_ = _5125_n;
      for (int32_t _5148_i = _11298_; _5148_i < _11299_; ++_5148_i)
      {
        {
          _5147_mismatching_dims = (_5147_mismatching_dims || ((dim != _5148_i) && (_ptr__5127_nds[_5148_i] != _5144_nd)));
          if ((!_5147_mismatching_dims))
          {
            {
              int32_t _11300_ = (int)0;
              int32_t _11301_ = dim;
              for (int32_t _5149_j = _11300_; _5149_j < _11301_; ++_5149_j)
              {
                {
                  _5147_mismatching_dims = (_5147_mismatching_dims || (_ptr__5141_wi32[safe_add( _5145_shape,_5149_j )] != _ptr__5141_wi32[safe_add( _ptr__5128_shape_base[_5148_i],_5149_j )]));
                }
              }
            }
          }
          {}
          if ((!_5147_mismatching_dims))
          {
            {
              int32_t _11302_ = safe_add( dim,(int)1 );
              int32_t _11303_ = _5144_nd;
              for (int32_t _5150_j = _11302_; _5150_j < _11303_; ++_5150_j)
              {
                {
                  _5147_mismatching_dims = (_5147_mismatching_dims || (_ptr__5141_wi32[safe_add( _5145_shape,_5150_j )] != _ptr__5141_wi32[safe_add( _ptr__5128_shape_base[_5148_i],_5150_j )]));
                }
              }
            }
          }
          {}
          _5146_dense = (_5146_dense && ((int)0 == _ptr__5132_hassp[_5148_i]));
        }
      }
      if (_5147_mismatching_dims)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int32_t _5151_sdim = (int)0;
      if ((dim < _5144_nd))
      {
        {
          int32_t _11304_ = (int)0;
          int32_t _11305_ = _5125_n;
          for (int32_t _5152_i = _11304_; _5152_i < _11305_; ++_5152_i)
          {
            {
              _5151_sdim += _ptr__5141_wi32[safe_add( _ptr__5128_shape_base[_5152_i],dim )];
            }
          }
        }
      }
      else
      {
        {
          _5151_sdim = _5125_n;
        }
      }
      int32_t _11306_;
      bool _11307_ = (dim < _5144_nd);
      if (_11307_)
      {
        _11306_ = _5144_nd;
      }
      else
      {
        _11306_ = safe_add( _5144_nd,(int)1 );
      }
      int32_t _5153_rnd = _11306_;
      if ((_5153_rnd != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching dimensions"));
        }
      }
      {}
      int32_t _5154_rncodeatom = (int)0;
      int32_t _5155_rnelem = (int)0;
      int32_t _5156_rnnz = (int)0;
      bool _5157_parameterized = false;
      {
        int32_t _11308_ = (int)0;
        int32_t _11309_ = _5125_n;
        for (int32_t _5158_i = _11308_; _5158_i < _11309_; ++_5158_i)
        {
          {
            _5157_parameterized = (_5157_parameterized || (_ptr__5131_ncodeatom[_5158_i] > (int)0));
          }
        }
        int32_t _11310_ = (int)0;
        int32_t _11311_ = _5125_n;
        for (int32_t _5159_i = _11310_; _5159_i < _11311_; ++_5159_i)
        {
          {
            _5156_rnnz += _ptr__5130_nnz[_5159_i];
          }
        }
        int32_t _11312_ = (int)0;
        int32_t _11313_ = _5125_n;
        for (int32_t _5160_i = _11312_; _5160_i < _11313_; ++_5160_i)
        {
          {
            _5155_rnelem += _ptr__5129_nelem[_5160_i];
          }
        }
        if (_5157_parameterized)
        {
          {
            int32_t _11314_ = (int)0;
            int32_t _11315_ = _5125_n;
            for (int32_t _5161_i = _11314_; _5161_i < _11315_; ++_5161_i)
            {
              {
                int32_t _11316_;
                bool _11317_ = (_ptr__5131_ncodeatom[_5161_i] > (int)0);
                if (_11317_)
                {
                  _11316_ = _ptr__5131_ncodeatom[_5161_i];
                }
                else
                {
                  _11316_ = _ptr__5130_nnz[_5161_i];
                }
                _5154_rncodeatom += _11316_;
              }
            }
          }
        }
        {}
      }
      int32_t _5162_d0 = (int)1;
      int32_t _11318_ = (int)0;
      int32_t _11319_ = dim;
      for (int32_t _5163_i = _11318_; _5163_i < _11319_; ++_5163_i)
      {
        {
          _5162_d0 *= _ptr__5141_wi32[safe_add( _5145_shape,_5163_i )];
        }
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _11320_;
      bool _11321_ = (dim < _5144_nd);
      if (_11321_)
      {
        std::vector<int32_t> _11322_;
        for (int32_t _5165_i = (int)0, _11323_ = _5125_n; _5165_i < _11323_ ; ++_5165_i)
        {
          _11322_.push_back(_ptr__5141_wi32[safe_add( _ptr__5128_shape_base[_5165_i],dim )]);
        }
        auto _11324_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11322_.size()),_11322_.begin(),_11322_.end()));
        _11320_ = _11324_;
      }
      else
      {
        std::vector<int32_t> _11325_;
        for (int32_t _5166_i = (int)0, _11326_ = _5125_n; _5166_i < _11326_ ; ++_5166_i)
        {
          _11325_.push_back((int)1);
        }
        auto _11327_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11325_.size()),_11325_.begin(),_11325_.end()));
        _11320_ = _11327_;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5164_d1s = _11320_;
      _checked_ptr_1<int32_t> _ptr__5164_d1s(_5164_d1s ? _5164_d1s->raw() : nullptr,_5164_d1s ? _5164_d1s->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5167_offset = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_5125_n)));
      _checked_ptr_1<int32_t> _ptr__5167_offset(_5167_offset ? _5167_offset->raw() : nullptr,_5167_offset ? _5167_offset->size(0) : 0);
      _ptr__5167_offset[(int)0] = (int)0;
      int32_t _11328_ = (int)1;
      int32_t _11329_ = _5125_n;
      for (int32_t _5168_i = _11328_; _5168_i < _11329_; ++_5168_i)
      {
        {
          _ptr__5167_offset[_5168_i] = safe_add( _ptr__5167_offset[(_5168_i - (int)1)],_ptr__5164_d1s[(_5168_i - (int)1)] );
        }
      }
      int32_t _5169_d1 = (int)0;
      int32_t _11330_ = (int)0;
      int32_t _11331_ = _5125_n;
      for (int32_t _5170_i = _11330_; _5170_i < _11331_; ++_5170_i)
      {
        {
          _5169_d1 += _ptr__5164_d1s[_5170_i];
        }
      }
      int32_t _5171_d2 = (int)1;
      int32_t _11332_ = safe_add( dim,(int)1 );
      int32_t _11333_ = _5144_nd;
      for (int32_t _5172_i = _11332_; _5172_i < _11333_; ++_5172_i)
      {
        {
          _5171_d2 *= _ptr__5141_wi32[safe_add( _5145_shape,_5172_i )];
        }
      }
      if (_5146_dense)
      {
        {
          _5122_rs->alloc_expr(_5153_rnd,_5155_rnelem,_5156_rnnz,false,_5154_rncodeatom);
          int32_t _5173_rptr = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->ptr_base;
          int32_t _5174_rshape = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->shape_base;
          int32_t _5175_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->nidxs_base;
          int32_t _5176_rcof = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->cof_base;
          int32_t _5177_rcode = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->code_base;
          int32_t _5178_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->codeptr_base;
          int32_t _5179_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5180_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5180_ri32(_5180_ri32 ? _5180_ri32->raw() : nullptr,_5180_ri32 ? _5180_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5181_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5181_ri64(_5181_ri64 ? _5181_ri64->raw() : nullptr,_5181_ri64 ? _5181_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5182_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->f64;
          _checked_ptr_1<double> _ptr__5182_rf64(_5182_rf64 ? _5182_rf64->raw() : nullptr,_5182_rf64 ? _5182_rf64->size(0) : 0);
          int32_t _11334_;
          bool _11335_ = (_5154_rncodeatom > (int)0);
          if (_11335_)
          {
            _11334_ = _5124_xs->alloci32(safe_add( _5155_rnelem,(int)1 ));
          }
          else
          {
            _11334_ = (-(int)9999);
          }
          int32_t _5183_xcodeptr = _11334_;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5184_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5124_xs)->i32;
          _checked_ptr_1<int32_t> _ptr__5184_xi32(_5184_xi32 ? _5184_xi32->raw() : nullptr,_5184_xi32 ? _5184_xi32->size(0) : 0);
          int32_t _11336_ = (int)0;
          int32_t _11337_ = _5144_nd;
          for (int32_t _5185_i = _11336_; _5185_i < _11337_; ++_5185_i)
          {
            {
              _ptr__5180_ri32[safe_add( _5174_rshape,_5185_i )] = _ptr__5141_wi32[safe_add( _5145_shape,_5185_i )];
            }
          }
          _ptr__5180_ri32[safe_add( _5174_rshape,dim )] = _5151_sdim;
          {
            int32_t _5186_codei = (int)0;
            int32_t _5187_elmi = (int)0;
            int32_t _5188_nzi = (int)0;
            _ptr__5180_ri32[_5173_rptr] = (int)0;
            if (_5157_parameterized)
            {
              {
                _ptr__5180_ri32[_5178_rcodeptr] = (int)0;
              }
            }
            {}
            int32_t _11338_ = (int)0;
            int32_t _11339_ = _5162_d0;
            for (int32_t _5189_i0 = _11338_; _5189_i0 < _11339_; ++_5189_i0)
            {
              {
                int32_t _11340_ = (int)0;
                int32_t _11341_ = _5125_n;
                for (int32_t _5190_i = _11340_; _5190_i < _11341_; ++_5190_i)
                {
                  {
                    int32_t _11342_ = (int)0;
                    int32_t _11343_ = _ptr__5164_d1s[_5190_i];
                    for (int32_t _5191_i1z = _11342_; _5191_i1z < _11343_; ++_5191_i1z)
                    {
                      {
                        int32_t _11344_ = (int)0;
                        int32_t _11345_ = _5171_d2;
                        for (int32_t _5192_i2 = _11344_; _5192_i2 < _11345_; ++_5192_i2)
                        {
                          {
                            int32_t _5193_j = safe_add( safe_add( safe_mul( safe_mul( _5189_i0,_ptr__5164_d1s[_5190_i] ),_5171_d2 ),safe_mul( _5191_i1z,_5171_d2 ) ),_5192_i2 );
                            int32_t _11346_ = _ptr__5141_wi32[safe_add( _ptr__5133_ptr_base[_5190_i],_5193_j )];
                            int32_t _11347_ = _ptr__5141_wi32[safe_add( safe_add( _ptr__5133_ptr_base[_5190_i],_5193_j ),(int)1 )];
                            for (int32_t _5194_k = _11346_; _5194_k < _11347_; ++_5194_k)
                            {
                              {
                                _ptr__5181_ri64[safe_add( _5175_rnidxs,_5188_nzi )] = _ptr__5142_wi64[safe_add( _ptr__5134_nidxs_base[_5190_i],_5194_k )];
                                _ptr__5182_rf64[safe_add( _5176_rcof,_5188_nzi )] = _ptr__5143_wf64[safe_add( _ptr__5136_cof_base[_5190_i],_5194_k )];
                                if ((_ptr__5131_ncodeatom[_5190_i] > (int)0))
                                {
                                  {
                                    int32_t _11348_ = _ptr__5141_wi32[safe_add( _ptr__5138_codeptr[_5190_i],_5194_k )];
                                    int32_t _11349_ = _ptr__5141_wi32[safe_add( safe_add( _ptr__5138_codeptr[_5190_i],_5194_k ),(int)1 )];
                                    for (int32_t _5195_l = _11348_; _5195_l < _11349_; ++_5195_l)
                                    {
                                      {
                                        _ptr__5180_ri32[safe_add( _5177_rcode,_5186_codei )] = _ptr__5141_wi32[safe_add( _ptr__5137_code[_5190_i],_5195_l )];
                                        _ptr__5182_rf64[safe_add( _5179_rcconst,_5186_codei )] = _ptr__5143_wf64[safe_add( _ptr__5139_cconst[_5190_i],_5195_l )];
                                        ++ _5186_codei;
                                      }
                                    }
                                    _ptr__5180_ri32[safe_add( safe_add( _5178_rcodeptr,_5188_nzi ),(int)1 )] = _5186_codei;
                                  }
                                }
                                else if(_5157_parameterized)
                                {
                                  {
                                    _ptr__5180_ri32[safe_add( _5177_rcode,_5186_codei )] = 2;
                                    _ptr__5182_rf64[safe_add( _5179_rcconst,_5186_codei )] = 0.0;
                                    ++ _5186_codei;
                                    _ptr__5180_ri32[safe_add( safe_add( _5178_rcodeptr,_5188_nzi ),(int)1 )] = _5186_codei;
                                  }
                                }
                                {}
                                ++ _5188_nzi;
                              }
                            }
                            _ptr__5180_ri32[safe_add( safe_add( _5173_rptr,_5187_elmi ),(int)1 )] = _5188_nzi;
                            ++ _5187_elmi;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _5196_rshapesize = (int)1;
          int32_t _11350_ = (int)0;
          int32_t _11351_ = dim;
          for (int32_t _5197_i = _11350_; _5197_i < _11351_; ++_5197_i)
          {
            {
              _5196_rshapesize *= _ptr__5141_wi32[safe_add( _5145_shape,_5197_i )];
            }
          }
          _5196_rshapesize *= _5151_sdim;
          int32_t _11352_ = safe_add( dim,(int)1 );
          int32_t _11353_ = _5144_nd;
          for (int32_t _5198_i = _11352_; _5198_i < _11353_; ++_5198_i)
          {
            {
              _5196_rshapesize *= _ptr__5141_wi32[safe_add( _5145_shape,_5198_i )];
            }
          }
          bool _5199_rhassp = (_5155_rnelem < _5196_rshapesize);
          _5122_rs->alloc_expr(_5153_rnd,_5155_rnelem,_5156_rnnz,_5199_rhassp,_5154_rncodeatom);
          int32_t _5200_rptr = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->ptr_base;
          int32_t _5201_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->nidxs_base;
          int32_t _11354_;
          bool _11355_ = _5199_rhassp;
          if (_11355_)
          {
            _11354_ = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->sp_base;
          }
          else
          {
            _11354_ = _5122_rs->alloci64(_5155_rnelem);
          }
          int32_t _5202_rsp = _11354_;
          int32_t _5203_rcof = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->cof_base;
          int32_t _5204_rcode = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->code_base;
          int32_t _5205_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->codeptr_base;
          int32_t _5206_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->cconst_base;
          int32_t _5207_rshape = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->shape_base;
          int32_t _11356_ = (int)0;
          int32_t _11357_ = _5144_nd;
          for (int32_t _5208_i = _11356_; _5208_i < _11357_; ++_5208_i)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->i32)(safe_add( _5207_rshape,_5208_i ))) = _ptr__5141_wi32[safe_add( _5145_shape,_5208_i )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->i32)(safe_add( _5207_rshape,dim ))) = _5151_sdim;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5209_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5209_ri32(_5209_ri32 ? _5209_ri32->raw() : nullptr,_5209_ri32 ? _5209_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5210_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5210_ri64(_5210_ri64 ? _5210_ri64->raw() : nullptr,_5210_ri64 ? _5210_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5211_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5122_rs)->f64;
          _checked_ptr_1<double> _ptr__5211_rf64(_5211_rf64 ? _5211_rf64->raw() : nullptr,_5211_rf64 ? _5211_rf64->size(0) : 0);
          if ((dim == (int)0))
          {
            {
              int32_t _5212_codei = (int)0;
              int32_t _5213_nzi = (int)0;
              int32_t _5214_elmi = (int)0;
              int64_t _5215_spofs = (int64_t)0;
              _ptr__5209_ri32[_5200_rptr] = (int)0;
              if ((_5154_rncodeatom > (int)0))
              {
                {
                  _ptr__5209_ri32[_5205_rcodeptr] = (int)0;
                }
              }
              {}
              int32_t _11358_ = (int)0;
              int32_t _11359_ = _5125_n;
              for (int32_t _5216_i = _11358_; _5216_i < _11359_; ++_5216_i)
              {
                {
                  int32_t _11360_ = (int)0;
                  int32_t _11361_ = _ptr__5129_nelem[_5216_i];
                  for (int32_t _5217_j = _11360_; _5217_j < _11361_; ++_5217_j)
                  {
                    {
                      int32_t _11362_ = _ptr__5141_wi32[safe_add( _ptr__5133_ptr_base[_5216_i],_5217_j )];
                      int32_t _11363_ = _ptr__5141_wi32[safe_add( safe_add( _ptr__5133_ptr_base[_5216_i],_5217_j ),(int)1 )];
                      for (int32_t _5218_k = _11362_; _5218_k < _11363_; ++_5218_k)
                      {
                        {
                          _ptr__5210_ri64[safe_add( _5201_rnidxs,_5213_nzi )] = _ptr__5142_wi64[safe_add( _ptr__5134_nidxs_base[_5216_i],_5218_k )];
                          _ptr__5211_rf64[safe_add( _5203_rcof,_5213_nzi )] = _ptr__5143_wf64[safe_add( _ptr__5136_cof_base[_5216_i],_5218_k )];
                          if ((_ptr__5131_ncodeatom[_5216_i] > (int)0))
                          {
                            {
                              int32_t _11364_ = _ptr__5141_wi32[safe_add( _ptr__5138_codeptr[_5216_i],_5218_k )];
                              int32_t _11365_ = _ptr__5141_wi32[safe_add( safe_add( _ptr__5138_codeptr[_5216_i],_5218_k ),(int)1 )];
                              for (int32_t _5219_l = _11364_; _5219_l < _11365_; ++_5219_l)
                              {
                                {
                                  _ptr__5209_ri32[safe_add( _5204_rcode,_5212_codei )] = _ptr__5141_wi32[safe_add( _ptr__5137_code[_5216_i],_5219_l )];
                                  _ptr__5211_rf64[safe_add( _5206_rcconst,_5212_codei )] = _ptr__5143_wf64[safe_add( _ptr__5139_cconst[_5216_i],_5219_l )];
                                  ++ _5212_codei;
                                }
                              }
                              _ptr__5209_ri32[safe_add( safe_add( _5205_rcodeptr,_5213_nzi ),(int)1 )] = _5212_codei;
                            }
                          }
                          else if((_5154_rncodeatom > (int)0))
                          {
                            {
                              _ptr__5209_ri32[safe_add( _5204_rcode,_5212_codei )] = 2;
                              _ptr__5211_rf64[safe_add( _5206_rcconst,_5212_codei )] = 0.0;
                              ++ _5212_codei;
                              _ptr__5209_ri32[safe_add( safe_add( _5205_rcodeptr,_5213_nzi ),(int)1 )] = _5212_codei;
                            }
                          }
                          {}
                          ++ _5213_nzi;
                        }
                      }
                      _ptr__5209_ri32[safe_add( safe_add( _5200_rptr,_5214_elmi ),(int)1 )] = _5213_nzi;
                      if ((_ptr__5132_hassp[_5216_i] != (int)0))
                      {
                        {
                          _ptr__5210_ri64[safe_add( _5202_rsp,_5214_elmi )] = safe_add( _5215_spofs,_ptr__5142_wi64[safe_add( _ptr__5135_sp_base[_5216_i],_5217_j )] );
                        }
                      }
                      else
                      {
                        {
                          _ptr__5210_ri64[safe_add( _5202_rsp,_5214_elmi )] = safe_add( _5215_spofs,_5217_j );
                        }
                      }
                      ++ _5214_elmi;
                    }
                  }
                  int64_t _5220_sz = (int64_t)1;
                  int32_t _11366_ = (int)0;
                  int32_t _11367_ = _5144_nd;
                  for (int32_t _5221_j = _11366_; _5221_j < _11367_; ++_5221_j)
                  {
                    {
                      _5220_sz *= _ptr__5141_wi32[safe_add( _ptr__5128_shape_base[_5216_i],_5221_j )];
                    }
                  }
                  _5215_spofs += _5220_sz;
                }
              }
            }
          }
          else
          {
            {
              int32_t _5222_maxdim = (int)0;
              int32_t _11368_ = (int)0;
              int32_t _11369_ = _5153_rnd;
              for (int32_t _5223_i = _11368_; _5223_i < _11369_; ++_5223_i)
              {
                {
                  if ((_5222_maxdim < _ptr__5209_ri32[safe_add( _5207_rshape,_5223_i )]))
                  {
                    {
                      _5222_maxdim = _ptr__5209_ri32[safe_add( _5207_rshape,_5223_i )];
                    }
                  }
                  {}
                }
              }
              int32_t _5224_tsp = _5124_xs->alloci64(_5155_rnelem);
              int32_t _5225_ti = _5124_xs->alloci32(_5155_rnelem);
              int32_t _5226_tj = _5124_xs->alloci32(_5155_rnelem);
              int32_t _5227_curperm = _5124_xs->alloci32(_5155_rnelem);
              int32_t _5228_tgtperm = _5124_xs->alloci32(_5155_rnelem);
              int32_t _5229_xptr = _5124_xs->alloci32(safe_add( _5222_maxdim,(int)1 ));
              std::shared_ptr< monty::ndarray< int32_t,1 > > _5230_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5124_xs)->i32;
              _checked_ptr_1<int32_t> _ptr__5230_xi32(_5230_xi32 ? _5230_xi32->raw() : nullptr,_5230_xi32 ? _5230_xi32->size(0) : 0);
              std::shared_ptr< monty::ndarray< int64_t,1 > > _5231_xi64 = mosek::fusion::p_WorkStack::_get_impl(_5124_xs)->i64;
              _checked_ptr_1<int64_t> _ptr__5231_xi64(_5231_xi64 ? _5231_xi64->raw() : nullptr,_5231_xi64 ? _5231_xi64->size(0) : 0);
              {
                int32_t _5232_elmi = (int)0;
                int32_t _11370_ = (int)0;
                int32_t _11371_ = _5125_n;
                for (int32_t _5233_i = _11370_; _5233_i < _11371_; ++_5233_i)
                {
                  {
                    int32_t _5234_d1 = _ptr__5164_d1s[_5233_i];
                    int32_t _5235_s0 = safe_mul( _5234_d1,_5171_d2 );
                    int32_t _5236_s1 = _5171_d2;
                    if ((_ptr__5132_hassp[_5233_i] != (int)0))
                    {
                      {
                        int32_t _11372_ = (int)0;
                        int32_t _11373_ = _ptr__5129_nelem[_5233_i];
                        for (int32_t _5237_j = _11372_; _5237_j < _11373_; ++_5237_j)
                        {
                          {
                            int64_t _5238_i0 = (_ptr__5142_wi64[safe_add( _ptr__5135_sp_base[_5233_i],_5237_j )] / _5235_s0);
                            int64_t _5239_i1 = ((_ptr__5142_wi64[safe_add( _ptr__5135_sp_base[_5233_i],_5237_j )] / _5236_s1) % _5234_d1);
                            int64_t _5240_i2 = (_ptr__5142_wi64[safe_add( _ptr__5135_sp_base[_5233_i],_5237_j )] % _5171_d2);
                            _ptr__5231_xi64[safe_add( _5224_tsp,_5232_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5238_i0,_5151_sdim ),_5239_i1 ),_ptr__5167_offset[_5233_i] ),_5171_d2 ),_5240_i2 );
                            _ptr__5230_xi32[safe_add( _5225_ti,_5232_elmi )] = _5233_i;
                            _ptr__5230_xi32[safe_add( _5226_tj,_5232_elmi )] = _5237_j;
                            ++ _5232_elmi;
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        int32_t _11374_ = (int)0;
                        int32_t _11375_ = _ptr__5129_nelem[_5233_i];
                        for (int32_t _5241_j = _11374_; _5241_j < _11375_; ++_5241_j)
                        {
                          {
                            int64_t _5242_i0 = ((int64_t)_5241_j / _5235_s0);
                            int64_t _5243_i1 = (((int64_t)_5241_j / _5236_s1) % _5234_d1);
                            int64_t _5244_i2 = ((int64_t)_5241_j % _5171_d2);
                            _ptr__5231_xi64[safe_add( _5224_tsp,_5232_elmi )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _5242_i0,_5151_sdim ),_5243_i1 ),_ptr__5167_offset[_5233_i] ),_5171_d2 ),_5244_i2 );
                            _ptr__5230_xi32[safe_add( _5225_ti,_5232_elmi )] = _5233_i;
                            _ptr__5230_xi32[safe_add( _5226_tj,_5232_elmi )] = _5241_j;
                            ++ _5232_elmi;
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                std::shared_ptr< monty::ndarray< int64_t,1 > > _5245_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5153_rnd)));
                _checked_ptr_1<int64_t> _ptr__5245_s(_5245_s ? _5245_s->raw() : nullptr,_5245_s ? _5245_s->size(0) : 0);
                _ptr__5245_s[(_5153_rnd - (int)1)] = (int)1;
                int32_t _11376_ = (int)1;
                int32_t _11377_ = _5153_rnd;
                for (int32_t _5246_i = _11376_; _5246_i < _11377_; ++_5246_i)
                {
                  {
                    _ptr__5245_s[((_5153_rnd - _5246_i) - (int)1)] = safe_mul( _ptr__5245_s[(_5153_rnd - _5246_i)],_ptr__5209_ri32[(safe_add( _5207_rshape,_5153_rnd ) - _5246_i)] );
                  }
                }
                int32_t _11378_ = (int)0;
                int32_t _11379_ = _5155_rnelem;
                for (int32_t _5247_i = _11378_; _5247_i < _11379_; ++_5247_i)
                {
                  {
                    _ptr__5230_xi32[safe_add( _5227_curperm,_5247_i )] = _5247_i;
                  }
                }
                int32_t _11380_ = (int)0;
                int32_t _11381_ = _5153_rnd;
                for (int32_t _5248_ii = _11380_; _5248_ii < _11381_; ++_5248_ii)
                {
                  {
                    int32_t _5249_i = ((_5153_rnd - _5248_ii) - (int)1);
                    int32_t _5250_di = _ptr__5209_ri32[safe_add( _5207_rshape,_5249_i )];
                    int32_t _11382_ = (int)0;
                    int32_t _11383_ = safe_add( _5250_di,(int)1 );
                    for (int32_t _5251_k = _11382_; _5251_k < _11383_; ++_5251_k)
                    {
                      {
                        _ptr__5230_xi32[safe_add( _5229_xptr,_5251_k )] = (int)0;
                      }
                    }
                    int32_t _11384_ = (int)0;
                    int32_t _11385_ = _5155_rnelem;
                    for (int32_t _5252_kk = _11384_; _5252_kk < _11385_; ++_5252_kk)
                    {
                      {
                        int32_t _5253_k = _ptr__5230_xi32[safe_add( _5227_curperm,_5252_kk )];
                        int64_t _5254_sub = ((_ptr__5231_xi64[safe_add( _5224_tsp,_5253_k )] / _ptr__5245_s[_5249_i]) % _5250_di);
                        ++ _ptr__5230_xi32[safe_add( safe_add( _5229_xptr,_5254_sub ),(int)1 )];
                      }
                    }
                    {
                      int32_t _11386_ = (int)0;
                      int32_t _11387_ = _5250_di;
                      for (int32_t _5255_k = _11386_; _5255_k < _11387_; ++_5255_k)
                      {
                        {
                          _ptr__5230_xi32[safe_add( safe_add( _5229_xptr,_5255_k ),(int)1 )] += _ptr__5230_xi32[safe_add( _5229_xptr,_5255_k )];
                        }
                      }
                      int32_t _11388_ = (int)0;
                      int32_t _11389_ = _5155_rnelem;
                      for (int32_t _5256_kk = _11388_; _5256_kk < _11389_; ++_5256_kk)
                      {
                        {
                          int32_t _5257_k = _ptr__5230_xi32[safe_add( _5227_curperm,_5256_kk )];
                          int64_t _5258_sub = ((_ptr__5231_xi64[safe_add( _5224_tsp,_5257_k )] / _ptr__5245_s[_5249_i]) % _5250_di);
                          _ptr__5230_xi32[safe_add( _5228_tgtperm,_ptr__5230_xi32[safe_add( _5229_xptr,_5258_sub )] )] = _5257_k;
                          ++ _ptr__5230_xi32[safe_add( _5229_xptr,_5258_sub )];
                        }
                      }
                    }
                    int32_t _5259_tmp = _5227_curperm;
                    _5227_curperm = _5228_tgtperm;
                    _5228_tgtperm = _5259_tmp;
                  }
                }
              }
              {
                int32_t _5260_codei = (int)0;
                int32_t _5261_nzi = (int)0;
                _ptr__5209_ri32[_5200_rptr] = (int)0;
                if ((_5154_rncodeatom > (int)0))
                {
                  {
                    _ptr__5209_ri32[_5205_rcodeptr] = (int)0;
                  }
                }
                {}
                int32_t _11390_ = (int)0;
                int32_t _11391_ = _5155_rnelem;
                for (int32_t _5262_elmi = _11390_; _5262_elmi < _11391_; ++_5262_elmi)
                {
                  {
                    int32_t _5263_pelmi = _ptr__5230_xi32[safe_add( _5227_curperm,_5262_elmi )];
                    int32_t _5264_i = _ptr__5230_xi32[safe_add( _5225_ti,_5263_pelmi )];
                    int32_t _5265_j = _ptr__5230_xi32[safe_add( _5226_tj,_5263_pelmi )];
                    int32_t _11392_ = _ptr__5141_wi32[safe_add( _ptr__5133_ptr_base[_5264_i],_5265_j )];
                    int32_t _11393_ = _ptr__5141_wi32[safe_add( safe_add( _ptr__5133_ptr_base[_5264_i],_5265_j ),(int)1 )];
                    for (int32_t _5266_k = _11392_; _5266_k < _11393_; ++_5266_k)
                    {
                      {
                        _ptr__5210_ri64[safe_add( _5201_rnidxs,_5261_nzi )] = _ptr__5142_wi64[safe_add( _ptr__5134_nidxs_base[_5264_i],_5266_k )];
                        _ptr__5211_rf64[safe_add( _5203_rcof,_5261_nzi )] = _ptr__5143_wf64[safe_add( _ptr__5136_cof_base[_5264_i],_5266_k )];
                        if ((_ptr__5131_ncodeatom[_5264_i] > (int)0))
                        {
                          {
                            int32_t _11394_ = _ptr__5141_wi32[safe_add( _ptr__5138_codeptr[_5264_i],_5266_k )];
                            int32_t _11395_ = _ptr__5141_wi32[safe_add( safe_add( _ptr__5138_codeptr[_5264_i],_5266_k ),(int)1 )];
                            for (int32_t _5267_l = _11394_; _5267_l < _11395_; ++_5267_l)
                            {
                              {
                                _ptr__5209_ri32[safe_add( _5204_rcode,_5260_codei )] = _ptr__5141_wi32[safe_add( _ptr__5137_code[_5264_i],_5267_l )];
                                _ptr__5211_rf64[safe_add( _5206_rcconst,_5260_codei )] = _ptr__5143_wf64[safe_add( _ptr__5139_cconst[_5264_i],_5267_l )];
                                ++ _5260_codei;
                              }
                            }
                            _ptr__5209_ri32[safe_add( safe_add( _5205_rcodeptr,_5261_nzi ),(int)1 )] = _5260_codei;
                          }
                        }
                        else if(_5157_parameterized)
                        {
                          {
                            _ptr__5209_ri32[safe_add( _5204_rcode,_5260_codei )] = 2;
                            _ptr__5211_rf64[safe_add( _5206_rcconst,_5260_codei )] = 0.0;
                            ++ _5260_codei;
                            _ptr__5209_ri32[safe_add( safe_add( _5205_rcodeptr,_5261_nzi ),(int)1 )] = _5260_codei;
                          }
                        }
                        {}
                        ++ _5261_nzi;
                      }
                    }
                    _ptr__5209_ri32[safe_add( safe_add( _5200_rptr,_5262_elmi ),(int)1 )] = _5261_nzi;
                    _ptr__5210_ri64[safe_add( _5202_rsp,_5262_elmi )] = _ptr__5231_xi64[safe_add( _5224_tsp,_5263_pelmi )];
                  }
                }
              }
            }
          }
          if ((!_5199_rhassp))
          {
            {
              _5122_rs->popi64(_5155_rnelem);
            }
          }
          {}
        }
      }
    }
  }
}
// End mosek.fusion.ExprStack.eval

// Begin mosek.fusion.ExprStack.getshape
// Method mosek.fusion.ExprStack.getshape @ src/fusion/ExprStack.monty:16:6-47:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5268_es,int32_t _5269_dim)
{
  if (((int)((_5268_es)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_5268_es)->size(0)) == (int)1))
  {
    {
      return ((*_5268_es)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int32_t,1 > >> _11396_;
      for (int32_t _5271_i = (int)0, _11397_ = (int)((_5268_es)->size(0)); _5271_i < _11397_ ; ++_5271_i)
      {
        _11396_.push_back(((*_5268_es)(_5271_i))->getShape());
      }
      auto _11398_ = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape(_11396_.size()),_11396_.begin(),_11396_.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _5270_shapes = _11398_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5272_shape = ((*_5270_shapes)((int)0));
      _checked_ptr_1<int32_t> _ptr__5272_shape(_5272_shape ? _5272_shape->raw() : nullptr,_5272_shape ? _5272_shape->size(0) : 0);
      int32_t _5273_nd = (int)((_5272_shape)->size(0));
      int32_t _11399_ = (int)1;
      int32_t _11400_ = (int)((_5270_shapes)->size(0));
      for (int32_t _5274_i = _11399_; _5274_i < _11400_; ++_5274_i)
      {
        {
          if ((_5273_nd != (int)((((*_5270_shapes)(_5274_i)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int32_t _11401_ = (int)0;
          int32_t _11402_ = _5269_dim;
          for (int32_t _5275_j = _11401_; _5275_j < _11402_; ++_5275_j)
          {
            {
              if ((_ptr__5272_shape[_5275_j] != ((*((*_5270_shapes)(_5274_i)))(_5275_j))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int32_t _11403_ = safe_add( _5269_dim,(int)1 );
          int32_t _11404_ = _5273_nd;
          for (int32_t _5276_j = _11403_; _5276_j < _11404_; ++_5276_j)
          {
            {
              if ((_ptr__5272_shape[_5276_j] != ((*((*_5270_shapes)(_5274_i)))(_5276_j))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_5269_dim == _5273_nd))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5277_resshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _5273_nd,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__5277_resshape(_5277_resshape ? _5277_resshape->raw() : nullptr,_5277_resshape ? _5277_resshape->size(0) : 0);
          int32_t _11405_ = (int)0;
          int32_t _11406_ = _5273_nd;
          for (int32_t _5278_i = _11405_; _5278_i < _11406_; ++_5278_i)
          {
            {
              _ptr__5277_resshape[_5278_i] = _ptr__5272_shape[_5278_i];
            }
          }
          _ptr__5277_resshape[_5273_nd] = (int)((_5270_shapes)->size(0));
          return _5277_resshape;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5279_resshape = _5272_shape;
          _checked_ptr_1<int32_t> _ptr__5279_resshape(_5279_resshape ? _5279_resshape->raw() : nullptr,_5279_resshape ? _5279_resshape->size(0) : 0);
          int32_t _11407_ = (int)1;
          int32_t _11408_ = (int)((_5270_shapes)->size(0));
          for (int32_t _5280_i = _11407_; _5280_i < _11408_; ++_5280_i)
          {
            {
              _ptr__5279_resshape[_5269_dim] += ((*((*_5270_shapes)(_5280_i)))(_5269_dim));
            }
          }
          return _5279_resshape;
        }
      }
    }
  }
}
// End mosek.fusion.ExprStack.getshape

// Begin mosek.fusion.ExprStack.toString
// Method mosek.fusion.ExprStack.toString @ src/fusion/ExprStack.monty:8:6-14:7
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprStack::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5281_b = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int32_t _11409_ = (int)1;
  int32_t _11410_ = (int)((exprs)->size(0));
  for (int32_t _5282_i = _11409_; _5282_i < _11410_; ++_5282_i)
  {
    {
      _5281_b->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_5282_i))->toString());
    }
  }
  _5281_b->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _5281_b->toString();
}
// End mosek.fusion.ExprStack.toString

void mosek::fusion::p_ExprStack::destroy()
{
  exprs.reset();
}
void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }
// } class ExprStack
// class ExprInner { // @ src/fusion/ExprMul.monty:2320:4-2512:5
mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }
mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprInner::p_ExprInner
  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprInner.ctor @ src/fusion/ExprMul.monty:2352:6-2380:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5283_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5284_vsub,
    std::shared_ptr< monty::ndarray< double,1 > > _5285_vcof)
{ return new mosek::fusion::ExprInner(_5283_expr,_5284_vsub,_5285_vcof); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5283_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5284_vsub,
    std::shared_ptr< monty::ndarray< double,1 > > _5285_vcof) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5283_expr,_5284_vsub,_5285_vcof); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5283_expr,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5284_vsub,
    std::shared_ptr< monty::ndarray< double,1 > > _5285_vcof)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__5284_vsub(_5284_vsub ? _5284_vsub->raw() : nullptr, _5284_vsub ? _5284_vsub->size(0) : 0);
    _checked_ptr_1<double> _ptr__5285_vcof(_5285_vcof ? _5285_vcof->raw() : nullptr, _5285_vcof ? _5285_vcof->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _5283_expr;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _5284_vsub;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _5285_vcof;
    if (((int)((_5284_vsub)->size(0)) != (int)((_5285_vcof)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5286_shp = _5283_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__5286_shp(_5286_shp ? _5286_shp->raw() : nullptr,_5286_shp ? _5286_shp->size(0) : 0);
    int64_t _5287_size = ::mosek::fusion::p_Set::size(_5286_shp);
    bool _5288_err_sorted = false;
    bool _5289_err_bounds = false;
    {
      int32_t _11411_ = (int)1;
      int32_t _11412_ = (int)((_5284_vsub)->size(0));
      for (int32_t _5290_i = _11411_; _5290_i < _11412_; ++_5290_i)
      {
        {
          if ((_ptr__5284_vsub[_5290_i] <= _ptr__5284_vsub[(_5290_i - (int)1)]))
          {
            {
              _5288_err_sorted = true;
            }
          }
          {}
        }
      }
      if (((int)((_5284_vsub)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5284_vsub[(int)0] < (int)0) || (_ptr__5284_vsub[((int)((_5284_vsub)->size(0)) - (int)1)] > _5287_size)))
          {
            {
              _5289_err_bounds = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_5288_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_5289_err_bounds)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprInner.ctor

// mosek.fusion.ExprInner.ctor @ src/fusion/ExprMul.monty:2343:6-2350:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5291_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _5292_vcof)
{ return new mosek::fusion::ExprInner(_5291_expr,_5292_vcof); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5291_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _5292_vcof) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5291_expr,_5292_vcof); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5291_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _5292_vcof)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5292_vcof(_5292_vcof ? _5292_vcof->raw() : nullptr, _5292_vcof ? _5292_vcof->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5291_expr,::mosek::fusion::p_ExprInner::range((int)((_5292_vcof)->size(0))),_5292_vcof);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5293_eshape = _5291_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__5293_eshape(_5293_eshape ? _5293_eshape->raw() : nullptr,_5293_eshape ? _5293_eshape->size(0) : 0);
    if ((((int)((_5293_eshape)->size(0)) != (int)1) || (_ptr__5293_eshape[(int)0] != (int)((_5292_vcof)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprInner.ctor

// mosek.fusion.ExprInner.ctor @ src/fusion/ExprMul.monty:2339:6-2341:7
mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5294_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5295_vsub,
    std::shared_ptr< monty::ndarray< double,1 > > _5296_vcof)
{ return new mosek::fusion::ExprInner(_5294_expr,_5295_vsub,_5296_vcof); }
mosek::fusion::ExprInner::ExprInner
  (monty::rc_ptr< ::mosek::fusion::Expression > _5294_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5295_vsub,
    std::shared_ptr< monty::ndarray< double,1 > > _5296_vcof) : 
   ExprInner(new mosek::fusion::p_ExprInner(this))
{ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5294_expr,_5295_vsub,_5296_vcof); }
void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5294_expr,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _5295_vsub,
    std::shared_ptr< monty::ndarray< double,1 > > _5296_vcof)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5296_vcof(_5296_vcof ? _5296_vcof->raw() : nullptr, _5296_vcof ? _5296_vcof->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5294_expr,::mosek::fusion::p_ExprInner::convert(_5294_expr->getShape(),_5295_vsub),_5296_vcof);
  }
}
// mosek.fusion.ExprInner.ctor

// Begin mosek.fusion.ExprInner.eval
// Method mosek.fusion.ExprInner.eval @ src/fusion/ExprMul.monty:2382:6-2511:7
void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5297_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5298_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5299_xs) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_5297_rs,_5298_ws,_5299_xs); }
void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5297_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5298_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5299_xs)
{
  expr->eval(_5298_ws,_5297_rs,_5299_xs);
  _5298_ws->pop_expr();
  int32_t _5300_nd = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->nd;
  int32_t _5301_nelem = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->nelem;
  int32_t _5302_nnz = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->nnz;
  int32_t _5303_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->ncodeatom;
  bool _5304_hassp = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->hassp;
  int32_t _5305_shape = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->shape_base;
  int32_t _5306_ptr = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->ptr_base;
  int32_t _5307_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->nidxs_base;
  int32_t _5308_sp = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->sp_base;
  int32_t _5309_cof = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->cof_base;
  int32_t _5310_code = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->code_base;
  int32_t _5311_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->codeptr_base;
  int32_t _5312_cconst = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5313_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5313_wi32(_5313_wi32 ? _5313_wi32->raw() : nullptr,_5313_wi32 ? _5313_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5314_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5314_wi64(_5314_wi64 ? _5314_wi64->raw() : nullptr,_5314_wi64 ? _5314_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5315_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5298_ws)->f64;
  _checked_ptr_1<double> _ptr__5315_wf64(_5315_wf64 ? _5315_wf64->raw() : nullptr,_5315_wf64 ? _5315_wf64->size(0) : 0);
  int32_t _5316_rnnz = (int)0;
  if (_5304_hassp)
  {
    {
      int32_t _5317_i1 = (int)0;
      int32_t _5318_i0 = (int)0;
      while ( ((_5318_i0 < (int)((vsub)->size(0))) && (_5317_i1 < _5301_nelem)) )
      {
        {
          if ((_ptr__5314_wi64[safe_add( _5308_sp,_5317_i1 )] < ((*vsub)(_5318_i0))))
          {
            {
              ++ _5317_i1;
            }
          }
          else if((_ptr__5314_wi64[safe_add( _5308_sp,_5317_i1 )] > ((*vsub)(_5318_i0))))
          {
            {
              ++ _5318_i0;
            }
          }
          else
          {
            {
              _5316_rnnz += (_ptr__5313_wi32[safe_add( safe_add( _5306_ptr,_5317_i1 ),(int)1 )] - _ptr__5313_wi32[safe_add( _5306_ptr,_5317_i1 )]);
              ++ _5318_i0;
              ++ _5317_i1;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _11413_ = (int)0;
      int32_t _11414_ = (int)((vsub)->size(0));
      for (int32_t _5319_i = _11413_; _5319_i < _11414_; ++_5319_i)
      {
        {
          _5316_rnnz += (_ptr__5313_wi32[safe_add( safe_add( _5306_ptr,((*vsub)(_5319_i)) ),(int)1 )] - _ptr__5313_wi32[safe_add( _5306_ptr,((*vsub)(_5319_i)) )]);
        }
      }
    }
  }
  int32_t _11415_;
  bool _11416_ = (_5303_ncodeatom > (int)0);
  if (_11416_)
  {
    _11415_ = safe_add( _5303_ncodeatom,safe_mul( (int)2,_5302_nnz ) );
  }
  else
  {
    _11415_ = (int)0;
  }
  int32_t _5320_rncodeatom = _11415_;
  _5297_rs->alloc_expr((int)0,(int)1,_5316_rnnz,false,_5320_rncodeatom);
  int32_t _5321_rptr = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->ptr_base;
  int32_t _5322_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->nidxs_base;
  int32_t _5323_rcof = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->cof_base;
  int32_t _5324_rcode = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->code_base;
  int32_t _5325_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->codeptr_base;
  int32_t _5326_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5327_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5327_ri32(_5327_ri32 ? _5327_ri32->raw() : nullptr,_5327_ri32 ? _5327_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5328_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5328_ri64(_5328_ri64 ? _5328_ri64->raw() : nullptr,_5328_ri64 ? _5328_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5329_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5297_rs)->f64;
  _checked_ptr_1<double> _ptr__5329_rf64(_5329_rf64 ? _5329_rf64->raw() : nullptr,_5329_rf64 ? _5329_rf64->size(0) : 0);
  _ptr__5327_ri32[_5321_rptr] = (int)0;
  _ptr__5327_ri32[safe_add( _5321_rptr,(int)1 )] = _5316_rnnz;
  if ((_5320_rncodeatom > (int)0))
  {
    {
      _ptr__5327_ri32[_5325_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _5330_codei = (int)0;
  int32_t _5331_k = (int)0;
  if (_5304_hassp)
  {
    {
      int32_t _5332_i1 = (int)0;
      int32_t _5333_i0 = (int)0;
      while ( ((_5333_i0 < (int)((vsub)->size(0))) && (_5332_i1 < _5301_nelem)) )
      {
        {
          if ((_ptr__5314_wi64[safe_add( _5308_sp,_5332_i1 )] < ((*vsub)(_5333_i0))))
          {
            {
              ++ _5332_i1;
            }
          }
          else if((_ptr__5314_wi64[safe_add( _5308_sp,_5332_i1 )] > ((*vsub)(_5333_i0))))
          {
            {
              ++ _5333_i0;
            }
          }
          else
          {
            {
              int32_t _5334_p0 = _ptr__5313_wi32[safe_add( _5306_ptr,_5332_i1 )];
              int32_t _5335_p1 = _ptr__5313_wi32[safe_add( safe_add( _5306_ptr,_5332_i1 ),(int)1 )];
              int32_t _11417_ = _5334_p0;
              int32_t _11418_ = _5335_p1;
              for (int32_t _5336_j = _11417_; _5336_j < _11418_; ++_5336_j)
              {
                {
                  _ptr__5328_ri64[safe_add( _5322_rnidxs,_5331_k )] = _ptr__5314_wi64[safe_add( _5307_nidxs,_5336_j )];
                  _ptr__5329_rf64[safe_add( _5323_rcof,_5331_k )] = (((*vcof)(_5333_i0)) * _ptr__5315_wf64[safe_add( _5309_cof,_5336_j )]);
                  if ((_5320_rncodeatom > (int)0))
                  {
                    {
                      int32_t _11419_ = _ptr__5313_wi32[safe_add( _5311_codeptr,_5336_j )];
                      int32_t _11420_ = _ptr__5313_wi32[safe_add( safe_add( _5311_codeptr,_5336_j ),(int)1 )];
                      for (int32_t _5337_l = _11419_; _5337_l < _11420_; ++_5337_l)
                      {
                        {
                          _ptr__5327_ri32[safe_add( _5324_rcode,_5330_codei )] = _ptr__5313_wi32[safe_add( _5310_code,_5337_l )];
                          _ptr__5329_rf64[safe_add( _5326_rcconst,_5330_codei )] = _ptr__5315_wf64[safe_add( _5312_cconst,_5337_l )];
                          ++ _5330_codei;
                        }
                      }
                      _ptr__5327_ri32[safe_add( _5324_rcode,_5330_codei )] = 2;
                      _ptr__5329_rf64[safe_add( _5326_rcconst,_5330_codei )] = ((*vcof)(_5333_i0));
                      ++ _5330_codei;
                      _ptr__5327_ri32[safe_add( _5324_rcode,_5330_codei )] = 5;
                      ++ _5330_codei;
                      _ptr__5327_ri32[safe_add( safe_add( _5325_rcodeptr,_5331_k ),(int)1 )] = _5330_codei;
                    }
                  }
                  {}
                  ++ _5331_k;
                }
              }
              ++ _5333_i0;
              ++ _5332_i1;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _11421_ = (int)0;
      int32_t _11422_ = (int)((vsub)->size(0));
      for (int32_t _5338_i = _11421_; _5338_i < _11422_; ++_5338_i)
      {
        {
          int32_t _5339_p0 = _ptr__5313_wi32[safe_add( _5306_ptr,((*vsub)(_5338_i)) )];
          int32_t _5340_p1 = _ptr__5313_wi32[safe_add( safe_add( _5306_ptr,((*vsub)(_5338_i)) ),(int)1 )];
          int32_t _11423_ = _5339_p0;
          int32_t _11424_ = _5340_p1;
          for (int32_t _5341_j = _11423_; _5341_j < _11424_; ++_5341_j)
          {
            {
              _ptr__5328_ri64[safe_add( _5322_rnidxs,_5331_k )] = _ptr__5314_wi64[safe_add( _5307_nidxs,_5341_j )];
              _ptr__5329_rf64[safe_add( _5323_rcof,_5331_k )] = (((*vcof)(_5338_i)) * _ptr__5315_wf64[safe_add( _5309_cof,_5341_j )]);
              if ((_5320_rncodeatom > (int)0))
              {
                {
                  int32_t _11425_ = _ptr__5313_wi32[safe_add( _5311_codeptr,_5341_j )];
                  int32_t _11426_ = _ptr__5313_wi32[safe_add( safe_add( _5311_codeptr,_5341_j ),(int)1 )];
                  for (int32_t _5342_l = _11425_; _5342_l < _11426_; ++_5342_l)
                  {
                    {
                      _ptr__5327_ri32[safe_add( _5324_rcode,_5330_codei )] = _ptr__5313_wi32[safe_add( _5310_code,_5342_l )];
                      _ptr__5329_rf64[safe_add( _5326_rcconst,_5330_codei )] = _ptr__5313_wi32[safe_add( _5312_cconst,_5342_l )];
                      ++ _5330_codei;
                    }
                  }
                  _ptr__5327_ri32[safe_add( _5324_rcode,_5330_codei )] = 2;
                  _ptr__5329_rf64[safe_add( _5326_rcconst,_5330_codei )] = ((*vcof)(_5338_i));
                  ++ _5330_codei;
                  _ptr__5327_ri32[safe_add( _5324_rcode,_5330_codei )] = 5;
                  ++ _5330_codei;
                  _ptr__5327_ri32[safe_add( safe_add( _5325_rcodeptr,_5331_k ),(int)1 )] = _5330_codei;
                }
              }
              {}
              ++ _5331_k;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprInner.eval

// Begin mosek.fusion.ExprInner.range
// Method mosek.fusion.ExprInner.range @ src/fusion/ExprMul.monty:2337:6-90
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ExprInner::range(int32_t _5343_n)
{
  std::vector<int64_t> _11427_;
  for (int32_t _5344_i = (int)0, _11428_ = _5343_n; _5344_i < _11428_ ; ++_5344_i)
  {
    _11427_.push_back(_5344_i);
  }
  auto _11429_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_11427_.size()),_11427_.begin(),_11427_.end()));
  return _11429_;
}
// End mosek.fusion.ExprInner.range

// Begin mosek.fusion.ExprInner.convert
// Method mosek.fusion.ExprInner.convert @ src/fusion/ExprMul.monty:2327:6-2335:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int32_t,1 > > _5345_shape,std::shared_ptr< monty::ndarray< int32_t,2 > > _5346_vsub)
{
  _checked_ptr_1<int32_t> _ptr__5345_shape(_5345_shape ? _5345_shape->raw() : nullptr, _5345_shape ? _5345_shape->size(0) : 0);
  int32_t _5347_nd = (int)((_5345_shape)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5348_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_5347_nd)));
  _checked_ptr_1<int64_t> _ptr__5348_s(_5348_s ? _5348_s->raw() : nullptr,_5348_s ? _5348_s->size(0) : 0);
  _ptr__5348_s[(_5347_nd - (int)1)] = (int)1;
  int32_t _11430_ = (int)1;
  int32_t _11431_ = _5347_nd;
  for (int32_t _5349_i = _11430_; _5349_i < _11431_; ++_5349_i)
  {
    {
      _ptr__5348_s[((_5347_nd - _5349_i) - (int)1)] = safe_mul( _ptr__5348_s[(_5347_nd - _5349_i)],_ptr__5345_shape[(_5347_nd - _5349_i)] );
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5350_res = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_5346_vsub)->size(0)))));
  _checked_ptr_1<int64_t> _ptr__5350_res(_5350_res ? _5350_res->raw() : nullptr,_5350_res ? _5350_res->size(0) : 0);
  int32_t _11432_ = (int)0;
  int32_t _11433_ = (int)((_5346_vsub)->size(0));
  for (int32_t _5351_i = _11432_; _5351_i < _11433_; ++_5351_i)
  {
    {
      int32_t _11434_ = (int)0;
      int32_t _11435_ = _5347_nd;
      for (int32_t _5352_j = _11434_; _5352_j < _11435_; ++_5352_j)
      {
        {
          _ptr__5350_res[_5351_i] += safe_mul( _ptr__5348_s[_5352_j],((*_5346_vsub)(_5351_i,_5352_j)) );
        }
      }
    }
  }
  return _5350_res;
}
// End mosek.fusion.ExprInner.convert

// Begin mosek.fusion.ExprInner.toString
// Method mosek.fusion.ExprInner.toString @ src/fusion/ExprMul.monty:2325:6-64
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprInner::toString()
{
  return std::string ("ExprInner()");
}
// End mosek.fusion.ExprInner.toString

void mosek::fusion::p_ExprInner::destroy()
{
  vcof.reset();
  vsub.reset();
  expr.reset();
}
void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }
// } class ExprInner
// class ExprMulDiagRight { // @ src/fusion/ExprMul.monty:1961:4-2316:5
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }
mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight
  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulDiagRight.ctor @ src/fusion/ExprMul.monty:2047:6-2065:7
mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight
  (int32_t _5353_mdim0,
    int32_t _5354_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5355_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5356_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5357_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5358_expr,
    int32_t _5359_validated)
{ return new mosek::fusion::ExprMulDiagRight(_5353_mdim0,_5354_mdim1,_5355_msubi,_5356_msubj,_5357_mval,_5358_expr,_5359_validated); }
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight
  (int32_t _5353_mdim0,
    int32_t _5354_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5355_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5356_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5357_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5358_expr,
    int32_t _5359_validated) : 
   ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this))
{ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5353_mdim0,_5354_mdim1,_5355_msubi,_5356_msubj,_5357_mval,_5358_expr,_5359_validated); }
void mosek::fusion::p_ExprMulDiagRight::_initialize  (int32_t _5353_mdim0,
    int32_t _5354_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5355_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5356_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5357_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5358_expr,
    int32_t _5359_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5355_msubi(_5355_msubi ? _5355_msubi->raw() : nullptr, _5355_msubi ? _5355_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5356_msubj(_5356_msubj ? _5356_msubj->raw() : nullptr, _5356_msubj ? _5356_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5357_mval(_5357_mval ? _5357_mval->raw() : nullptr, _5357_mval ? _5357_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5354_mdim1)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _5353_mdim0;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _5354_mdim1;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _5355_msubi;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _5356_msubj;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _5357_mval;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _5358_expr;
  }
}
// mosek.fusion.ExprMulDiagRight.ctor

// mosek.fusion.ExprMulDiagRight.ctor @ src/fusion/ExprMul.monty:2035:6-2045:7
mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight
  (int32_t _5360_mdim0,
    int32_t _5361_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5362_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5363_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5364_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5365_expr)
{ return new mosek::fusion::ExprMulDiagRight(_5360_mdim0,_5361_mdim1,_5362_msubi,_5363_msubj,_5364_mval,_5365_expr); }
mosek::fusion::ExprMulDiagRight::ExprMulDiagRight
  (int32_t _5360_mdim0,
    int32_t _5361_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5362_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5363_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5364_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5365_expr) : 
   ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this))
{ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5360_mdim0,_5361_mdim1,_5362_msubi,_5363_msubj,_5364_mval,_5365_expr); }
void mosek::fusion::p_ExprMulDiagRight::_initialize  (int32_t _5360_mdim0,
    int32_t _5361_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5362_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5363_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5364_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5365_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5362_msubi(_5362_msubi ? _5362_msubi->raw() : nullptr, _5362_msubi ? _5362_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5363_msubj(_5363_msubj ? _5363_msubj->raw() : nullptr, _5363_msubj ? _5363_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5364_mval(_5364_mval ? _5364_mval->raw() : nullptr, _5364_mval ? _5364_mval->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_5360_mdim0,_5361_mdim1,_5362_msubi,_5363_msubj,_5364_mval,_5365_expr,::mosek::fusion::p_ExprMulDiagRight::validate(_5360_mdim0,_5361_mdim1,_5362_msubi,_5363_msubj,_5364_mval,_5365_expr));
  }
}
// mosek.fusion.ExprMulDiagRight.ctor

// Begin mosek.fusion.ExprMulDiagRight.eval
// Method mosek.fusion.ExprMulDiagRight.eval @ src/fusion/ExprMul.monty:2068:6-2315:7
void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5366_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5367_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5368_xs) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_5366_rs,_5367_ws,_5368_xs); }
void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5366_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5367_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5368_xs)
{
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_5367_ws,_5366_rs,_5368_xs);
  _5367_ws->pop_expr();
  int32_t _5369_nd = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->nd;
  int32_t _5370_nnz = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->nnz;
  int32_t _5371_nelem = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->nelem;
  int32_t _5372_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->ncodeatom;
  bool _5373_hassp = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->hassp;
  int32_t _5374_shape = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->shape_base;
  int32_t _5375_ptr = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->ptr_base;
  int32_t _5376_sp = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->sp_base;
  int32_t _5377_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->nidxs_base;
  int32_t _5378_cof = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->cof_base;
  int32_t _5379_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->codeptr_base;
  int32_t _5380_code = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->code_base;
  int32_t _5381_cconst = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5382_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5382_wi32(_5382_wi32 ? _5382_wi32->raw() : nullptr,_5382_wi32 ? _5382_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5383_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5383_wi64(_5383_wi64 ? _5383_wi64->raw() : nullptr,_5383_wi64 ? _5383_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5384_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5367_ws)->f64;
  _checked_ptr_1<double> _ptr__5384_wf64(_5384_wf64 ? _5384_wf64->raw() : nullptr,_5384_wf64 ? _5384_wf64->size(0) : 0);
  int32_t _5385_edim0 = _ptr__5382_wi32[_5374_shape];
  int32_t _5386_edim1 = _ptr__5382_wi32[safe_add( _5374_shape,(int)1 )];
  int32_t _5387_mnnz = (int)((mval)->size(0));
  int32_t _5388_xmperm = _5368_xs->alloci32(_5387_mnnz);
  int32_t _5389_xmcolptr = _5368_xs->alloci32(safe_add( mdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5390_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5368_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__5390_xi32(_5390_xi32 ? _5390_xi32->raw() : nullptr,_5390_xi32 ? _5390_xi32->size(0) : 0);
  {
    int32_t _11436_ = (int)0;
    int32_t _11437_ = safe_add( mdim1,(int)1 );
    for (int32_t _5391_i = _11436_; _5391_i < _11437_; ++_5391_i)
    {
      {
        _ptr__5390_xi32[safe_add( _5389_xmcolptr,_5391_i )] = (int)0;
      }
    }
    int32_t _11438_ = (int)0;
    int32_t _11439_ = _5387_mnnz;
    for (int32_t _5392_i = _11438_; _5392_i < _11439_; ++_5392_i)
    {
      {
        ++ _ptr__5390_xi32[safe_add( safe_add( _5389_xmcolptr,((*msubj)(_5392_i)) ),(int)1 )];
      }
    }
    int32_t _11440_ = (int)0;
    int32_t _11441_ = mdim1;
    for (int32_t _5393_i = _11440_; _5393_i < _11441_; ++_5393_i)
    {
      {
        _ptr__5390_xi32[safe_add( safe_add( _5389_xmcolptr,_5393_i ),(int)1 )] += _ptr__5390_xi32[safe_add( _5389_xmcolptr,_5393_i )];
      }
    }
    int32_t _11442_ = (int)0;
    int32_t _11443_ = _5387_mnnz;
    for (int32_t _5394_i = _11442_; _5394_i < _11443_; ++_5394_i)
    {
      {
        _ptr__5390_xi32[safe_add( _5388_xmperm,_ptr__5390_xi32[safe_add( _5389_xmcolptr,((*msubj)(_5394_i)) )] )] = _5394_i;
        ++ _ptr__5390_xi32[safe_add( _5389_xmcolptr,((*msubj)(_5394_i)) )];
      }
    }
    int32_t _11444_ = (int)0;
    int32_t _11445_ = mdim1;
    for (int32_t _5395_i = _11444_; _5395_i < _11445_; ++_5395_i)
    {
      {
        _ptr__5390_xi32[(safe_add( _5389_xmcolptr,mdim1 ) - _5395_i)] = _ptr__5390_xi32[((safe_add( _5389_xmcolptr,mdim1 ) - _5395_i) - (int)1)];
      }
    }
    _ptr__5390_xi32[_5389_xmcolptr] = (int)0;
  }
  int32_t _5396_rncodeatom = (int)0;
  int32_t _5397_rnnz = (int)0;
  int32_t _5398_rnelem = (int)0;
  if ((!_5373_hassp))
  {
    {
      int32_t _5399_i1 = (int)0;
      while ( (_5399_i1 < _5387_mnnz) )
      {
        {
          int32_t _5400_mcol = ((*msubj)(_ptr__5390_xi32[safe_add( _5388_xmperm,_5399_i1 )]));
          int32_t _5401_b1 = _5399_i1;
          while ( ((_5399_i1 < _5387_mnnz) && (_5400_mcol == ((*msubj)(_ptr__5390_xi32[safe_add( _5388_xmperm,_5399_i1 )])))) )
          {
            {
              ++ _5399_i1;
            }
          }
          int32_t _11446_ = _5401_b1;
          int32_t _11447_ = _5399_i1;
          for (int32_t _5402_i = _11446_; _5402_i < _11447_; ++_5402_i)
          {
            {
              int32_t _5403_eidx = safe_add( safe_mul( ((*msubj)(_ptr__5390_xi32[safe_add( _5388_xmperm,_5402_i )])),_5386_edim1 ),((*msubi)(_ptr__5390_xi32[safe_add( _5388_xmperm,_5402_i )])) );
              _5397_rnnz += (_ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5403_eidx ),(int)1 )] - _ptr__5382_wi32[safe_add( _5375_ptr,_5403_eidx )]);
              if ((_5372_ncodeatom > (int)0))
              {
                {
                  _5396_rncodeatom += safe_add( (_ptr__5382_wi32[safe_add( _5379_codeptr,_ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5403_eidx ),(int)1 )] )] - _ptr__5382_wi32[safe_add( _5379_codeptr,_ptr__5382_wi32[safe_add( _5375_ptr,_5403_eidx )] )]),safe_mul( (int)2,(_ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5403_eidx ),(int)1 )] - _ptr__5382_wi32[safe_add( _5375_ptr,_5403_eidx )]) ) );
                }
              }
              {}
            }
          }
          ++ _5398_rnelem;
        }
      }
    }
  }
  else
  {
    {
      int32_t _5404_i1 = (int)0;
      int32_t _5405_i0 = (int)0;
      int32_t _11448_ = (int)0;
      int32_t _11449_ = mdim1;
      for (int32_t _5406_i = _11448_; _5406_i < _11449_; ++_5406_i)
      {
        {
          int32_t _5407_b1 = _5404_i1;
          int32_t _5408_b0 = _5405_i0;
          while ( ((_5404_i1 < _5387_mnnz) && (_5406_i == ((*msubj)(_ptr__5390_xi32[safe_add( _5388_xmperm,_5404_i1 )])))) )
          {
            {
              ++ _5404_i1;
            }
          }
          while ( ((_5405_i0 < _5371_nelem) && (_5406_i == (_ptr__5383_wi64[safe_add( _5376_sp,_5405_i0 )] / _5386_edim1))) )
          {
            {
              ++ _5405_i0;
            }
          }
          int32_t _5409_ii1 = _5407_b1;
          int32_t _5410_ii0 = _5408_b0;
          int32_t _5411_rownnz = (int)0;
          while ( ((_5410_ii0 < _5405_i0) && (_5409_ii1 < _5404_i1)) )
          {
            {
              if (((_ptr__5383_wi64[safe_add( _5376_sp,_5410_ii0 )] % _5386_edim1) < ((*msubi)(_ptr__5390_xi32[safe_add( _5388_xmperm,_5409_ii1 )]))))
              {
                {
                  ++ _5410_ii0;
                }
              }
              else if(((_ptr__5383_wi64[safe_add( _5376_sp,_5410_ii0 )] % _5386_edim1) > ((*msubi)(_ptr__5390_xi32[safe_add( _5388_xmperm,_5409_ii1 )]))))
              {
                {
                  ++ _5409_ii1;
                }
              }
              else
              {
                {
                  _5397_rnnz += (_ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5410_ii0 ),(int)1 )] - _ptr__5382_wi32[safe_add( _5375_ptr,_5410_ii0 )]);
                  if ((_5372_ncodeatom > (int)0))
                  {
                    {
                      _5396_rncodeatom += safe_add( (_ptr__5382_wi32[safe_add( _5379_codeptr,_ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5410_ii0 ),(int)1 )] )] - _ptr__5382_wi32[safe_add( _5379_codeptr,_ptr__5382_wi32[safe_add( _5375_ptr,_5410_ii0 )] )]),safe_mul( (int)2,(_ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5410_ii0 ),(int)1 )] - _ptr__5382_wi32[safe_add( _5375_ptr,_5410_ii0 )]) ) );
                    }
                  }
                  {}
                  ++ _5411_rownnz;
                  ++ _5410_ii0;
                  ++ _5409_ii1;
                }
              }
            }
          }
          if ((_5411_rownnz > (int)0))
          {
            {
              ++ _5398_rnelem;
            }
          }
          {}
        }
      }
    }
  }
  bool _5412_rhassp = (_5398_rnelem < _5385_edim0);
  _5366_rs->alloc_expr((int)1,_5398_rnelem,_5397_rnnz,_5412_rhassp,_5396_rncodeatom);
  int32_t _5413_rptr = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->ptr_base;
  int32_t _5414_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->nidxs_base;
  int32_t _11450_;
  bool _11451_ = _5412_rhassp;
  if (_11451_)
  {
    _11450_ = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->sp_base;
  }
  else
  {
    _11450_ = _5366_rs->alloci64(_5398_rnelem);
  }
  int32_t _5415_rsp = _11450_;
  int32_t _5416_rcof = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->cof_base;
  int32_t _5417_rshape = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->shape_base;
  int32_t _5418_rcode = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->code_base;
  int32_t _5419_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->codeptr_base;
  int32_t _5420_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5421_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5421_ri64(_5421_ri64 ? _5421_ri64->raw() : nullptr,_5421_ri64 ? _5421_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5422_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->f64;
  _checked_ptr_1<double> _ptr__5422_rf64(_5422_rf64 ? _5422_rf64->raw() : nullptr,_5422_rf64 ? _5422_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5423_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5366_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5423_ri32(_5423_ri32 ? _5423_ri32->raw() : nullptr,_5423_ri32 ? _5423_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5424_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5368_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__5424_xi32(_5424_xi32 ? _5424_xi32->raw() : nullptr,_5424_xi32 ? _5424_xi32->size(0) : 0);
  {
    int32_t _5425_codei = (int)0;
    int32_t _5426_nzi = (int)0;
    int32_t _5427_elmi = (int)0;
    _ptr__5423_ri32[_5413_rptr] = (int)0;
    if ((_5396_rncodeatom > (int)0))
    {
      {
        _ptr__5423_ri32[_5419_rcodeptr] = (int)0;
      }
    }
    {}
    _ptr__5423_ri32[_5417_rshape] = mdim1;
    if ((!_5373_hassp))
    {
      {
        int32_t _5428_i1 = (int)0;
        while ( (_5428_i1 < _5387_mnnz) )
        {
          {
            int32_t _5429_mcol = ((*msubj)(_ptr__5424_xi32[safe_add( _5388_xmperm,_5428_i1 )]));
            int32_t _5430_b1 = _5428_i1;
            while ( ((_5428_i1 < _5387_mnnz) && (_5429_mcol == ((*msubj)(_ptr__5424_xi32[safe_add( _5388_xmperm,_5428_i1 )])))) )
            {
              {
                ++ _5428_i1;
              }
            }
            int32_t _11452_ = _5430_b1;
            int32_t _11453_ = _5428_i1;
            for (int32_t _5431_i = _11452_; _5431_i < _11453_; ++_5431_i)
            {
              {
                int32_t _5432_midx = _ptr__5424_xi32[safe_add( _5388_xmperm,_5431_i )];
                int32_t _5433_eidx = safe_add( safe_mul( ((*msubj)(_5432_midx)),_5386_edim1 ),((*msubi)(_5432_midx)) );
                int32_t _11454_ = _ptr__5382_wi32[safe_add( _5375_ptr,_5433_eidx )];
                int32_t _11455_ = _ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5433_eidx ),(int)1 )];
                for (int32_t _5434_j = _11454_; _5434_j < _11455_; ++_5434_j)
                {
                  {
                    _ptr__5421_ri64[safe_add( _5414_rnidxs,_5426_nzi )] = _ptr__5383_wi64[safe_add( _5377_nidxs,_5434_j )];
                    _ptr__5422_rf64[safe_add( _5416_rcof,_5426_nzi )] = (_ptr__5384_wf64[safe_add( _5378_cof,_5434_j )] * ((*mval)(_5432_midx)));
                    if ((_5372_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11456_ = _ptr__5382_wi32[safe_add( _5379_codeptr,_5434_j )];
                        int32_t _11457_ = _ptr__5382_wi32[safe_add( safe_add( _5379_codeptr,_5434_j ),(int)1 )];
                        for (int32_t _5435_k = _11456_; _5435_k < _11457_; ++_5435_k)
                        {
                          {
                            _ptr__5423_ri32[safe_add( _5418_rcode,_5425_codei )] = _ptr__5382_wi32[safe_add( _5380_code,_5435_k )];
                            _ptr__5422_rf64[safe_add( _5420_rcconst,_5425_codei )] = _ptr__5384_wf64[safe_add( _5381_cconst,_5435_k )];
                            ++ _5425_codei;
                          }
                        }
                        _ptr__5423_ri32[safe_add( _5418_rcode,_5425_codei )] = 2;
                        _ptr__5422_rf64[safe_add( _5420_rcconst,_5425_codei )] = ((*mval)(_5432_midx));
                        ++ _5425_codei;
                        _ptr__5423_ri32[safe_add( _5418_rcode,_5425_codei )] = 5;
                        ++ _5425_codei;
                        _ptr__5423_ri32[safe_add( safe_add( _5419_rcodeptr,_5426_nzi ),(int)1 )] = _5425_codei;
                      }
                    }
                    {}
                    ++ _5426_nzi;
                  }
                }
              }
            }
            _ptr__5421_ri64[safe_add( _5415_rsp,_5427_elmi )] = _5429_mcol;
            _ptr__5423_ri32[safe_add( safe_add( _5413_rptr,_5427_elmi ),(int)1 )] = _5426_nzi;
            ++ _5427_elmi;
          }
        }
      }
    }
    else
    {
      {
        int32_t _5436_i1 = (int)0;
        int32_t _5437_i0 = (int)0;
        int32_t _11458_ = (int)0;
        int32_t _11459_ = mdim1;
        for (int32_t _5438_i = _11458_; _5438_i < _11459_; ++_5438_i)
        {
          {
            int32_t _5439_b1 = _5436_i1;
            int32_t _5440_b0 = _5437_i0;
            while ( ((_5437_i0 < _5371_nelem) && (_5438_i == (_ptr__5383_wi64[safe_add( _5376_sp,_5437_i0 )] / _5386_edim1))) )
            {
              {
                ++ _5437_i0;
              }
            }
            while ( ((_5436_i1 < _5387_mnnz) && (_5438_i == ((*msubj)(_ptr__5424_xi32[safe_add( _5388_xmperm,_5436_i1 )])))) )
            {
              {
                ++ _5436_i1;
              }
            }
            int32_t _5441_ii1 = _5439_b1;
            int32_t _5442_ii0 = _5440_b0;
            int32_t _5443_rownnz = (int)0;
            while ( ((_5442_ii0 < _5437_i0) && (_5441_ii1 < _5436_i1)) )
            {
              {
                if (((_ptr__5383_wi64[safe_add( _5376_sp,_5442_ii0 )] % _5386_edim1) < ((*msubi)(_ptr__5424_xi32[safe_add( _5388_xmperm,_5441_ii1 )]))))
                {
                  {
                    ++ _5442_ii0;
                  }
                }
                else if(((_ptr__5383_wi64[safe_add( _5376_sp,_5442_ii0 )] % _5386_edim1) > ((*msubi)(_ptr__5424_xi32[safe_add( _5388_xmperm,_5441_ii1 )]))))
                {
                  {
                    ++ _5441_ii1;
                  }
                }
                else
                {
                  {
                    int32_t _5444_midx = _ptr__5424_xi32[safe_add( _5388_xmperm,_5441_ii1 )];
                    int32_t _11460_ = _ptr__5382_wi32[safe_add( _5375_ptr,_5442_ii0 )];
                    int32_t _11461_ = _ptr__5382_wi32[safe_add( safe_add( _5375_ptr,_5442_ii0 ),(int)1 )];
                    for (int32_t _5445_j = _11460_; _5445_j < _11461_; ++_5445_j)
                    {
                      {
                        _ptr__5421_ri64[safe_add( _5414_rnidxs,_5426_nzi )] = _ptr__5383_wi64[safe_add( _5377_nidxs,_5445_j )];
                        _ptr__5422_rf64[safe_add( _5416_rcof,_5426_nzi )] = (_ptr__5384_wf64[safe_add( _5378_cof,_5445_j )] * ((*mval)(_5444_midx)));
                        if ((_5372_ncodeatom > (int)0))
                        {
                          {
                            int32_t _11462_ = _ptr__5382_wi32[safe_add( _5379_codeptr,_5445_j )];
                            int32_t _11463_ = _ptr__5382_wi32[safe_add( safe_add( _5379_codeptr,_5445_j ),(int)1 )];
                            for (int32_t _5446_k = _11462_; _5446_k < _11463_; ++_5446_k)
                            {
                              {
                                _ptr__5423_ri32[safe_add( _5418_rcode,_5425_codei )] = _ptr__5382_wi32[safe_add( _5380_code,_5446_k )];
                                _ptr__5422_rf64[safe_add( _5420_rcconst,_5425_codei )] = _ptr__5384_wf64[safe_add( _5381_cconst,_5446_k )];
                                ++ _5425_codei;
                              }
                            }
                            _ptr__5423_ri32[safe_add( _5418_rcode,_5425_codei )] = 2;
                            _ptr__5422_rf64[safe_add( _5420_rcconst,_5425_codei )] = ((*mval)(_5444_midx));
                            ++ _5425_codei;
                            _ptr__5423_ri32[safe_add( _5418_rcode,_5425_codei )] = 5;
                            ++ _5425_codei;
                            _ptr__5423_ri32[safe_add( safe_add( _5419_rcodeptr,_5426_nzi ),(int)1 )] = _5425_codei;
                          }
                        }
                        {}
                        ++ _5426_nzi;
                      }
                    }
                    ++ _5443_rownnz;
                    ++ _5442_ii0;
                    ++ _5441_ii1;
                  }
                }
              }
            }
            if ((_5443_rownnz > (int)0))
            {
              {
                _ptr__5423_ri32[safe_add( safe_add( _5413_rptr,_5427_elmi ),(int)1 )] = _5426_nzi;
                _ptr__5421_ri64[safe_add( _5415_rsp,_5427_elmi )] = _5438_i;
                ++ _5427_elmi;
              }
            }
            {}
          }
        }
      }
    }
    if ((!_5412_rhassp))
    {
      {
        _5366_rs->popi64(_5398_rnelem);
      }
    }
    {}
    if ((!(_5397_rnnz == _5426_nzi)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of non-zeros"));
      }
    }
    {}
    if ((!(_5398_rnelem == _5427_elmi)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of elements"));
      }
    }
    {}
  }
  _5368_xs->clear();
}
// End mosek.fusion.ExprMulDiagRight.eval

// Begin mosek.fusion.ExprMulDiagRight.validate
// Method mosek.fusion.ExprMulDiagRight.validate @ src/fusion/ExprMul.monty:1974:6-2020:7
int32_t mosek::fusion::p_ExprMulDiagRight::validate(int32_t _5447_mdim0,int32_t _5448_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5449_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5450_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5451_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5452_expr)
{
  _checked_ptr_1<int32_t> _ptr__5449_msubi(_5449_msubi ? _5449_msubi->raw() : nullptr, _5449_msubi ? _5449_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5450_msubj(_5450_msubj ? _5450_msubj->raw() : nullptr, _5450_msubj ? _5450_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5451_mval(_5451_mval ? _5451_mval->raw() : nullptr, _5451_mval ? _5451_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5453_eshape = _5452_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5453_eshape(_5453_eshape ? _5453_eshape->raw() : nullptr,_5453_eshape ? _5453_eshape->size(0) : 0);
  if (((int)((_5453_eshape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5454_edim0 = _ptr__5453_eshape[(int)0];
  int32_t _5455_edim1 = _ptr__5453_eshape[(int)1];
  if (((_5447_mdim0 < (int)0) || ((_5448_mdim1 < (int)0) || ((_5454_edim0 < (int)0) || (_5455_edim1 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5447_mdim0 != _5455_edim1) || (_5448_mdim1 != _5454_edim0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5449_msubi)->size(0)) != (int)((_5450_msubj)->size(0))) || ((int)((_5449_msubi)->size(0)) != (int)((_5451_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5456_mnnz = (int)((_5449_msubi)->size(0));
  bool _5457_err_data = false;
  bool _5458_err_sorted = false;
  {
    int32_t _11464_ = (int)0;
    int32_t _11465_ = _5456_mnnz;
    for (int32_t _5459_i = _11464_; _5459_i < _11465_; ++_5459_i)
    {
      {
        if (((_ptr__5449_msubi[_5459_i] < (int)0) || ((_ptr__5449_msubi[_5459_i] >= _5447_mdim0) || ((_ptr__5450_msubj[_5459_i] < (int)0) || (_ptr__5450_msubj[_5459_i] >= _5448_mdim1)))))
        {
          {
            _5457_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11466_ = (int)0;
    int32_t _11467_ = (_5456_mnnz - (int)1);
    for (int32_t _5460_i = _11466_; _5460_i < _11467_; ++_5460_i)
    {
      {
        if (((_ptr__5449_msubi[_5460_i] > _ptr__5449_msubi[safe_add( _5460_i,(int)1 )]) || ((_ptr__5449_msubi[_5460_i] == _ptr__5449_msubi[safe_add( _5460_i,(int)1 )]) && (_ptr__5450_msubj[_5460_i] >= _ptr__5450_msubj[safe_add( _5460_i,(int)1 )]))))
        {
          {
            _5458_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5457_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5458_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulDiagRight.validate

// Begin mosek.fusion.ExprMulDiagRight.toString
// Method mosek.fusion.ExprMulDiagRight.toString @ src/fusion/ExprMul.monty:1972:6-137
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulDiagRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",m)"))->toString();
}
// End mosek.fusion.ExprMulDiagRight.toString

void mosek::fusion::p_ExprMulDiagRight::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }
// } class ExprMulDiagRight
// class ExprMulDiagLeft { // @ src/fusion/ExprMul.monty:1578:4-1947:5
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft
  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulDiagLeft.ctor @ src/fusion/ExprMul.monty:1663:6-1682:7
mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft
  (int32_t _5461_mdim0,
    int32_t _5462_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5463_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5464_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5465_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5466_expr,
    int32_t _5467_validated)
{ return new mosek::fusion::ExprMulDiagLeft(_5461_mdim0,_5462_mdim1,_5463_msubi,_5464_msubj,_5465_mval,_5466_expr,_5467_validated); }
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft
  (int32_t _5461_mdim0,
    int32_t _5462_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5463_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5464_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5465_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5466_expr,
    int32_t _5467_validated) : 
   ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this))
{ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5461_mdim0,_5462_mdim1,_5463_msubi,_5464_msubj,_5465_mval,_5466_expr,_5467_validated); }
void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int32_t _5461_mdim0,
    int32_t _5462_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5463_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5464_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5465_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5466_expr,
    int32_t _5467_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5463_msubi(_5463_msubi ? _5463_msubi->raw() : nullptr, _5463_msubi ? _5463_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5464_msubj(_5464_msubj ? _5464_msubj->raw() : nullptr, _5464_msubj ? _5464_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5465_mval(_5465_mval ? _5465_mval->raw() : nullptr, _5465_mval ? _5465_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5461_mdim0)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _5461_mdim0;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _5462_mdim1;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _5463_msubi;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _5464_msubj;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _5465_mval;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _5466_expr;
  }
}
// mosek.fusion.ExprMulDiagLeft.ctor

// mosek.fusion.ExprMulDiagLeft.ctor @ src/fusion/ExprMul.monty:1651:6-1661:7
mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft
  (int32_t _5468_mdim0,
    int32_t _5469_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5470_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5471_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5472_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5473_expr)
{ return new mosek::fusion::ExprMulDiagLeft(_5468_mdim0,_5469_mdim1,_5470_msubi,_5471_msubj,_5472_mval,_5473_expr); }
mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft
  (int32_t _5468_mdim0,
    int32_t _5469_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5470_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5471_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5472_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5473_expr) : 
   ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this))
{ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5468_mdim0,_5469_mdim1,_5470_msubi,_5471_msubj,_5472_mval,_5473_expr); }
void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int32_t _5468_mdim0,
    int32_t _5469_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5470_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5471_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5472_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5473_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5470_msubi(_5470_msubi ? _5470_msubi->raw() : nullptr, _5470_msubi ? _5470_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5471_msubj(_5471_msubj ? _5471_msubj->raw() : nullptr, _5471_msubj ? _5471_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5472_mval(_5472_mval ? _5472_mval->raw() : nullptr, _5472_mval ? _5472_mval->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_5468_mdim0,_5469_mdim1,_5470_msubi,_5471_msubj,_5472_mval,_5473_expr,::mosek::fusion::p_ExprMulDiagLeft::validate(_5468_mdim0,_5469_mdim1,_5470_msubi,_5471_msubj,_5472_mval,_5473_expr));
  }
}
// mosek.fusion.ExprMulDiagLeft.ctor

// Begin mosek.fusion.ExprMulDiagLeft.eval
// Method mosek.fusion.ExprMulDiagLeft.eval @ src/fusion/ExprMul.monty:1685:6-1946:7
void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5474_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5475_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5476_xs) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_5474_rs,_5475_ws,_5476_xs); }
void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5474_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5475_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5476_xs)
{
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_5475_ws,_5474_rs,_5476_xs);
  _5475_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5477_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5477_wi32(_5477_wi32 ? _5477_wi32->raw() : nullptr,_5477_wi32 ? _5477_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5478_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5478_wi64(_5478_wi64 ? _5478_wi64->raw() : nullptr,_5478_wi64 ? _5478_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5479_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->f64;
  _checked_ptr_1<double> _ptr__5479_wf64(_5479_wf64 ? _5479_wf64->raw() : nullptr,_5479_wf64 ? _5479_wf64->size(0) : 0);
  int32_t _5480_nd = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->nd;
  int32_t _5481_nelem = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->nelem;
  int32_t _5482_nnz = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->nnz;
  bool _5483_hassp = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->hassp;
  int32_t _5484_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->ncodeatom;
  int32_t _5485_ptr = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->ptr_base;
  int32_t _5486_code = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->code_base;
  int32_t _5487_cconst = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->cconst_base;
  int32_t _5488_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->codeptr_base;
  int32_t _5489_shape = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->shape_base;
  int32_t _5490_sp = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->sp_base;
  int32_t _5491_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->nidxs_base;
  int32_t _5492_cof = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->cof_base;
  int32_t _5493_consts = mosek::fusion::p_WorkStack::_get_impl(_5475_ws)->cconst_base;
  if ((_5480_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _5494_edim0 = _ptr__5477_wi32[_5489_shape];
  int32_t _5495_edim1 = _ptr__5477_wi32[safe_add( _5489_shape,(int)1 )];
  int32_t _5496_mnumnz = (int)((msubi)->size(0));
  if ((!_5483_hassp))
  {
    {
      int32_t _5497_rnnz = (int)0;
      int32_t _5498_rnelem = (int)0;
      int32_t _5499_rncodeatom = (int)0;
      int32_t _5500_i = (int)0;
      while ( (_5500_i < (int)((msubi)->size(0))) )
      {
        {
          int32_t _5501_i0 = ((*msubi)(_5500_i));
          while ( ((_5500_i < (int)((msubi)->size(0))) && (((*msubi)(_5500_i)) == _5501_i0)) )
          {
            {
              int32_t _5502_idx = safe_add( safe_mul( ((*msubj)(_5500_i)),_5495_edim1 ),((*msubi)(_5500_i)) );
              _5497_rnnz += (_ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5502_idx ),(int)1 )] - _ptr__5477_wi32[safe_add( _5485_ptr,_5502_idx )]);
              if ((_5484_ncodeatom > (int)0))
              {
                {
                  _5499_rncodeatom += safe_add( (_ptr__5477_wi32[safe_add( _5488_codeptr,_ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5502_idx ),(int)1 )] )] - _ptr__5477_wi32[safe_add( _5488_codeptr,_ptr__5477_wi32[safe_add( _5485_ptr,_5502_idx )] )]),safe_mul( (int)2,(_ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5502_idx ),(int)1 )] - _ptr__5477_wi32[safe_add( _5485_ptr,_5502_idx )]) ) );
                }
              }
              {}
              ++ _5500_i;
            }
          }
          ++ _5498_rnelem;
        }
      }
      bool _5503_rhassp = (_5498_rnelem < mdim0);
      _5474_rs->alloc_expr((int)1,_5498_rnelem,_5497_rnnz,_5503_rhassp,_5499_rncodeatom);
      int32_t _5504_rptr = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->ptr_base;
      int32_t _5505_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->nidxs_base;
      int32_t _11468_;
      bool _11469_ = _5503_rhassp;
      if (_11469_)
      {
        _11468_ = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->sp_base;
      }
      else
      {
        _11468_ = _5474_rs->alloci64(_5498_rnelem);
      }
      int32_t _5506_rsp = _11468_;
      int32_t _5507_rcof = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->cof_base;
      int32_t _5508_rshape = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->shape_base;
      int32_t _5509_rcode = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->code_base;
      int32_t _5510_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->codeptr_base;
      int32_t _5511_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5512_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5512_ri64(_5512_ri64 ? _5512_ri64->raw() : nullptr,_5512_ri64 ? _5512_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5513_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->f64;
      _checked_ptr_1<double> _ptr__5513_rf64(_5513_rf64 ? _5513_rf64->raw() : nullptr,_5513_rf64 ? _5513_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5514_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5514_ri32(_5514_ri32 ? _5514_ri32->raw() : nullptr,_5514_ri32 ? _5514_ri32->size(0) : 0);
      {
        _ptr__5514_ri32[_5504_rptr] = (int)0;
        if ((_5484_ncodeatom > (int)0))
        {
          {
            _ptr__5514_ri32[_5510_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__5514_ri32[_5508_rshape] = mdim0;
        int32_t _5515_nzi = (int)0;
        int32_t _5516_elmi = (int)0;
        int32_t _5517_codei = (int)0;
        {
        }
        {
          int32_t _5518_i = (int)0;
          while ( (_5518_i < (int)((msubi)->size(0))) )
          {
            {
              int32_t _5519_i0 = ((*msubi)(_5518_i));
              while ( ((_5518_i < (int)((msubi)->size(0))) && (((*msubi)(_5518_i)) == _5519_i0)) )
              {
                {
                  int32_t _5520_idx = safe_add( safe_mul( ((*msubj)(_5518_i)),_5495_edim1 ),((*msubi)(_5518_i)) );
                  int32_t _11470_ = _ptr__5477_wi32[safe_add( _5485_ptr,_5520_idx )];
                  int32_t _11471_ = _ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5520_idx ),(int)1 )];
                  for (int32_t _5521_j = _11470_; _5521_j < _11471_; ++_5521_j)
                  {
                    {
                      _ptr__5512_ri64[safe_add( _5505_rnidxs,_5515_nzi )] = _ptr__5478_wi64[safe_add( _5491_nidxs,_5521_j )];
                      _ptr__5513_rf64[safe_add( _5507_rcof,_5515_nzi )] = (_ptr__5479_wf64[safe_add( _5492_cof,_5521_j )] * ((*mval)(_5518_i)));
                      if ((_5499_rncodeatom > (int)0))
                      {
                        {
                          int32_t _11472_ = _ptr__5477_wi32[safe_add( _5488_codeptr,_5521_j )];
                          int32_t _11473_ = _ptr__5477_wi32[safe_add( safe_add( _5488_codeptr,_5521_j ),(int)1 )];
                          for (int32_t _5522_k = _11472_; _5522_k < _11473_; ++_5522_k)
                          {
                            {
                              _ptr__5514_ri32[safe_add( _5509_rcode,_5517_codei )] = _ptr__5477_wi32[safe_add( _5486_code,_5522_k )];
                              _ptr__5513_rf64[safe_add( _5511_rcconst,_5517_codei )] = _ptr__5479_wf64[safe_add( _5487_cconst,_5522_k )];
                              ++ _5517_codei;
                            }
                          }
                          _ptr__5514_ri32[safe_add( _5509_rcode,_5517_codei )] = 2;
                          _ptr__5513_rf64[safe_add( _5511_rcconst,_5517_codei )] = ((*mval)(_5518_i));
                          ++ _5517_codei;
                          _ptr__5514_ri32[safe_add( _5509_rcode,_5517_codei )] = 5;
                          ++ _5517_codei;
                          _ptr__5514_ri32[safe_add( safe_add( _5510_rcodeptr,_5515_nzi ),(int)1 )] = _5517_codei;
                        }
                      }
                      {}
                      ++ _5515_nzi;
                    }
                  }
                  ++ _5518_i;
                }
              }
              _ptr__5514_ri32[safe_add( safe_add( _5504_rptr,_5516_elmi ),(int)1 )] = _5515_nzi;
              _ptr__5512_ri64[safe_add( _5506_rsp,_5516_elmi )] = _5519_i0;
              ++ _5516_elmi;
            }
          }
        }
      }
      if ((!_5503_rhassp))
      {
        {
          _5474_rs->popi64(_5498_rnelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _5523_xecolptr = _5476_xs->alloci32(safe_add( _5495_edim1,(int)1 ));
      int32_t _5524_xeperm = _5476_xs->alloci32(_5481_nelem);
      int32_t _5525_xmptr = _5476_xs->alloci32(safe_add( mdim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5526_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5476_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5526_xi32(_5526_xi32 ? _5526_xi32->raw() : nullptr,_5526_xi32 ? _5526_xi32->size(0) : 0);
      int32_t _5527_rncodeatom = (int)0;
      int32_t _5528_rnnz = (int)0;
      int32_t _5529_rnelem = (int)0;
      {
        int32_t _11474_ = (int)0;
        int32_t _11475_ = safe_add( _5495_edim1,(int)1 );
        for (int32_t _5530_i = _11474_; _5530_i < _11475_; ++_5530_i)
        {
          {
            _ptr__5526_xi32[safe_add( _5523_xecolptr,_5530_i )] = (int)0;
          }
        }
        int32_t _11476_ = (int)0;
        int32_t _11477_ = _5481_nelem;
        for (int32_t _5531_i = _11476_; _5531_i < _11477_; ++_5531_i)
        {
          {
            ++ _ptr__5526_xi32[safe_add( safe_add( _5523_xecolptr,(_ptr__5478_wi64[safe_add( _5490_sp,_5531_i )] % _5495_edim1) ),(int)1 )];
          }
        }
        int32_t _11478_ = (int)0;
        int32_t _11479_ = _5495_edim1;
        for (int32_t _5532_i = _11478_; _5532_i < _11479_; ++_5532_i)
        {
          {
            _ptr__5526_xi32[safe_add( safe_add( _5523_xecolptr,_5532_i ),(int)1 )] += _ptr__5526_xi32[safe_add( _5523_xecolptr,_5532_i )];
          }
        }
        int32_t _11480_ = (int)0;
        int32_t _11481_ = _5481_nelem;
        for (int32_t _5533_i = _11480_; _5533_i < _11481_; ++_5533_i)
        {
          {
            int64_t _5534_ej = (_ptr__5478_wi64[safe_add( _5490_sp,_5533_i )] % _5495_edim1);
            _ptr__5526_xi32[safe_add( _5524_xeperm,_ptr__5526_xi32[safe_add( _5523_xecolptr,_5534_ej )] )] = _5533_i;
            ++ _ptr__5526_xi32[safe_add( _5523_xecolptr,_5534_ej )];
          }
        }
        int32_t _11482_ = (int)0;
        int32_t _11483_ = _5495_edim1;
        for (int32_t _5535_i = _11482_; _5535_i < _11483_; ++_5535_i)
        {
          {
            _ptr__5526_xi32[(safe_add( _5523_xecolptr,_5495_edim1 ) - _5535_i)] = _ptr__5526_xi32[((safe_add( _5523_xecolptr,_5495_edim1 ) - _5535_i) - (int)1)];
          }
        }
        _ptr__5526_xi32[_5523_xecolptr] = (int)0;
        int32_t _5536_ie = (int)0;
        int32_t _5537_im = (int)0;
        while ( ((_5537_im < (int)((msubi)->size(0))) && (_5536_ie < _5481_nelem)) )
        {
          {
            if ((((*msubi)(_5537_im)) < (_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5536_ie )] )] % _5495_edim1)))
            {
              {
                ++ _5537_im;
              }
            }
            else if((((*msubi)(_5537_im)) > (_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5536_ie )] )] % _5495_edim1)))
            {
              {
                ++ _5536_ie;
              }
            }
            else
            {
              {
                int32_t _5538_elmnnz = (int)0;
                int64_t _5539_ecol = (_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5536_ie )] )] % _5495_edim1);
                int32_t _5540_mb = _5537_im;
                while ( ((_5537_im < (int)((msubi)->size(0))) && (((*msubi)(_5537_im)) == ((*msubi)(_5540_mb)))) )
                {
                  {
                    ++ _5537_im;
                  }
                }
                int32_t _5541_eb = _5536_ie;
                while ( ((_5536_ie < _5481_nelem) && ((_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5536_ie )] )] % _5495_edim1) == _5539_ecol)) )
                {
                  {
                    ++ _5536_ie;
                  }
                }
                int32_t _5542_i1 = _5541_eb;
                int32_t _5543_i0 = _5540_mb;
                int32_t _5544_elmnz = (int)0;
                while ( ((_5543_i0 < _5537_im) && (_5542_i1 < _5536_ie)) )
                {
                  {
                    int32_t _5545_eidx = _ptr__5526_xi32[safe_add( _5524_xeperm,_5542_i1 )];
                    if ((((*msubj)(_5543_i0)) < (_ptr__5478_wi64[safe_add( _5490_sp,_5545_eidx )] / _5495_edim1)))
                    {
                      {
                        ++ _5543_i0;
                      }
                    }
                    else if((((*msubj)(_5543_i0)) > (_ptr__5478_wi64[safe_add( _5490_sp,_5545_eidx )] / _5495_edim1)))
                    {
                      {
                        ++ _5542_i1;
                      }
                    }
                    else
                    {
                      {
                        _5528_rnnz += (_ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5545_eidx ),(int)1 )] - _ptr__5477_wi32[safe_add( _5485_ptr,_5545_eidx )]);
                        if ((_5484_ncodeatom > (int)0))
                        {
                          {
                            _5527_rncodeatom += safe_add( (_ptr__5477_wi32[safe_add( _5488_codeptr,_ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5545_eidx ),(int)1 )] )] - _ptr__5477_wi32[safe_add( _5488_codeptr,_ptr__5477_wi32[safe_add( _5485_ptr,_5545_eidx )] )]),safe_mul( (int)2,(_ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5545_eidx ),(int)1 )] - _ptr__5477_wi32[safe_add( _5485_ptr,_5545_eidx )]) ) );
                          }
                        }
                        {}
                        ++ _5544_elmnz;
                        ++ _5543_i0;
                        ++ _5542_i1;
                      }
                    }
                  }
                }
                if ((_5544_elmnz > (int)0))
                {
                  {
                    ++ _5529_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
      bool _5546_rhassp = (_5529_rnelem < mdim0);
      _5474_rs->alloc_expr((int)1,_5529_rnelem,_5528_rnnz,_5546_rhassp,_5527_rncodeatom);
      int32_t _5547_rptr = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->ptr_base;
      int32_t _5548_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->nidxs_base;
      int32_t _11484_;
      bool _11485_ = _5546_rhassp;
      if (_11485_)
      {
        _11484_ = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->sp_base;
      }
      else
      {
        _11484_ = _5474_rs->alloci64(_5529_rnelem);
      }
      int32_t _5549_rsp = _11484_;
      int32_t _5550_rcof = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->cof_base;
      int32_t _5551_rshape = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->shape_base;
      int32_t _5552_rcode = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->code_base;
      int32_t _5553_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->codeptr_base;
      int32_t _5554_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5555_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5555_ri64(_5555_ri64 ? _5555_ri64->raw() : nullptr,_5555_ri64 ? _5555_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5556_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->f64;
      _checked_ptr_1<double> _ptr__5556_rf64(_5556_rf64 ? _5556_rf64->raw() : nullptr,_5556_rf64 ? _5556_rf64->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5557_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5474_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5557_ri32(_5557_ri32 ? _5557_ri32->raw() : nullptr,_5557_ri32 ? _5557_ri32->size(0) : 0);
      {
        int32_t _5558_elmi = (int)0;
        int32_t _5559_nzi = (int)0;
        int32_t _5560_codei = (int)0;
        int32_t _5561_ie = (int)0;
        int32_t _5562_im = (int)0;
        _ptr__5557_ri32[_5547_rptr] = (int)0;
        if ((_5484_ncodeatom > (int)0))
        {
          {
            _ptr__5557_ri32[_5553_rcodeptr] = (int)0;
          }
        }
        {}
        _ptr__5557_ri32[_5551_rshape] = mdim0;
        while ( ((_5562_im < (int)((msubi)->size(0))) && (_5561_ie < _5481_nelem)) )
        {
          {
            if ((((*msubi)(_5562_im)) < (_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5561_ie )] )] % _5495_edim1)))
            {
              {
                ++ _5562_im;
              }
            }
            else if((((*msubi)(_5562_im)) > (_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5561_ie )] )] % _5495_edim1)))
            {
              {
                ++ _5561_ie;
              }
            }
            else
            {
              {
                int32_t _5563_elmnnz = (int)0;
                int64_t _5564_ecol = (_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5561_ie )] )] % _5495_edim1);
                int32_t _5565_mb = _5562_im;
                while ( ((_5562_im < (int)((msubi)->size(0))) && (((*msubi)(_5562_im)) == ((*msubi)(_5565_mb)))) )
                {
                  {
                    ++ _5562_im;
                  }
                }
                int32_t _5566_eb = _5561_ie;
                while ( ((_5561_ie < _5481_nelem) && ((_ptr__5478_wi64[safe_add( _5490_sp,_ptr__5526_xi32[safe_add( _5524_xeperm,_5561_ie )] )] % _5495_edim1) == _5564_ecol)) )
                {
                  {
                    ++ _5561_ie;
                  }
                }
                int32_t _5567_i1 = _5566_eb;
                int32_t _5568_i0 = _5565_mb;
                int32_t _5569_elmnz = (int)0;
                int32_t _5570_mrow = ((*msubi)(_5565_mb));
                while ( ((_5568_i0 < _5562_im) && (_5567_i1 < _5561_ie)) )
                {
                  {
                    int32_t _5571_eidx = _ptr__5526_xi32[safe_add( _5524_xeperm,_5567_i1 )];
                    if ((((*msubj)(_5568_i0)) < (_ptr__5478_wi64[safe_add( _5490_sp,_5571_eidx )] / _5495_edim1)))
                    {
                      {
                        ++ _5568_i0;
                      }
                    }
                    else if((((*msubj)(_5568_i0)) > (_ptr__5478_wi64[safe_add( _5490_sp,_5571_eidx )] / _5495_edim1)))
                    {
                      {
                        ++ _5567_i1;
                      }
                    }
                    else
                    {
                      {
                        int32_t _11486_ = _ptr__5477_wi32[safe_add( _5485_ptr,_5571_eidx )];
                        int32_t _11487_ = _ptr__5477_wi32[safe_add( safe_add( _5485_ptr,_5571_eidx ),(int)1 )];
                        for (int32_t _5572_j = _11486_; _5572_j < _11487_; ++_5572_j)
                        {
                          {
                            _ptr__5555_ri64[safe_add( _5548_rnidxs,_5559_nzi )] = _ptr__5478_wi64[safe_add( _5491_nidxs,_5572_j )];
                            _ptr__5556_rf64[safe_add( _5550_rcof,_5559_nzi )] = (_ptr__5479_wf64[safe_add( _5492_cof,_5572_j )] * ((*mval)(_5568_i0)));
                            if ((_5484_ncodeatom > (int)0))
                            {
                              {
                                int32_t _11488_ = _ptr__5477_wi32[safe_add( _5488_codeptr,_5572_j )];
                                int32_t _11489_ = _ptr__5477_wi32[safe_add( safe_add( _5488_codeptr,_5572_j ),(int)1 )];
                                for (int32_t _5573_k = _11488_; _5573_k < _11489_; ++_5573_k)
                                {
                                  {
                                    _ptr__5557_ri32[safe_add( _5552_rcode,_5560_codei )] = _ptr__5477_wi32[safe_add( _5486_code,_5573_k )];
                                    _ptr__5556_rf64[safe_add( _5554_rcconst,_5560_codei )] = _ptr__5479_wf64[safe_add( _5487_cconst,_5573_k )];
                                    ++ _5560_codei;
                                  }
                                }
                                _ptr__5557_ri32[safe_add( _5552_rcode,_5560_codei )] = 2;
                                _ptr__5556_rf64[safe_add( _5554_rcconst,_5560_codei )] = ((*mval)(_5568_i0));
                                ++ _5560_codei;
                                _ptr__5557_ri32[safe_add( _5552_rcode,_5560_codei )] = 5;
                                ++ _5560_codei;
                                _ptr__5557_ri32[safe_add( safe_add( _5553_rcodeptr,_5559_nzi ),(int)1 )] = _5560_codei;
                              }
                            }
                            {}
                            ++ _5559_nzi;
                            ++ _5569_elmnz;
                          }
                        }
                        ++ _5568_i0;
                        ++ _5567_i1;
                      }
                    }
                  }
                }
                if ((_5569_elmnz > (int)0))
                {
                  {
                    _ptr__5557_ri32[safe_add( safe_add( _5547_rptr,_5558_elmi ),(int)1 )] = _5559_nzi;
                    _ptr__5555_ri64[safe_add( _5549_rsp,_5558_elmi )] = _5570_mrow;
                    ++ _5558_elmi;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_5559_nzi != _5528_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
          }
        }
        {}
        if ((_5558_elmi != _5529_rnelem))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((!_5546_rhassp))
      {
        {
          _5474_rs->popi64(_5529_rnelem);
        }
      }
      {}
    }
  }
  _5476_xs->clear();
}
// End mosek.fusion.ExprMulDiagLeft.eval

// Begin mosek.fusion.ExprMulDiagLeft.validate
// Method mosek.fusion.ExprMulDiagLeft.validate @ src/fusion/ExprMul.monty:1591:6-1635:7
int32_t mosek::fusion::p_ExprMulDiagLeft::validate(int32_t _5574_mdim0,int32_t _5575_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5576_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5577_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5578_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5579_expr)
{
  _checked_ptr_1<int32_t> _ptr__5576_msubi(_5576_msubi ? _5576_msubi->raw() : nullptr, _5576_msubi ? _5576_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5577_msubj(_5577_msubj ? _5577_msubj->raw() : nullptr, _5577_msubj ? _5577_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5578_mval(_5578_mval ? _5578_mval->raw() : nullptr, _5578_mval ? _5578_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5580_eshape = _5579_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5580_eshape(_5580_eshape ? _5580_eshape->raw() : nullptr,_5580_eshape ? _5580_eshape->size(0) : 0);
  if (((int)((_5580_eshape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5581_edim0 = _ptr__5580_eshape[(int)0];
  int32_t _5582_edim1 = _ptr__5580_eshape[(int)1];
  if (((_5574_mdim0 < (int)0) || (_5575_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5575_mdim1 != _5581_edim0) || (_5574_mdim0 != _5582_edim1)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5576_msubi)->size(0)) != (int)((_5577_msubj)->size(0))) || ((int)((_5576_msubi)->size(0)) != (int)((_5578_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5583_mnnz = (int)((_5576_msubi)->size(0));
  bool _5584_err_data = false;
  bool _5585_err_sorted = false;
  {
    int32_t _11490_ = (int)0;
    int32_t _11491_ = _5583_mnnz;
    for (int32_t _5586_i = _11490_; _5586_i < _11491_; ++_5586_i)
    {
      {
        if (((_ptr__5576_msubi[_5586_i] < (int)0) || ((_ptr__5576_msubi[_5586_i] >= _5574_mdim0) || ((_ptr__5577_msubj[_5586_i] < (int)0) || (_ptr__5577_msubj[_5586_i] >= _5575_mdim1)))))
        {
          {
            _5584_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11492_ = (int)0;
    int32_t _11493_ = (_5583_mnnz - (int)1);
    for (int32_t _5587_i = _11492_; _5587_i < _11493_; ++_5587_i)
    {
      {
        if (((_ptr__5576_msubi[_5587_i] > _ptr__5576_msubi[safe_add( _5587_i,(int)1 )]) || ((_ptr__5576_msubi[_5587_i] == _ptr__5576_msubi[safe_add( _5587_i,(int)1 )]) && (_ptr__5577_msubj[_5587_i] >= _ptr__5577_msubj[safe_add( _5587_i,(int)1 )]))))
        {
          {
            _5585_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5584_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5585_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulDiagLeft.validate

// Begin mosek.fusion.ExprMulDiagLeft.toString
// Method mosek.fusion.ExprMulDiagLeft.toString @ src/fusion/ExprMul.monty:1589:6-136
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulDiagLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagLeft(m,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulDiagLeft.toString

void mosek::fusion::p_ExprMulDiagLeft::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }
// } class ExprMulDiagLeft
// class ExprMulElement { // @ src/fusion/ExprMul.monty:1361:4-1562:5
mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }
mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulElement::p_ExprMulElement
  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulElement.ctor @ src/fusion/ExprMul.monty:1376:6-1401:7
mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5588_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5589_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5590_expr)
{ return new mosek::fusion::ExprMulElement(_5588_mcof,_5589_msp,_5590_expr); }
mosek::fusion::ExprMulElement::ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5588_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5589_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5590_expr) : 
   ExprMulElement(new mosek::fusion::p_ExprMulElement(this))
{ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5588_mcof,_5589_msp,_5590_expr); }
void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5588_mcof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5589_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5590_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5588_mcof(_5588_mcof ? _5588_mcof->raw() : nullptr, _5588_mcof ? _5588_mcof->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__5589_msp(_5589_msp ? _5589_msp->raw() : nullptr, _5589_msp ? _5589_msp->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_5588_mcof,_5589_msp,_5590_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5591_eshape = _5590_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__5591_eshape(_5591_eshape ? _5591_eshape->raw() : nullptr,_5591_eshape ? _5591_eshape->size(0) : 0);
    if (((int)((_5588_mcof)->size(0)) != (int)((_5589_msp)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    int64_t _5592_sz = ::mosek::fusion::p_Set::size(_5591_eshape);
    bool _5593_err_data = false;
    bool _5594_err_sorted = false;
    {
      int32_t _11494_ = (int)0;
      int32_t _11495_ = (int)((_5589_msp)->size(0));
      for (int32_t _5595_i = _11494_; _5595_i < _11495_; ++_5595_i)
      {
        {
          if (((_ptr__5589_msp[_5595_i] < (int)0) || (_ptr__5589_msp[_5595_i] >= _5592_sz)))
          {
            {
              _5593_err_data = true;
            }
          }
          {}
        }
      }
      int32_t _11496_ = (int)0;
      int32_t _11497_ = ((int)((_5589_msp)->size(0)) - (int)1);
      for (int32_t _5596_i = _11496_; _5596_i < _11497_; ++_5596_i)
      {
        {
          if ((_ptr__5589_msp[_5596_i] >= _ptr__5589_msp[safe_add( _5596_i,(int)1 )]))
          {
            {
              _5594_err_sorted = true;
            }
          }
          {}
        }
      }
    }
    if (_5593_err_data)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_5594_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulElement.ctor

// mosek.fusion.ExprMulElement.ctor @ src/fusion/ExprMul.monty:1369:6-1374:7
mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5597_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5598_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5599_expr,
    int32_t _5600_validated)
{ return new mosek::fusion::ExprMulElement(_5597_cof,_5598_msp,_5599_expr,_5600_validated); }
mosek::fusion::ExprMulElement::ExprMulElement
  (std::shared_ptr< monty::ndarray< double,1 > > _5597_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5598_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5599_expr,
    int32_t _5600_validated) : 
   ExprMulElement(new mosek::fusion::p_ExprMulElement(this))
{ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5597_cof,_5598_msp,_5599_expr,_5600_validated); }
void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5597_cof,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _5598_msp,
    monty::rc_ptr< ::mosek::fusion::Expression > _5599_expr,
    int32_t _5600_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__5597_cof(_5597_cof ? _5597_cof->raw() : nullptr, _5597_cof ? _5597_cof->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__5598_msp(_5598_msp ? _5598_msp->raw() : nullptr, _5598_msp ? _5598_msp->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5599_expr->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _5599_expr;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _5597_cof;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _5598_msp;
  }
}
// mosek.fusion.ExprMulElement.ctor

// Begin mosek.fusion.ExprMulElement.eval
// Method mosek.fusion.ExprMulElement.eval @ src/fusion/ExprMul.monty:1403:6-1561:7
void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5601_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5602_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5603_xs) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_5601_rs,_5602_ws,_5603_xs); }
void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5601_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5602_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5603_xs)
{
  expr->eval(_5602_ws,_5601_rs,_5603_xs);
  _5602_ws->pop_expr();
  int32_t _5604_nd = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->nd;
  int32_t _5605_nelem = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->nelem;
  int32_t _5606_nnz = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->nnz;
  int32_t _5607_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->ncodeatom;
  bool _5608_hassp = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->hassp;
  int32_t _5609_shape = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->shape_base;
  int32_t _5610_ptr = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->ptr_base;
  int32_t _5611_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->nidxs_base;
  int32_t _5612_sp = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->sp_base;
  int32_t _5613_cof = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->cof_base;
  int32_t _5614_code = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->code_base;
  int32_t _5615_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->codeptr_base;
  int32_t _5616_cconst = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5617_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5617_wi32(_5617_wi32 ? _5617_wi32->raw() : nullptr,_5617_wi32 ? _5617_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5618_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5618_wi64(_5618_wi64 ? _5618_wi64->raw() : nullptr,_5618_wi64 ? _5618_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5619_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5602_ws)->f64;
  _checked_ptr_1<double> _ptr__5619_wf64(_5619_wf64 ? _5619_wf64->raw() : nullptr,_5619_wf64 ? _5619_wf64->size(0) : 0);
  int32_t _5620_rncodeatom = (int)0;
  int32_t _5621_rnnz = (int)0;
  int32_t _5622_rnelem = (int)0;
  if ((!_5608_hassp))
  {
    {
      _5622_rnelem = (int)((msp)->size(0));
      int32_t _11498_ = (int)0;
      int32_t _11499_ = (int)((msp)->size(0));
      for (int32_t _5623_i = _11498_; _5623_i < _11499_; ++_5623_i)
      {
        {
          _5621_rnnz += (_ptr__5617_wi32[safe_add( safe_add( _5610_ptr,((*msp)(_5623_i)) ),(int)1 )] - _ptr__5617_wi32[safe_add( _5610_ptr,((*msp)(_5623_i)) )]);
        }
      }
      if ((_5607_ncodeatom > (int)0))
      {
        {
          int32_t _11500_ = (int)0;
          int32_t _11501_ = (int)((msp)->size(0));
          for (int32_t _5624_i = _11500_; _5624_i < _11501_; ++_5624_i)
          {
            {
              _5620_rncodeatom += safe_add( (_ptr__5617_wi32[safe_add( _5615_codeptr,_ptr__5617_wi32[safe_add( safe_add( _5610_ptr,((*msp)(_5624_i)) ),(int)1 )] )] - _ptr__5617_wi32[safe_add( _5615_codeptr,_ptr__5617_wi32[safe_add( _5610_ptr,((*msp)(_5624_i)) )] )]),safe_mul( (int)2,(_ptr__5617_wi32[safe_add( safe_add( _5610_ptr,((*msp)(_5624_i)) ),(int)1 )] - _ptr__5617_wi32[safe_add( _5610_ptr,((*msp)(_5624_i)) )]) ) );
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _5625_e0 = (int)((msp)->size(0));
      int32_t _5626_i0 = (int)0;
      int32_t _5627_e1 = _5605_nelem;
      int32_t _5628_i1 = (int)0;
      while ( ((_5626_i0 < _5625_e0) && (_5628_i1 < _5627_e1)) )
      {
        {
          if ((((*msp)(_5626_i0)) < _ptr__5618_wi64[safe_add( _5612_sp,_5628_i1 )]))
          {
            {
              ++ _5626_i0;
            }
          }
          else if((((*msp)(_5626_i0)) > _ptr__5618_wi64[safe_add( _5612_sp,_5628_i1 )]))
          {
            {
              ++ _5628_i1;
            }
          }
          else
          {
            {
              _5621_rnnz += (_ptr__5617_wi32[safe_add( safe_add( _5610_ptr,_5628_i1 ),(int)1 )] - _ptr__5617_wi32[safe_add( _5610_ptr,_5628_i1 )]);
              if ((_5607_ncodeatom > (int)0))
              {
                {
                  _5620_rncodeatom += safe_add( (_ptr__5617_wi32[safe_add( _5615_codeptr,_ptr__5617_wi32[safe_add( safe_add( _5610_ptr,_5628_i1 ),(int)1 )] )] - _ptr__5617_wi32[safe_add( _5615_codeptr,_ptr__5617_wi32[safe_add( _5610_ptr,_5628_i1 )] )]),safe_mul( (int)2,(_ptr__5617_wi32[safe_add( safe_add( _5610_ptr,_5628_i1 ),(int)1 )] - _ptr__5617_wi32[safe_add( _5610_ptr,_5628_i1 )]) ) );
                }
              }
              {}
              ++ _5626_i0;
              ++ _5628_i1;
              ++ _5622_rnelem;
            }
          }
        }
      }
    }
  }
  int64_t _5629_rsize = (int64_t)1;
  int32_t _11502_ = (int)0;
  int32_t _11503_ = _5604_nd;
  for (int32_t _5630_i = _11502_; _5630_i < _11503_; ++_5630_i)
  {
    {
      _5629_rsize *= _ptr__5617_wi32[safe_add( _5609_shape,_5630_i )];
    }
  }
  bool _5631_rhassp = (_5622_rnelem < _5629_rsize);
  int32_t _5632_rnd = _5604_nd;
  _5601_rs->alloc_expr(_5632_rnd,_5622_rnelem,_5621_rnnz,_5631_rhassp,_5620_rncodeatom);
  int32_t _5633_rptr = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->ptr_base;
  int32_t _5634_rshape = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->shape_base;
  int32_t _5635_rnidx = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->nidxs_base;
  int32_t _11504_;
  bool _11505_ = _5631_rhassp;
  if (_11505_)
  {
    _11504_ = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->sp_base;
  }
  else
  {
    _11504_ = _5601_rs->alloci64(_5622_rnelem);
  }
  int32_t _5636_rsp = _11504_;
  int32_t _5637_rcof = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->cof_base;
  int32_t _5638_rcode = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->code_base;
  int32_t _5639_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->codeptr_base;
  int32_t _5640_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5641_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5641_ri32(_5641_ri32 ? _5641_ri32->raw() : nullptr,_5641_ri32 ? _5641_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5642_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5642_ri64(_5642_ri64 ? _5642_ri64->raw() : nullptr,_5642_ri64 ? _5642_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5643_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5601_rs)->f64;
  _checked_ptr_1<double> _ptr__5643_rf64(_5643_rf64 ? _5643_rf64->raw() : nullptr,_5643_rf64 ? _5643_rf64->size(0) : 0);
  {
    int32_t _5644_codei = (int)0;
    int32_t _5645_elmi = (int)0;
    int32_t _5646_nzi = (int)0;
    _ptr__5641_ri32[_5633_rptr] = (int)0;
    if ((_5620_rncodeatom > (int)0))
    {
      {
        _ptr__5641_ri32[_5639_rcodeptr] = (int)0;
      }
    }
    {}
    int32_t _11506_ = (int)0;
    int32_t _11507_ = _5632_rnd;
    for (int32_t _5647_i = _11506_; _5647_i < _11507_; ++_5647_i)
    {
      {
        _ptr__5641_ri32[safe_add( _5634_rshape,_5647_i )] = _ptr__5617_wi32[safe_add( _5609_shape,_5647_i )];
      }
    }
    if ((!_5608_hassp))
    {
      {
        int32_t _11508_ = (int)0;
        int32_t _11509_ = (int)((msp)->size(0));
        for (int32_t _5648_i = _11508_; _5648_i < _11509_; ++_5648_i)
        {
          {
            int32_t _5649_p0 = _ptr__5617_wi32[safe_add( _5610_ptr,((*msp)(_5648_i)) )];
            int32_t _5650_p1 = _ptr__5617_wi32[safe_add( safe_add( _5610_ptr,((*msp)(_5648_i)) ),(int)1 )];
            int32_t _11510_ = _5649_p0;
            int32_t _11511_ = _5650_p1;
            for (int32_t _5651_p = _11510_; _5651_p < _11511_; ++_5651_p)
            {
              {
                _ptr__5642_ri64[safe_add( _5635_rnidx,_5646_nzi )] = _ptr__5618_wi64[safe_add( _5611_nidxs,_5651_p )];
                _ptr__5643_rf64[safe_add( _5637_rcof,_5646_nzi )] = (_ptr__5619_wf64[safe_add( _5613_cof,_5651_p )] * ((*mcof)(_5648_i)));
                if ((_5607_ncodeatom > (int)0))
                {
                  {
                    int32_t _11512_ = _ptr__5617_wi32[safe_add( _5615_codeptr,_5651_p )];
                    int32_t _11513_ = _ptr__5617_wi32[safe_add( safe_add( _5615_codeptr,_5651_p ),(int)1 )];
                    for (int32_t _5652_l = _11512_; _5652_l < _11513_; ++_5652_l)
                    {
                      {
                        _ptr__5641_ri32[safe_add( _5638_rcode,_5644_codei )] = _ptr__5617_wi32[safe_add( _5614_code,_5652_l )];
                        _ptr__5643_rf64[safe_add( _5640_rcconst,_5644_codei )] = _ptr__5619_wf64[safe_add( _5616_cconst,_5652_l )];
                        ++ _5644_codei;
                      }
                    }
                    _ptr__5641_ri32[safe_add( _5638_rcode,_5644_codei )] = 2;
                    _ptr__5643_rf64[safe_add( _5640_rcconst,_5644_codei )] = ((*mcof)(_5648_i));
                    ++ _5644_codei;
                    _ptr__5641_ri32[safe_add( _5638_rcode,_5644_codei )] = 5;
                    ++ _5644_codei;
                    _ptr__5641_ri32[safe_add( safe_add( _5639_rcodeptr,_5646_nzi ),(int)1 )] = _5644_codei;
                  }
                }
                {}
                ++ _5646_nzi;
              }
            }
            _ptr__5641_ri32[safe_add( safe_add( _5633_rptr,_5648_i ),(int)1 )] = _5646_nzi;
            _ptr__5642_ri64[safe_add( _5636_rsp,_5648_i )] = ((*msp)(_5648_i));
          }
        }
      }
    }
    else
    {
      {
        int32_t _5653_e0 = (int)((msp)->size(0));
        int32_t _5654_i0 = (int)0;
        int32_t _5655_e1 = _5605_nelem;
        int32_t _5656_i1 = (int)0;
        while ( ((_5654_i0 < _5653_e0) && (_5656_i1 < _5655_e1)) )
        {
          {
            if ((((*msp)(_5654_i0)) < _ptr__5618_wi64[safe_add( _5612_sp,_5656_i1 )]))
            {
              {
                ++ _5654_i0;
              }
            }
            else if((((*msp)(_5654_i0)) > _ptr__5618_wi64[safe_add( _5612_sp,_5656_i1 )]))
            {
              {
                ++ _5656_i1;
              }
            }
            else
            {
              {
                int32_t _5657_p0 = _ptr__5617_wi32[safe_add( _5610_ptr,_5656_i1 )];
                int32_t _5658_p1 = _ptr__5617_wi32[safe_add( safe_add( _5610_ptr,_5656_i1 ),(int)1 )];
                int32_t _11514_ = _5657_p0;
                int32_t _11515_ = _5658_p1;
                for (int32_t _5659_j = _11514_; _5659_j < _11515_; ++_5659_j)
                {
                  {
                    _ptr__5642_ri64[safe_add( _5635_rnidx,_5646_nzi )] = _ptr__5618_wi64[safe_add( _5611_nidxs,_5659_j )];
                    _ptr__5643_rf64[safe_add( _5637_rcof,_5646_nzi )] = (_ptr__5619_wf64[safe_add( _5611_nidxs,_5659_j )] * ((*mcof)(_5654_i0)));
                    if ((_5607_ncodeatom > (int)0))
                    {
                      {
                        int32_t _11516_ = _ptr__5617_wi32[safe_add( _5615_codeptr,_5659_j )];
                        int32_t _11517_ = _ptr__5617_wi32[safe_add( safe_add( _5615_codeptr,_5659_j ),(int)1 )];
                        for (int32_t _5660_l = _11516_; _5660_l < _11517_; ++_5660_l)
                        {
                          {
                            _ptr__5641_ri32[safe_add( _5638_rcode,_5644_codei )] = _ptr__5617_wi32[safe_add( _5614_code,_5660_l )];
                            _ptr__5643_rf64[safe_add( _5640_rcconst,_5644_codei )] = _ptr__5619_wf64[safe_add( _5616_cconst,_5660_l )];
                            ++ _5644_codei;
                          }
                        }
                        _ptr__5641_ri32[safe_add( _5638_rcode,_5644_codei )] = 2;
                        _ptr__5643_rf64[safe_add( _5640_rcconst,_5644_codei )] = ((*mcof)(_5654_i0));
                        ++ _5644_codei;
                        _ptr__5641_ri32[safe_add( _5638_rcode,_5644_codei )] = 5;
                        ++ _5644_codei;
                        _ptr__5641_ri32[safe_add( safe_add( _5639_rcodeptr,_5646_nzi ),(int)1 )] = _5644_codei;
                      }
                    }
                    {}
                    ++ _5646_nzi;
                  }
                }
                _ptr__5641_ri32[safe_add( safe_add( _5633_rptr,_5645_elmi ),(int)1 )] = _5646_nzi;
                _ptr__5642_ri64[safe_add( _5636_rsp,_5645_elmi )] = ((*msp)(_5654_i0));
                ++ _5645_elmi;
                ++ _5654_i0;
                ++ _5656_i1;
              }
            }
          }
        }
      }
    }
  }
  if ((!_5631_rhassp))
  {
    {
      _5601_rs->popi64(_5622_rnelem);
    }
  }
  {}
}
// End mosek.fusion.ExprMulElement.eval

// Begin mosek.fusion.ExprMulElement.toString
// Method mosek.fusion.ExprMulElement.toString @ src/fusion/ExprMul.monty:1367:6-135
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulElement::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulElement(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulElement.toString

void mosek::fusion::p_ExprMulElement::destroy()
{
  expr.reset();
  msp.reset();
  mcof.reset();
}
void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }
// } class ExprMulElement
// class ExprMulScalarConst { // @ src/fusion/ExprMul.monty:1258:4-1349:5
mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }
mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst
  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulScalarConst.ctor @ src/fusion/ExprMul.monty:1267:6-1272:7
mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst
  (double _5661_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5662_expr)
{ return new mosek::fusion::ExprMulScalarConst(_5661_c,_5662_expr); }
mosek::fusion::ExprMulScalarConst::ExprMulScalarConst
  (double _5661_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5662_expr) : 
   ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this))
{ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_5661_c,_5662_expr); }
void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _5661_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _5662_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_5662_expr->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _5661_c;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _5662_expr;
  }
}
// mosek.fusion.ExprMulScalarConst.ctor

// Begin mosek.fusion.ExprMulScalarConst.eval
// Method mosek.fusion.ExprMulScalarConst.eval @ src/fusion/ExprMul.monty:1274:6-1348:7
void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5663_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5664_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5665_xs) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_5663_rs,_5664_ws,_5665_xs); }
void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5663_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5664_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5665_xs)
{
  expr->eval(_5664_ws,_5663_rs,_5665_xs);
  _5664_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5666_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5666_wi32(_5666_wi32 ? _5666_wi32->raw() : nullptr,_5666_wi32 ? _5666_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5667_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5667_wi64(_5667_wi64 ? _5667_wi64->raw() : nullptr,_5667_wi64 ? _5667_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5668_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->f64;
  _checked_ptr_1<double> _ptr__5668_wf64(_5668_wf64 ? _5668_wf64->raw() : nullptr,_5668_wf64 ? _5668_wf64->size(0) : 0);
  int32_t _5669_nd = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->nd;
  int32_t _5670_nelem = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->nelem;
  int32_t _5671_nnz = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->nnz;
  bool _5672_hassp = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->hassp;
  int32_t _5673_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->ncodeatom;
  int32_t _5674_ptr = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->ptr_base;
  int32_t _5675_code = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->code_base;
  int32_t _5676_cconst = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->cconst_base;
  int32_t _5677_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->codeptr_base;
  int32_t _5678_shape = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->shape_base;
  int32_t _5679_sp = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->sp_base;
  int32_t _5680_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->nidxs_base;
  int32_t _5681_cof = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->cof_base;
  int32_t _5682_consts = mosek::fusion::p_WorkStack::_get_impl(_5664_ws)->cconst_base;
  int32_t _11518_;
  bool _11519_ = (_5673_ncodeatom == (int)0);
  if (_11519_)
  {
    _11518_ = (int)0;
  }
  else
  {
    _11518_ = safe_add( _5673_ncodeatom,safe_mul( (int)2,_5671_nnz ) );
  }
  int32_t _5683_rncodeatom = _11518_;
  _5663_rs->alloc_expr(_5669_nd,_5670_nelem,_5671_nnz,_5672_hassp,_5683_rncodeatom);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5684_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__5684_ri64(_5684_ri64 ? _5684_ri64->raw() : nullptr,_5684_ri64 ? _5684_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5685_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->f64;
  _checked_ptr_1<double> _ptr__5685_rf64(_5685_rf64 ? _5685_rf64->raw() : nullptr,_5685_rf64 ? _5685_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5686_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__5686_ri32(_5686_ri32 ? _5686_ri32->raw() : nullptr,_5686_ri32 ? _5686_ri32->size(0) : 0);
  int32_t _5687_rptr = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->ptr_base;
  int32_t _5688_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->nidxs_base;
  int32_t _5689_rcof = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->cof_base;
  int32_t _5690_rcode = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->code_base;
  int32_t _5691_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->codeptr_base;
  int32_t _5692_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->cconst_base;
  bool _5693_rhassp = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->hassp;
  int32_t _5694_rshape = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->shape_base;
  int32_t _5695_rsp = mosek::fusion::p_WorkStack::_get_impl(_5663_rs)->sp_base;
  {
    int32_t _11520_ = (int)0;
    int32_t _11521_ = safe_add( _5670_nelem,(int)1 );
    for (int32_t _5696_i = _11520_; _5696_i < _11521_; ++_5696_i)
    {
      {
        _ptr__5686_ri32[safe_add( _5687_rptr,_5696_i )] = _ptr__5666_wi32[safe_add( _5674_ptr,_5696_i )];
      }
    }
    int32_t _11522_ = (int)0;
    int32_t _11523_ = _5671_nnz;
    for (int32_t _5697_i = _11522_; _5697_i < _11523_; ++_5697_i)
    {
      {
        _ptr__5684_ri64[safe_add( _5688_rnidxs,_5697_i )] = _ptr__5667_wi64[safe_add( _5680_nidxs,_5697_i )];
        _ptr__5685_rf64[safe_add( _5689_rcof,_5697_i )] = (_ptr__5668_wf64[safe_add( _5681_cof,_5697_i )] * c);
      }
    }
    if (_5672_hassp)
    {
      {
        int32_t _11524_ = (int)0;
        int32_t _11525_ = _5670_nelem;
        for (int32_t _5698_i = _11524_; _5698_i < _11525_; ++_5698_i)
        {
          {
            _ptr__5684_ri64[safe_add( _5695_rsp,_5698_i )] = _ptr__5667_wi64[safe_add( _5679_sp,_5698_i )];
          }
        }
      }
    }
    {}
    int32_t _11526_ = (int)0;
    int32_t _11527_ = _5669_nd;
    for (int32_t _5699_i = _11526_; _5699_i < _11527_; ++_5699_i)
    {
      {
        _ptr__5686_ri32[safe_add( _5694_rshape,_5699_i )] = _ptr__5666_wi32[safe_add( _5678_shape,_5699_i )];
      }
    }
    if ((_5673_ncodeatom > (int)0))
    {
      {
        _ptr__5686_ri32[_5691_rcodeptr] = (int)0;
        int32_t _5700_codei = (int)0;
        int32_t _11528_ = (int)0;
        int32_t _11529_ = _5671_nnz;
        for (int32_t _5701_j = _11528_; _5701_j < _11529_; ++_5701_j)
        {
          {
            int32_t _11530_ = _ptr__5666_wi32[safe_add( _5677_codeptr,_5701_j )];
            int32_t _11531_ = _ptr__5666_wi32[safe_add( safe_add( _5677_codeptr,_5701_j ),(int)1 )];
            for (int32_t _5702_k = _11530_; _5702_k < _11531_; ++_5702_k)
            {
              {
                _ptr__5686_ri32[safe_add( _5690_rcode,_5700_codei )] = _ptr__5666_wi32[safe_add( _5675_code,_5702_k )];
                _ptr__5685_rf64[safe_add( _5692_rcconst,_5700_codei )] = _ptr__5668_wf64[safe_add( _5676_cconst,_5702_k )];
                ++ _5700_codei;
              }
            }
            _ptr__5686_ri32[safe_add( _5690_rcode,_5700_codei )] = 2;
            _ptr__5685_rf64[safe_add( _5692_rcconst,_5700_codei )] = c;
            ++ _5700_codei;
            _ptr__5686_ri32[safe_add( _5690_rcode,_5700_codei )] = 5;
            ++ _5700_codei;
            _ptr__5686_ri32[safe_add( safe_add( _5691_rcodeptr,_5701_j ),(int)1 )] = _5700_codei;
          }
        }
      }
    }
    {}
  }
}
// End mosek.fusion.ExprMulScalarConst.eval

// Begin mosek.fusion.ExprMulScalarConst.toString
// Method mosek.fusion.ExprMulScalarConst.toString @ src/fusion/ExprMul.monty:1265:6-73
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulScalarConst::toString()
{
  return std::string ("ExprMulScalarConst()");
}
// End mosek.fusion.ExprMulScalarConst.toString

void mosek::fusion::p_ExprMulScalarConst::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }
// } class ExprMulScalarConst
// class ExprScalarMul { // @ src/fusion/ExprMul.monty:1054:4-1247:5
mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }
mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprScalarMul::p_ExprScalarMul
  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprScalarMul.ctor @ src/fusion/ExprMul.monty:1133:6-1152:7
mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul
  (int32_t _5703_mdim0,
    int32_t _5704_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5705_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5706_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5707_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5708_expr,
    int32_t _5709_validated)
{ return new mosek::fusion::ExprScalarMul(_5703_mdim0,_5704_mdim1,_5705_msubi,_5706_msubj,_5707_mval,_5708_expr,_5709_validated); }
mosek::fusion::ExprScalarMul::ExprScalarMul
  (int32_t _5703_mdim0,
    int32_t _5704_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5705_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5706_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5707_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5708_expr,
    int32_t _5709_validated) : 
   ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this))
{ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5703_mdim0,_5704_mdim1,_5705_msubi,_5706_msubj,_5707_mval,_5708_expr,_5709_validated); }
void mosek::fusion::p_ExprScalarMul::_initialize  (int32_t _5703_mdim0,
    int32_t _5704_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5705_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5706_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5707_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5708_expr,
    int32_t _5709_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5705_msubi(_5705_msubi ? _5705_msubi->raw() : nullptr, _5705_msubi ? _5705_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5706_msubj(_5706_msubj ? _5706_msubj->raw() : nullptr, _5706_msubj ? _5706_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5707_mval(_5707_mval ? _5707_mval->raw() : nullptr, _5707_mval ? _5707_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_5703_mdim0),(int32_t)(_5704_mdim1)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _5703_mdim0;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _5704_mdim1;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _5705_msubi;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _5706_msubj;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _5707_mval;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _5708_expr;
  }
}
// mosek.fusion.ExprScalarMul.ctor

// mosek.fusion.ExprScalarMul.ctor @ src/fusion/ExprMul.monty:1121:6-1131:7
mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul
  (int32_t _5710_mdim0,
    int32_t _5711_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5712_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5713_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5714_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5715_expr)
{ return new mosek::fusion::ExprScalarMul(_5710_mdim0,_5711_mdim1,_5712_msubi,_5713_msubj,_5714_mval,_5715_expr); }
mosek::fusion::ExprScalarMul::ExprScalarMul
  (int32_t _5710_mdim0,
    int32_t _5711_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5712_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5713_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5714_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5715_expr) : 
   ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this))
{ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5710_mdim0,_5711_mdim1,_5712_msubi,_5713_msubj,_5714_mval,_5715_expr); }
void mosek::fusion::p_ExprScalarMul::_initialize  (int32_t _5710_mdim0,
    int32_t _5711_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5712_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5713_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5714_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5715_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5712_msubi(_5712_msubi ? _5712_msubi->raw() : nullptr, _5712_msubi ? _5712_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5713_msubj(_5713_msubj ? _5713_msubj->raw() : nullptr, _5713_msubj ? _5713_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5714_mval(_5714_mval ? _5714_mval->raw() : nullptr, _5714_mval ? _5714_mval->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_5710_mdim0,_5711_mdim1,_5712_msubi,_5713_msubj,_5714_mval,_5715_expr,::mosek::fusion::p_ExprScalarMul::validate(_5710_mdim0,_5711_mdim1,_5712_msubi,_5713_msubj,_5714_mval,_5715_expr));
  }
}
// mosek.fusion.ExprScalarMul.ctor

// Begin mosek.fusion.ExprScalarMul.eval
// Method mosek.fusion.ExprScalarMul.eval @ src/fusion/ExprMul.monty:1154:6-1246:7
void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5716_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5717_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5718_xs) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_5716_rs,_5717_ws,_5718_xs); }
void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5716_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5717_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5718_xs)
{
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_5717_ws,_5716_rs,_5718_xs);
  _5717_ws->pop_expr();
  int32_t _5719_nd = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->nd;
  int32_t _5720_nelem = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->nelem;
  int32_t _5721_nnz = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->nnz;
  bool _5722_hassp = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->hassp;
  int32_t _5723_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->ncodeatom;
  int32_t _5724_ptr = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->ptr_base;
  int32_t _5725_sp = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->sp_base;
  int32_t _5726_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->nidxs_base;
  int32_t _5727_cof = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->cof_base;
  int32_t _5728_code = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->code_base;
  int32_t _5729_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->codeptr_base;
  int32_t _5730_cconst = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5731_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5731_wi32(_5731_wi32 ? _5731_wi32->raw() : nullptr,_5731_wi32 ? _5731_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5732_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5732_wi64(_5732_wi64 ? _5732_wi64->raw() : nullptr,_5732_wi64 ? _5732_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5733_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5717_ws)->f64;
  _checked_ptr_1<double> _ptr__5733_wf64(_5733_wf64 ? _5733_wf64->raw() : nullptr,_5733_wf64 ? _5733_wf64->size(0) : 0);
  int32_t _5734_mnumnz = (int)((mval)->size(0));
  if ((_5719_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_5720_nelem == (int)0))
  {
    {
      _5716_rs->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      int32_t _11532_;
      bool _11533_ = (_5723_ncodeatom > (int)0);
      if (_11533_)
      {
        _11532_ = safe_mul( (int)2,_5721_nnz );
      }
      else
      {
        _11532_ = (int)0;
      }
      int32_t _5735_rncodeatom = safe_mul( _5734_mnumnz,safe_add( _5723_ncodeatom,_11532_ ) );
      _5716_rs->alloc_expr((int)2,_5734_mnumnz,safe_mul( _5734_mnumnz,_5721_nnz ),true,_5735_rncodeatom);
      int32_t _5736_rptr = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->ptr_base;
      int32_t _5737_rnidx = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->nidxs_base;
      int32_t _5738_rsp = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->sp_base;
      int32_t _5739_rcof = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->cof_base;
      int32_t _5740_rshape = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->shape_base;
      int32_t _5741_rcode = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->code_base;
      int32_t _5742_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->codeptr_base;
      int32_t _5743_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5744_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5744_ri32(_5744_ri32 ? _5744_ri32->raw() : nullptr,_5744_ri32 ? _5744_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5745_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5745_ri64(_5745_ri64 ? _5745_ri64->raw() : nullptr,_5745_ri64 ? _5745_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5746_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5716_rs)->f64;
      _checked_ptr_1<double> _ptr__5746_rf64(_5746_rf64 ? _5746_rf64->raw() : nullptr,_5746_rf64 ? _5746_rf64->size(0) : 0);
      _ptr__5744_ri32[_5740_rshape] = mdim0;
      _ptr__5744_ri32[safe_add( _5740_rshape,(int)1 )] = mdim1;
      int32_t _5747_codei = (int)0;
      int32_t _5748_nzi = (int)0;
      _ptr__5744_ri32[_5736_rptr] = (int)0;
      if ((_5723_ncodeatom > (int)0))
      {
        {
          _ptr__5744_ri32[_5742_rcodeptr] = (int)0;
          int32_t _11534_ = (int)0;
          int32_t _11535_ = _5734_mnumnz;
          for (int32_t _5749_i = _11534_; _5749_i < _11535_; ++_5749_i)
          {
            {
              int32_t _11536_ = (int)0;
              int32_t _11537_ = _5721_nnz;
              for (int32_t _5750_j = _11536_; _5750_j < _11537_; ++_5750_j)
              {
                {
                  _ptr__5745_ri64[safe_add( _5737_rnidx,_5748_nzi )] = _ptr__5732_wi64[safe_add( _5726_nidxs,_5750_j )];
                  _ptr__5746_rf64[safe_add( _5739_rcof,_5748_nzi )] = (_ptr__5733_wf64[safe_add( _5727_cof,_5750_j )] * ((*mval)(_5749_i)));
                  int32_t _11538_ = _ptr__5731_wi32[safe_add( _5729_codeptr,_5750_j )];
                  int32_t _11539_ = _ptr__5731_wi32[safe_add( safe_add( _5729_codeptr,_5750_j ),(int)1 )];
                  for (int32_t _5751_k = _11538_; _5751_k < _11539_; ++_5751_k)
                  {
                    {
                      _ptr__5744_ri32[safe_add( _5741_rcode,_5747_codei )] = _ptr__5731_wi32[safe_add( _5728_code,_5751_k )];
                      _ptr__5746_rf64[safe_add( _5743_rcconst,_5747_codei )] = _ptr__5733_wf64[safe_add( _5730_cconst,_5751_k )];
                      ++ _5747_codei;
                    }
                  }
                  _ptr__5744_ri32[safe_add( _5741_rcode,_5747_codei )] = 2;
                  _ptr__5746_rf64[safe_add( _5743_rcconst,_5747_codei )] = ((*mval)(_5749_i));
                  ++ _5747_codei;
                  _ptr__5744_ri32[safe_add( _5741_rcode,_5747_codei )] = 5;
                  ++ _5747_codei;
                  _ptr__5744_ri32[safe_add( safe_add( _5742_rcodeptr,_5748_nzi ),(int)1 )] = _5747_codei;
                  ++ _5748_nzi;
                }
              }
              _ptr__5745_ri64[safe_add( _5738_rsp,_5749_i )] = safe_add( safe_mul( ((*msubi)(_5749_i)),mdim1 ),((*msubj)(_5749_i)) );
              _ptr__5744_ri32[safe_add( safe_add( _5736_rptr,_5749_i ),(int)1 )] = _5748_nzi;
            }
          }
        }
      }
      else
      {
        {
          int32_t _11540_ = (int)0;
          int32_t _11541_ = _5734_mnumnz;
          for (int32_t _5752_i = _11540_; _5752_i < _11541_; ++_5752_i)
          {
            {
              int32_t _11542_ = (int)0;
              int32_t _11543_ = _5721_nnz;
              for (int32_t _5753_j = _11542_; _5753_j < _11543_; ++_5753_j)
              {
                {
                  _ptr__5745_ri64[safe_add( _5737_rnidx,_5748_nzi )] = _ptr__5732_wi64[safe_add( _5726_nidxs,_5753_j )];
                  _ptr__5746_rf64[safe_add( _5739_rcof,_5748_nzi )] = (_ptr__5733_wf64[safe_add( _5727_cof,_5753_j )] * ((*mval)(_5752_i)));
                  ++ _5748_nzi;
                }
              }
              _ptr__5745_ri64[safe_add( _5738_rsp,_5752_i )] = safe_add( safe_mul( ((*msubi)(_5752_i)),mdim1 ),((*msubj)(_5752_i)) );
              _ptr__5744_ri32[safe_add( safe_add( _5736_rptr,_5752_i ),(int)1 )] = _5748_nzi;
            }
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprScalarMul.eval

// Begin mosek.fusion.ExprScalarMul.validate
// Method mosek.fusion.ExprScalarMul.validate @ src/fusion/ExprMul.monty:1067:6-1106:7
int32_t mosek::fusion::p_ExprScalarMul::validate(int32_t _5754_mdim0,int32_t _5755_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5756_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5757_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5758_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5759_expr)
{
  _checked_ptr_1<int32_t> _ptr__5756_msubi(_5756_msubi ? _5756_msubi->raw() : nullptr, _5756_msubi ? _5756_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5757_msubj(_5757_msubj ? _5757_msubj->raw() : nullptr, _5757_msubj ? _5757_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5758_mval(_5758_mval ? _5758_mval->raw() : nullptr, _5758_mval ? _5758_mval->size(0) : 0);
  int32_t _5760_nd = _5759_expr->getND();
  if ((_5760_nd != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5754_mdim0 < (int)0) || (_5755_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_5756_msubi)->size(0)) != (int)((_5757_msubj)->size(0))) || ((int)((_5756_msubi)->size(0)) != (int)((_5758_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5761_mnnz = (int)((_5756_msubi)->size(0));
  bool _5762_err_data = false;
  bool _5763_err_sorted = false;
  {
    int32_t _11544_ = (int)0;
    int32_t _11545_ = _5761_mnnz;
    for (int32_t _5764_i = _11544_; _5764_i < _11545_; ++_5764_i)
    {
      {
        if (((_ptr__5756_msubi[_5764_i] < (int)0) || ((_ptr__5756_msubi[_5764_i] >= _5754_mdim0) || ((_ptr__5757_msubj[_5764_i] < (int)0) || (_ptr__5757_msubj[_5764_i] >= _5755_mdim1)))))
        {
          {
            _5762_err_data = true;
          }
        }
        {}
      }
    }
    int32_t _11546_ = (int)0;
    int32_t _11547_ = (_5761_mnnz - (int)1);
    for (int32_t _5765_i = _11546_; _5765_i < _11547_; ++_5765_i)
    {
      {
        if (((_ptr__5756_msubi[_5765_i] > _ptr__5756_msubi[safe_add( _5765_i,(int)1 )]) || ((_ptr__5756_msubi[_5765_i] == _ptr__5756_msubi[safe_add( _5765_i,(int)1 )]) && (_ptr__5757_msubj[_5765_i] >= _ptr__5757_msubj[safe_add( _5765_i,(int)1 )]))))
        {
          {
            _5763_err_sorted = true;
          }
        }
        {}
      }
    }
  }
  if (_5762_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5763_err_sorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprScalarMul.validate

// Begin mosek.fusion.ExprScalarMul.toString
// Method mosek.fusion.ExprScalarMul.toString @ src/fusion/ExprMul.monty:1065:6-134
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprScalarMul::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprScalarMul.toString

void mosek::fusion::p_ExprScalarMul::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }
// } class ExprScalarMul
// class ExprMulRight { // @ src/fusion/ExprMul.monty:480:4-1041:5
mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }
mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulRight::p_ExprMulRight
  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulRight.ctor @ src/fusion/ExprMul.monty:575:6-593:7
mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight
  (int32_t _5766_mdim0,
    int32_t _5767_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5768_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5769_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5770_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5771_expr,
    int32_t _5772_validated)
{ return new mosek::fusion::ExprMulRight(_5766_mdim0,_5767_mdim1,_5768_msubi,_5769_msubj,_5770_mval,_5771_expr,_5772_validated); }
mosek::fusion::ExprMulRight::ExprMulRight
  (int32_t _5766_mdim0,
    int32_t _5767_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5768_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5769_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5770_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5771_expr,
    int32_t _5772_validated) : 
   ExprMulRight(new mosek::fusion::p_ExprMulRight(this))
{ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5766_mdim0,_5767_mdim1,_5768_msubi,_5769_msubj,_5770_mval,_5771_expr,_5772_validated); }
void mosek::fusion::p_ExprMulRight::_initialize  (int32_t _5766_mdim0,
    int32_t _5767_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5768_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5769_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5770_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5771_expr,
    int32_t _5772_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5768_msubi(_5768_msubi ? _5768_msubi->raw() : nullptr, _5768_msubi ? _5768_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5769_msubj(_5769_msubj ? _5769_msubj->raw() : nullptr, _5769_msubj ? _5769_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5770_mval(_5770_mval ? _5770_mval->raw() : nullptr, _5770_mval ? _5770_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_5767_mdim1,_5771_expr->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _5766_mdim0;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _5767_mdim1;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _5768_msubi;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _5769_msubj;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _5770_mval;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _5771_expr;
  }
}
// mosek.fusion.ExprMulRight.ctor

// mosek.fusion.ExprMulRight.ctor @ src/fusion/ExprMul.monty:556:6-566:7
mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight
  (int32_t _5773_mdim0,
    int32_t _5774_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5775_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5776_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5777_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5778_expr)
{ return new mosek::fusion::ExprMulRight(_5773_mdim0,_5774_mdim1,_5775_msubi,_5776_msubj,_5777_mval,_5778_expr); }
mosek::fusion::ExprMulRight::ExprMulRight
  (int32_t _5773_mdim0,
    int32_t _5774_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5775_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5776_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5777_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5778_expr) : 
   ExprMulRight(new mosek::fusion::p_ExprMulRight(this))
{ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5773_mdim0,_5774_mdim1,_5775_msubi,_5776_msubj,_5777_mval,_5778_expr); }
void mosek::fusion::p_ExprMulRight::_initialize  (int32_t _5773_mdim0,
    int32_t _5774_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5775_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5776_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5777_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5778_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5775_msubi(_5775_msubi ? _5775_msubi->raw() : nullptr, _5775_msubi ? _5775_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5776_msubj(_5776_msubj ? _5776_msubj->raw() : nullptr, _5776_msubj ? _5776_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5777_mval(_5777_mval ? _5777_mval->raw() : nullptr, _5777_mval ? _5777_mval->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_5773_mdim0,_5774_mdim1,_5775_msubi,_5776_msubj,_5777_mval,_5778_expr,::mosek::fusion::p_ExprMulRight::validate(_5773_mdim0,_5774_mdim1,_5775_msubi,_5776_msubj,_5777_mval,_5778_expr));
  }
}
// mosek.fusion.ExprMulRight.ctor

// Begin mosek.fusion.ExprMulRight.eval
// Method mosek.fusion.ExprMulRight.eval @ src/fusion/ExprMul.monty:596:6-1040:7
void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5779_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5780_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5781_xs) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_5779_rs,_5780_ws,_5781_xs); }
void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5779_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5780_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5781_xs)
{
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_5780_ws,_5779_rs,_5781_xs);
  _5780_ws->pop_expr();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5782_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5782_wi32(_5782_wi32 ? _5782_wi32->raw() : nullptr,_5782_wi32 ? _5782_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5783_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5783_wi64(_5783_wi64 ? _5783_wi64->raw() : nullptr,_5783_wi64 ? _5783_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5784_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->f64;
  _checked_ptr_1<double> _ptr__5784_wf64(_5784_wf64 ? _5784_wf64->raw() : nullptr,_5784_wf64 ? _5784_wf64->size(0) : 0);
  int32_t _5785_nd = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->nd;
  if ((_5785_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _5786_nelem = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->nelem;
  int32_t _5787_nnz = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->nnz;
  int32_t _5788_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->ncodeatom;
  bool _5789_hassp = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->hassp;
  int32_t _5790_ptr = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->ptr_base;
  int32_t _5791_shape = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->shape_base;
  int32_t _5792_sp = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->sp_base;
  int32_t _5793_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->nidxs_base;
  int32_t _5794_cof = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->cof_base;
  int32_t _5795_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->codeptr_base;
  int32_t _5796_code = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->code_base;
  int32_t _5797_cconst = mosek::fusion::p_WorkStack::_get_impl(_5780_ws)->cconst_base;
  int32_t _5798_edim0 = _ptr__5782_wi32[_5791_shape];
  int32_t _5799_edim1 = _ptr__5782_wi32[safe_add( _5791_shape,(int)1 )];
  int32_t _5800_mnnz = (int)((mval)->size(0));
  bool _5801_msp = (_5800_mnnz < safe_mul( (int64_t)mdim0,(int64_t)mdim1 ));
  if (_5801_msp)
  {
    {
      int32_t _5802_mcolptr = _5781_xs->alloci32(safe_add( mdim1,(int)1 ));
      int32_t _5803_mperm = _5781_xs->alloci32(_5800_mnnz);
      int32_t _5804_erowptr = _5781_xs->alloci32(safe_add( _5798_edim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5805_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5781_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5805_xi32(_5805_xi32 ? _5805_xi32->raw() : nullptr,_5805_xi32 ? _5805_xi32->size(0) : 0);
      {
        int32_t _11548_ = (int)0;
        int32_t _11549_ = safe_add( mdim1,(int)1 );
        for (int32_t _5806_i = _11548_; _5806_i < _11549_; ++_5806_i)
        {
          {
            _ptr__5805_xi32[safe_add( _5802_mcolptr,_5806_i )] = (int)0;
          }
        }
        int32_t _11550_ = (int)0;
        int32_t _11551_ = _5800_mnnz;
        for (int32_t _5807_i = _11550_; _5807_i < _11551_; ++_5807_i)
        {
          {
            ++ _ptr__5805_xi32[safe_add( safe_add( _5802_mcolptr,((*msubj)(_5807_i)) ),(int)1 )];
          }
        }
        int32_t _11552_ = (int)0;
        int32_t _11553_ = mdim1;
        for (int32_t _5808_i = _11552_; _5808_i < _11553_; ++_5808_i)
        {
          {
            _ptr__5805_xi32[safe_add( safe_add( _5802_mcolptr,_5808_i ),(int)1 )] += _ptr__5805_xi32[safe_add( _5802_mcolptr,_5808_i )];
          }
        }
        int32_t _11554_ = (int)0;
        int32_t _11555_ = _5800_mnnz;
        for (int32_t _5809_i = _11554_; _5809_i < _11555_; ++_5809_i)
        {
          {
            _ptr__5805_xi32[safe_add( _5803_mperm,_ptr__5805_xi32[safe_add( _5802_mcolptr,((*msubj)(_5809_i)) )] )] = _5809_i;
            ++ _ptr__5805_xi32[safe_add( _5802_mcolptr,((*msubj)(_5809_i)) )];
          }
        }
        int32_t _11556_ = (int)0;
        int32_t _11557_ = mdim1;
        for (int32_t _5810_i = _11556_; _5810_i < _11557_; ++_5810_i)
        {
          {
            _ptr__5805_xi32[(safe_add( _5802_mcolptr,mdim1 ) - _5810_i)] = _ptr__5805_xi32[((safe_add( _5802_mcolptr,mdim1 ) - _5810_i) - (int)1)];
          }
        }
        _ptr__5805_xi32[_5802_mcolptr] = (int)0;
        int32_t _11558_ = (int)0;
        int32_t _11559_ = safe_add( _5798_edim0,(int)1 );
        for (int32_t _5811_i = _11558_; _5811_i < _11559_; ++_5811_i)
        {
          {
            _ptr__5805_xi32[safe_add( _5804_erowptr,_5811_i )] = (int)0;
          }
        }
      }
      if (_5789_hassp)
      {
        {
          int32_t _5812_rncodeatom = (int)0;
          int32_t _5813_rnelem = (int)0;
          int64_t _5814_rnnz = (int64_t)0;
          {
            int32_t _5815_i0 = (int)0;
            while ( (_5815_i0 < _5786_nelem) )
            {
              {
                int64_t _5816_erow = (_ptr__5783_wi64[safe_add( _5792_sp,_5815_i0 )] / _5799_edim1);
                int32_t _5817_b0 = _5815_i0;
                ++ _5815_i0;
                while ( ((_5815_i0 < _5786_nelem) && ((_ptr__5783_wi64[safe_add( _5792_sp,_5815_i0 )] / _5799_edim1) == _5816_erow)) )
                {
                  {
                    ++ _5815_i0;
                  }
                }
                int32_t _5818_e0 = _5815_i0;
                int32_t _5819_i1 = (int)0;
                while ( (_5819_i1 < _5800_mnnz) )
                {
                  {
                    int32_t _5820_mcol = ((*msubj)(_ptr__5805_xi32[safe_add( _5803_mperm,_5819_i1 )]));
                    int32_t _5821_b1 = _5819_i1;
                    ++ _5819_i1;
                    while ( ((_5819_i1 < _5800_mnnz) && (((*msubj)(_ptr__5805_xi32[safe_add( _5803_mperm,_5819_i1 )])) == _5820_mcol)) )
                    {
                      {
                        ++ _5819_i1;
                      }
                    }
                    int32_t _5822_e1 = _5819_i1;
                    bool _5823_hasnz = false;
                    int32_t _5824_ii1 = _5821_b1;
                    int32_t _5825_ii0 = _5817_b0;
                    while ( ((_5825_ii0 < _5818_e0) && (_5824_ii1 < _5822_e1)) )
                    {
                      {
                        int32_t _5826_ip1 = _ptr__5805_xi32[safe_add( _5803_mperm,_5824_ii1 )];
                        if (((_ptr__5783_wi64[safe_add( _5792_sp,_5825_ii0 )] % _5799_edim1) < ((*msubi)(_5826_ip1))))
                        {
                          {
                            ++ _5825_ii0;
                          }
                        }
                        else if(((_ptr__5783_wi64[safe_add( _5792_sp,_5825_ii0 )] % _5799_edim1) > ((*msubi)(_5826_ip1))))
                        {
                          {
                            ++ _5824_ii1;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5826_ip1)) > (int)0) || ((int)0 < ((*mval)(_5826_ip1)))))
                            {
                              {
                                _5814_rnnz += (_ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5825_ii0 ),(int)1 )] - _ptr__5782_wi32[safe_add( _5790_ptr,_5825_ii0 )]);
                                if ((_5788_ncodeatom > (int)0))
                                {
                                  {
                                    _5812_rncodeatom += safe_add( (_ptr__5782_wi32[safe_add( _5795_codeptr,_ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5825_ii0 ),(int)1 )] )] - _ptr__5782_wi32[safe_add( _5795_codeptr,_ptr__5782_wi32[safe_add( _5790_ptr,_5825_ii0 )] )]),safe_mul( (int)2,(_ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5825_ii0 ),(int)1 )] - _ptr__5782_wi32[safe_add( _5790_ptr,_5825_ii0 )]) ) );
                                  }
                                }
                                {}
                                _5823_hasnz = true;
                              }
                            }
                            {}
                            ++ _5825_ii0;
                            ++ _5824_ii1;
                          }
                        }
                      }
                    }
                    if (_5823_hasnz)
                    {
                      {
                        ++ _5813_rnelem;
                      }
                    }
                    {}
                  }
                }
              }
            }
          }
          bool _5827_rhassp = (_5813_rnelem < safe_mul( _5798_edim0,mdim1 ));
          _5779_rs->alloc_expr((int)2,_5813_rnelem,(int32_t)_5814_rnnz,_5827_rhassp,_5812_rncodeatom);
          int32_t _5828_rptr = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->ptr_base;
          int32_t _5829_ridxs = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->nidxs_base;
          int32_t _11560_;
          bool _11561_ = _5827_rhassp;
          if (_11561_)
          {
            _11560_ = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->sp_base;
          }
          else
          {
            _11560_ = _5779_rs->alloci64(_5813_rnelem);
          }
          int32_t _5830_rsp = _11560_;
          int32_t _5831_rcof = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->cof_base;
          int32_t _5832_rshape = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->shape_base;
          int32_t _5833_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->codeptr_base;
          int32_t _5834_rcode = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->code_base;
          int32_t _5835_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5836_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5836_ri32(_5836_ri32 ? _5836_ri32->raw() : nullptr,_5836_ri32 ? _5836_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5837_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5837_ri64(_5837_ri64 ? _5837_ri64->raw() : nullptr,_5837_ri64 ? _5837_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5838_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->f64;
          _checked_ptr_1<double> _ptr__5838_rf64(_5838_rf64 ? _5838_rf64->raw() : nullptr,_5838_rf64 ? _5838_rf64->size(0) : 0);
          _ptr__5836_ri32[_5832_rshape] = _5798_edim0;
          _ptr__5836_ri32[safe_add( _5832_rshape,(int)1 )] = mdim1;
          _ptr__5836_ri32[_5828_rptr] = (int)0;
          if ((_5812_rncodeatom > (int)0))
          {
            {
              _ptr__5836_ri32[_5833_rcodeptr] = (int)0;
            }
          }
          {}
          {
            int32_t _5839_i0 = (int)0;
            int32_t _5840_codei = (int)0;
            int32_t _5841_elmi = (int)0;
            int32_t _5842_nzi = (int)0;
            while ( (_5839_i0 < _5786_nelem) )
            {
              {
                int64_t _5843_erow = (_ptr__5783_wi64[safe_add( _5792_sp,_5839_i0 )] / _5799_edim1);
                int32_t _5844_b0 = _5839_i0;
                ++ _5839_i0;
                while ( ((_5839_i0 < _5786_nelem) && ((_ptr__5783_wi64[safe_add( _5792_sp,_5839_i0 )] / _5799_edim1) == _5843_erow)) )
                {
                  {
                    ++ _5839_i0;
                  }
                }
                int32_t _5845_e0 = _5839_i0;
                int32_t _5846_i1 = (int)0;
                while ( (_5846_i1 < _5800_mnnz) )
                {
                  {
                    int32_t _5847_mcol = ((*msubj)(_ptr__5805_xi32[safe_add( _5803_mperm,_5846_i1 )]));
                    int32_t _5848_b1 = _5846_i1;
                    ++ _5846_i1;
                    while ( ((_5846_i1 < _5800_mnnz) && (((*msubj)(_ptr__5805_xi32[safe_add( _5803_mperm,_5846_i1 )])) == _5847_mcol)) )
                    {
                      {
                        ++ _5846_i1;
                      }
                    }
                    int32_t _5849_e1 = _5846_i1;
                    int32_t _5850_ii1 = _5848_b1;
                    int32_t _5851_ii0 = _5844_b0;
                    bool _5852_hasnz = false;
                    while ( ((_5851_ii0 < _5845_e0) && (_5850_ii1 < _5849_e1)) )
                    {
                      {
                        int32_t _5853_ip1 = _ptr__5805_xi32[safe_add( _5803_mperm,_5850_ii1 )];
                        if (((_ptr__5783_wi64[safe_add( _5792_sp,_5851_ii0 )] % _5799_edim1) < ((*msubi)(_5853_ip1))))
                        {
                          {
                            ++ _5851_ii0;
                          }
                        }
                        else if(((_ptr__5783_wi64[safe_add( _5792_sp,_5851_ii0 )] % _5799_edim1) > ((*msubi)(_5853_ip1))))
                        {
                          {
                            ++ _5850_ii1;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5853_ip1)) > (int)0) || ((int)0 < ((*mval)(_5853_ip1)))))
                            {
                              {
                                int32_t _11562_ = _ptr__5782_wi32[safe_add( _5790_ptr,_5851_ii0 )];
                                int32_t _11563_ = _ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5851_ii0 ),(int)1 )];
                                for (int32_t _5854_k = _11562_; _5854_k < _11563_; ++_5854_k)
                                {
                                  {
                                    _ptr__5837_ri64[safe_add( _5829_ridxs,_5842_nzi )] = _ptr__5783_wi64[safe_add( _5793_nidxs,_5854_k )];
                                    _ptr__5838_rf64[safe_add( _5831_rcof,_5842_nzi )] = (_ptr__5784_wf64[safe_add( _5794_cof,_5854_k )] * ((*mval)(_5853_ip1)));
                                    if ((_5788_ncodeatom > (int)0))
                                    {
                                      {
                                        int32_t _11564_ = _ptr__5782_wi32[safe_add( _5795_codeptr,_5854_k )];
                                        int32_t _11565_ = _ptr__5782_wi32[safe_add( safe_add( _5795_codeptr,_5854_k ),(int)1 )];
                                        for (int32_t _5855_l = _11564_; _5855_l < _11565_; ++_5855_l)
                                        {
                                          {
                                            _ptr__5836_ri32[safe_add( _5834_rcode,_5840_codei )] = _ptr__5782_wi32[safe_add( _5796_code,_5855_l )];
                                            _ptr__5838_rf64[safe_add( _5835_rcconst,_5840_codei )] = _ptr__5784_wf64[safe_add( _5797_cconst,_5855_l )];
                                            ++ _5840_codei;
                                          }
                                        }
                                        _ptr__5836_ri32[safe_add( _5834_rcode,_5840_codei )] = 2;
                                        _ptr__5838_rf64[safe_add( _5835_rcconst,_5840_codei )] = ((*mval)(_5850_ii1));
                                        ++ _5840_codei;
                                        _ptr__5836_ri32[safe_add( _5834_rcode,_5840_codei )] = 5;
                                        ++ _5840_codei;
                                        _ptr__5836_ri32[safe_add( safe_add( _5833_rcodeptr,_5842_nzi ),(int)1 )] = _5840_codei;
                                      }
                                    }
                                    {}
                                    ++ _5842_nzi;
                                  }
                                }
                                _5852_hasnz = true;
                              }
                            }
                            {}
                            ++ _5851_ii0;
                            ++ _5850_ii1;
                          }
                        }
                      }
                    }
                    if (_5852_hasnz)
                    {
                      {
                        _ptr__5836_ri32[safe_add( safe_add( _5828_rptr,_5841_elmi ),(int)1 )] = _5842_nzi;
                        _ptr__5837_ri64[safe_add( _5830_rsp,_5841_elmi )] = safe_add( safe_mul( _5843_erow,mdim1 ),_5847_mcol );
                        ++ _5841_elmi;
                      }
                    }
                    {}
                  }
                }
              }
            }
            if ((_5842_nzi != _5814_rnnz))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_5841_elmi != _5813_rnelem))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_ptr__5836_ri32[safe_add( _5828_rptr,_5813_rnelem )] != _5814_rnnz))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
          }
          if ((!_5827_rhassp))
          {
            {
              _5779_rs->popi64(_5813_rnelem);
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _5856_rncodeatom = (int)0;
          int32_t _5857_rnelem = safe_mul( _5798_edim0,mdim1 );
          int32_t _5858_rnnz = (int)0;
          int32_t _11566_ = (int)0;
          int32_t _11567_ = _5798_edim0;
          for (int32_t _5859_i = _11566_; _5859_i < _11567_; ++_5859_i)
          {
            {
              int32_t _11568_ = (int)0;
              int32_t _11569_ = mdim1;
              for (int32_t _5860_j = _11568_; _5860_j < _11569_; ++_5860_j)
              {
                {
                  int32_t _11570_ = _ptr__5805_xi32[safe_add( _5802_mcolptr,_5860_j )];
                  int32_t _11571_ = _ptr__5805_xi32[safe_add( safe_add( _5802_mcolptr,_5860_j ),(int)1 )];
                  for (int32_t _5861_i1 = _11570_; _5861_i1 < _11571_; ++_5861_i1)
                  {
                    {
                      int32_t _5862_ii1 = _ptr__5805_xi32[safe_add( _5803_mperm,_5861_i1 )];
                      int32_t _5863_i0 = safe_add( safe_mul( _5859_i,_5799_edim1 ),((*msubi)(_5862_ii1)) );
                      _5858_rnnz += (_ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5863_i0 ),(int)1 )] - _ptr__5782_wi32[safe_add( _5790_ptr,_5863_i0 )]);
                      if ((_5788_ncodeatom > (int)0))
                      {
                        {
                          _5856_rncodeatom += safe_add( (_ptr__5782_wi32[safe_add( _5795_codeptr,_ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5863_i0 ),(int)1 )] )] - _ptr__5782_wi32[safe_add( _5795_codeptr,_ptr__5782_wi32[safe_add( _5790_ptr,_5863_i0 )] )]),safe_mul( (int)2,(_ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5863_i0 ),(int)1 )] - _ptr__5782_wi32[safe_add( _5790_ptr,_5863_i0 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          bool _5864_rhassp = (_5857_rnelem < safe_mul( _5798_edim0,mdim1 ));
          if ((!(_5858_rnnz <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
            }
          }
          {}
          _5779_rs->alloc_expr((int)2,_5857_rnelem,(int32_t)_5858_rnnz,_5864_rhassp,_5856_rncodeatom);
          int32_t _5865_rshape = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->shape_base;
          int32_t _5866_rptr = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->ptr_base;
          int32_t _5867_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->nidxs_base;
          int32_t _11572_;
          bool _11573_ = _5864_rhassp;
          if (_11573_)
          {
            _11572_ = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->sp_base;
          }
          else
          {
            _11572_ = _5779_rs->alloci64(_5857_rnelem);
          }
          int32_t _5868_rsp = _11572_;
          int32_t _5869_rcof = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->cof_base;
          int32_t _5870_rcode = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->code_base;
          int32_t _5871_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->codeptr_base;
          int32_t _5872_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->cconst_base;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _5873_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__5873_ri32(_5873_ri32 ? _5873_ri32->raw() : nullptr,_5873_ri32 ? _5873_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _5874_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__5874_ri64(_5874_ri64 ? _5874_ri64->raw() : nullptr,_5874_ri64 ? _5874_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5875_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->f64;
          _checked_ptr_1<double> _ptr__5875_rf64(_5875_rf64 ? _5875_rf64->raw() : nullptr,_5875_rf64 ? _5875_rf64->size(0) : 0);
          _ptr__5873_ri32[_5865_rshape] = _5798_edim0;
          _ptr__5873_ri32[safe_add( _5865_rshape,(int)1 )] = mdim1;
          int32_t _5876_codei = (int)0;
          int32_t _5877_relm = (int)0;
          int32_t _5878_nzi = (int)0;
          _ptr__5873_ri32[_5866_rptr] = (int)0;
          if ((_5856_rncodeatom > (int)0))
          {
            {
              _ptr__5873_ri32[_5871_rcodeptr] = (int)0;
            }
          }
          {}
          int32_t _11574_ = (int)0;
          int32_t _11575_ = _5798_edim0;
          for (int32_t _5879_i = _11574_; _5879_i < _11575_; ++_5879_i)
          {
            {
              int32_t _11576_ = (int)0;
              int32_t _11577_ = mdim1;
              for (int32_t _5880_j = _11576_; _5880_j < _11577_; ++_5880_j)
              {
                {
                  int32_t _5881_b0 = safe_mul( _5879_i,_5799_edim1 );
                  int32_t _11578_ = _ptr__5805_xi32[safe_add( _5802_mcolptr,_5880_j )];
                  int32_t _11579_ = _ptr__5805_xi32[safe_add( safe_add( _5802_mcolptr,_5880_j ),(int)1 )];
                  for (int32_t _5882_i1 = _11578_; _5882_i1 < _11579_; ++_5882_i1)
                  {
                    {
                      int32_t _5883_ii1 = _ptr__5805_xi32[safe_add( _5803_mperm,_5882_i1 )];
                      int32_t _5884_i0 = safe_add( _5881_b0,((*msubi)(_5883_ii1)) );
                      if ((_5856_rncodeatom == (int)0))
                      {
                        {
                          int32_t _11580_ = _ptr__5782_wi32[safe_add( _5790_ptr,_5884_i0 )];
                          int32_t _11581_ = _ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5884_i0 ),(int)1 )];
                          for (int32_t _5885_k = _11580_; _5885_k < _11581_; ++_5885_k)
                          {
                            {
                              _ptr__5874_ri64[safe_add( _5867_rnidxs,_5878_nzi )] = _ptr__5783_wi64[safe_add( _5793_nidxs,_5885_k )];
                              _ptr__5875_rf64[safe_add( _5869_rcof,_5878_nzi )] = (_ptr__5784_wf64[safe_add( _5794_cof,_5885_k )] * ((*mval)(_5883_ii1)));
                              ++ _5878_nzi;
                            }
                          }
                        }
                      }
                      else
                      {
                        {
                          int32_t _11582_ = _ptr__5782_wi32[safe_add( _5790_ptr,_5884_i0 )];
                          int32_t _11583_ = _ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5884_i0 ),(int)1 )];
                          for (int32_t _5886_k = _11582_; _5886_k < _11583_; ++_5886_k)
                          {
                            {
                              _ptr__5874_ri64[safe_add( _5867_rnidxs,_5878_nzi )] = _ptr__5783_wi64[safe_add( _5793_nidxs,_5886_k )];
                              _ptr__5875_rf64[safe_add( _5869_rcof,_5878_nzi )] = (_ptr__5784_wf64[safe_add( _5794_cof,_5886_k )] * ((*mval)(_5883_ii1)));
                              int32_t _11584_ = _ptr__5782_wi32[safe_add( _5795_codeptr,_5886_k )];
                              int32_t _11585_ = _ptr__5782_wi32[safe_add( safe_add( _5795_codeptr,_5886_k ),(int)1 )];
                              for (int32_t _5887_l = _11584_; _5887_l < _11585_; ++_5887_l)
                              {
                                {
                                  _ptr__5873_ri32[safe_add( _5870_rcode,_5876_codei )] = _ptr__5782_wi32[safe_add( _5796_code,_5887_l )];
                                  _ptr__5875_rf64[safe_add( _5872_rcconst,_5876_codei )] = _ptr__5784_wf64[safe_add( _5797_cconst,_5887_l )];
                                  ++ _5876_codei;
                                }
                              }
                              _ptr__5873_ri32[safe_add( _5870_rcode,_5876_codei )] = 2;
                              _ptr__5875_rf64[safe_add( _5872_rcconst,_5876_codei )] = ((*mval)(_5883_ii1));
                              ++ _5876_codei;
                              _ptr__5873_ri32[safe_add( _5870_rcode,_5876_codei )] = 5;
                              ++ _5876_codei;
                              _ptr__5873_ri32[safe_add( safe_add( _5871_rcodeptr,_5878_nzi ),(int)1 )] = _5876_codei;
                              ++ _5878_nzi;
                            }
                          }
                        }
                      }
                    }
                  }
                  _ptr__5873_ri32[safe_add( safe_add( _5866_rptr,_5877_relm ),(int)1 )] = _5878_nzi;
                  _ptr__5874_ri64[safe_add( _5868_rsp,_5877_relm )] = safe_add( safe_mul( _5879_i,mdim1 ),_5880_j );
                  ++ _5877_relm;
                }
              }
            }
          }
          if ((!_5864_rhassp))
          {
            {
              _5779_rs->popi64(_5857_rnelem);
            }
          }
          {}
        }
      }
      _5781_xs->clear();
    }
  }
  else
  {
    {
      int32_t _5888_xrowptr = _5781_xs->alloci32(safe_add( _5798_edim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5889_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5781_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5889_xi32(_5889_xi32 ? _5889_xi32->raw() : nullptr,_5889_xi32 ? _5889_xi32->size(0) : 0);
      int32_t _11586_ = (int)0;
      int32_t _11587_ = safe_add( _5798_edim0,(int)1 );
      for (int32_t _5890_i = _11586_; _5890_i < _11587_; ++_5890_i)
      {
        {
          _ptr__5889_xi32[safe_add( _5888_xrowptr,_5890_i )] = (int)0;
        }
      }
      int64_t _5891_rnnz = safe_mul( (int64_t)_5787_nnz,mdim1 );
      int32_t _5892_rnelem = safe_mul( _5798_edim0,mdim1 );
      int32_t _11588_;
      bool _11589_ = (_5788_ncodeatom == (int)0);
      if (_11589_)
      {
        _11588_ = (int)0;
      }
      else
      {
        _11588_ = safe_mul( (int32_t)_5891_rnnz,(int)2 );
      }
      int32_t _5893_rncodeatom = safe_add( safe_mul( _5788_ncodeatom,mdim1 ),_11588_ );
      bool _5894_rhassp = false;
      int32_t _5895_rnd = (int)2;
      if ((!(_5891_rnnz <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
        }
      }
      {}
      _5779_rs->alloc_expr(_5895_rnd,_5892_rnelem,(int32_t)_5891_rnnz,_5894_rhassp,_5893_rncodeatom);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5896_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__5896_ri32(_5896_ri32 ? _5896_ri32->raw() : nullptr,_5896_ri32 ? _5896_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _5897_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__5897_ri64(_5897_ri64 ? _5897_ri64->raw() : nullptr,_5897_ri64 ? _5897_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5898_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->f64;
      _checked_ptr_1<double> _ptr__5898_rf64(_5898_rf64 ? _5898_rf64->raw() : nullptr,_5898_rf64 ? _5898_rf64->size(0) : 0);
      int32_t _5899_rshape = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->shape_base;
      int32_t _5900_rptr = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->ptr_base;
      int32_t _5901_ridxs = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->nidxs_base;
      int32_t _5902_rsp = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->sp_base;
      int32_t _5903_rcof = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->cof_base;
      int32_t _5904_rcode = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->code_base;
      int32_t _5905_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->codeptr_base;
      int32_t _5906_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5779_rs)->cconst_base;
      _ptr__5896_ri32[_5899_rshape] = _5798_edim0;
      _ptr__5896_ri32[safe_add( _5899_rshape,(int)1 )] = mdim1;
      int32_t _5907_codei = (int)0;
      int32_t _5908_nzi = (int)0;
      int32_t _5909_elmi = (int)0;
      _ptr__5896_ri32[_5900_rptr] = (int)0;
      if ((_5893_rncodeatom > (int)0))
      {
        {
          _ptr__5896_ri32[_5905_rcodeptr] = (int)0;
        }
      }
      {}
      if (_5789_hassp)
      {
        {
          {
            int32_t _11590_ = (int)0;
            int32_t _11591_ = _5786_nelem;
            for (int32_t _5910_i = _11590_; _5910_i < _11591_; ++_5910_i)
            {
              {
                ++ _ptr__5889_xi32[safe_add( safe_add( _5888_xrowptr,(_ptr__5783_wi64[safe_add( _5792_sp,_5910_i )] / _5799_edim1) ),(int)1 )];
              }
            }
            int32_t _11592_ = (int)0;
            int32_t _11593_ = _5798_edim0;
            for (int32_t _5911_i = _11592_; _5911_i < _11593_; ++_5911_i)
            {
              {
                _ptr__5889_xi32[safe_add( safe_add( _5888_xrowptr,_5911_i ),(int)1 )] += _ptr__5889_xi32[safe_add( _5888_xrowptr,_5911_i )];
              }
            }
            int32_t _11594_ = (int)0;
            int32_t _11595_ = _5798_edim0;
            for (int32_t _5912_i = _11594_; _5912_i < _11595_; ++_5912_i)
            {
              {
                int32_t _11596_ = (int)0;
                int32_t _11597_ = mdim1;
                for (int32_t _5913_j = _11596_; _5913_j < _11597_; ++_5913_j)
                {
                  {
                    int32_t _11598_ = _ptr__5889_xi32[safe_add( _5888_xrowptr,_5912_i )];
                    int32_t _11599_ = _ptr__5889_xi32[safe_add( safe_add( _5888_xrowptr,_5912_i ),(int)1 )];
                    for (int32_t _5914_i0 = _11598_; _5914_i0 < _11599_; ++_5914_i0)
                    {
                      {
                        int64_t _5915_ii1 = safe_add( _5913_j,safe_mul( (_ptr__5783_wi64[safe_add( _5792_sp,_5914_i0 )] % _5799_edim1),mdim1 ) );
                        int32_t _11600_ = _ptr__5782_wi32[safe_add( _5790_ptr,_5914_i0 )];
                        int32_t _11601_ = _ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5914_i0 ),(int)1 )];
                        for (int32_t _5916_k = _11600_; _5916_k < _11601_; ++_5916_k)
                        {
                          {
                            _ptr__5897_ri64[safe_add( _5901_ridxs,_5908_nzi )] = _ptr__5783_wi64[safe_add( _5793_nidxs,_5916_k )];
                            _ptr__5898_rf64[safe_add( _5903_rcof,_5908_nzi )] = (_ptr__5784_wf64[safe_add( _5794_cof,_5916_k )] * ((*mval)(_5915_ii1)));
                            if ((_5788_ncodeatom > (int)0))
                            {
                              {
                                int32_t _11602_ = _ptr__5782_wi32[safe_add( _5795_codeptr,_5916_k )];
                                int32_t _11603_ = _ptr__5782_wi32[safe_add( safe_add( _5795_codeptr,_5916_k ),(int)1 )];
                                for (int32_t _5917_l = _11602_; _5917_l < _11603_; ++_5917_l)
                                {
                                  {
                                    _ptr__5896_ri32[safe_add( _5904_rcode,_5907_codei )] = _ptr__5782_wi32[safe_add( _5796_code,_5917_l )];
                                    _ptr__5898_rf64[safe_add( _5906_rcconst,_5907_codei )] = _ptr__5784_wf64[safe_add( _5797_cconst,_5917_l )];
                                    ++ _5907_codei;
                                  }
                                }
                                _ptr__5896_ri32[safe_add( _5904_rcode,_5907_codei )] = 2;
                                _ptr__5898_rf64[safe_add( _5906_rcconst,_5907_codei )] = ((*mval)(_5915_ii1));
                                ++ _5907_codei;
                                _ptr__5896_ri32[safe_add( _5904_rcode,_5907_codei )] = 5;
                                ++ _5907_codei;
                                _ptr__5896_ri32[safe_add( safe_add( _5905_rcodeptr,_5908_nzi ),(int)1 )] = _5907_codei;
                              }
                            }
                            {}
                            ++ _5908_nzi;
                          }
                        }
                      }
                    }
                    _ptr__5896_ri32[safe_add( safe_add( _5900_rptr,_5909_elmi ),(int)1 )] = _5908_nzi;
                    ++ _5909_elmi;
                  }
                }
              }
            }
          }
          if ((_5908_nzi != _5891_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
          if ((_5909_elmi != _5892_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_5907_codei != _5893_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num code atoms"));
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _11604_ = (int)0;
          int32_t _11605_ = _5798_edim0;
          for (int32_t _5918_i = _11604_; _5918_i < _11605_; ++_5918_i)
          {
            {
              int32_t _11606_ = (int)0;
              int32_t _11607_ = mdim1;
              for (int32_t _5919_j = _11606_; _5919_j < _11607_; ++_5919_j)
              {
                {
                  int32_t _11608_ = (int)0;
                  int32_t _11609_ = _5799_edim1;
                  for (int32_t _5920_ii = _11608_; _5920_ii < _11609_; ++_5920_ii)
                  {
                    {
                      int32_t _5921_i0 = safe_add( safe_mul( _5918_i,_5799_edim1 ),_5920_ii );
                      int32_t _5922_ii1 = safe_add( _5919_j,safe_mul( _5920_ii,mdim1 ) );
                      int32_t _11610_ = _ptr__5782_wi32[safe_add( _5790_ptr,_5921_i0 )];
                      int32_t _11611_ = _ptr__5782_wi32[safe_add( safe_add( _5790_ptr,_5921_i0 ),(int)1 )];
                      for (int32_t _5923_k = _11610_; _5923_k < _11611_; ++_5923_k)
                      {
                        {
                          _ptr__5897_ri64[safe_add( _5901_ridxs,_5908_nzi )] = _ptr__5783_wi64[safe_add( _5793_nidxs,_5923_k )];
                          _ptr__5898_rf64[safe_add( _5903_rcof,_5908_nzi )] = (_ptr__5784_wf64[safe_add( _5794_cof,_5923_k )] * ((*mval)(_5922_ii1)));
                          if ((_5788_ncodeatom > (int)0))
                          {
                            {
                              int32_t _11612_ = _ptr__5782_wi32[safe_add( _5795_codeptr,_5923_k )];
                              int32_t _11613_ = _ptr__5782_wi32[safe_add( safe_add( _5795_codeptr,_5923_k ),(int)1 )];
                              for (int32_t _5924_l = _11612_; _5924_l < _11613_; ++_5924_l)
                              {
                                {
                                  _ptr__5896_ri32[safe_add( _5904_rcode,_5907_codei )] = _ptr__5782_wi32[safe_add( _5796_code,_5924_l )];
                                  _ptr__5898_rf64[safe_add( _5906_rcconst,_5907_codei )] = _ptr__5784_wf64[safe_add( _5797_cconst,_5924_l )];
                                  ++ _5907_codei;
                                }
                              }
                              _ptr__5896_ri32[safe_add( _5904_rcode,_5907_codei )] = 2;
                              _ptr__5898_rf64[safe_add( _5906_rcconst,_5907_codei )] = ((*mval)(_5922_ii1));
                              ++ _5907_codei;
                              _ptr__5896_ri32[safe_add( _5904_rcode,_5907_codei )] = 5;
                              ++ _5907_codei;
                              _ptr__5896_ri32[safe_add( safe_add( _5905_rcodeptr,_5908_nzi ),(int)1 )] = _5907_codei;
                            }
                          }
                          {}
                          ++ _5908_nzi;
                        }
                      }
                    }
                  }
                  _ptr__5896_ri32[safe_add( safe_add( _5900_rptr,_5909_elmi ),(int)1 )] = _5908_nzi;
                  ++ _5909_elmi;
                }
              }
            }
          }
        }
      }
      _5781_xs->clear();
    }
  }
}
// End mosek.fusion.ExprMulRight.eval

// Begin mosek.fusion.ExprMulRight.computeshape
// Method mosek.fusion.ExprMulRight.computeshape @ src/fusion/ExprMul.monty:568:6-573:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprMulRight::computeshape(int32_t _5925_d0,std::shared_ptr< monty::ndarray< int32_t,1 > > _5926_ds)
{
  _checked_ptr_1<int32_t> _ptr__5926_ds(_5926_ds ? _5926_ds->raw() : nullptr, _5926_ds ? _5926_ds->size(0) : 0);
  if (((int)((_5926_ds)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_5925_d0)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__5926_ds[(int)0]),(int32_t)(_5925_d0)});
    }
  }
}
// End mosek.fusion.ExprMulRight.computeshape

// Begin mosek.fusion.ExprMulRight.validate
// Method mosek.fusion.ExprMulRight.validate @ src/fusion/ExprMul.monty:495:6-541:7
int32_t mosek::fusion::p_ExprMulRight::validate(int32_t _5927_mdim0,int32_t _5928_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _5929_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _5930_msubj,std::shared_ptr< monty::ndarray< double,1 > > _5931_mval,monty::rc_ptr< ::mosek::fusion::Expression > _5932_expr)
{
  _checked_ptr_1<int32_t> _ptr__5929_msubi(_5929_msubi ? _5929_msubi->raw() : nullptr, _5929_msubi ? _5929_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__5930_msubj(_5930_msubj ? _5930_msubj->raw() : nullptr, _5930_msubj ? _5930_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__5931_mval(_5931_mval ? _5931_mval->raw() : nullptr, _5931_mval ? _5931_mval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5933_eshape = _5932_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__5933_eshape(_5933_eshape ? _5933_eshape->raw() : nullptr,_5933_eshape ? _5933_eshape->size(0) : 0);
  if (((int)((_5933_eshape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _5934_edim0 = _ptr__5933_eshape[(int)0];
  int32_t _5935_edim1 = _ptr__5933_eshape[(int)1];
  if (((_5927_mdim0 < (int)0) || ((_5928_mdim1 < (int)0) || ((_5934_edim0 < (int)0) || (_5935_edim1 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5927_mdim0 != _5935_edim1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5929_msubi)->size(0)) != (int)((_5930_msubj)->size(0))) || ((int)((_5929_msubi)->size(0)) != (int)((_5931_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _5936_mnnz = (int)((_5929_msubi)->size(0));
  {
    bool _5937_err = false;
    int32_t _11614_ = (int)0;
    int32_t _11615_ = _5936_mnnz;
    for (int32_t _5938_i = _11614_; _5938_i < _11615_; ++_5938_i)
    {
      {
        _5937_err = (_5937_err || ((_ptr__5929_msubi[_5938_i] < (int)0) || ((_ptr__5929_msubi[_5938_i] >= _5927_mdim0) || ((_ptr__5930_msubj[_5938_i] < (int)0) || (_ptr__5930_msubj[_5938_i] >= _5928_mdim1)))));
      }
    }
    if (_5937_err)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _5939_err = false;
    int32_t _11616_ = (int)0;
    int32_t _11617_ = (_5936_mnnz - (int)1);
    for (int32_t _5940_i = _11616_; _5940_i < _11617_; ++_5940_i)
    {
      {
        _5939_err = (_5939_err || ((_ptr__5929_msubi[_5940_i] > _ptr__5929_msubi[safe_add( _5940_i,(int)1 )]) || ((_ptr__5929_msubi[_5940_i] == _ptr__5929_msubi[safe_add( _5940_i,(int)1 )]) && (_ptr__5930_msubj[_5940_i] >= _ptr__5930_msubj[safe_add( _5940_i,(int)1 )]))));
      }
    }
    if (_5939_err)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
// End mosek.fusion.ExprMulRight.validate

// Begin mosek.fusion.ExprMulRight.toString
// Method mosek.fusion.ExprMulRight.toString @ src/fusion/ExprMul.monty:491:6-493:7
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulRight::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulRight.toString

void mosek::fusion::p_ExprMulRight::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }
// } class ExprMulRight
// class ExprMulLeft { // @ src/fusion/ExprMul.monty:12:4-469:5
mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }
mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulLeft::p_ExprMulLeft
  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulLeft.ctor @ src/fusion/ExprMul.monty:104:6-123:7
mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft
  (int32_t _5941_mdim0,
    int32_t _5942_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5943_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5944_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5945_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5946_expr,
    int32_t _5947_validated)
{ return new mosek::fusion::ExprMulLeft(_5941_mdim0,_5942_mdim1,_5943_msubi,_5944_msubj,_5945_mval,_5946_expr,_5947_validated); }
mosek::fusion::ExprMulLeft::ExprMulLeft
  (int32_t _5941_mdim0,
    int32_t _5942_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5943_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5944_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5945_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5946_expr,
    int32_t _5947_validated) : 
   ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this))
{ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5941_mdim0,_5942_mdim1,_5943_msubi,_5944_msubj,_5945_mval,_5946_expr,_5947_validated); }
void mosek::fusion::p_ExprMulLeft::_initialize  (int32_t _5941_mdim0,
    int32_t _5942_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5943_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5944_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5945_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5946_expr,
    int32_t _5947_validated)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5943_msubi(_5943_msubi ? _5943_msubi->raw() : nullptr, _5943_msubi ? _5943_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5944_msubj(_5944_msubj ? _5944_msubj->raw() : nullptr, _5944_msubj ? _5944_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5945_mval(_5945_mval ? _5945_mval->raw() : nullptr, _5945_mval ? _5945_mval->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_5941_mdim0,_5942_mdim1,_5946_expr->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _5941_mdim0;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _5942_mdim1;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _5943_msubi;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _5944_msubj;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _5945_mval;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _5946_expr;
  }
}
// mosek.fusion.ExprMulLeft.ctor

// mosek.fusion.ExprMulLeft.ctor @ src/fusion/ExprMul.monty:84:6-94:7
mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft
  (int32_t _5948_mdim0,
    int32_t _5949_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5950_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5951_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5952_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5953_expr)
{ return new mosek::fusion::ExprMulLeft(_5948_mdim0,_5949_mdim1,_5950_msubi,_5951_msubj,_5952_mval,_5953_expr); }
mosek::fusion::ExprMulLeft::ExprMulLeft
  (int32_t _5948_mdim0,
    int32_t _5949_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5950_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5951_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5952_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5953_expr) : 
   ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this))
{ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5948_mdim0,_5949_mdim1,_5950_msubi,_5951_msubj,_5952_mval,_5953_expr); }
void mosek::fusion::p_ExprMulLeft::_initialize  (int32_t _5948_mdim0,
    int32_t _5949_mdim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5950_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _5951_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _5952_mval,
    monty::rc_ptr< ::mosek::fusion::Expression > _5953_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__5950_msubi(_5950_msubi ? _5950_msubi->raw() : nullptr, _5950_msubi ? _5950_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__5951_msubj(_5951_msubj ? _5951_msubj->raw() : nullptr, _5951_msubj ? _5951_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__5952_mval(_5952_mval ? _5952_mval->raw() : nullptr, _5952_mval ? _5952_mval->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_5948_mdim0,_5949_mdim1,_5950_msubi,_5951_msubj,_5952_mval,_5953_expr,::mosek::fusion::p_ExprMulLeft::validate(_5948_mdim0,_5949_mdim1,_5950_msubi,_5951_msubj,_5952_mval,_5953_expr));
  }
}
// mosek.fusion.ExprMulLeft.ctor

// Begin mosek.fusion.ExprMulLeft.eval
// Method mosek.fusion.ExprMulLeft.eval @ src/fusion/ExprMul.monty:125:6-468:7
void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5954_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5955_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5956_xs) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_5954_rs,_5955_ws,_5956_xs); }
void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5954_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _5955_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _5956_xs)
{
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_5955_ws,_5954_rs,_5956_xs);
  _5955_ws->pop_expr();
  int32_t _5957_nd = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->nd;
  int32_t _5958_nnz = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->nnz;
  int32_t _5959_nelem = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->nelem;
  int32_t _5960_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->ncodeatom;
  bool _5961_hassp = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->hassp;
  int32_t _5962_shape = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->shape_base;
  int32_t _5963_ptr = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->ptr_base;
  int32_t _5964_sp = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->sp_base;
  int32_t _5965_nidxs = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->nidxs_base;
  int32_t _5966_cof = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->cof_base;
  int32_t _5967_codeptr = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->codeptr_base;
  int32_t _5968_code = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->code_base;
  int32_t _5969_cconst = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _5970_wi32 = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__5970_wi32(_5970_wi32 ? _5970_wi32->raw() : nullptr,_5970_wi32 ? _5970_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _5971_wi64 = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__5971_wi64(_5971_wi64 ? _5971_wi64->raw() : nullptr,_5971_wi64 ? _5971_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5972_wf64 = mosek::fusion::p_WorkStack::_get_impl(_5955_ws)->f64;
  _checked_ptr_1<double> _ptr__5972_wf64(_5972_wf64 ? _5972_wf64->raw() : nullptr,_5972_wf64 ? _5972_wf64->size(0) : 0);
  if ((_5957_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int32_t _5973_eperm = (int)9999;
  int32_t _5974_esubi = (int)9999;
  int32_t _5975_eptr = (int)9999;
  int32_t _5976_edim0 = _ptr__5970_wi32[_5962_shape];
  int32_t _5977_edim1 = _ptr__5970_wi32[safe_add( _5962_shape,(int)1 )];
  int32_t _5978_mnnz = (int)((msubi)->size(0));
  bool _5979_missp = (_5978_mnnz < safe_mul( (int64_t)mdim0,(int64_t)mdim1 ));
  bool _5980_rhassp = false;
  int32_t _5981_rncodeatom = (int)0;
  int32_t _5982_rnelem = (int)0;
  int64_t _5983_rnnz = (int64_t)0;
  if (_5961_hassp)
  {
    {
      _5973_eperm = _5956_xs->alloci32(_5959_nelem);
      _5974_esubi = _5956_xs->alloci32(_5959_nelem);
      _5975_eptr = _5956_xs->alloci32(safe_add( _5977_edim1,(int)1 ));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _5984_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5956_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__5984_xi32(_5984_xi32 ? _5984_xi32->raw() : nullptr,_5984_xi32 ? _5984_xi32->size(0) : 0);
      {
        int32_t _11618_ = (int)0;
        int32_t _11619_ = safe_add( _5977_edim1,(int)1 );
        for (int32_t _5985_i = _11618_; _5985_i < _11619_; ++_5985_i)
        {
          {
            _ptr__5984_xi32[safe_add( _5975_eptr,_5985_i )] = (int)0;
          }
        }
        int32_t _11620_ = (int)0;
        int32_t _11621_ = _5959_nelem;
        for (int32_t _5986_i = _11620_; _5986_i < _11621_; ++_5986_i)
        {
          {
            ++ _ptr__5984_xi32[safe_add( safe_add( _5975_eptr,(_ptr__5971_wi64[safe_add( _5964_sp,_5986_i )] % _5977_edim1) ),(int)1 )];
          }
        }
        int32_t _11622_ = (int)0;
        int32_t _11623_ = _5977_edim1;
        for (int32_t _5987_i = _11622_; _5987_i < _11623_; ++_5987_i)
        {
          {
            _ptr__5984_xi32[safe_add( safe_add( _5975_eptr,_5987_i ),(int)1 )] += _ptr__5984_xi32[safe_add( _5975_eptr,_5987_i )];
          }
        }
        int32_t _11624_ = (int)0;
        int32_t _11625_ = _5959_nelem;
        for (int32_t _5988_i = _11624_; _5988_i < _11625_; ++_5988_i)
        {
          {
            int64_t _5989_j = (_ptr__5971_wi64[safe_add( _5964_sp,_5988_i )] % _5977_edim1);
            _ptr__5984_xi32[safe_add( _5973_eperm,_ptr__5984_xi32[safe_add( _5975_eptr,_5989_j )] )] = _5988_i;
            ++ _ptr__5984_xi32[safe_add( _5975_eptr,_5989_j )];
          }
        }
        int32_t _11626_ = (int)0;
        int32_t _11627_ = _5977_edim1;
        for (int32_t _5990_i = _11626_; _5990_i < _11627_; ++_5990_i)
        {
          {
            _ptr__5984_xi32[(safe_add( _5975_eptr,_5977_edim1 ) - _5990_i)] = _ptr__5984_xi32[((safe_add( _5975_eptr,_5977_edim1 ) - _5990_i) - (int)1)];
          }
        }
        _ptr__5984_xi32[_5975_eptr] = (int)0;
      }
      if (_5979_missp)
      {
        {
          int32_t _5991_mp = (int)0;
          while ( (_5991_mp < _5978_mnnz) )
          {
            {
              int32_t _5992_i = ((*msubi)(_5991_mp));
              int32_t _5993_me = safe_add( _5991_mp,(int)1 );
              while ( ((_5993_me < _5978_mnnz) && (((*msubi)(_5993_me)) == ((*msubi)(_5991_mp)))) )
              {
                {
                  ++ _5993_me;
                }
              }
              int32_t _11628_ = (int)0;
              int32_t _11629_ = _5977_edim1;
              for (int32_t _5994_j = _11628_; _5994_j < _11629_; ++_5994_j)
              {
                {
                  bool _5995_hasnz = false;
                  int32_t _5996_e0 = _5993_me;
                  int32_t _5997_i0 = _5991_mp;
                  int32_t _5998_ee1 = _ptr__5984_xi32[safe_add( safe_add( _5975_eptr,_5994_j ),(int)1 )];
                  int32_t _5999_ii1 = _ptr__5984_xi32[safe_add( _5975_eptr,_5994_j )];
                  while ( ((_5997_i0 < _5996_e0) && (_5999_ii1 < _5998_ee1)) )
                  {
                    {
                      int32_t _6000_i1 = _ptr__5984_xi32[safe_add( _5973_eperm,_5999_ii1 )];
                      if ((((*msubj)(_5997_i0)) < (_ptr__5971_wi64[safe_add( _5964_sp,_6000_i1 )] / _5977_edim1)))
                      {
                        {
                          ++ _5997_i0;
                        }
                      }
                      else if((((*msubj)(_5997_i0)) > (_ptr__5971_wi64[safe_add( _5964_sp,_6000_i1 )] / _5977_edim1)))
                      {
                        {
                          ++ _5999_ii1;
                        }
                      }
                      else
                      {
                        {
                          _5995_hasnz = true;
                          _5983_rnnz += (_ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6000_i1 ),(int)1 )] - _ptr__5970_wi32[safe_add( _5963_ptr,_6000_i1 )]);
                          if ((_5960_ncodeatom > (int)0))
                          {
                            {
                              _5981_rncodeatom += safe_add( (_ptr__5970_wi32[safe_add( _5967_codeptr,_ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6000_i1 ),(int)1 )] )] - _ptr__5970_wi32[safe_add( _5967_codeptr,_ptr__5970_wi32[safe_add( _5963_ptr,_6000_i1 )] )]),safe_mul( (int)2,(_ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6000_i1 ),(int)1 )] - _ptr__5970_wi32[safe_add( _5963_ptr,_6000_i1 )]) ) );
                            }
                          }
                          {}
                          ++ _5999_ii1;
                          ++ _5997_i0;
                        }
                      }
                    }
                  }
                  if (_5995_hasnz)
                  {
                    {
                      ++ _5982_rnelem;
                    }
                  }
                  {}
                }
              }
              _5991_mp = _5993_me;
            }
          }
        }
      }
      else
      {
        {
          _5982_rnelem = safe_mul( mdim0,_5977_edim1 );
          _5983_rnnz = safe_mul( (int64_t)_5958_nnz,mdim0 );
          if ((_5960_ncodeatom > (int)0))
          {
            {
              _5981_rncodeatom = (int32_t)safe_add( safe_mul( _5960_ncodeatom,mdim0 ),safe_mul( (int)2,_5983_rnnz ) );
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      if (_5979_missp)
      {
        {
          int32_t _6001_mp = (int)0;
          while ( (_6001_mp < _5978_mnnz) )
          {
            {
              int32_t _6002_me = safe_add( _6001_mp,(int)1 );
              while ( ((_6002_me < _5978_mnnz) && (((*msubi)(_6001_mp)) == ((*msubi)(_6002_me)))) )
              {
                {
                  ++ _6002_me;
                }
              }
              int32_t _6003_i = ((*msubi)(_6001_mp));
              int32_t _11630_ = (int)0;
              int32_t _11631_ = _5977_edim1;
              for (int32_t _6004_j = _11630_; _6004_j < _11631_; ++_6004_j)
              {
                {
                  bool _6005_hasnz = false;
                  int32_t _11632_ = _6001_mp;
                  int32_t _11633_ = _6002_me;
                  for (int32_t _6006_i0 = _11632_; _6006_i0 < _11633_; ++_6006_i0)
                  {
                    {
                      int32_t _6007_i1 = safe_add( safe_mul( ((*msubj)(_6006_i0)),_5977_edim1 ),_6004_j );
                      _5983_rnnz += (_ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6007_i1 ),(int)1 )] - _ptr__5970_wi32[safe_add( _5963_ptr,_6007_i1 )]);
                      if ((_5960_ncodeatom > (int)0))
                      {
                        {
                          _5981_rncodeatom += safe_add( (_ptr__5970_wi32[safe_add( _5967_codeptr,_ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6007_i1 ),(int)1 )] )] - _ptr__5970_wi32[safe_add( _5967_codeptr,_ptr__5970_wi32[safe_add( _5963_ptr,_6007_i1 )] )]),safe_mul( (int)2,(_ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6007_i1 ),(int)1 )] - _ptr__5970_wi32[safe_add( _5963_ptr,_6007_i1 )]) ) );
                        }
                      }
                      {}
                      _6005_hasnz = true;
                    }
                  }
                  if (_6005_hasnz)
                  {
                    {
                      ++ _5982_rnelem;
                    }
                  }
                  {}
                }
              }
              _6001_mp = _6002_me;
            }
          }
        }
      }
      else
      {
        {
          _5983_rnnz = safe_mul( (int64_t)_5958_nnz,mdim0 );
          if ((_5960_ncodeatom > (int)0))
          {
            {
              _5981_rncodeatom = (int32_t)safe_add( safe_mul( _5960_ncodeatom,mdim0 ),safe_mul( (int)2,_5983_rnnz ) );
            }
          }
          {}
          _5982_rnelem = safe_mul( mdim0,_5977_edim1 );
        }
      }
    }
  }
  if ((!(_5983_rnnz <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
    }
  }
  {}
  _5980_rhassp = (_5982_rnelem < safe_mul( mdim0,_5977_edim1 ));
  int32_t _6008_rnd = (int)2;
  _5954_rs->alloc_expr(_6008_rnd,_5982_rnelem,(int32_t)_5983_rnnz,_5980_rhassp,_5981_rncodeatom);
  int32_t _6009_rptr = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->ptr_base;
  int32_t _6010_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->nidxs_base;
  int32_t _11634_;
  bool _11635_ = _5980_rhassp;
  if (_11635_)
  {
    _11634_ = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->sp_base;
  }
  else
  {
    _11634_ = _5954_rs->alloci64(_5982_rnelem);
  }
  int32_t _6011_rsp = _11634_;
  int32_t _6012_rcof = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->cof_base;
  int32_t _6013_rshape = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->shape_base;
  int32_t _6014_rcode = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->code_base;
  int32_t _6015_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->codeptr_base;
  int32_t _6016_rcconst = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6017_ri64 = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6017_ri64(_6017_ri64 ? _6017_ri64->raw() : nullptr,_6017_ri64 ? _6017_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6018_rf64 = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->f64;
  _checked_ptr_1<double> _ptr__6018_rf64(_6018_rf64 ? _6018_rf64->raw() : nullptr,_6018_rf64 ? _6018_rf64->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6019_ri32 = mosek::fusion::p_WorkStack::_get_impl(_5954_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6019_ri32(_6019_ri32 ? _6019_ri32->raw() : nullptr,_6019_ri32 ? _6019_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6020_xi32 = mosek::fusion::p_WorkStack::_get_impl(_5956_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6020_xi32(_6020_xi32 ? _6020_xi32->raw() : nullptr,_6020_xi32 ? _6020_xi32->size(0) : 0);
  _ptr__6019_ri32[_6013_rshape] = mdim0;
  _ptr__6019_ri32[safe_add( _6013_rshape,(int)1 )] = _5977_edim1;
  _ptr__6019_ri32[_6009_rptr] = (int)0;
  if ((_5981_rncodeatom > (int)0))
  {
    {
      _ptr__6019_ri32[_6015_rcodeptr] = (int)0;
    }
  }
  {}
  if (_5961_hassp)
  {
    {
      if (_5979_missp)
      {
        {
          int32_t _6021_codei = (int)0;
          int32_t _6022_relm = (int)0;
          int32_t _6023_nzi = (int)0;
          int32_t _6024_mp = (int)0;
          while ( (_6024_mp < _5978_mnnz) )
          {
            {
              int32_t _6025_i = ((*msubi)(_6024_mp));
              int32_t _6026_me = safe_add( _6024_mp,(int)1 );
              while ( ((_6026_me < _5978_mnnz) && (((*msubi)(_6026_me)) == ((*msubi)(_6024_mp)))) )
              {
                {
                  ++ _6026_me;
                }
              }
              int32_t _11636_ = (int)0;
              int32_t _11637_ = _5977_edim1;
              for (int32_t _6027_j = _11636_; _6027_j < _11637_; ++_6027_j)
              {
                {
                  bool _6028_hasnz = false;
                  int32_t _6029_e0 = _6026_me;
                  int32_t _6030_i0 = _6024_mp;
                  int32_t _6031_ee1 = _ptr__6020_xi32[safe_add( safe_add( _5975_eptr,_6027_j ),(int)1 )];
                  int32_t _6032_ii1 = _ptr__6020_xi32[safe_add( _5975_eptr,_6027_j )];
                  while ( ((_6030_i0 < _6029_e0) && (_6032_ii1 < _6031_ee1)) )
                  {
                    {
                      int32_t _6033_i1 = _ptr__6020_xi32[safe_add( _5973_eperm,_6032_ii1 )];
                      if ((((*msubj)(_6030_i0)) < (_ptr__5971_wi64[safe_add( _5964_sp,_6033_i1 )] / _5977_edim1)))
                      {
                        {
                          ++ _6030_i0;
                        }
                      }
                      else if((((*msubj)(_6030_i0)) > (_ptr__5971_wi64[safe_add( _5964_sp,_6033_i1 )] / _5977_edim1)))
                      {
                        {
                          ++ _6032_ii1;
                        }
                      }
                      else
                      {
                        {
                          _6028_hasnz = true;
                          int32_t _11638_ = _ptr__5970_wi32[safe_add( _5963_ptr,_6033_i1 )];
                          int32_t _11639_ = _ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6033_i1 ),(int)1 )];
                          for (int32_t _6034_k = _11638_; _6034_k < _11639_; ++_6034_k)
                          {
                            {
                              _ptr__6017_ri64[safe_add( _6010_rnidxs,_6023_nzi )] = _ptr__5971_wi64[safe_add( _5965_nidxs,_6034_k )];
                              _ptr__6018_rf64[safe_add( _6012_rcof,_6023_nzi )] = (_ptr__5972_wf64[safe_add( _5966_cof,_6034_k )] * ((*mval)(_6030_i0)));
                              if ((_5981_rncodeatom > (int)0))
                              {
                                {
                                  int32_t _11640_ = _ptr__5970_wi32[safe_add( _5967_codeptr,_6034_k )];
                                  int32_t _11641_ = _ptr__5970_wi32[safe_add( safe_add( _5967_codeptr,_6034_k ),(int)1 )];
                                  for (int32_t _6035_l = _11640_; _6035_l < _11641_; ++_6035_l)
                                  {
                                    {
                                      _ptr__6019_ri32[safe_add( _6014_rcode,_6021_codei )] = _ptr__5970_wi32[safe_add( _5968_code,_6035_l )];
                                      _ptr__6018_rf64[safe_add( _6016_rcconst,_6021_codei )] = _ptr__6018_rf64[safe_add( _5969_cconst,_6035_l )];
                                      ++ _6021_codei;
                                    }
                                  }
                                  _ptr__6019_ri32[safe_add( _6014_rcode,_6021_codei )] = 2;
                                  _ptr__6018_rf64[safe_add( _6016_rcconst,_6021_codei )] = ((*mval)(_6030_i0));
                                  ++ _6021_codei;
                                  _ptr__6019_ri32[safe_add( _6014_rcode,_6021_codei )] = 5;
                                  _ptr__6019_ri32[safe_add( safe_add( _6015_rcodeptr,_6023_nzi ),(int)1 )] = _6021_codei;
                                }
                              }
                              {}
                              ++ _6023_nzi;
                            }
                          }
                          ++ _6030_i0;
                          ++ _6032_ii1;
                        }
                      }
                    }
                  }
                  if (_6028_hasnz)
                  {
                    {
                      _ptr__6019_ri32[safe_add( safe_add( _6009_rptr,_6022_relm ),(int)1 )] = _6023_nzi;
                      _ptr__6017_ri64[safe_add( _6011_rsp,_6022_relm )] = safe_add( safe_mul( _6025_i,_5977_edim1 ),_6027_j );
                      ++ _6022_relm;
                    }
                  }
                  {}
                }
              }
              _6024_mp = _6026_me;
            }
          }
        }
      }
      else
      {
        {
          int32_t _6036_codei = (int)0;
          int32_t _6037_elmi = (int)0;
          int32_t _6038_nzi = (int)0;
          int32_t _11642_ = (int)0;
          int32_t _11643_ = mdim0;
          for (int32_t _6039_i = _11642_; _6039_i < _11643_; ++_6039_i)
          {
            {
              int32_t _11644_ = (int)0;
              int32_t _11645_ = _5977_edim1;
              for (int32_t _6040_j = _11644_; _6040_j < _11645_; ++_6040_j)
              {
                {
                  int32_t _11646_ = _ptr__6020_xi32[safe_add( _5975_eptr,_6040_j )];
                  int32_t _11647_ = _ptr__6020_xi32[safe_add( safe_add( _5975_eptr,_6040_j ),(int)1 )];
                  for (int32_t _6041_ii1 = _11646_; _6041_ii1 < _11647_; ++_6041_ii1)
                  {
                    {
                      int32_t _6042_i1 = _ptr__6020_xi32[safe_add( _5973_eperm,_6041_ii1 )];
                      int64_t _6043_i0 = safe_add( safe_mul( _6039_i,mdim1 ),(_ptr__5971_wi64[safe_add( _5964_sp,_6042_i1 )] / _5977_edim1) );
                      int32_t _11648_ = _ptr__5970_wi32[safe_add( _5963_ptr,_6042_i1 )];
                      int32_t _11649_ = _ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6042_i1 ),(int)1 )];
                      for (int32_t _6044_k = _11648_; _6044_k < _11649_; ++_6044_k)
                      {
                        {
                          _ptr__6017_ri64[safe_add( _6010_rnidxs,_6038_nzi )] = _ptr__5971_wi64[safe_add( _5965_nidxs,_6044_k )];
                          _ptr__6018_rf64[safe_add( _6012_rcof,_6038_nzi )] = (_ptr__5972_wf64[safe_add( _5966_cof,_6044_k )] * ((*mval)(_6043_i0)));
                          if ((_5981_rncodeatom > (int)0))
                          {
                            {
                              int32_t _11650_ = _ptr__5970_wi32[safe_add( _5967_codeptr,_6044_k )];
                              int32_t _11651_ = _ptr__5970_wi32[safe_add( safe_add( _5967_codeptr,_6044_k ),(int)1 )];
                              for (int32_t _6045_l = _11650_; _6045_l < _11651_; ++_6045_l)
                              {
                                {
                                  _ptr__6019_ri32[safe_add( _6014_rcode,_6036_codei )] = _ptr__5970_wi32[safe_add( _5968_code,_6045_l )];
                                  _ptr__6018_rf64[safe_add( _6016_rcconst,_6036_codei )] = _ptr__5972_wf64[safe_add( _5969_cconst,_6045_l )];
                                  ++ _6036_codei;
                                }
                              }
                              _ptr__6019_ri32[safe_add( _6014_rcode,_6036_codei )] = 2;
                              _ptr__6018_rf64[safe_add( _6016_rcconst,_6036_codei )] = ((*mval)(_6043_i0));
                              ++ _6036_codei;
                              _ptr__6019_ri32[safe_add( _6014_rcode,_6036_codei )] = 5;
                              ++ _6036_codei;
                              _ptr__6019_ri32[safe_add( safe_add( _6015_rcodeptr,_6038_nzi ),(int)1 )] = _6036_codei;
                            }
                          }
                          {}
                          ++ _6038_nzi;
                        }
                      }
                    }
                  }
                  _ptr__6019_ri32[safe_add( safe_add( _6009_rptr,_6037_elmi ),(int)1 )] = _6038_nzi;
                  ++ _6037_elmi;
                }
              }
            }
          }
          if ((_6037_elmi != _5982_rnelem))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
            }
          }
          {}
          if ((_6038_nzi != _5983_rnnz))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
            }
          }
          {}
          if ((_6036_codei != _5981_rncodeatom))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int32_t _6046_codei = (int)0;
      int32_t _6047_mp = (int)0;
      int32_t _6048_elmi = (int)0;
      int32_t _6049_nzi = (int)0;
      while ( (_6047_mp < _5978_mnnz) )
      {
        {
          int32_t _6050_me = safe_add( _6047_mp,(int)1 );
          while ( ((_6050_me < _5978_mnnz) && (((*msubi)(_6047_mp)) == ((*msubi)(_6050_me)))) )
          {
            {
              ++ _6050_me;
            }
          }
          int32_t _6051_i = ((*msubi)(_6047_mp));
          int32_t _11652_ = (int)0;
          int32_t _11653_ = _5977_edim1;
          for (int32_t _6052_j = _11652_; _6052_j < _11653_; ++_6052_j)
          {
            {
              bool _6053_hasnz = false;
              int32_t _11654_ = _6047_mp;
              int32_t _11655_ = _6050_me;
              for (int32_t _6054_i0 = _11654_; _6054_i0 < _11655_; ++_6054_i0)
              {
                {
                  int32_t _6055_i1 = safe_add( safe_mul( ((*msubj)(_6054_i0)),_5977_edim1 ),_6052_j );
                  int32_t _11656_ = _ptr__5970_wi32[safe_add( _5963_ptr,_6055_i1 )];
                  int32_t _11657_ = _ptr__5970_wi32[safe_add( safe_add( _5963_ptr,_6055_i1 ),(int)1 )];
                  for (int32_t _6056_j = _11656_; _6056_j < _11657_; ++_6056_j)
                  {
                    {
                      _ptr__6017_ri64[safe_add( _6010_rnidxs,_6049_nzi )] = _ptr__5971_wi64[safe_add( _5965_nidxs,_6056_j )];
                      _ptr__6018_rf64[safe_add( _6012_rcof,_6049_nzi )] = (_ptr__5972_wf64[safe_add( _5966_cof,_6056_j )] * ((*mval)(_6054_i0)));
                      if ((_5981_rncodeatom > (int)0))
                      {
                        {
                          int32_t _11658_ = _ptr__5970_wi32[safe_add( _5967_codeptr,_6056_j )];
                          int32_t _11659_ = _ptr__5970_wi32[safe_add( safe_add( _5967_codeptr,_6056_j ),(int)1 )];
                          for (int32_t _6057_k = _11658_; _6057_k < _11659_; ++_6057_k)
                          {
                            {
                              _ptr__6019_ri32[safe_add( _6014_rcode,_6046_codei )] = _ptr__5970_wi32[safe_add( _5968_code,_6057_k )];
                              _ptr__6018_rf64[safe_add( _6016_rcconst,_6046_codei )] = _ptr__5972_wf64[safe_add( _5969_cconst,_6057_k )];
                              ++ _6046_codei;
                            }
                          }
                          _ptr__6019_ri32[safe_add( _6014_rcode,_6046_codei )] = 2;
                          _ptr__6018_rf64[safe_add( _6016_rcconst,_6046_codei )] = ((*mval)(_6054_i0));
                          ++ _6046_codei;
                          _ptr__6019_ri32[safe_add( _6014_rcode,_6046_codei )] = 5;
                          ++ _6046_codei;
                          _ptr__6019_ri32[safe_add( safe_add( _6015_rcodeptr,_6049_nzi ),(int)1 )] = _6046_codei;
                        }
                      }
                      {}
                      ++ _6049_nzi;
                    }
                  }
                  _6053_hasnz = true;
                }
              }
              if (_6053_hasnz)
              {
                {
                  _ptr__6017_ri64[safe_add( _6011_rsp,_6048_elmi )] = safe_add( safe_mul( _6051_i,_5977_edim1 ),_6052_j );
                  _ptr__6019_ri32[safe_add( safe_add( _6009_rptr,_6048_elmi ),(int)1 )] = _6049_nzi;
                  ++ _6048_elmi;
                }
              }
              {}
            }
          }
          _6047_mp = _6050_me;
        }
      }
      if ((_6048_elmi != _5982_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
        }
      }
      {}
      if ((_6049_nzi != _5983_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
        }
      }
      {}
      if ((_6046_codei != _5981_rncodeatom))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
        }
      }
      {}
    }
  }
  if ((!_5980_rhassp))
  {
    {
      _5954_rs->popi64(_5982_rnelem);
    }
  }
  {}
  _5956_xs->clear();
}
// End mosek.fusion.ExprMulLeft.eval

// Begin mosek.fusion.ExprMulLeft.computeshape
// Method mosek.fusion.ExprMulLeft.computeshape @ src/fusion/ExprMul.monty:96:6-102:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int32_t _6058_d0,int32_t _6059_d1,std::shared_ptr< monty::ndarray< int32_t,1 > > _6060_ds)
{
  _checked_ptr_1<int32_t> _ptr__6060_ds(_6060_ds ? _6060_ds->raw() : nullptr, _6060_ds ? _6060_ds->size(0) : 0);
  if (((int)((_6060_ds)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_6059_d1 != _ptr__6060_ds[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6058_d0),(int32_t)(_ptr__6060_ds[(int)1])});
}
// End mosek.fusion.ExprMulLeft.computeshape

// Begin mosek.fusion.ExprMulLeft.validate
// Method mosek.fusion.ExprMulLeft.validate @ src/fusion/ExprMul.monty:27:6-68:7
int32_t mosek::fusion::p_ExprMulLeft::validate(int32_t _6061_mdim0,int32_t _6062_mdim1,std::shared_ptr< monty::ndarray< int32_t,1 > > _6063_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _6064_msubj,std::shared_ptr< monty::ndarray< double,1 > > _6065_mval,monty::rc_ptr< ::mosek::fusion::Expression > _6066_expr)
{
  _checked_ptr_1<int32_t> _ptr__6063_msubi(_6063_msubi ? _6063_msubi->raw() : nullptr, _6063_msubi ? _6063_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__6064_msubj(_6064_msubj ? _6064_msubj->raw() : nullptr, _6064_msubj ? _6064_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__6065_mval(_6065_mval ? _6065_mval->raw() : nullptr, _6065_mval ? _6065_mval->size(0) : 0);
  if ((_6066_expr->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int32_t _6067_edim0 = _6066_expr->getDim((int)0);
  int32_t _6068_edim1 = _6066_expr->getDim((int)0);
  if (((_6061_mdim0 < (int)0) || (_6062_mdim1 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_6062_mdim1 != _6067_edim0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_6063_msubi)->size(0)) != (int)((_6064_msubj)->size(0))) || ((int)((_6063_msubi)->size(0)) != (int)((_6065_mval)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int32_t _6069_mnnz = (int)((_6063_msubi)->size(0));
  bool _6070_err_data = false;
  bool _6071_err_unsorted = false;
  {
    int32_t _11660_ = (int)0;
    int32_t _11661_ = _6069_mnnz;
    for (int32_t _6072_i = _11660_; _6072_i < _11661_; ++_6072_i)
    {
      {
        _6070_err_data = (_6070_err_data || ((_ptr__6063_msubi[_6072_i] < (int)0) || ((_ptr__6063_msubi[_6072_i] >= _6061_mdim0) || ((_ptr__6064_msubj[_6072_i] < (int)0) || (_ptr__6064_msubj[_6072_i] >= _6062_mdim1)))));
      }
    }
    if ((!_6070_err_data))
    {
      {
        int32_t _11662_ = (int)0;
        int32_t _11663_ = (_6069_mnnz - (int)1);
        for (int32_t _6073_i = _11662_; _6073_i < _11663_; ++_6073_i)
        {
          {
            _6071_err_unsorted = (_6071_err_unsorted || ((_ptr__6063_msubi[_6073_i] > _ptr__6063_msubi[safe_add( _6073_i,(int)1 )]) || ((_ptr__6063_msubi[_6073_i] == _ptr__6063_msubi[safe_add( _6073_i,(int)1 )]) && (_ptr__6064_msubj[_6073_i] >= _ptr__6064_msubj[safe_add( _6073_i,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_6070_err_data)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_6071_err_unsorted)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
// End mosek.fusion.ExprMulLeft.validate

// Begin mosek.fusion.ExprMulLeft.toString
// Method mosek.fusion.ExprMulLeft.toString @ src/fusion/ExprMul.monty:23:6-25:7
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulLeft::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulLeft.toString

void mosek::fusion::p_ExprMulLeft::destroy()
{
  expr.reset();
  mval.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }
// } class ExprMulLeft
// class ExprMulVar { // @ src/fusion/ExprMulVar.monty:170:4-746:5
mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }
mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulVar::p_ExprMulVar
  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulVar.ctor @ src/fusion/ExprMulVar.monty:248:6-276:7
mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar
  (bool _6074_left,
    int32_t _6075_mdimi,
    int32_t _6076_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6077_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6078_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6079_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6080_x)
{ return new mosek::fusion::ExprMulVar(_6074_left,_6075_mdimi,_6076_mdimj,_6077_msubi,_6078_msubj,_6079_mcof,_6080_x); }
mosek::fusion::ExprMulVar::ExprMulVar
  (bool _6074_left,
    int32_t _6075_mdimi,
    int32_t _6076_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6077_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6078_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6079_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6080_x) : 
   ExprMulVar(new mosek::fusion::p_ExprMulVar(this))
{ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_6074_left,_6075_mdimi,_6076_mdimj,_6077_msubi,_6078_msubj,_6079_mcof,_6080_x); }
void mosek::fusion::p_ExprMulVar::_initialize  (bool _6074_left,
    int32_t _6075_mdimi,
    int32_t _6076_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6077_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6078_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6079_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6080_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6077_msubi(_6077_msubi ? _6077_msubi->raw() : nullptr, _6077_msubi ? _6077_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6078_msubj(_6078_msubj ? _6078_msubj->raw() : nullptr, _6078_msubj ? _6078_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6079_mcof(_6079_mcof ? _6079_mcof->raw() : nullptr, _6079_mcof ? _6079_mcof->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_6074_left,_6075_mdimi,_6076_mdimj,_6077_msubi,_6078_msubj,_6079_mcof,_6080_x,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6081_xshape = _6080_x->getShape();
    _checked_ptr_1<int32_t> _ptr__6081_xshape(_6081_xshape ? _6081_xshape->raw() : nullptr,_6081_xshape ? _6081_xshape->size(0) : 0);
    int32_t _6082_nd = (int)((_6081_xshape)->size(0));
    if ((_6082_nd != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_6074_left && (_ptr__6081_xshape[(int)0] != _6076_mdimj)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_6074_left) && (_ptr__6081_xshape[(int)1] != _6075_mdimi)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_6077_msubi)->size(0)) != (int)((_6078_msubj)->size(0))) || ((int)((_6077_msubi)->size(0)) != (int)((_6079_mcof)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_6075_mdimi,_6076_mdimj,_6077_msubi,_6078_msubj,_6079_mcof);
  }
}
// mosek.fusion.ExprMulVar.ctor

// mosek.fusion.ExprMulVar.ctor @ src/fusion/ExprMulVar.monty:196:6-220:7
mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar
  (bool _6083_left,
    int32_t _6084_mdimi,
    int32_t _6085_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6086_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6087_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6088_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6089_x,
    int32_t _6090_unchecked_)
{ return new mosek::fusion::ExprMulVar(_6083_left,_6084_mdimi,_6085_mdimj,_6086_msubi,_6087_msubj,_6088_mcof,_6089_x,_6090_unchecked_); }
mosek::fusion::ExprMulVar::ExprMulVar
  (bool _6083_left,
    int32_t _6084_mdimi,
    int32_t _6085_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6086_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6087_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6088_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6089_x,
    int32_t _6090_unchecked_) : 
   ExprMulVar(new mosek::fusion::p_ExprMulVar(this))
{ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_6083_left,_6084_mdimi,_6085_mdimj,_6086_msubi,_6087_msubj,_6088_mcof,_6089_x,_6090_unchecked_); }
void mosek::fusion::p_ExprMulVar::_initialize  (bool _6083_left,
    int32_t _6084_mdimi,
    int32_t _6085_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6086_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6087_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6088_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6089_x,
    int32_t _6090_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6086_msubi(_6086_msubi ? _6086_msubi->raw() : nullptr, _6086_msubi ? _6086_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6087_msubj(_6087_msubj ? _6087_msubj->raw() : nullptr, _6087_msubj ? _6087_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6088_mcof(_6088_mcof ? _6088_mcof->raw() : nullptr, _6088_mcof ? _6088_mcof->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_6084_mdimi,_6085_mdimj,_6089_x->getShape(),_6083_left));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _6083_left;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _6089_x;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _6084_mdimi;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _6085_mdimj;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_6086_msubi);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_6087_msubj);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_6088_mcof);
  }
}
// mosek.fusion.ExprMulVar.ctor

// Begin mosek.fusion.ExprMulVar.eval
// Method mosek.fusion.ExprMulVar.eval @ src/fusion/ExprMulVar.monty:740:6-745:7
void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6091_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6092_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6093_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_6091_rs,_6092_ws,_6093_xs); }
void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6091_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6092_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6093_xs)
{
  if (left)
  {
    {
      _pubthis->eval_left(_6091_rs,_6092_ws,_6093_xs);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_6091_rs,_6092_ws,_6093_xs);
    }
  }
}
// End mosek.fusion.ExprMulVar.eval

// Begin mosek.fusion.ExprMulVar.eval_right
// Method mosek.fusion.ExprMulVar.eval_right @ src/fusion/ExprMulVar.monty:460:6-737:7
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _6094_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6095_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6096_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_6094_rs,_6095_ws,_6096_xs); }
void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _6094_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6095_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6096_xs)
{
  int32_t _6097_base_pi32 = mosek::fusion::p_WorkStack::_get_impl(_6095_ws)->pi32;
  int32_t _6098_base_pi64 = mosek::fusion::p_WorkStack::_get_impl(_6095_ws)->pi64;
  int32_t _6099_nx = x->numInst();
  int32_t _6100_nidxs = _6095_ws->alloci64(_6099_nx);
  int32_t _6101_sp = _6095_ws->alloci64(_6099_nx);
  int32_t _6102_xsubi = _6095_ws->alloci32(_6099_nx);
  int32_t _6103_xsubj = _6095_ws->alloci32(_6099_nx);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6104_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6104_xshape(_6104_xshape ? _6104_xshape->raw() : nullptr,_6104_xshape ? _6104_xshape->size(0) : 0);
  int32_t _6105_nd = (int)((_6104_xshape)->size(0));
  int64_t _6106_x_total_size = safe_mul( _ptr__6104_xshape[(int)0],_ptr__6104_xshape[(int)1] );
  int32_t _6107_xdim1 = _ptr__6104_xshape[(int)1];
  int32_t _6108_xdim0 = _ptr__6104_xshape[(int)0];
  int32_t _6109_ptr = _6095_ws->alloci32(safe_add( _6108_xdim0,(int)1 ));
  int32_t _6110_numm = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6111_msubi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int32_t> _ptr__6111_msubi(_6111_msubi ? _6111_msubi->raw() : nullptr,_6111_msubi ? _6111_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6112_msubj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int32_t> _ptr__6112_msubj(_6112_msubj ? _6112_msubj->raw() : nullptr,_6112_msubj ? _6112_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6113_mcof = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__6113_mcof(_6113_mcof ? _6113_mcof->raw() : nullptr,_6113_mcof ? _6113_mcof->size(0) : 0);
  int32_t _6114_mdim0 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int32_t _6115_mdim1 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _6116_m_is_dense = ((_6110_numm / _6114_mdim0) == _6115_mdim1);
  int32_t _6117_perm = _6095_ws->alloci32(_6110_numm);
  int32_t _6118_mptr = _6095_ws->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6119_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6095_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6119_wi32(_6119_wi32 ? _6119_wi32->raw() : nullptr,_6119_wi32 ? _6119_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6120_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6095_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6120_wi64(_6120_wi64 ? _6120_wi64->raw() : nullptr,_6120_wi64 ? _6120_wi64->size(0) : 0);
  int32_t _6121_nnz = (int)0;
  int32_t _6122_nelem = (int)0;
  x->inst(_6101_sp,_6120_wi64,_6100_nidxs,_6120_wi64);
  if (_6116_m_is_dense)
  {
    {
      int32_t _6123_x_num_nonempty_rows = (int)0;
      if ((_6099_nx > (int)0))
      {
        {
          _6123_x_num_nonempty_rows = (int)1;
          if ((_6108_xdim0 > (int)1))
          {
            {
              if ((_6107_xdim1 == (int)1))
              {
                {
                  int32_t _11664_ = (int)1;
                  int32_t _11665_ = _6099_nx;
                  for (int32_t _6124_i = _11664_; _6124_i < _11665_; ++_6124_i)
                  {
                    {
                      if ((_ptr__6120_wi64[safe_add( _6101_sp,_6124_i )] > _ptr__6120_wi64[(safe_add( _6101_sp,_6124_i ) - (int)1)]))
                      {
                        {
                          ++ _6123_x_num_nonempty_rows;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int32_t _11666_ = (int)1;
                  int32_t _11667_ = _6099_nx;
                  for (int32_t _6125_i = _11666_; _6125_i < _11667_; ++_6125_i)
                  {
                    {
                      if (((_ptr__6120_wi64[safe_add( _6101_sp,_6125_i )] / _6107_xdim1) > (_ptr__6120_wi64[(safe_add( _6101_sp,_6125_i ) - (int)1)] / _6107_xdim1)))
                      {
                        {
                          ++ _6123_x_num_nonempty_rows;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _6122_nelem = safe_mul( _6123_x_num_nonempty_rows,_6115_mdim1 );
      _6121_nnz = safe_mul( _6099_nx,_6115_mdim1 );
      bool _6126_hassp = (_6123_x_num_nonempty_rows < _6108_xdim0);
      _6094_rs->alloc_expr((int)2,_6122_nelem,_6121_nnz,_6126_hassp);
      int32_t _6127_rptr = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->ptr_base;
      int32_t _6128_rshape = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->shape_base;
      int32_t _6129_rnidx = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->nidxs_base;
      int32_t _11668_;
      bool _11669_ = _6126_hassp;
      if (_11669_)
      {
        _11668_ = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->sp_base;
      }
      else
      {
        _11668_ = _6094_rs->alloci64(_6122_nelem);
      }
      int32_t _6130_rsp = _11668_;
      int32_t _6131_rcof = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->cof_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6132_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6132_ri32(_6132_ri32 ? _6132_ri32->raw() : nullptr,_6132_ri32 ? _6132_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6133_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6133_ri64(_6133_ri64 ? _6133_ri64->raw() : nullptr,_6133_ri64 ? _6133_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6134_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->f64;
      _checked_ptr_1<double> _ptr__6134_rf64(_6134_rf64 ? _6134_rf64->raw() : nullptr,_6134_rf64 ? _6134_rf64->size(0) : 0);
      _ptr__6132_ri32[_6128_rshape] = _6108_xdim0;
      _ptr__6132_ri32[safe_add( _6128_rshape,(int)1 )] = _6115_mdim1;
      {
        int32_t _6135_p = (int)0;
        int32_t _6136_relm = (int)0;
        int32_t _6137_rnz = (int)0;
        _ptr__6132_ri32[_6127_rptr] = (int)0;
        while ( (_6135_p < _6099_nx) )
        {
          {
            int32_t _6138_p0 = _6135_p;
            ++ _6135_p;
            while ( ((_6135_p < _6099_nx) && ((_ptr__6120_wi64[safe_add( _6101_sp,_6135_p )] / _6107_xdim1) == (_ptr__6120_wi64[safe_add( _6101_sp,_6138_p0 )] / _6107_xdim1))) )
            {
              {
                ++ _6135_p;
              }
            }
            int64_t _6139_i = (_ptr__6120_wi64[safe_add( _6101_sp,_6138_p0 )] / _6107_xdim1);
            int32_t _11670_ = (int)0;
            int32_t _11671_ = _6115_mdim1;
            for (int32_t _6140_j = _11670_; _6140_j < _11671_; ++_6140_j)
            {
              {
                int32_t _11672_ = _6138_p0;
                int32_t _11673_ = _6135_p;
                for (int32_t _6141_k = _11672_; _6141_k < _11673_; ++_6141_k)
                {
                  {
                    int64_t _6142_jj = (_ptr__6120_wi64[safe_add( _6101_sp,_6141_k )] % _6107_xdim1);
                    _ptr__6133_ri64[safe_add( _6129_rnidx,_6137_rnz )] = _ptr__6120_wi64[safe_add( _6100_nidxs,_6141_k )];
                    _ptr__6134_rf64[safe_add( _6131_rcof,_6137_rnz )] = _ptr__6113_mcof[safe_add( safe_mul( _6142_jj,_6115_mdim1 ),_6140_j )];
                    ++ _6137_rnz;
                  }
                }
                _ptr__6132_ri32[safe_add( safe_add( _6127_rptr,_6136_relm ),(int)1 )] = _6137_rnz;
                _ptr__6133_ri64[safe_add( _6130_rsp,_6136_relm )] = safe_add( safe_mul( _6139_i,_6115_mdim1 ),_6140_j );
                ++ _6136_relm;
              }
            }
          }
        }
      }
      if ((!_6126_hassp))
      {
        {
          _6094_rs->popi64(_6122_nelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_6115_mdim1 == (int)1))
        {
          {
            int32_t _11674_ = (int)0;
            int32_t _11675_ = _6110_numm;
            for (int32_t _6143_i = _11674_; _6143_i < _11675_; ++_6143_i)
            {
              {
                _ptr__6119_wi32[safe_add( _6117_perm,_6143_i )] = _6143_i;
              }
            }
            _ptr__6119_wi32[_6118_mptr] = (int)0;
            _ptr__6119_wi32[safe_add( _6118_mptr,(int)1 )] = _6110_numm;
          }
        }
        else
        {
          {
            _ptr__6119_wi32[_6118_mptr] = (int)0;
            int32_t _11676_ = (int)0;
            int32_t _11677_ = safe_add( _6115_mdim1,(int)1 );
            for (int32_t _6144_i = _11676_; _6144_i < _11677_; ++_6144_i)
            {
              {
                _ptr__6119_wi32[safe_add( _6118_mptr,_6144_i )] = (int)0;
              }
            }
            int32_t _11678_ = (int)0;
            int32_t _11679_ = _6110_numm;
            for (int32_t _6145_i = _11678_; _6145_i < _11679_; ++_6145_i)
            {
              {
                ++ _ptr__6119_wi32[safe_add( safe_add( _6118_mptr,_ptr__6112_msubj[_6145_i] ),(int)1 )];
              }
            }
            int32_t _11680_ = (int)0;
            int32_t _11681_ = mdimj;
            for (int32_t _6146_i = _11680_; _6146_i < _11681_; ++_6146_i)
            {
              {
                _ptr__6119_wi32[safe_add( safe_add( _6118_mptr,_6146_i ),(int)1 )] += _ptr__6119_wi32[safe_add( _6118_mptr,_6146_i )];
              }
            }
            int32_t _11682_ = (int)0;
            int32_t _11683_ = _6110_numm;
            for (int32_t _6147_i = _11682_; _6147_i < _11683_; ++_6147_i)
            {
              {
                _ptr__6119_wi32[safe_add( _6117_perm,_ptr__6119_wi32[safe_add( _6118_mptr,_ptr__6112_msubj[_6147_i] )] )] = _6147_i;
                ++ _ptr__6119_wi32[safe_add( _6118_mptr,_ptr__6112_msubj[_6147_i] )];
              }
            }
            int32_t _11684_ = (int)0;
            int32_t _11685_ = _6115_mdim1;
            for (int32_t _6148_i = _11684_; _6148_i < _11685_; ++_6148_i)
            {
              {
                _ptr__6119_wi32[(safe_add( _6118_mptr,_6115_mdim1 ) - _6148_i)] = _ptr__6119_wi32[((safe_add( _6118_mptr,_6115_mdim1 ) - _6148_i) - (int)1)];
              }
            }
            _ptr__6119_wi32[_6118_mptr] = (int)0;
          }
        }
      }
      if (((_6099_nx / _6108_xdim0) == _6107_xdim1))
      {
        {
          int32_t _6149_num_nz_cols = (int)0;
          {
            int32_t _6150_p = (int)0;
            while ( (_6150_p < _6110_numm) )
            {
              {
                ++ _6150_p;
                while ( ((_6150_p < _6110_numm) && (_ptr__6112_msubj[_ptr__6119_wi32[(safe_add( _6117_perm,_6150_p ) - (int)1)]] == _ptr__6112_msubj[_ptr__6119_wi32[safe_add( _6117_perm,_6150_p )]])) )
                {
                  {
                    ++ _6150_p;
                  }
                }
                ++ _6149_num_nz_cols;
              }
            }
          }
          _6122_nelem = safe_mul( _6149_num_nz_cols,_6108_xdim0 );
          _6121_nnz = safe_mul( _6110_numm,_6108_xdim0 );
          bool _6151_rhassp = (_6149_num_nz_cols < _6115_mdim1);
          _6094_rs->alloc_expr((int)2,_6122_nelem,_6121_nnz,_6151_rhassp);
          int32_t _6152_rptr = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->ptr_base;
          int32_t _6153_rshape = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->shape_base;
          int32_t _6154_rnidx = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->nidxs_base;
          int32_t _11686_;
          bool _11687_ = _6151_rhassp;
          if (_11687_)
          {
            _11686_ = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->sp_base;
          }
          else
          {
            _11686_ = _6094_rs->alloci64(_6122_nelem);
          }
          int32_t _6155_rsp = _11686_;
          int32_t _6156_rcof = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i32)(_6153_rshape)) = _6108_xdim0;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i32)(safe_add( _6153_rshape,(int)1 ))) = _6115_mdim1;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6157_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__6157_ri32(_6157_ri32 ? _6157_ri32->raw() : nullptr,_6157_ri32 ? _6157_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6158_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__6158_ri64(_6158_ri64 ? _6158_ri64->raw() : nullptr,_6158_ri64 ? _6158_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _6159_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->f64;
          _checked_ptr_1<double> _ptr__6159_rf64(_6159_rf64 ? _6159_rf64->raw() : nullptr,_6159_rf64 ? _6159_rf64->size(0) : 0);
          _ptr__6157_ri32[_6152_rptr] = (int)0;
          int32_t _6160_kelm = (int)0;
          int32_t _6161_knz = (int)0;
          int32_t _11688_ = (int)0;
          int32_t _11689_ = _6108_xdim0;
          for (int32_t _6162_i = _11688_; _6162_i < _11689_; ++_6162_i)
          {
            {
              int32_t _6163_p = (int)0;
              while ( (_6163_p < _6110_numm) )
              {
                {
                  int32_t _6164_p0 = _6163_p;
                  ++ _6163_p;
                  while ( ((_6163_p < _6110_numm) && (_ptr__6112_msubj[_ptr__6119_wi32[safe_add( _6117_perm,_6164_p0 )]] == _ptr__6112_msubj[_ptr__6119_wi32[safe_add( _6117_perm,_6163_p )]])) )
                  {
                    {
                      ++ _6163_p;
                    }
                  }
                  int32_t _6165_j = _ptr__6112_msubj[_ptr__6119_wi32[safe_add( _6117_perm,_6164_p0 )]];
                  int32_t _11690_ = _6164_p0;
                  int32_t _11691_ = _6163_p;
                  for (int32_t _6166_k = _11690_; _6166_k < _11691_; ++_6166_k)
                  {
                    {
                      int32_t _6167_ii = _ptr__6111_msubi[_ptr__6119_wi32[safe_add( _6117_perm,_6166_k )]];
                      _ptr__6158_ri64[safe_add( _6154_rnidx,_6161_knz )] = _ptr__6120_wi64[safe_add( safe_add( _6100_nidxs,safe_mul( _6162_i,_6107_xdim1 ) ),_6167_ii )];
                      _ptr__6159_rf64[safe_add( _6156_rcof,_6161_knz )] = _ptr__6113_mcof[_ptr__6119_wi32[safe_add( _6117_perm,_6166_k )]];
                      ++ _6161_knz;
                    }
                  }
                  _ptr__6158_ri64[safe_add( _6155_rsp,_6160_kelm )] = safe_add( safe_mul( _6162_i,_6115_mdim1 ),_6165_j );
                  _ptr__6157_ri32[safe_add( safe_add( _6152_rptr,_6160_kelm ),(int)1 )] = _6161_knz;
                  ++ _6160_kelm;
                }
              }
            }
          }
          if ((!_6151_rhassp))
          {
            {
              _6094_rs->popi64(_6122_nelem);
            }
          }
          {}
        }
      }
      else
      {
        {
          int32_t _11692_ = (int)0;
          int32_t _11693_ = safe_add( _6108_xdim0,(int)1 );
          for (int32_t _6168_i = _11692_; _6168_i < _11693_; ++_6168_i)
          {
            {
              _ptr__6119_wi32[safe_add( _6109_ptr,_6168_i )] = (int)0;
            }
          }
          if ((_6105_nd == (int)1))
          {
            {
              int32_t _11694_ = (int)0;
              int32_t _11695_ = _6099_nx;
              for (int32_t _6169_i = _11694_; _6169_i < _11695_; ++_6169_i)
              {
                {
                  _ptr__6119_wi32[safe_add( _6102_xsubi,_6169_i )] = (int)0;
                }
              }
              int32_t _11696_ = (int)0;
              int32_t _11697_ = _6099_nx;
              for (int32_t _6170_i = _11696_; _6170_i < _11697_; ++_6170_i)
              {
                {
                  _ptr__6119_wi32[safe_add( _6103_xsubj,_6170_i )] = (int32_t)_ptr__6120_wi64[safe_add( _6101_sp,_6170_i )];
                }
              }
              _ptr__6119_wi32[_6109_ptr] = (int)0;
              _ptr__6119_wi32[safe_add( _6109_ptr,(int)1 )] = _6099_nx;
            }
          }
          else
          {
            {
              int32_t _11698_ = (int)0;
              int32_t _11699_ = _6099_nx;
              for (int32_t _6171_i = _11698_; _6171_i < _11699_; ++_6171_i)
              {
                {
                  _ptr__6119_wi32[safe_add( _6102_xsubi,_6171_i )] = (int32_t)(_ptr__6120_wi64[safe_add( _6101_sp,_6171_i )] / _ptr__6104_xshape[(int)1]);
                }
              }
              int32_t _11700_ = (int)0;
              int32_t _11701_ = _6099_nx;
              for (int32_t _6172_i = _11700_; _6172_i < _11701_; ++_6172_i)
              {
                {
                  _ptr__6119_wi32[safe_add( _6103_xsubj,_6172_i )] = (int32_t)(_ptr__6120_wi64[safe_add( _6101_sp,_6172_i )] % _ptr__6104_xshape[(int)1]);
                }
              }
              _ptr__6119_wi32[_6109_ptr] = (int)0;
              int32_t _11702_ = (int)0;
              int32_t _11703_ = _6099_nx;
              for (int32_t _6173_i = _11702_; _6173_i < _11703_; ++_6173_i)
              {
                {
                  ++ _ptr__6119_wi32[safe_add( safe_add( _6109_ptr,_ptr__6119_wi32[safe_add( _6102_xsubi,_6173_i )] ),(int)1 )];
                }
              }
              int32_t _11704_ = (int)0;
              int32_t _11705_ = _6108_xdim0;
              for (int32_t _6174_i = _11704_; _6174_i < _11705_; ++_6174_i)
              {
                {
                  _ptr__6119_wi32[safe_add( safe_add( _6109_ptr,_6174_i ),(int)1 )] += _ptr__6119_wi32[safe_add( _6109_ptr,_6174_i )];
                }
              }
            }
          }
          int32_t _11706_ = (int)0;
          int32_t _11707_ = _6108_xdim0;
          for (int32_t _6175_i = _11706_; _6175_i < _11707_; ++_6175_i)
          {
            {
              int32_t _11708_ = (int)0;
              int32_t _11709_ = mdimj;
              for (int32_t _6176_j = _11708_; _6176_j < _11709_; ++_6176_j)
              {
                {
                  int32_t _6177_nz = (int)0;
                  int32_t _6178_e1 = _ptr__6119_wi32[safe_add( safe_add( _6109_ptr,_6175_i ),(int)1 )];
                  int32_t _6179_e0 = _ptr__6119_wi32[safe_add( safe_add( _6118_mptr,_6176_j ),(int)1 )];
                  int32_t _6180_i1 = _ptr__6119_wi32[safe_add( _6109_ptr,_6175_i )];
                  int32_t _6181_i0 = _ptr__6119_wi32[safe_add( _6118_mptr,_6176_j )];
                  while ( ((_6181_i0 < _6179_e0) && (_6180_i1 < _6178_e1)) )
                  {
                    {
                      if ((_ptr__6111_msubi[_ptr__6119_wi32[safe_add( _6117_perm,_6181_i0 )]] < _ptr__6119_wi32[safe_add( _6103_xsubj,_6180_i1 )]))
                      {
                        {
                          ++ _6181_i0;
                        }
                      }
                      else if((_ptr__6111_msubi[_ptr__6119_wi32[safe_add( _6117_perm,_6181_i0 )]] > _ptr__6119_wi32[safe_add( _6103_xsubj,_6180_i1 )]))
                      {
                        {
                          ++ _6180_i1;
                        }
                      }
                      else
                      {
                        {
                          ++ _6177_nz;
                          ++ _6181_i0;
                          ++ _6180_i1;
                        }
                      }
                    }
                  }
                  if ((_6177_nz > (int)0))
                  {
                    {
                      _6121_nnz += _6177_nz;
                      ++ _6122_nelem;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _6182_rhassp = (_6122_nelem < safe_mul( _6107_xdim1,mdimi ));
          _6094_rs->alloc_expr((int)2,_6122_nelem,_6121_nnz,_6182_rhassp);
          int32_t _6183_rptr = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->ptr_base;
          int32_t _6184_rshape = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->shape_base;
          int32_t _6185_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->nidxs_base;
          int32_t _6186_rsp = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->sp_base;
          int32_t _6187_rcof = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i32)(_6184_rshape)) = _6108_xdim0;
          ((*mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i32)(safe_add( _6184_rshape,(int)1 ))) = mdimj;
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6188_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i32;
          _checked_ptr_1<int32_t> _ptr__6188_ri32(_6188_ri32 ? _6188_ri32->raw() : nullptr,_6188_ri32 ? _6188_ri32->size(0) : 0);
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6189_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->i64;
          _checked_ptr_1<int64_t> _ptr__6189_ri64(_6189_ri64 ? _6189_ri64->raw() : nullptr,_6189_ri64 ? _6189_ri64->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _6190_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6094_rs)->f64;
          _checked_ptr_1<double> _ptr__6190_rf64(_6190_rf64 ? _6190_rf64->raw() : nullptr,_6190_rf64 ? _6190_rf64->size(0) : 0);
          {
            int32_t _6191_pi = (int)0;
            int32_t _6192_pe = (int)0;
            int32_t _6193_p = (int)0;
            _ptr__6188_ri32[_6183_rptr] = (int)0;
            int32_t _11710_ = (int)0;
            int32_t _11711_ = _6108_xdim0;
            for (int32_t _6194_i = _11710_; _6194_i < _11711_; ++_6194_i)
            {
              {
                int32_t _11712_ = (int)0;
                int32_t _11713_ = mdimj;
                for (int32_t _6195_j = _11712_; _6195_j < _11713_; ++_6195_j)
                {
                  {
                    int32_t _6196_nz = (int)0;
                    int32_t _6197_e1 = _ptr__6119_wi32[safe_add( safe_add( _6109_ptr,_6194_i ),(int)1 )];
                    int32_t _6198_e0 = _ptr__6119_wi32[safe_add( safe_add( _6118_mptr,_6195_j ),(int)1 )];
                    int32_t _6199_i1 = _ptr__6119_wi32[safe_add( _6109_ptr,_6194_i )];
                    int32_t _6200_i0 = _ptr__6119_wi32[safe_add( _6118_mptr,_6195_j )];
                    while ( ((_6200_i0 < _6198_e0) && (_6199_i1 < _6197_e1)) )
                    {
                      {
                        if ((_ptr__6111_msubi[_ptr__6119_wi32[safe_add( _6117_perm,_6200_i0 )]] < _ptr__6119_wi32[safe_add( _6103_xsubj,_6199_i1 )]))
                        {
                          {
                            ++ _6200_i0;
                          }
                        }
                        else if((_ptr__6111_msubi[_ptr__6119_wi32[safe_add( _6117_perm,_6200_i0 )]] > _ptr__6119_wi32[safe_add( _6103_xsubj,_6199_i1 )]))
                        {
                          {
                            ++ _6199_i1;
                          }
                        }
                        else
                        {
                          {
                            _ptr__6189_ri64[safe_add( _6185_rnidxs,_6193_p )] = _ptr__6120_wi64[safe_add( _6100_nidxs,_6199_i1 )];
                            _ptr__6190_rf64[safe_add( _6187_rcof,_6193_p )] = _ptr__6113_mcof[_ptr__6119_wi32[safe_add( _6117_perm,_6200_i0 )]];
                            ++ _6196_nz;
                            ++ _6193_p;
                            ++ _6200_i0;
                            ++ _6199_i1;
                          }
                        }
                      }
                    }
                    if ((_6196_nz > (int)0))
                    {
                      {
                        _ptr__6188_ri32[safe_add( safe_add( _6183_rptr,_6192_pe ),(int)1 )] = _6193_p;
                        _ptr__6189_ri64[safe_add( _6186_rsp,_6192_pe )] = _6191_pi;
                        ++ _6192_pe;
                      }
                    }
                    {}
                    ++ _6191_pi;
                  }
                }
              }
            }
          }
          if ((!_6182_rhassp))
          {
            {
              _6094_rs->popi64(_6122_nelem);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_6095_ws)->pi32 = _6097_base_pi32;
  mosek::fusion::p_WorkStack::_get_impl(_6095_ws)->pi64 = _6098_base_pi64;
}
// End mosek.fusion.ExprMulVar.eval_right

// Begin mosek.fusion.ExprMulVar.eval_left
// Method mosek.fusion.ExprMulVar.eval_left @ src/fusion/ExprMulVar.monty:279:6-458:7
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _6201_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6202_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6203_xs) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_6201_rs,_6202_ws,_6203_xs); }
void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _6201_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6202_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6203_xs)
{
  int32_t _6204_nx = x->numInst();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6205_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6205_xshape(_6205_xshape ? _6205_xshape->raw() : nullptr,_6205_xshape ? _6205_xshape->size(0) : 0);
  int32_t _6206_nd = (int)((_6205_xshape)->size(0));
  int32_t _6207_nidxs = _6203_xs->alloci64(_6204_nx);
  int32_t _6208_sp = _6203_xs->alloci64(_6204_nx);
  int32_t _6209_xsubi = _6203_xs->alloci32(_6204_nx);
  int32_t _6210_xsubj = _6203_xs->alloci32(_6204_nx);
  int32_t _6211_perm = _6203_xs->alloci32(_6204_nx);
  int32_t _6212_mptr = _6203_xs->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6213_xshape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6213_xshape(_6213_xshape ? _6213_xshape->raw() : nullptr,_6213_xshape ? _6213_xshape->size(0) : 0);
  int32_t _6214_nd = (int)((_6213_xshape)->size(0));
  int32_t _11714_;
  bool _11715_ = (_6214_nd == (int)1);
  if (_11715_)
  {
    _11714_ = (int)1;
  }
  else
  {
    _11714_ = _ptr__6213_xshape[(int)1];
  }
  int32_t _6215_xdim1 = _11714_;
  int32_t _6216_xdim0 = _ptr__6213_xshape[(int)0];
  int32_t _6217_ptr = _6203_xs->alloci32(safe_add( _6215_xdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6218_msubi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int32_t> _ptr__6218_msubi(_6218_msubi ? _6218_msubi->raw() : nullptr,_6218_msubi ? _6218_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6219_msubj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int32_t> _ptr__6219_msubj(_6219_msubj ? _6219_msubj->raw() : nullptr,_6219_msubj ? _6219_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6220_mcof = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__6220_mcof(_6220_mcof ? _6220_mcof->raw() : nullptr,_6220_mcof ? _6220_mcof->size(0) : 0);
  int32_t _6221_mdimi = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int32_t _6222_mdimj = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int32_t _6223_rnnz = (int)0;
  int32_t _6224_rnelem = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6225_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6203_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6225_xi32(_6225_xi32 ? _6225_xi32->raw() : nullptr,_6225_xi32 ? _6225_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6226_xi64 = mosek::fusion::p_WorkStack::_get_impl(_6203_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__6226_xi64(_6226_xi64 ? _6226_xi64->raw() : nullptr,_6226_xi64 ? _6226_xi64->size(0) : 0);
  int32_t _6227_mnnz = (int)((_6220_mcof)->size(0));
  x->inst(_6208_sp,_6226_xi64,_6207_nidxs,_6226_xi64);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int32_t _11716_ = (int)0;
        int32_t _11717_ = safe_add( _6221_mdimi,(int)1 );
        for (int32_t _6228_i = _11716_; _6228_i < _11717_; ++_6228_i)
        {
          {
            _ptr__6225_xi32[safe_add( _6212_mptr,_6228_i )] = (int)0;
          }
        }
        int32_t _11718_ = (int)0;
        int32_t _11719_ = (int)((_6218_msubi)->size(0));
        for (int32_t _6229_i = _11718_; _6229_i < _11719_; ++_6229_i)
        {
          {
            ++ _ptr__6225_xi32[safe_add( safe_add( _6212_mptr,_ptr__6218_msubi[_6229_i] ),(int)1 )];
          }
        }
        int32_t _11720_ = (int)0;
        int32_t _11721_ = _6221_mdimi;
        for (int32_t _6230_i = _11720_; _6230_i < _11721_; ++_6230_i)
        {
          {
            _ptr__6225_xi32[safe_add( safe_add( _6212_mptr,_6230_i ),(int)1 )] += _ptr__6225_xi32[safe_add( _6212_mptr,_6230_i )];
          }
        }
        if ((_6214_nd == (int)1))
        {
          {
            int32_t _11722_ = (int)0;
            int32_t _11723_ = _6204_nx;
            for (int32_t _6231_i = _11722_; _6231_i < _11723_; ++_6231_i)
            {
              {
                _ptr__6225_xi32[safe_add( _6209_xsubi,_6231_i )] = (int32_t)_ptr__6226_xi64[safe_add( _6208_sp,_6231_i )];
              }
            }
            int32_t _11724_ = (int)0;
            int32_t _11725_ = _6204_nx;
            for (int32_t _6232_i = _11724_; _6232_i < _11725_; ++_6232_i)
            {
              {
                _ptr__6225_xi32[safe_add( _6210_xsubj,_6232_i )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int32_t _11726_ = (int)0;
            int32_t _11727_ = _6204_nx;
            for (int32_t _6233_i = _11726_; _6233_i < _11727_; ++_6233_i)
            {
              {
                _ptr__6225_xi32[safe_add( _6209_xsubi,_6233_i )] = (int32_t)(_ptr__6226_xi64[safe_add( _6208_sp,_6233_i )] / _6215_xdim1);
              }
            }
            int32_t _11728_ = (int)0;
            int32_t _11729_ = _6204_nx;
            for (int32_t _6234_i = _11728_; _6234_i < _11729_; ++_6234_i)
            {
              {
                _ptr__6225_xi32[safe_add( _6210_xsubj,_6234_i )] = (int32_t)(_ptr__6226_xi64[safe_add( _6208_sp,_6234_i )] % _6215_xdim1);
              }
            }
          }
        }
        if ((_6214_nd > (int)1))
        {
          {
            int32_t _11730_ = (int)0;
            int32_t _11731_ = safe_add( _6215_xdim1,(int)1 );
            for (int32_t _6235_i = _11730_; _6235_i < _11731_; ++_6235_i)
            {
              {
                _ptr__6225_xi32[safe_add( _6217_ptr,_6235_i )] = (int)0;
              }
            }
            int32_t _11732_ = (int)0;
            int32_t _11733_ = _6204_nx;
            for (int32_t _6236_i = _11732_; _6236_i < _11733_; ++_6236_i)
            {
              {
                ++ _ptr__6225_xi32[safe_add( safe_add( _6217_ptr,_ptr__6225_xi32[safe_add( _6210_xsubj,_6236_i )] ),(int)1 )];
              }
            }
            int32_t _11734_ = (int)0;
            int32_t _11735_ = _6215_xdim1;
            for (int32_t _6237_i = _11734_; _6237_i < _11735_; ++_6237_i)
            {
              {
                _ptr__6225_xi32[safe_add( safe_add( _6217_ptr,_6237_i ),(int)1 )] += _ptr__6225_xi32[safe_add( _6217_ptr,_6237_i )];
              }
            }
            int32_t _11736_ = (int)0;
            int32_t _11737_ = _6204_nx;
            for (int32_t _6238_i = _11736_; _6238_i < _11737_; ++_6238_i)
            {
              {
                _ptr__6225_xi32[safe_add( _6211_perm,_ptr__6225_xi32[safe_add( _6217_ptr,_ptr__6225_xi32[safe_add( _6210_xsubj,_6238_i )] )] )] = _6238_i;
                ++ _ptr__6225_xi32[safe_add( _6217_ptr,_ptr__6225_xi32[safe_add( _6210_xsubj,_6238_i )] )];
              }
            }
            int32_t _11738_ = (int)0;
            int32_t _11739_ = _6215_xdim1;
            for (int32_t _6239_i = _11738_; _6239_i < _11739_; ++_6239_i)
            {
              {
                _ptr__6225_xi32[(safe_add( _6217_ptr,_6215_xdim1 ) - _6239_i)] = _ptr__6225_xi32[((safe_add( _6217_ptr,_6215_xdim1 ) - _6239_i) - (int)1)];
              }
            }
            _ptr__6225_xi32[_6217_ptr] = (int)0;
          }
        }
        else
        {
          {
            _ptr__6225_xi32[_6217_ptr] = (int)0;
            _ptr__6225_xi32[safe_add( _6217_ptr,(int)1 )] = _6204_nx;
            int32_t _11740_ = (int)0;
            int32_t _11741_ = _6204_nx;
            for (int32_t _6240_i = _11740_; _6240_i < _11741_; ++_6240_i)
            {
              {
                _ptr__6225_xi32[safe_add( _6211_perm,_6240_i )] = _6240_i;
              }
            }
          }
        }
        int32_t _11742_ = (int)0;
        int32_t _11743_ = _6221_mdimi;
        for (int32_t _6241_i = _11742_; _6241_i < _11743_; ++_6241_i)
        {
          {
            int32_t _11744_ = (int)0;
            int32_t _11745_ = _6215_xdim1;
            for (int32_t _6242_j = _11744_; _6242_j < _11745_; ++_6242_j)
            {
              {
                int32_t _6243_nz = (int)0;
                int32_t _6244_e1 = _ptr__6225_xi32[safe_add( safe_add( _6217_ptr,_6242_j ),(int)1 )];
                int32_t _6245_e0 = _ptr__6225_xi32[safe_add( safe_add( _6212_mptr,_6241_i ),(int)1 )];
                int32_t _6246_i1 = _ptr__6225_xi32[safe_add( _6217_ptr,_6242_j )];
                int32_t _6247_i0 = _ptr__6225_xi32[safe_add( _6212_mptr,_6241_i )];
                while ( ((_6247_i0 < _6245_e0) && (_6246_i1 < _6244_e1)) )
                {
                  {
                    if ((_ptr__6219_msubj[_6247_i0] < _ptr__6225_xi32[safe_add( _6209_xsubi,_ptr__6225_xi32[safe_add( _6211_perm,_6246_i1 )] )]))
                    {
                      {
                        ++ _6247_i0;
                      }
                    }
                    else if((_ptr__6219_msubj[_6247_i0] > _ptr__6225_xi32[safe_add( _6209_xsubi,_ptr__6225_xi32[safe_add( _6211_perm,_6246_i1 )] )]))
                    {
                      {
                        ++ _6246_i1;
                      }
                    }
                    else
                    {
                      {
                        ++ _6243_nz;
                        ++ _6247_i0;
                        ++ _6246_i1;
                      }
                    }
                  }
                }
                if ((_6243_nz > (int)0))
                {
                  {
                    _6223_rnnz += _6243_nz;
                    ++ _6224_rnelem;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _6223_rnnz = safe_mul( _6227_mnnz,_6215_xdim1 );
      int32_t _6248_i0 = (int)0;
      while ( (_6248_i0 < _6227_mnnz) )
      {
        {
          int32_t _6249_e0 = safe_add( _6248_i0,(int)1 );
          while ( ((_6249_e0 < _6227_mnnz) && (_ptr__6218_msubi[_6248_i0] == _ptr__6218_msubi[_6249_e0])) )
          {
            {
              ++ _6249_e0;
            }
          }
          ++ _6224_rnelem;
          _6248_i0 = _6249_e0;
        }
      }
      _6224_rnelem *= _6215_xdim1;
    }
  }
  bool _11746_;
  bool _11747_ = (_6224_rnelem < safe_mul( _6215_xdim1,_6221_mdimi ));
  if (_11747_)
  {
    _11746_ = true;
  }
  else
  {
    _11746_ = false;
  }
  bool _6250_rhassp = _11746_;
  int32_t _6251_rnd = _6214_nd;
  _6201_rs->alloc_expr(_6251_rnd,_6224_rnelem,_6223_rnnz,_6250_rhassp);
  int32_t _6252_rptr = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->ptr_base;
  int32_t _6253_rshape = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->shape_base;
  int32_t _6254_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->nidxs_base;
  int32_t _11748_;
  bool _11749_ = _6250_rhassp;
  if (_11749_)
  {
    _11748_ = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->sp_base;
  }
  else
  {
    _11748_ = _6201_rs->alloci64(_6224_rnelem);
  }
  int32_t _6255_rsp = _11748_;
  int32_t _6256_rcof = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6257_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6257_ri32(_6257_ri32 ? _6257_ri32->raw() : nullptr,_6257_ri32 ? _6257_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6258_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6258_ri64(_6258_ri64 ? _6258_ri64->raw() : nullptr,_6258_ri64 ? _6258_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6259_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6201_rs)->f64;
  _checked_ptr_1<double> _ptr__6259_rf64(_6259_rf64 ? _6259_rf64->raw() : nullptr,_6259_rf64 ? _6259_rf64->size(0) : 0);
  _ptr__6257_ri32[_6253_rshape] = _6221_mdimi;
  if ((_6214_nd > (int)1))
  {
    {
      _ptr__6257_ri32[safe_add( _6253_rshape,(int)1 )] = _6215_xdim1;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int32_t _6260_pi = (int)0;
      int32_t _6261_pe = (int)0;
      int32_t _6262_p = (int)0;
      _ptr__6257_ri32[_6252_rptr] = (int)0;
      int32_t _11750_ = (int)0;
      int32_t _11751_ = _6221_mdimi;
      for (int32_t _6263_i = _11750_; _6263_i < _11751_; ++_6263_i)
      {
        {
          int32_t _11752_ = (int)0;
          int32_t _11753_ = _6215_xdim1;
          for (int32_t _6264_j = _11752_; _6264_j < _11753_; ++_6264_j)
          {
            {
              int32_t _6265_nz = (int)0;
              int32_t _6266_e1 = _ptr__6225_xi32[safe_add( safe_add( _6217_ptr,_6264_j ),(int)1 )];
              int32_t _6267_e0 = _ptr__6225_xi32[safe_add( safe_add( _6212_mptr,_6263_i ),(int)1 )];
              int32_t _6268_i1 = _ptr__6225_xi32[safe_add( _6217_ptr,_6264_j )];
              int32_t _6269_i0 = _ptr__6225_xi32[safe_add( _6212_mptr,_6263_i )];
              while ( ((_6269_i0 < _6267_e0) && (_6268_i1 < _6266_e1)) )
              {
                {
                  if ((_ptr__6219_msubj[_6269_i0] < _ptr__6225_xi32[safe_add( _6209_xsubi,_ptr__6225_xi32[safe_add( _6211_perm,_6268_i1 )] )]))
                  {
                    {
                      ++ _6269_i0;
                    }
                  }
                  else if((_ptr__6219_msubj[_6269_i0] > _ptr__6225_xi32[safe_add( _6209_xsubi,_ptr__6225_xi32[safe_add( _6211_perm,_6268_i1 )] )]))
                  {
                    {
                      ++ _6268_i1;
                    }
                  }
                  else
                  {
                    {
                      _ptr__6258_ri64[safe_add( _6254_rnidxs,_6262_p )] = _ptr__6226_xi64[safe_add( _6207_nidxs,_ptr__6225_xi32[safe_add( _6211_perm,_6268_i1 )] )];
                      _ptr__6259_rf64[safe_add( _6256_rcof,_6262_p )] = _ptr__6220_mcof[_6269_i0];
                      ++ _6265_nz;
                      ++ _6262_p;
                      ++ _6269_i0;
                      ++ _6268_i1;
                    }
                  }
                }
              }
              if ((_6265_nz > (int)0))
              {
                {
                  _ptr__6257_ri32[safe_add( safe_add( _6252_rptr,_6261_pe ),(int)1 )] = _6262_p;
                  _ptr__6258_ri64[safe_add( _6255_rsp,_6261_pe )] = _6260_pi;
                  ++ _6261_pe;
                }
              }
              {}
              ++ _6260_pi;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _6270_rnzi = (int)0;
      int32_t _6271_relmi = (int)0;
      _ptr__6257_ri32[_6252_rptr] = (int)0;
      int32_t _6272_i0 = (int)0;
      while ( (_6272_i0 < _6227_mnnz) )
      {
        {
          int32_t _6273_e0 = safe_add( _6272_i0,(int)1 );
          while ( ((_6273_e0 < _6227_mnnz) && (_ptr__6218_msubi[_6273_e0] == _ptr__6218_msubi[_6272_i0])) )
          {
            {
              ++ _6273_e0;
            }
          }
          int32_t _11754_ = (int)0;
          int32_t _11755_ = _6215_xdim1;
          for (int32_t _6274_j = _11754_; _6274_j < _11755_; ++_6274_j)
          {
            {
              int32_t _11756_ = _6272_i0;
              int32_t _11757_ = _6273_e0;
              for (int32_t _6275_k = _11756_; _6275_k < _11757_; ++_6275_k)
              {
                {
                  _ptr__6258_ri64[safe_add( _6254_rnidxs,_6270_rnzi )] = _ptr__6226_xi64[safe_add( safe_add( _6207_nidxs,safe_mul( _ptr__6219_msubj[_6275_k],_6215_xdim1 ) ),_6274_j )];
                  _ptr__6259_rf64[safe_add( _6256_rcof,_6270_rnzi )] = _ptr__6220_mcof[_6275_k];
                  ++ _6270_rnzi;
                }
              }
              _ptr__6257_ri32[safe_add( safe_add( _6252_rptr,_6271_relmi ),(int)1 )] = _6270_rnzi;
              _ptr__6258_ri64[safe_add( _6255_rsp,_6271_relmi )] = safe_add( safe_mul( _ptr__6218_msubi[_6272_i0],_6215_xdim1 ),_6274_j );
              ++ _6271_relmi;
            }
          }
          _6272_i0 = _6273_e0;
        }
      }
    }
  }
  if ((!_6250_rhassp))
  {
    {
      _6201_rs->popi64(_6224_rnelem);
    }
  }
  {}
  _6203_xs->clear();
}
// End mosek.fusion.ExprMulVar.eval_left

// Begin mosek.fusion.ExprMulVar.validate
// Method mosek.fusion.ExprMulVar.validate @ src/fusion/ExprMulVar.monty:222:6-244:7
void mosek::fusion::p_ExprMulVar::validate(int32_t _6276_mdimi,int32_t _6277_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _6278_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _6279_msubj,std::shared_ptr< monty::ndarray< double,1 > > _6280_mcof)
{
  _checked_ptr_1<int32_t> _ptr__6278_msubi(_6278_msubi ? _6278_msubi->raw() : nullptr, _6278_msubi ? _6278_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__6279_msubj(_6279_msubj ? _6279_msubj->raw() : nullptr, _6279_msubj ? _6279_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__6280_mcof(_6280_mcof ? _6280_mcof->raw() : nullptr, _6280_mcof ? _6280_mcof->size(0) : 0);
  bool _6281_ok = true;
  {
    int32_t _11758_ = (int)0;
    int32_t _11759_ = (int)((_6278_msubi)->size(0));
    for (int32_t _6282_i = _11758_; _6282_i < _11759_; ++_6282_i)
    {
      {
        if (((_ptr__6278_msubi[_6282_i] < (int)0) || ((_ptr__6278_msubi[_6282_i] >= _6276_mdimi) || ((_ptr__6279_msubj[_6282_i] < (int)0) || (_ptr__6279_msubj[_6282_i] >= _6277_mdimj)))))
        {
          {
            _6281_ok = false;
          }
        }
        {}
      }
    }
    int32_t _11760_ = (int)1;
    int32_t _11761_ = (int)((_6278_msubi)->size(0));
    for (int32_t _6283_i = _11760_; _6283_i < _11761_; ++_6283_i)
    {
      {
        if (((_ptr__6278_msubi[(_6283_i - (int)1)] > _ptr__6278_msubi[_6283_i]) || ((_ptr__6278_msubi[(_6283_i - (int)1)] == _ptr__6278_msubi[_6283_i]) && (_ptr__6279_msubj[(_6283_i - (int)1)] >= _ptr__6279_msubj[_6283_i]))))
        {
          {
            _6281_ok = false;
          }
        }
        {}
      }
    }
  }
  if ((!_6281_ok))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
// End mosek.fusion.ExprMulVar.validate

// Begin mosek.fusion.ExprMulVar.resshape
// Method mosek.fusion.ExprMulVar.resshape @ src/fusion/ExprMulVar.monty:189:6-194:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprMulVar::resshape(int32_t _6284_mdimi,int32_t _6285_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _6286_xshape,bool _6287_left)
{
  _checked_ptr_1<int32_t> _ptr__6286_xshape(_6286_xshape ? _6286_xshape->raw() : nullptr, _6286_xshape ? _6286_xshape->size(0) : 0);
  if (_6287_left)
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6284_mdimi),(int32_t)(_ptr__6286_xshape[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__6286_xshape[(int)0]),(int32_t)(_6285_mdimj)});
    }
  }
}
// End mosek.fusion.ExprMulVar.resshape

// Begin mosek.fusion.ExprMulVar.toString
// Method mosek.fusion.ExprMulVar.toString @ src/fusion/ExprMulVar.monty:182:6-187:7
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulVar::toString()
{
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
// End mosek.fusion.ExprMulVar.toString

void mosek::fusion::p_ExprMulVar::destroy()
{
  x.reset();
  mcof.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }
// } class ExprMulVar
// class ExprMulScalarVar { // @ src/fusion/ExprMulVar.monty:53:4-167:5
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }
mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar
  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulScalarVar.ctor @ src/fusion/ExprMulVar.monty:89:6-126:7
mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar
  (int32_t _6288_mdimi,
    int32_t _6289_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6290_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6291_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6292_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6293_x)
{ return new mosek::fusion::ExprMulScalarVar(_6288_mdimi,_6289_mdimj,_6290_msubi,_6291_msubj,_6292_mcof,_6293_x); }
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar
  (int32_t _6288_mdimi,
    int32_t _6289_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6290_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6291_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6292_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6293_x) : 
   ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this))
{ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6288_mdimi,_6289_mdimj,_6290_msubi,_6291_msubj,_6292_mcof,_6293_x); }
void mosek::fusion::p_ExprMulScalarVar::_initialize  (int32_t _6288_mdimi,
    int32_t _6289_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6290_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6291_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6292_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6293_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6290_msubi(_6290_msubi ? _6290_msubi->raw() : nullptr, _6290_msubi ? _6290_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6291_msubj(_6291_msubj ? _6291_msubj->raw() : nullptr, _6291_msubj ? _6291_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6292_mcof(_6292_mcof ? _6292_mcof->raw() : nullptr, _6292_mcof ? _6292_mcof->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_6288_mdimi,_6289_mdimj,::mosek::fusion::Utils::Tools::arraycopy(_6290_msubi),::mosek::fusion::Utils::Tools::arraycopy(_6291_msubj),::mosek::fusion::Utils::Tools::arraycopy(_6292_mcof),_6293_x,(int)1);
    if ((_6293_x->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_6288_mdimi < (int)0) || ((_6289_mdimj < (int)0) || (((int)((_6290_msubi)->size(0)) != (int)((_6291_msubj)->size(0))) || ((int)((_6290_msubi)->size(0)) != (int)((_6292_mcof)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6294_err_data = false;
    int32_t _11762_ = (int)0;
    int32_t _11763_ = (int)((_6290_msubi)->size(0));
    for (int32_t _6295_i = _11762_; _6295_i < _11763_; ++_6295_i)
    {
      {
        if (((_ptr__6290_msubi[_6295_i] < (int)0) || ((_ptr__6290_msubi[_6295_i] >= _6288_mdimi) || ((_ptr__6291_msubj[_6295_i] < (int)0) || (_ptr__6291_msubj[_6295_i] >= _6289_mdimj)))))
        {
          {
            _6294_err_data = true;
          }
        }
        {}
      }
    }
    if (_6294_err_data)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6296_err_sorted = false;
    int32_t _11764_ = (int)1;
    int32_t _11765_ = (int)((_6290_msubi)->size(0));
    for (int32_t _6297_i = _11764_; _6297_i < _11765_; ++_6297_i)
    {
      {
        if (((_ptr__6290_msubi[_6297_i] < _ptr__6290_msubi[(_6297_i - (int)1)]) || ((_ptr__6290_msubi[_6297_i] == _ptr__6290_msubi[(_6297_i - (int)1)]) && (_ptr__6291_msubj[_6297_i] <= _ptr__6291_msubj[(_6297_i - (int)1)]))))
        {
          {
            _6296_err_sorted = true;
          }
        }
        {}
      }
    }
    if (_6296_err_sorted)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprMulScalarVar.ctor

// mosek.fusion.ExprMulScalarVar.ctor @ src/fusion/ExprMulVar.monty:68:6-87:7
mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar
  (int32_t _6298_mdimi,
    int32_t _6299_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6300_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6301_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6302_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6303_x,
    int32_t _6304_unchecked_)
{ return new mosek::fusion::ExprMulScalarVar(_6298_mdimi,_6299_mdimj,_6300_msubi,_6301_msubj,_6302_mcof,_6303_x,_6304_unchecked_); }
mosek::fusion::ExprMulScalarVar::ExprMulScalarVar
  (int32_t _6298_mdimi,
    int32_t _6299_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6300_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6301_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6302_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6303_x,
    int32_t _6304_unchecked_) : 
   ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this))
{ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6298_mdimi,_6299_mdimj,_6300_msubi,_6301_msubj,_6302_mcof,_6303_x,_6304_unchecked_); }
void mosek::fusion::p_ExprMulScalarVar::_initialize  (int32_t _6298_mdimi,
    int32_t _6299_mdimj,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6300_msubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6301_msubj,
    std::shared_ptr< monty::ndarray< double,1 > > _6302_mcof,
    monty::rc_ptr< ::mosek::fusion::Variable > _6303_x,
    int32_t _6304_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__6300_msubi(_6300_msubi ? _6300_msubi->raw() : nullptr, _6300_msubi ? _6300_msubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__6301_msubj(_6301_msubj ? _6301_msubj->raw() : nullptr, _6301_msubj ? _6301_msubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__6302_mcof(_6302_mcof ? _6302_mcof->raw() : nullptr, _6302_mcof ? _6302_mcof->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_6298_mdimi),(int32_t)(_6299_mdimj)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _6298_mdimi;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _6299_mdimj;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _6300_msubi;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _6301_msubj;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _6302_mcof;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _6303_x;
  }
}
// mosek.fusion.ExprMulScalarVar.ctor

// Begin mosek.fusion.ExprMulScalarVar.eval
// Method mosek.fusion.ExprMulScalarVar.eval @ src/fusion/ExprMulVar.monty:128:6-166:7
void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6305_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6306_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6307_xs) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_6305_rs,_6306_ws,_6307_xs); }
void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6305_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6306_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6307_xs)
{
  if ((x->numInst() == (int)0))
  {
    {
      _6305_rs->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6308_xidxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)1)));
      _checked_ptr_1<int64_t> _ptr__6308_xidxs(_6308_xidxs ? _6308_xidxs->raw() : nullptr,_6308_xidxs ? _6308_xidxs->size(0) : 0);
      x->inst((int)0,_6308_xidxs);
      int64_t _6309_xi = _ptr__6308_xidxs[(int)0];
      int32_t _6310_nelem = (int)((msubi)->size(0));
      int32_t _6311_nnz = _6310_nelem;
      bool _6312_hassp = (_6310_nelem < safe_mul( mdimi,mdimj ));
      _6305_rs->alloc_expr((int)2,_6310_nelem,_6311_nnz,_6312_hassp);
      int32_t _6313_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->shape_base,(int)1 ))) = mdimj;
      int32_t _6314_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->nidxs_base;
      int32_t _6315_sp_base = mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->sp_base;
      int32_t _6316_cof_base = mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->cof_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6317_i32 = mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6317_i32(_6317_i32 ? _6317_i32->raw() : nullptr,_6317_i32 ? _6317_i32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6318_i64 = mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6318_i64(_6318_i64 ? _6318_i64->raw() : nullptr,_6318_i64 ? _6318_i64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6319_f64 = mosek::fusion::p_WorkStack::_get_impl(_6305_rs)->f64;
      _checked_ptr_1<double> _ptr__6319_f64(_6319_f64 ? _6319_f64->raw() : nullptr,_6319_f64 ? _6319_f64->size(0) : 0);
      {
        int32_t _11766_ = (int)0;
        int32_t _11767_ = _6311_nnz;
        for (int32_t _6320_i = _11766_; _6320_i < _11767_; ++_6320_i)
        {
          {
            _ptr__6319_f64[safe_add( _6316_cof_base,_6320_i )] = ((*mcof)(_6320_i));
          }
        }
        int32_t _11768_ = (int)0;
        int32_t _11769_ = _6311_nnz;
        for (int32_t _6321_i = _11768_; _6321_i < _11769_; ++_6321_i)
        {
          {
            _ptr__6318_i64[safe_add( _6314_nidxs_base,_6321_i )] = _6309_xi;
          }
        }
        if (_6312_hassp)
        {
          {
            int32_t _11770_ = (int)0;
            int32_t _11771_ = _6310_nelem;
            for (int32_t _6322_i = _11770_; _6322_i < _11771_; ++_6322_i)
            {
              {
                _ptr__6318_i64[safe_add( _6315_sp_base,_6322_i )] = safe_add( safe_mul( ((*msubi)(_6322_i)),mdimj ),((*msubj)(_6322_i)) );
              }
            }
          }
        }
        {}
        int32_t _11772_ = (int)0;
        int32_t _11773_ = safe_add( _6310_nelem,(int)1 );
        for (int32_t _6323_i = _11772_; _6323_i < _11773_; ++_6323_i)
        {
          {
            _ptr__6317_i32[safe_add( _6313_ptr_base,_6323_i )] = _6323_i;
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprMulScalarVar.eval

// Begin mosek.fusion.ExprMulScalarVar.toString
// Method mosek.fusion.ExprMulScalarVar.toString @ src/fusion/ExprMulVar.monty:63:6-66:7
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulScalarVar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprMulScalarVar.toString

void mosek::fusion::p_ExprMulScalarVar::destroy()
{
  x.reset();
  mcof.reset();
  msubj.reset();
  msubi.reset();
}
void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }
// } class ExprMulScalarVar
// class ExprMulVarScalarConst { // @ src/fusion/ExprMulVar.monty:4:4-50:5
mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }
mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst
  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprMulVarScalarConst.ctor @ src/fusion/ExprMulVar.monty:10:6-14:7
mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst
  (monty::rc_ptr< ::mosek::fusion::Variable > _6324_x,
    double _6325_c)
{ return new mosek::fusion::ExprMulVarScalarConst(_6324_x,_6325_c); }
mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst
  (monty::rc_ptr< ::mosek::fusion::Variable > _6324_x,
    double _6325_c) : 
   ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this))
{ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_6324_x,_6325_c); }
void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6324_x,
    double _6325_c)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6324_x->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _6324_x;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _6325_c;
  }
}
// mosek.fusion.ExprMulVarScalarConst.ctor

// Begin mosek.fusion.ExprMulVarScalarConst.eval
// Method mosek.fusion.ExprMulVarScalarConst.eval @ src/fusion/ExprMulVar.monty:16:6-49:7
void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6326_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6327_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6328_xs) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_6326_rs,_6327_ws,_6328_xs); }
void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6326_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6327_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6328_xs)
{
  int32_t _6329_nnz = x->numInst();
  int32_t _6330_nelem = _6329_nnz;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6331_shape = x->getShape();
  _checked_ptr_1<int32_t> _ptr__6331_shape(_6331_shape ? _6331_shape->raw() : nullptr,_6331_shape ? _6331_shape->size(0) : 0);
  int32_t _6332_nd = (int)((_6331_shape)->size(0));
  bool _6333_hassp = (::mosek::fusion::p_Set::size(_6331_shape) > _6330_nelem);
  _6326_rs->alloc_expr(_6332_nd,_6330_nelem,_6329_nnz,_6333_hassp);
  int32_t _6334_ptrb = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->ptr_base;
  int32_t _6335_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->nidxs_base;
  int32_t _6336_sp = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->sp_base;
  int32_t _6337_cof = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->cof_base;
  int32_t _6338_rshape = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->shape_base;
  if (_6333_hassp)
  {
    {
      x->inst(_6336_sp,mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->i64,_6335_nidxs,mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->i64);
    }
  }
  else
  {
    {
      x->inst(_6335_nidxs,mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->i64);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6339_i32 = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6339_i32(_6339_i32 ? _6339_i32->raw() : nullptr,_6339_i32 ? _6339_i32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6340_i64 = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6340_i64(_6340_i64 ? _6340_i64->raw() : nullptr,_6340_i64 ? _6340_i64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6341_f64 = mosek::fusion::p_WorkStack::_get_impl(_6326_rs)->f64;
  _checked_ptr_1<double> _ptr__6341_f64(_6341_f64 ? _6341_f64->raw() : nullptr,_6341_f64 ? _6341_f64->size(0) : 0);
  {
    int32_t _11774_ = (int)0;
    int32_t _11775_ = _6332_nd;
    for (int32_t _6342_i = _11774_; _6342_i < _11775_; ++_6342_i)
    {
      {
        _ptr__6339_i32[safe_add( _6338_rshape,_6342_i )] = _ptr__6331_shape[_6342_i];
      }
    }
    int32_t _11776_ = (int)0;
    int32_t _11777_ = safe_add( _6330_nelem,(int)1 );
    for (int32_t _6343_i = _11776_; _6343_i < _11777_; ++_6343_i)
    {
      {
        _ptr__6339_i32[safe_add( _6334_ptrb,_6343_i )] = _6343_i;
      }
    }
    int32_t _11778_ = (int)0;
    int32_t _11779_ = _6329_nnz;
    for (int32_t _6344_i = _11778_; _6344_i < _11779_; ++_6344_i)
    {
      {
        _ptr__6341_f64[safe_add( _6337_cof,_6344_i )] = 1.0;
      }
    }
  }
}
// End mosek.fusion.ExprMulVarScalarConst.eval

// Begin mosek.fusion.ExprMulVarScalarConst.toString
// Method mosek.fusion.ExprMulVarScalarConst.toString @ src/fusion/ExprMulVar.monty:8:6-75
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprMulVarScalarConst::toString()
{
  return std::string ("ExprMulVarScalarConst()");
}
// End mosek.fusion.ExprMulVarScalarConst.toString

void mosek::fusion::p_ExprMulVarScalarConst::destroy()
{
  x.reset();
}
void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }
// } class ExprMulVarScalarConst
// class ExprAdd { // @ src/fusion/ExprAdd.monty:597:4-1275:5
mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }
mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprAdd::p_ExprAdd
  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprAdd.ctor @ src/fusion/ExprAdd.monty:607:6-620:7
mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd
  (monty::rc_ptr< ::mosek::fusion::Expression > _6345_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6346_e2,
    double _6347_m1,
    double _6348_m2)
{ return new mosek::fusion::ExprAdd(_6345_e1,_6346_e2,_6347_m1,_6348_m2); }
mosek::fusion::ExprAdd::ExprAdd
  (monty::rc_ptr< ::mosek::fusion::Expression > _6345_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6346_e2,
    double _6347_m1,
    double _6348_m2) : 
   ExprAdd(new mosek::fusion::p_ExprAdd(this))
{ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_6345_e1,_6346_e2,_6347_m1,_6348_m2); }
void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6345_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6346_e2,
    double _6347_m1,
    double _6348_m2)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6345_e1->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _6345_e1;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _6346_e2;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _6347_m1;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _6348_m2;
    if ((_6345_e1->getND() != _6346_e2->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int32_t _11780_ = (int)0;
    int32_t _11781_ = _6345_e1->getND();
    for (int32_t _6349_i = _11780_; _6349_i < _11781_; ++_6349_i)
    {
      {
        if ((_6345_e1->getDim(_6349_i) != _6346_e2->getDim(_6349_i)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}
// mosek.fusion.ExprAdd.ctor

// Begin mosek.fusion.ExprAdd.eval
// Method mosek.fusion.ExprAdd.eval @ src/fusion/ExprAdd.monty:622:6-1274:7
void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6350_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6351_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6352_xs) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_6350_rs,_6351_ws,_6352_xs); }
void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6350_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6351_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6352_xs)
{
  e1->eval(_6351_ws,_6350_rs,_6352_xs);
  e2->eval(_6351_ws,_6350_rs,_6352_xs);
  _6351_ws->pop_expr();
  int32_t _6353_nd2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nd;
  int32_t _6354_shape2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->shape_base;
  int32_t _6355_nelem2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nelem;
  int32_t _6356_nnz2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nnz;
  int32_t _6357_ncodeatom2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->ncodeatom;
  bool _6358_hassp2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->hassp;
  int32_t _6359_ptr2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->ptr_base;
  int32_t _6360_sp2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->sp_base;
  int32_t _6361_nidxs2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nidxs_base;
  int32_t _6362_cof2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->cof_base;
  int32_t _6363_code2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->code_base;
  int32_t _6364_codeptr2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->codeptr_base;
  int32_t _6365_cconst2 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->cconst_base;
  _6351_ws->pop_expr();
  int32_t _6366_nd1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nd;
  int32_t _6367_shape1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->shape_base;
  int32_t _6368_nelem1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nelem;
  int32_t _6369_nnz1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nnz;
  int32_t _6370_ncodeatom1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->ncodeatom;
  bool _6371_hassp1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->hassp;
  int32_t _6372_ptr1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->ptr_base;
  int32_t _6373_sp1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->sp_base;
  int32_t _6374_nidxs1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->nidxs_base;
  int32_t _6375_cof1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->cof_base;
  int32_t _6376_code1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->code_base;
  int32_t _6377_codeptr1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->codeptr_base;
  int32_t _6378_cconst1 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6379_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6379_wi32(_6379_wi32 ? _6379_wi32->raw() : nullptr,_6379_wi32 ? _6379_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6380_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6380_wi64(_6380_wi64 ? _6380_wi64->raw() : nullptr,_6380_wi64 ? _6380_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6381_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6351_ws)->f64;
  _checked_ptr_1<double> _ptr__6381_wf64(_6381_wf64 ? _6381_wf64->raw() : nullptr,_6381_wf64 ? _6381_wf64->size(0) : 0);
  bool _6382_parameterized = ((_6370_ncodeatom1 > (int)0) || (_6357_ncodeatom2 > (int)0));
  if ((_6366_nd1 != _6353_nd2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int32_t _11782_ = (int)0;
  int32_t _11783_ = _6366_nd1;
  for (int32_t _6383_i = _11782_; _6383_i < _11783_; ++_6383_i)
  {
    {
      if ((_ptr__6379_wi32[safe_add( _6367_shape1,_6383_i )] != _ptr__6379_wi32[safe_add( _6354_shape2,_6383_i )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_6371_hassp1) && (!_6358_hassp2)))
  {
    {
      int32_t _6384_rnelem = _6368_nelem1;
      int32_t _6385_rnnz = safe_add( _6369_nnz1,_6356_nnz2 );
      int32_t _6386_rncodeatom = (int)0;
      if (_6382_parameterized)
      {
        {
          int32_t _11784_;
          bool _11785_ = (_6370_ncodeatom1 > (int)0);
          if (_11785_)
          {
            _11784_ = safe_add( _6370_ncodeatom1,safe_mul( _6369_nnz1,(int)2 ) );
          }
          else
          {
            _11784_ = _6369_nnz1;
          }
          _6386_rncodeatom += _11784_;
          int32_t _11786_;
          bool _11787_ = (_6357_ncodeatom2 > (int)0);
          if (_11787_)
          {
            _11786_ = safe_add( _6357_ncodeatom2,safe_mul( _6356_nnz2,(int)2 ) );
          }
          else
          {
            _11786_ = _6356_nnz2;
          }
          _6386_rncodeatom += _11786_;
        }
      }
      {}
      int32_t _6387_rnd = _6366_nd1;
      _6350_rs->alloc_expr(_6387_rnd,_6384_rnelem,_6385_rnnz,false,_6386_rncodeatom);
      int32_t _6388_rshape = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->shape_base;
      int32_t _6389_rptr = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->ptr_base;
      int32_t _6390_rsp = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->sp_base;
      int32_t _6391_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->nidxs_base;
      int32_t _6392_rcof = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->cof_base;
      int32_t _6393_rcode = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->code_base;
      int32_t _6394_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->codeptr_base;
      int32_t _6395_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6396_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6396_ri32(_6396_ri32 ? _6396_ri32->raw() : nullptr,_6396_ri32 ? _6396_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6397_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6397_ri64(_6397_ri64 ? _6397_ri64->raw() : nullptr,_6397_ri64 ? _6397_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6398_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->f64;
      _checked_ptr_1<double> _ptr__6398_rf64(_6398_rf64 ? _6398_rf64->raw() : nullptr,_6398_rf64 ? _6398_rf64->size(0) : 0);
      int32_t _11788_ = (int)0;
      int32_t _11789_ = _6387_rnd;
      for (int32_t _6399_i = _11788_; _6399_i < _11789_; ++_6399_i)
      {
        {
          _ptr__6396_ri32[safe_add( _6388_rshape,_6399_i )] = _ptr__6379_wi32[safe_add( _6367_shape1,_6399_i )];
        }
      }
      int32_t _6400_codei = (int)0;
      int32_t _6401_knz = (int)0;
      if ((_6386_rncodeatom > (int)0))
      {
        {
          _ptr__6396_ri32[_6394_rcodeptr] = (int)0;
        }
      }
      {}
      _ptr__6396_ri32[_6389_rptr] = (int)0;
      int32_t _11790_ = (int)0;
      int32_t _11791_ = _6384_rnelem;
      for (int32_t _6402_i = _11790_; _6402_i < _11791_; ++_6402_i)
      {
        {
          int32_t _11792_ = _ptr__6379_wi32[safe_add( _6372_ptr1,_6402_i )];
          int32_t _11793_ = _ptr__6379_wi32[safe_add( safe_add( _6372_ptr1,_6402_i ),(int)1 )];
          for (int32_t _6403_k = _11792_; _6403_k < _11793_; ++_6403_k)
          {
            {
              _ptr__6397_ri64[safe_add( _6391_rnidxs,_6401_knz )] = _ptr__6380_wi64[safe_add( _6374_nidxs1,_6403_k )];
              _ptr__6398_rf64[safe_add( _6392_rcof,_6401_knz )] = (_ptr__6381_wf64[safe_add( _6375_cof1,_6403_k )] * m1);
              if ((_6370_ncodeatom1 > (int)0))
              {
                {
                  int32_t _11794_ = _ptr__6379_wi32[safe_add( _6377_codeptr1,_6403_k )];
                  int32_t _11795_ = _ptr__6379_wi32[safe_add( safe_add( _6377_codeptr1,_6403_k ),(int)1 )];
                  for (int32_t _6404_l = _11794_; _6404_l < _11795_; ++_6404_l)
                  {
                    {
                      _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = _ptr__6379_wi32[safe_add( _6376_code1,_6404_l )];
                      _ptr__6398_rf64[safe_add( _6395_rcconst,_6400_codei )] = _ptr__6381_wf64[safe_add( _6378_cconst1,_6404_l )];
                      ++ _6400_codei;
                    }
                  }
                  _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = 2;
                  _ptr__6398_rf64[safe_add( _6395_rcconst,_6400_codei )] = m1;
                  ++ _6400_codei;
                  _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = 5;
                  ++ _6400_codei;
                  _ptr__6396_ri32[safe_add( safe_add( _6394_rcodeptr,_6401_knz ),(int)1 )] = _6400_codei;
                }
              }
              else
              {
                {
                  if ((_6386_rncodeatom > (int)0))
                  {
                    {
                      _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = 2;
                      _ptr__6398_rf64[safe_add( _6395_rcconst,_6400_codei )] = 0.0;
                      ++ _6400_codei;
                      _ptr__6396_ri32[safe_add( safe_add( _6394_rcodeptr,_6401_knz ),(int)1 )] = _6400_codei;
                    }
                  }
                  {}
                }
              }
              ++ _6401_knz;
            }
          }
          int32_t _11796_ = _ptr__6379_wi32[safe_add( _6359_ptr2,_6402_i )];
          int32_t _11797_ = _ptr__6379_wi32[safe_add( safe_add( _6359_ptr2,_6402_i ),(int)1 )];
          for (int32_t _6405_k = _11796_; _6405_k < _11797_; ++_6405_k)
          {
            {
              _ptr__6397_ri64[safe_add( _6391_rnidxs,_6401_knz )] = _ptr__6380_wi64[safe_add( _6361_nidxs2,_6405_k )];
              _ptr__6398_rf64[safe_add( _6392_rcof,_6401_knz )] = (_ptr__6381_wf64[safe_add( _6362_cof2,_6405_k )] * m2);
              if ((_6357_ncodeatom2 > (int)0))
              {
                {
                  int32_t _11798_ = _ptr__6379_wi32[safe_add( _6364_codeptr2,_6405_k )];
                  int32_t _11799_ = _ptr__6379_wi32[safe_add( safe_add( _6364_codeptr2,_6405_k ),(int)1 )];
                  for (int32_t _6406_l = _11798_; _6406_l < _11799_; ++_6406_l)
                  {
                    {
                      _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = _ptr__6379_wi32[safe_add( _6363_code2,_6406_l )];
                      _ptr__6398_rf64[safe_add( _6395_rcconst,_6400_codei )] = _ptr__6381_wf64[safe_add( _6365_cconst2,_6406_l )];
                      ++ _6400_codei;
                    }
                  }
                  _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = 2;
                  _ptr__6398_rf64[safe_add( _6395_rcconst,_6400_codei )] = m2;
                  ++ _6400_codei;
                  _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = 5;
                  ++ _6400_codei;
                  _ptr__6396_ri32[safe_add( safe_add( _6394_rcodeptr,_6401_knz ),(int)1 )] = _6400_codei;
                }
              }
              else
              {
                {
                  if ((_6386_rncodeatom > (int)0))
                  {
                    {
                      _ptr__6396_ri32[safe_add( _6393_rcode,_6400_codei )] = 2;
                      _ptr__6398_rf64[safe_add( _6395_rcconst,_6400_codei )] = 0.0;
                      ++ _6400_codei;
                      _ptr__6396_ri32[safe_add( safe_add( _6394_rcodeptr,_6401_knz ),(int)1 )] = _6400_codei;
                    }
                  }
                  {}
                }
              }
              ++ _6401_knz;
            }
          }
          _ptr__6396_ri32[safe_add( safe_add( _6389_rptr,_6402_i ),(int)1 )] = _6401_knz;
        }
      }
    }
  }
  else if(((!_6371_hassp1) || (!_6358_hassp2)))
  {
    {
      if ((!_6358_hassp2))
      {
        {
          int32_t _6407_tnelem = _6355_nelem2;
          int32_t _6408_tnnz = _6356_nnz2;
          int32_t _6409_tptr = _6359_ptr2;
          int32_t _6410_tsp = _6360_sp2;
          int32_t _6411_tnidxs = _6361_nidxs2;
          int32_t _6412_tncodeatom = _6357_ncodeatom2;
          int32_t _6413_tcodeptr = _6364_codeptr2;
          int32_t _6414_tcode = _6363_code2;
          int32_t _6415_tcconst = _6365_cconst2;
          int32_t _6416_tcof = _6362_cof2;
          _6355_nelem2 = _6368_nelem1;
          _6356_nnz2 = _6369_nnz1;
          _6359_ptr2 = _6372_ptr1;
          _6360_sp2 = _6373_sp1;
          _6361_nidxs2 = _6374_nidxs1;
          _6357_ncodeatom2 = _6370_ncodeatom1;
          _6364_codeptr2 = _6377_codeptr1;
          _6363_code2 = _6376_code1;
          _6365_cconst2 = _6378_cconst1;
          _6362_cof2 = _6375_cof1;
          _6368_nelem1 = _6407_tnelem;
          _6369_nnz1 = _6408_tnnz;
          _6372_ptr1 = _6409_tptr;
          _6373_sp1 = _6410_tsp;
          _6374_nidxs1 = _6411_tnidxs;
          _6370_ncodeatom1 = _6412_tncodeatom;
          _6377_codeptr1 = _6413_tcodeptr;
          _6376_code1 = _6414_tcode;
          _6378_cconst1 = _6415_tcconst;
          _6375_cof1 = _6416_tcof;
        }
      }
      {}
      double _11800_;
      bool _11801_ = (!_6371_hassp1);
      if (_11801_)
      {
        _11800_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _11800_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _6417_m1 = _11800_;
      double _11802_;
      bool _11803_ = (!_6371_hassp1);
      if (_11803_)
      {
        _11802_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _11802_ = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _6418_m2 = _11802_;
      int32_t _6419_rnelem = _6368_nelem1;
      int32_t _6420_rnnz = safe_add( _6369_nnz1,_6356_nnz2 );
      int32_t _6421_rnd = _6366_nd1;
      int32_t _6422_rncodeatom = safe_add( _6370_ncodeatom1,_6357_ncodeatom2 );
      if (_6382_parameterized)
      {
        {
          int32_t _11804_;
          bool _11805_ = (_6370_ncodeatom1 > (int)0);
          if (_11805_)
          {
            _11804_ = safe_mul( (int)2,_6369_nnz1 );
          }
          else
          {
            _11804_ = _6369_nnz1;
          }
          _6422_rncodeatom += _11804_;
          int32_t _11806_;
          bool _11807_ = (_6357_ncodeatom2 > (int)0);
          if (_11807_)
          {
            _11806_ = safe_mul( (int)2,_6356_nnz2 );
          }
          else
          {
            _11806_ = _6356_nnz2;
          }
          _6422_rncodeatom += _11806_;
        }
      }
      {}
      _6350_rs->alloc_expr(_6421_rnd,_6419_rnelem,_6420_rnnz,false,_6422_rncodeatom);
      int32_t _6423_rshape = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->shape_base;
      int32_t _6424_rptr = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->ptr_base;
      int32_t _6425_rsp = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->sp_base;
      int32_t _6426_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->nidxs_base;
      int32_t _6427_rcof = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->cof_base;
      int32_t _6428_rcode = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->code_base;
      int32_t _6429_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->codeptr_base;
      int32_t _6430_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6431_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6431_ri32(_6431_ri32 ? _6431_ri32->raw() : nullptr,_6431_ri32 ? _6431_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6432_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6432_ri64(_6432_ri64 ? _6432_ri64->raw() : nullptr,_6432_ri64 ? _6432_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6433_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->f64;
      _checked_ptr_1<double> _ptr__6433_rf64(_6433_rf64 ? _6433_rf64->raw() : nullptr,_6433_rf64 ? _6433_rf64->size(0) : 0);
      {
        int32_t _6434_codei = (int)0;
        int32_t _6435_elmi = (int)0;
        int32_t _6436_nzi = (int)0;
        int32_t _11808_ = (int)0;
        int32_t _11809_ = _6421_rnd;
        for (int32_t _6437_i = _11808_; _6437_i < _11809_; ++_6437_i)
        {
          {
            _ptr__6431_ri32[safe_add( _6423_rshape,_6437_i )] = _ptr__6379_wi32[safe_add( _6367_shape1,_6437_i )];
          }
        }
        _ptr__6431_ri32[_6424_rptr] = (int)0;
        if ((_6422_rncodeatom > (int)0))
        {
          {
            _ptr__6431_ri32[_6429_rcodeptr] = (int)0;
          }
        }
        {}
        int32_t _6438_ii2 = (int)0;
        int32_t _6439_i1 = (int)0;
        while ( ((_6439_i1 < _6368_nelem1) || (_6438_ii2 < _6355_nelem2)) )
        {
          {
            if (((_6439_i1 < _6368_nelem1) && ((_6438_ii2 >= _6355_nelem2) || (_6439_i1 < _ptr__6380_wi64[safe_add( _6360_sp2,_6438_ii2 )]))))
            {
              {
                int32_t _11810_ = _ptr__6379_wi32[safe_add( _6372_ptr1,_6439_i1 )];
                int32_t _11811_ = _ptr__6379_wi32[safe_add( safe_add( _6372_ptr1,_6439_i1 ),(int)1 )];
                for (int32_t _6440_j = _11810_; _6440_j < _11811_; ++_6440_j)
                {
                  {
                    _ptr__6432_ri64[safe_add( _6426_rnidxs,_6436_nzi )] = _ptr__6380_wi64[safe_add( _6374_nidxs1,_6440_j )];
                    _ptr__6433_rf64[safe_add( _6427_rcof,_6436_nzi )] = (_ptr__6381_wf64[safe_add( _6375_cof1,_6440_j )] * _6417_m1);
                    if ((_6370_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11812_ = _ptr__6379_wi32[safe_add( _6377_codeptr1,_6440_j )];
                        int32_t _11813_ = _ptr__6379_wi32[safe_add( safe_add( _6377_codeptr1,_6440_j ),(int)1 )];
                        for (int32_t _6441_k = _11812_; _6441_k < _11813_; ++_6441_k)
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = _ptr__6379_wi32[safe_add( _6376_code1,_6441_k )];
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _ptr__6381_wf64[safe_add( _6378_cconst1,_6441_k )];
                            ++ _6434_codei;
                          }
                        }
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                        _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _6417_m1;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 5;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6422_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = 0.0;
                            ++ _6434_codei;
                            _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6436_nzi;
                  }
                }
                _ptr__6431_ri32[safe_add( safe_add( _6424_rptr,_6435_elmi ),(int)1 )] = _6436_nzi;
                ++ _6439_i1;
              }
            }
            else if(((_6438_ii2 < _6355_nelem2) && ((_6439_i1 >= _6368_nelem1) || (_6439_i1 > _ptr__6380_wi64[safe_add( _6360_sp2,_6438_ii2 )]))))
            {
              {
                int32_t _11814_ = _ptr__6379_wi32[safe_add( _6359_ptr2,_6438_ii2 )];
                int32_t _11815_ = _ptr__6379_wi32[safe_add( safe_add( _6359_ptr2,_6438_ii2 ),(int)1 )];
                for (int32_t _6442_j = _11814_; _6442_j < _11815_; ++_6442_j)
                {
                  {
                    _ptr__6432_ri64[safe_add( _6426_rnidxs,_6436_nzi )] = _ptr__6380_wi64[safe_add( _6361_nidxs2,_6442_j )];
                    _ptr__6433_rf64[safe_add( _6427_rcof,_6436_nzi )] = (_ptr__6381_wf64[safe_add( _6362_cof2,_6442_j )] * _6418_m2);
                    if ((_6357_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11816_ = _ptr__6379_wi32[safe_add( _6364_codeptr2,_6442_j )];
                        int32_t _11817_ = _ptr__6379_wi32[safe_add( safe_add( _6364_codeptr2,_6442_j ),(int)1 )];
                        for (int32_t _6443_k = _11816_; _6443_k < _11817_; ++_6443_k)
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = _ptr__6379_wi32[safe_add( _6363_code2,_6443_k )];
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _ptr__6381_wf64[safe_add( _6365_cconst2,_6443_k )];
                            ++ _6434_codei;
                          }
                        }
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                        _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _6418_m2;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 5;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6422_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = 0.0;
                            ++ _6434_codei;
                            _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6436_nzi;
                  }
                }
                _ptr__6431_ri32[safe_add( safe_add( _6424_rptr,_6435_elmi ),(int)1 )] = _6436_nzi;
                ++ _6438_ii2;
              }
            }
            else
            {
              {
                int32_t _11818_ = _ptr__6379_wi32[safe_add( _6372_ptr1,_6439_i1 )];
                int32_t _11819_ = _ptr__6379_wi32[safe_add( safe_add( _6372_ptr1,_6439_i1 ),(int)1 )];
                for (int32_t _6444_j = _11818_; _6444_j < _11819_; ++_6444_j)
                {
                  {
                    _ptr__6432_ri64[safe_add( _6426_rnidxs,_6436_nzi )] = _ptr__6380_wi64[safe_add( _6374_nidxs1,_6444_j )];
                    _ptr__6433_rf64[safe_add( _6427_rcof,_6436_nzi )] = (_ptr__6381_wf64[safe_add( _6375_cof1,_6444_j )] * _6417_m1);
                    if ((_6370_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11820_ = _ptr__6379_wi32[safe_add( _6377_codeptr1,_6444_j )];
                        int32_t _11821_ = _ptr__6379_wi32[safe_add( safe_add( _6377_codeptr1,_6444_j ),(int)1 )];
                        for (int32_t _6445_k = _11820_; _6445_k < _11821_; ++_6445_k)
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = _ptr__6379_wi32[safe_add( _6376_code1,_6445_k )];
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _ptr__6381_wf64[safe_add( _6378_cconst1,_6445_k )];
                            ++ _6434_codei;
                          }
                        }
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                        _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _6417_m1;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 5;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6422_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = 0.0;
                            ++ _6434_codei;
                            _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6436_nzi;
                  }
                }
                int32_t _11822_ = _ptr__6379_wi32[safe_add( _6359_ptr2,_6438_ii2 )];
                int32_t _11823_ = _ptr__6379_wi32[safe_add( safe_add( _6359_ptr2,_6438_ii2 ),(int)1 )];
                for (int32_t _6446_j = _11822_; _6446_j < _11823_; ++_6446_j)
                {
                  {
                    _ptr__6432_ri64[safe_add( _6426_rnidxs,_6436_nzi )] = _ptr__6380_wi64[safe_add( _6361_nidxs2,_6446_j )];
                    _ptr__6433_rf64[safe_add( _6427_rcof,_6436_nzi )] = (_ptr__6381_wf64[safe_add( _6362_cof2,_6446_j )] * _6418_m2);
                    if ((_6357_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11824_ = _ptr__6379_wi32[safe_add( _6364_codeptr2,_6446_j )];
                        int32_t _11825_ = _ptr__6379_wi32[safe_add( safe_add( _6364_codeptr2,_6446_j ),(int)1 )];
                        for (int32_t _6447_k = _11824_; _6447_k < _11825_; ++_6447_k)
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = _ptr__6379_wi32[safe_add( _6363_code2,_6447_k )];
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _ptr__6381_wf64[safe_add( _6365_cconst2,_6447_k )];
                            ++ _6434_codei;
                          }
                        }
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                        _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = _6418_m2;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 5;
                        ++ _6434_codei;
                        _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6422_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6431_ri32[safe_add( _6428_rcode,_6434_codei )] = 2;
                            _ptr__6433_rf64[safe_add( _6430_rcconst,_6434_codei )] = 0.0;
                            ++ _6434_codei;
                            _ptr__6431_ri32[safe_add( safe_add( _6429_rcodeptr,_6436_nzi ),(int)1 )] = _6434_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6436_nzi;
                  }
                }
                _ptr__6431_ri32[safe_add( safe_add( _6424_rptr,_6435_elmi ),(int)1 )] = _6436_nzi;
                ++ _6439_i1;
                ++ _6438_ii2;
              }
            }
            ++ _6435_elmi;
          }
        }
        if ((_6436_nzi != _6420_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
          }
        }
        {}
        if ((_6434_codei != _6422_rncodeatom))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      int32_t _6448_rnnz = safe_add( _6369_nnz1,_6356_nnz2 );
      int32_t _6449_rnelem = (int)0;
      int32_t _6450_rnd = _6366_nd1;
      int32_t _6451_rncodeatom = safe_add( _6370_ncodeatom1,_6357_ncodeatom2 );
      if (_6382_parameterized)
      {
        {
          int32_t _11826_;
          bool _11827_ = (_6370_ncodeatom1 > (int)0);
          if (_11827_)
          {
            _11826_ = safe_mul( (int)2,_6369_nnz1 );
          }
          else
          {
            _11826_ = _6369_nnz1;
          }
          _6451_rncodeatom += _11826_;
          int32_t _11828_;
          bool _11829_ = (_6357_ncodeatom2 > (int)0);
          if (_11829_)
          {
            _11828_ = safe_mul( (int)2,_6356_nnz2 );
          }
          else
          {
            _11828_ = _6356_nnz2;
          }
          _6451_rncodeatom += _11828_;
        }
      }
      {}
      int64_t _6452_size = (int64_t)1;
      int32_t _11830_ = (int)0;
      int32_t _11831_ = _6450_rnd;
      for (int32_t _6453_i = _11830_; _6453_i < _11831_; ++_6453_i)
      {
        {
          _6452_size *= _ptr__6379_wi32[safe_add( _6367_shape1,_6453_i )];
        }
      }
      {
        int32_t _6454_i2 = (int)0;
        int32_t _6455_i1 = (int)0;
        while ( ((_6455_i1 < _6368_nelem1) && (_6454_i2 < _6355_nelem2)) )
        {
          {
            if ((_ptr__6380_wi64[safe_add( _6373_sp1,_6455_i1 )] < _ptr__6380_wi64[safe_add( _6360_sp2,_6454_i2 )]))
            {
              {
                ++ _6449_rnelem;
                ++ _6455_i1;
              }
            }
            else if((_ptr__6380_wi64[safe_add( _6373_sp1,_6455_i1 )] > _ptr__6380_wi64[safe_add( _6360_sp2,_6454_i2 )]))
            {
              {
                ++ _6449_rnelem;
                ++ _6454_i2;
              }
            }
            else
            {
              {
                ++ _6449_rnelem;
                ++ _6455_i1;
                ++ _6454_i2;
              }
            }
          }
        }
        _6449_rnelem += (safe_add( (_6368_nelem1 - _6455_i1),_6355_nelem2 ) - _6454_i2);
      }
      bool _6456_rhassp = (_6449_rnelem < _6452_size);
      _6350_rs->alloc_expr(_6450_rnd,_6449_rnelem,_6448_rnnz,_6456_rhassp,_6451_rncodeatom);
      int32_t _6457_rshape = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->shape_base;
      int32_t _6458_rptr = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->ptr_base;
      int32_t _11832_;
      bool _11833_ = _6456_rhassp;
      if (_11833_)
      {
        _11832_ = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->sp_base;
      }
      else
      {
        _11832_ = _6350_rs->alloci64(_6449_rnelem);
      }
      int32_t _6459_rsp = _11832_;
      int32_t _6460_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->nidxs_base;
      int32_t _6461_rcof = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->cof_base;
      int32_t _6462_rcode = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->code_base;
      int32_t _6463_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->codeptr_base;
      int32_t _6464_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6465_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6465_ri32(_6465_ri32 ? _6465_ri32->raw() : nullptr,_6465_ri32 ? _6465_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6466_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6466_ri64(_6466_ri64 ? _6466_ri64->raw() : nullptr,_6466_ri64 ? _6466_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6467_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6350_rs)->f64;
      _checked_ptr_1<double> _ptr__6467_rf64(_6467_rf64 ? _6467_rf64->raw() : nullptr,_6467_rf64 ? _6467_rf64->size(0) : 0);
      int32_t _11834_ = (int)0;
      int32_t _11835_ = _6450_rnd;
      for (int32_t _6468_i = _11834_; _6468_i < _11835_; ++_6468_i)
      {
        {
          _ptr__6465_ri32[safe_add( _6457_rshape,_6468_i )] = _ptr__6379_wi32[safe_add( _6367_shape1,_6468_i )];
        }
      }
      {
        _ptr__6465_ri32[_6458_rptr] = (int)0;
        if ((_6451_rncodeatom > (int)0))
        {
          {
            _ptr__6465_ri32[_6463_rcodeptr] = (int)0;
          }
        }
        {}
        int32_t _6469_codei = (int)0;
        int32_t _6470_pe = (int)0;
        int32_t _6471_p = (int)0;
        int32_t _6472_i2 = (int)0;
        int32_t _6473_i1 = (int)0;
        while ( ((_6473_i1 < _6368_nelem1) && (_6472_i2 < _6355_nelem2)) )
        {
          {
            if ((_ptr__6380_wi64[safe_add( _6373_sp1,_6473_i1 )] < _ptr__6380_wi64[safe_add( _6360_sp2,_6472_i2 )]))
            {
              {
                int32_t _11836_ = _ptr__6379_wi32[safe_add( _6372_ptr1,_6473_i1 )];
                int32_t _11837_ = _ptr__6379_wi32[safe_add( safe_add( _6372_ptr1,_6473_i1 ),(int)1 )];
                for (int32_t _6474_j = _11836_; _6474_j < _11837_; ++_6474_j)
                {
                  {
                    _ptr__6466_ri64[safe_add( _6460_rnidxs,_6471_p )] = _ptr__6380_wi64[safe_add( _6374_nidxs1,_6474_j )];
                    _ptr__6467_rf64[safe_add( _6461_rcof,_6471_p )] = (m1 * _ptr__6381_wf64[safe_add( _6375_cof1,_6474_j )]);
                    if ((_6370_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11838_ = _ptr__6379_wi32[safe_add( _6377_codeptr1,_6474_j )];
                        int32_t _11839_ = _ptr__6379_wi32[safe_add( safe_add( _6377_codeptr1,_6474_j ),(int)1 )];
                        for (int32_t _6475_k = _11838_; _6475_k < _11839_; ++_6475_k)
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = _ptr__6379_wi32[safe_add( _6376_code1,_6475_k )];
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = _ptr__6381_wf64[safe_add( _6378_cconst1,_6475_k )];
                            ++ _6469_codei;
                          }
                        }
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = m1;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 5;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6451_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = (int)0;
                            ++ _6469_codei;
                            _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6471_p;
                  }
                }
                _ptr__6466_ri64[safe_add( _6459_rsp,_6470_pe )] = _ptr__6380_wi64[safe_add( _6373_sp1,_6473_i1 )];
                _ptr__6465_ri32[safe_add( safe_add( _6458_rptr,_6470_pe ),(int)1 )] = _6471_p;
                ++ _6470_pe;
                ++ _6473_i1;
              }
            }
            else if((_ptr__6380_wi64[safe_add( _6360_sp2,_6472_i2 )] < _ptr__6380_wi64[safe_add( _6373_sp1,_6473_i1 )]))
            {
              {
                int32_t _11840_ = _ptr__6379_wi32[safe_add( _6359_ptr2,_6472_i2 )];
                int32_t _11841_ = _ptr__6379_wi32[safe_add( safe_add( _6359_ptr2,_6472_i2 ),(int)1 )];
                for (int32_t _6476_j = _11840_; _6476_j < _11841_; ++_6476_j)
                {
                  {
                    _ptr__6466_ri64[safe_add( _6460_rnidxs,_6471_p )] = _ptr__6380_wi64[safe_add( _6361_nidxs2,_6476_j )];
                    _ptr__6467_rf64[safe_add( _6461_rcof,_6471_p )] = (m2 * _ptr__6381_wf64[safe_add( _6362_cof2,_6476_j )]);
                    if ((_6357_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11842_ = _ptr__6379_wi32[safe_add( _6364_codeptr2,_6476_j )];
                        int32_t _11843_ = _ptr__6379_wi32[safe_add( safe_add( _6364_codeptr2,_6476_j ),(int)1 )];
                        for (int32_t _6477_k = _11842_; _6477_k < _11843_; ++_6477_k)
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = _ptr__6379_wi32[safe_add( _6363_code2,_6477_k )];
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = _ptr__6381_wf64[safe_add( _6365_cconst2,_6477_k )];
                            ++ _6469_codei;
                          }
                        }
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = m2;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 5;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6451_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = (int)0;
                            ++ _6469_codei;
                            _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6471_p;
                  }
                }
                _ptr__6466_ri64[safe_add( _6459_rsp,_6470_pe )] = _ptr__6380_wi64[safe_add( _6360_sp2,_6472_i2 )];
                _ptr__6465_ri32[safe_add( safe_add( _6458_rptr,_6470_pe ),(int)1 )] = _6471_p;
                ++ _6470_pe;
                ++ _6472_i2;
              }
            }
            else
            {
              {
                int32_t _11844_ = _ptr__6379_wi32[safe_add( _6372_ptr1,_6473_i1 )];
                int32_t _11845_ = _ptr__6379_wi32[safe_add( safe_add( _6372_ptr1,_6473_i1 ),(int)1 )];
                for (int32_t _6478_j = _11844_; _6478_j < _11845_; ++_6478_j)
                {
                  {
                    _ptr__6466_ri64[safe_add( _6460_rnidxs,_6471_p )] = _ptr__6380_wi64[safe_add( _6374_nidxs1,_6478_j )];
                    _ptr__6467_rf64[safe_add( _6461_rcof,_6471_p )] = (m1 * _ptr__6381_wf64[safe_add( _6375_cof1,_6478_j )]);
                    if ((_6370_ncodeatom1 > (int)0))
                    {
                      {
                        int32_t _11846_ = _ptr__6379_wi32[safe_add( _6377_codeptr1,_6478_j )];
                        int32_t _11847_ = _ptr__6379_wi32[safe_add( safe_add( _6377_codeptr1,_6478_j ),(int)1 )];
                        for (int32_t _6479_k = _11846_; _6479_k < _11847_; ++_6479_k)
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = _ptr__6379_wi32[safe_add( _6376_code1,_6479_k )];
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = _ptr__6381_wf64[safe_add( _6378_cconst1,_6479_k )];
                            ++ _6469_codei;
                          }
                        }
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = m1;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 5;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6451_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = (int)0;
                            ++ _6469_codei;
                            _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6471_p;
                  }
                }
                int32_t _11848_ = _ptr__6379_wi32[safe_add( _6359_ptr2,_6472_i2 )];
                int32_t _11849_ = _ptr__6379_wi32[safe_add( safe_add( _6359_ptr2,_6472_i2 ),(int)1 )];
                for (int32_t _6480_j = _11848_; _6480_j < _11849_; ++_6480_j)
                {
                  {
                    _ptr__6466_ri64[safe_add( _6460_rnidxs,_6471_p )] = _ptr__6380_wi64[safe_add( _6361_nidxs2,_6480_j )];
                    _ptr__6467_rf64[safe_add( _6461_rcof,_6471_p )] = (m2 * _ptr__6381_wf64[safe_add( _6362_cof2,_6480_j )]);
                    if ((_6357_ncodeatom2 > (int)0))
                    {
                      {
                        int32_t _11850_ = _ptr__6379_wi32[safe_add( _6364_codeptr2,_6480_j )];
                        int32_t _11851_ = _ptr__6379_wi32[safe_add( safe_add( _6364_codeptr2,_6480_j ),(int)1 )];
                        for (int32_t _6481_k = _11850_; _6481_k < _11851_; ++_6481_k)
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = _ptr__6379_wi32[safe_add( _6363_code2,_6481_k )];
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = _ptr__6381_wf64[safe_add( _6365_cconst2,_6481_k )];
                            ++ _6469_codei;
                          }
                        }
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = m2;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 5;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                      }
                    }
                    else
                    {
                      {
                        if ((_6451_rncodeatom > (int)0))
                        {
                          {
                            _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                            _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = (int)0;
                            ++ _6469_codei;
                            _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6471_p;
                  }
                }
                _ptr__6466_ri64[safe_add( _6459_rsp,_6470_pe )] = _ptr__6380_wi64[safe_add( _6373_sp1,_6473_i1 )];
                _ptr__6465_ri32[safe_add( safe_add( _6458_rptr,_6470_pe ),(int)1 )] = _6471_p;
                ++ _6470_pe;
                ++ _6473_i1;
                ++ _6472_i2;
              }
            }
          }
        }
        while ( (_6473_i1 < _6368_nelem1) )
        {
          {
            int32_t _11852_ = _ptr__6379_wi32[safe_add( _6372_ptr1,_6473_i1 )];
            int32_t _11853_ = _ptr__6379_wi32[safe_add( safe_add( _6372_ptr1,_6473_i1 ),(int)1 )];
            for (int32_t _6482_j = _11852_; _6482_j < _11853_; ++_6482_j)
            {
              {
                _ptr__6466_ri64[safe_add( _6460_rnidxs,_6471_p )] = _ptr__6380_wi64[safe_add( _6374_nidxs1,_6482_j )];
                _ptr__6467_rf64[safe_add( _6461_rcof,_6471_p )] = (m1 * _ptr__6381_wf64[safe_add( _6375_cof1,_6482_j )]);
                if ((_6370_ncodeatom1 > (int)0))
                {
                  {
                    int32_t _11854_ = _ptr__6379_wi32[safe_add( _6377_codeptr1,_6482_j )];
                    int32_t _11855_ = _ptr__6379_wi32[safe_add( safe_add( _6377_codeptr1,_6482_j ),(int)1 )];
                    for (int32_t _6483_k = _11854_; _6483_k < _11855_; ++_6483_k)
                    {
                      {
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = _ptr__6379_wi32[safe_add( _6376_code1,_6483_k )];
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = _ptr__6381_wf64[safe_add( _6378_cconst1,_6483_k )];
                        ++ _6469_codei;
                      }
                    }
                    _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                    _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = m1;
                    ++ _6469_codei;
                    _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 5;
                    ++ _6469_codei;
                    _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                  }
                }
                else
                {
                  {
                    if ((_6451_rncodeatom > (int)0))
                    {
                      {
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = (int)0;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                      }
                    }
                    {}
                  }
                }
                ++ _6471_p;
              }
            }
            _ptr__6466_ri64[safe_add( _6459_rsp,_6470_pe )] = _ptr__6380_wi64[safe_add( _6373_sp1,_6473_i1 )];
            _ptr__6465_ri32[safe_add( safe_add( _6458_rptr,_6470_pe ),(int)1 )] = _6471_p;
            ++ _6470_pe;
            ++ _6473_i1;
          }
        }
        while ( (_6472_i2 < _6355_nelem2) )
        {
          {
            int32_t _11856_ = _ptr__6379_wi32[safe_add( _6359_ptr2,_6472_i2 )];
            int32_t _11857_ = _ptr__6379_wi32[safe_add( safe_add( _6359_ptr2,_6472_i2 ),(int)1 )];
            for (int32_t _6484_j = _11856_; _6484_j < _11857_; ++_6484_j)
            {
              {
                _ptr__6466_ri64[safe_add( _6460_rnidxs,_6471_p )] = _ptr__6380_wi64[safe_add( _6361_nidxs2,_6484_j )];
                _ptr__6467_rf64[safe_add( _6461_rcof,_6471_p )] = (m2 * _ptr__6381_wf64[safe_add( _6362_cof2,_6484_j )]);
                if ((_6357_ncodeatom2 > (int)0))
                {
                  {
                    int32_t _11858_ = _ptr__6379_wi32[safe_add( _6364_codeptr2,_6484_j )];
                    int32_t _11859_ = _ptr__6379_wi32[safe_add( safe_add( _6364_codeptr2,_6484_j ),(int)1 )];
                    for (int32_t _6485_k = _11858_; _6485_k < _11859_; ++_6485_k)
                    {
                      {
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = _ptr__6379_wi32[safe_add( _6363_code2,_6485_k )];
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = _ptr__6381_wf64[safe_add( _6365_cconst2,_6485_k )];
                        ++ _6469_codei;
                      }
                    }
                    _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                    _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = m2;
                    ++ _6469_codei;
                    _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 5;
                    ++ _6469_codei;
                    _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                  }
                }
                else
                {
                  {
                    if ((_6451_rncodeatom > (int)0))
                    {
                      {
                        _ptr__6465_ri32[safe_add( _6462_rcode,_6469_codei )] = 2;
                        _ptr__6467_rf64[safe_add( _6464_rcconst,_6469_codei )] = (int)0;
                        ++ _6469_codei;
                        _ptr__6465_ri32[safe_add( safe_add( _6463_rcodeptr,_6471_p ),(int)1 )] = _6469_codei;
                      }
                    }
                    {}
                  }
                }
                ++ _6471_p;
              }
            }
            _ptr__6466_ri64[safe_add( _6459_rsp,_6470_pe )] = _ptr__6380_wi64[safe_add( _6360_sp2,_6472_i2 )];
            _ptr__6465_ri32[safe_add( safe_add( _6458_rptr,_6470_pe ),(int)1 )] = _6471_p;
            ++ _6470_pe;
            ++ _6472_i2;
          }
        }
      }
      if ((!_6456_rhassp))
      {
        {
          _6350_rs->popi64(_6449_rnelem);
        }
      }
      {}
    }
  }
}
// End mosek.fusion.ExprAdd.eval

// Begin mosek.fusion.ExprAdd.toString
// Method mosek.fusion.ExprAdd.toString @ src/fusion/ExprAdd.monty:603:6-605:7
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprAdd::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("; "))->__mosek_2fusion_2Utils_2StringBuffer__a(m1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(m2)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprAdd.toString

void mosek::fusion::p_ExprAdd::destroy()
{
  e2.reset();
  e1.reset();
}
void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }
// } class ExprAdd
// class ExprWSum { // @ src/fusion/ExprAdd.monty:240:4-594:5
mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }
mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprWSum::p_ExprWSum
  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprWSum.ctor @ src/fusion/ExprAdd.monty:254:6-275:7
mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6486_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6487_w)
{ return new mosek::fusion::ExprWSum(_6486_es,_6487_w); }
mosek::fusion::ExprWSum::ExprWSum
  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6486_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6487_w) : 
   ExprWSum(new mosek::fusion::p_ExprWSum(this))
{ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_6486_es,_6487_w); }
void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6486_es,
    std::shared_ptr< monty::ndarray< double,1 > > _6487_w)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__6487_w(_6487_w ? _6487_w->raw() : nullptr, _6487_w ? _6487_w->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_6486_es)((int)0))->getShape());
    if (((int)((_6487_w)->size(0)) != (int)((_6486_es)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_6487_w);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6488_shape = ((*_6486_es)((int)0))->getShape();
    _checked_ptr_1<int32_t> _ptr__6488_shape(_6488_shape ? _6488_shape->raw() : nullptr,_6488_shape ? _6488_shape->size(0) : 0);
    int32_t _6489_nd = (int)((_6488_shape)->size(0));
    int32_t _11860_ = (int)1;
    int32_t _11861_ = (int)((_6486_es)->size(0));
    for (int32_t _6490_i = _11860_; _6490_i < _11861_; ++_6490_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _6491_eshape = ((*_6486_es)(_6490_i))->getShape();
        _checked_ptr_1<int32_t> _ptr__6491_eshape(_6491_eshape ? _6491_eshape->raw() : nullptr,_6491_eshape ? _6491_eshape->size(0) : 0);
        if ((_6489_nd != (int)((_6491_eshape)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int32_t _11862_ = (int)0;
            int32_t _11863_ = _6489_nd;
            for (int32_t _6492_j = _11862_; _6492_j < _11863_; ++_6492_j)
            {
              {
                if ((_ptr__6488_shape[_6492_j] != _ptr__6491_eshape[_6492_j]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11864_;
    for (int32_t _6493_i = (int)0, _11865_ = (int)((_6486_es)->size(0)); _6493_i < _11865_ ; ++_6493_i)
    {
      _11864_.push_back(((*_6486_es)(_6493_i)));
    }
    auto _11866_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11864_.size()),_11864_.begin(),_11864_.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _11866_;
  }
}
// mosek.fusion.ExprWSum.ctor

// Begin mosek.fusion.ExprWSum.eval
// Method mosek.fusion.ExprWSum.eval @ src/fusion/ExprAdd.monty:277:6-593:7
void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6494_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6495_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6496_xs) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_6494_rs,_6495_ws,_6496_xs); }
void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6494_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6495_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6496_xs)
{
  int32_t _6497_n = (int)((es)->size(0));
  int32_t _11867_ = (int)0;
  int32_t _11868_ = _6497_n;
  for (int32_t _6498_i = _11867_; _6498_i < _11868_; ++_6498_i)
  {
    {
      ((*es)(_6498_i))->eval(_6495_ws,_6494_rs,_6496_xs);
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6499_nd = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6499_nd(_6499_nd ? _6499_nd->raw() : nullptr,_6499_nd ? _6499_nd->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6500_nelem = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6500_nelem(_6500_nelem ? _6500_nelem->raw() : nullptr,_6500_nelem ? _6500_nelem->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6501_nnz = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6501_nnz(_6501_nnz ? _6501_nnz->raw() : nullptr,_6501_nnz ? _6501_nnz->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6502_ncodeatom = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6502_ncodeatom(_6502_ncodeatom ? _6502_ncodeatom->raw() : nullptr,_6502_ncodeatom ? _6502_ncodeatom->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6503_ptr_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6503_ptr_base(_6503_ptr_base ? _6503_ptr_base->raw() : nullptr,_6503_ptr_base ? _6503_ptr_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6504_nidxs_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6504_nidxs_base(_6504_nidxs_base ? _6504_nidxs_base->raw() : nullptr,_6504_nidxs_base ? _6504_nidxs_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6505_sp_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6505_sp_base(_6505_sp_base ? _6505_sp_base->raw() : nullptr,_6505_sp_base ? _6505_sp_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6506_cof_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6506_cof_base(_6506_cof_base ? _6506_cof_base->raw() : nullptr,_6506_cof_base ? _6506_cof_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6507_shape_base = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6507_shape_base(_6507_shape_base ? _6507_shape_base->raw() : nullptr,_6507_shape_base ? _6507_shape_base->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6508_code = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6508_code(_6508_code ? _6508_code->raw() : nullptr,_6508_code ? _6508_code->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6509_codeptr = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6509_codeptr(_6509_codeptr ? _6509_codeptr->raw() : nullptr,_6509_codeptr ? _6509_codeptr->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6510_cconst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
  _checked_ptr_1<int32_t> _ptr__6510_cconst(_6510_cconst ? _6510_cconst->raw() : nullptr,_6510_cconst ? _6510_cconst->size(0) : 0);
  std::shared_ptr< monty::ndarray< bool,1 > > _6511_hassp = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6497_n)));
  int32_t _11869_ = (int)0;
  int32_t _11870_ = _6497_n;
  for (int32_t _6512_i = _11869_; _6512_i < _11870_; ++_6512_i)
  {
    {
      _6495_ws->pop_expr();
      _ptr__6499_nd[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->nd;
      _ptr__6500_nelem[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->nelem;
      _ptr__6501_nnz[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->nnz;
      _ptr__6502_ncodeatom[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->ncodeatom;
      _ptr__6503_ptr_base[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->ptr_base;
      _ptr__6505_sp_base[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->sp_base;
      _ptr__6504_nidxs_base[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->nidxs_base;
      _ptr__6506_cof_base[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->cof_base;
      _ptr__6507_shape_base[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->shape_base;
      _ptr__6508_code[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->code_base;
      _ptr__6509_codeptr[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->codeptr_base;
      _ptr__6510_cconst[((_6497_n - (int)1) - _6512_i)] = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->cconst_base;
      ((*_6511_hassp)(((_6497_n - (int)1) - _6512_i))) = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->hassp;
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6513_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6513_wi32(_6513_wi32 ? _6513_wi32->raw() : nullptr,_6513_wi32 ? _6513_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6514_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6514_wi64(_6514_wi64 ? _6514_wi64->raw() : nullptr,_6514_wi64 ? _6514_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6515_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6495_ws)->f64;
  _checked_ptr_1<double> _ptr__6515_wf64(_6515_wf64 ? _6515_wf64->raw() : nullptr,_6515_wf64 ? _6515_wf64->size(0) : 0);
  {
    bool _6516_ok = true;
    int32_t _11871_ = (int)1;
    int32_t _11872_ = _6497_n;
    for (int32_t _6517_i = _11871_; _6517_i < _11872_; ++_6517_i)
    {
      {
        _6516_ok = (_6516_ok && (_ptr__6499_nd[(int)0] == _ptr__6499_nd[_6517_i]));
        int32_t _11873_ = (int)0;
        int32_t _11874_ = _ptr__6499_nd[(int)0];
        for (int32_t _6518_j = _11873_; _6518_j < _11874_; ++_6518_j)
        {
          {
            _6516_ok = (_6516_ok && (_ptr__6513_wi32[safe_add( _ptr__6507_shape_base[(int)0],_6518_j )] == _ptr__6513_wi32[safe_add( _ptr__6507_shape_base[_6517_i],_6518_j )]));
          }
        }
      }
    }
    if ((!_6516_ok))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
  }
  std::vector<int32_t> _11875_;
  for (int32_t _6520_j = (int)0, _11876_ = _ptr__6499_nd[(int)0]; _6520_j < _11876_ ; ++_6520_j)
  {
    _11875_.push_back(_ptr__6513_wi32[safe_add( _ptr__6507_shape_base[(int)0],_6520_j )]);
  }
  auto _11877_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_11875_.size()),_11875_.begin(),_11875_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6519_wshape = _11877_;
  _checked_ptr_1<int32_t> _ptr__6519_wshape(_6519_wshape ? _6519_wshape->raw() : nullptr,_6519_wshape ? _6519_wshape->size(0) : 0);
  bool _6521_anydense = false;
  int32_t _11878_ = (int)0;
  int32_t _11879_ = _6497_n;
  for (int32_t _6522_i = _11878_; _6522_i < _11879_; ++_6522_i)
  {
    {
      if ((!((*_6511_hassp)(_6522_i))))
      {
        {
          _6521_anydense = true;
        }
      }
      {}
    }
  }
  bool _6523_anycodeatom = false;
  int32_t _11880_ = (int)0;
  int32_t _11881_ = _6497_n;
  for (int32_t _6524_i = _11880_; _6524_i < _11881_; ++_6524_i)
  {
    {
      if ((_ptr__6502_ncodeatom[_6524_i] > (int)0))
      {
        {
          _6523_anycodeatom = true;
        }
      }
      {}
    }
  }
  int32_t _6525_rncodeatom = (int)0;
  int32_t _6526_rnelem = (int)0;
  int32_t _6527_rnnz = (int)0;
  if (_6521_anydense)
  {
    {
      _6526_rnelem = (int32_t)::mosek::fusion::p_Set::size(_6519_wshape);
      int32_t _11882_ = (int)0;
      int32_t _11883_ = _6497_n;
      for (int32_t _6528_i = _11882_; _6528_i < _11883_; ++_6528_i)
      {
        {
          _6527_rnnz += _ptr__6501_nnz[_6528_i];
          if (_6523_anycodeatom)
          {
            {
              int32_t _11884_;
              bool _11885_ = (_ptr__6502_ncodeatom[_6528_i] > (int)0);
              if (_11885_)
              {
                _11884_ = safe_add( _ptr__6502_ncodeatom[_6528_i],safe_mul( (int)2,_ptr__6501_nnz[_6528_i] ) );
              }
              else
              {
                _11884_ = _ptr__6501_nnz[_6528_i];
              }
              _6525_rncodeatom += _11884_;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      bool _6529_done = false;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6530_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
      _checked_ptr_1<int32_t> _ptr__6530_ii(_6530_ii ? _6530_ii->raw() : nullptr,_6530_ii ? _6530_ii->size(0) : 0);
      int32_t _11886_ = (int)0;
      int32_t _11887_ = _6497_n;
      for (int32_t _6531_i = _11886_; _6531_i < _11887_; ++_6531_i)
      {
        {
          _6527_rnnz += _ptr__6501_nnz[_6531_i];
          if (_6523_anycodeatom)
          {
            {
              int32_t _11888_;
              bool _11889_ = (_ptr__6502_ncodeatom[_6531_i] > (int)0);
              if (_11889_)
              {
                _11888_ = safe_add( _ptr__6502_ncodeatom[_6531_i],safe_mul( (int)2,_ptr__6501_nnz[_6531_i] ) );
              }
              else
              {
                _11888_ = _ptr__6501_nnz[_6531_i];
              }
              _6525_rncodeatom += _11888_;
            }
          }
          {}
        }
      }
      while ( (!_6529_done) )
      {
        {
          int64_t _6532_min_i = (-(int)1);
          int32_t _11890_ = (int)0;
          int32_t _11891_ = _6497_n;
          for (int32_t _6533_j = _11890_; _6533_j < _11891_; ++_6533_j)
          {
            {
              if (((_ptr__6530_ii[_6533_j] < _ptr__6500_nelem[_6533_j]) && ((_6532_min_i < (int)0) || (_ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6533_j],_ptr__6530_ii[_6533_j] )] < _6532_min_i))))
              {
                {
                  _6532_min_i = _ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6533_j],_ptr__6530_ii[_6533_j] )];
                }
              }
              {}
            }
          }
          if ((_6532_min_i < (int)0))
          {
            {
              _6529_done = true;
            }
          }
          else
          {
            {
              int32_t _11892_ = (int)0;
              int32_t _11893_ = _6497_n;
              for (int32_t _6534_j = _11892_; _6534_j < _11893_; ++_6534_j)
              {
                {
                  if (((_ptr__6530_ii[_6534_j] < _ptr__6500_nelem[_6534_j]) && (_6532_min_i == _ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6534_j],_ptr__6530_ii[_6534_j] )])))
                  {
                    {
                      ++ _ptr__6530_ii[_6534_j];
                    }
                  }
                  {}
                }
              }
              ++ _6526_rnelem;
            }
          }
        }
      }
    }
  }
  _6494_rs->alloc_expr(_ptr__6499_nd[(int)0],_6526_rnelem,_6527_rnnz,(!_6521_anydense),_6525_rncodeatom);
  int32_t _6535_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->ptr_base;
  int32_t _6536_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->nidxs_base;
  int32_t _6537_rsp_base = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->sp_base;
  int32_t _6538_rshape = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->shape_base;
  int32_t _6539_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->cof_base;
  int32_t _6540_rcode = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->code_base;
  int32_t _6541_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->codeptr_base;
  int32_t _6542_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6543_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6543_ri32(_6543_ri32 ? _6543_ri32->raw() : nullptr,_6543_ri32 ? _6543_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6544_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6544_ri64(_6544_ri64 ? _6544_ri64->raw() : nullptr,_6544_ri64 ? _6544_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6545_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6494_rs)->f64;
  _checked_ptr_1<double> _ptr__6545_rf64(_6545_rf64 ? _6545_rf64->raw() : nullptr,_6545_rf64 ? _6545_rf64->size(0) : 0);
  int32_t _11894_ = (int)0;
  int32_t _11895_ = _ptr__6499_nd[(int)0];
  for (int32_t _6546_i = _11894_; _6546_i < _11895_; ++_6546_i)
  {
    {
      _ptr__6543_ri32[safe_add( _6538_rshape,_6546_i )] = _ptr__6513_wi32[safe_add( _ptr__6507_shape_base[(int)0],_6546_i )];
    }
  }
  if ((_6525_rncodeatom > (int)0))
  {
    {
      _ptr__6543_ri32[_6541_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _11896_ = (int)0;
  int32_t _11897_ = safe_add( _6526_rnelem,(int)1 );
  for (int32_t _6547_i = _11896_; _6547_i < _11897_; ++_6547_i)
  {
    {
      _ptr__6543_ri32[safe_add( _6535_rptr_base,_6547_i )] = (int)0;
    }
  }
  if (_6521_anydense)
  {
    {
      int32_t _6548_xcodeptr = (-(int)9999);
      if ((_6525_rncodeatom > (int)0))
      {
        {
          _6548_xcodeptr = _6496_xs->alloci32(safe_add( _6526_rnelem,(int)1 ));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6549_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6496_xs)->i32;
      _checked_ptr_1<int32_t> _ptr__6549_xi32(_6549_xi32 ? _6549_xi32->raw() : nullptr,_6549_xi32 ? _6549_xi32->size(0) : 0);
      if ((_6525_rncodeatom > (int)0))
      {
        {
          int32_t _11898_ = (int)0;
          int32_t _11899_ = safe_add( _6526_rnelem,(int)1 );
          for (int32_t _6550_i = _11898_; _6550_i < _11899_; ++_6550_i)
          {
            {
              _ptr__6549_xi32[safe_add( _6548_xcodeptr,_6550_i )] = (int)0;
            }
          }
        }
      }
      {}
      int32_t _11900_ = (int)0;
      int32_t _11901_ = _6497_n;
      for (int32_t _6551_i = _11900_; _6551_i < _11901_; ++_6551_i)
      {
        {
          if (((*_6511_hassp)(_6551_i)))
          {
            {
              int32_t _11902_ = (int)0;
              int32_t _11903_ = _ptr__6500_nelem[_6551_i];
              for (int32_t _6552_j = _11902_; _6552_j < _11903_; ++_6552_j)
              {
                {
                  _ptr__6543_ri32[safe_add( safe_add( _6535_rptr_base,_ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6551_i],_6552_j )] ),(int)1 )] += (_ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6551_i],_6552_j ),(int)1 )] - _ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6551_i],_6552_j )]);
                }
              }
              if ((_ptr__6502_ncodeatom[_6551_i] > (int)0))
              {
                {
                  int32_t _11904_ = (int)0;
                  int32_t _11905_ = _ptr__6500_nelem[_6551_i];
                  for (int32_t _6553_j = _11904_; _6553_j < _11905_; ++_6553_j)
                  {
                    {
                      _ptr__6549_xi32[safe_add( safe_add( _6548_xcodeptr,_ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6551_i],_6553_j )] ),(int)1 )] += safe_add( (_ptr__6513_wi32[safe_add( _ptr__6509_codeptr[_6551_i],_ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6551_i],_6553_j ),(int)1 )] )] - _ptr__6513_wi32[safe_add( _ptr__6509_codeptr[_6551_i],_ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6551_i],_6553_j )] )]),safe_mul( (int)2,(_ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6551_i],_6553_j ),(int)1 )] - _ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6551_i],_6553_j )]) ) );
                    }
                  }
                }
              }
              else if(_6523_anycodeatom)
              {
                {
                  int32_t _11906_ = (int)0;
                  int32_t _11907_ = _ptr__6500_nelem[_6551_i];
                  for (int32_t _6554_j = _11906_; _6554_j < _11907_; ++_6554_j)
                  {
                    {
                      _ptr__6549_xi32[safe_add( safe_add( _6548_xcodeptr,_ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6551_i],_6554_j )] ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
          else
          {
            {
              int32_t _11908_ = (int)0;
              int32_t _11909_ = _ptr__6500_nelem[_6551_i];
              for (int32_t _6555_j = _11908_; _6555_j < _11909_; ++_6555_j)
              {
                {
                  _ptr__6543_ri32[safe_add( safe_add( _6535_rptr_base,_6555_j ),(int)1 )] += (_ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6551_i],_6555_j ),(int)1 )] - _ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6551_i],_6555_j )]);
                }
              }
              if ((_ptr__6502_ncodeatom[_6551_i] > (int)0))
              {
                {
                  int32_t _11910_ = (int)0;
                  int32_t _11911_ = _ptr__6500_nelem[_6551_i];
                  for (int32_t _6556_j = _11910_; _6556_j < _11911_; ++_6556_j)
                  {
                    {
                      _ptr__6549_xi32[safe_add( safe_add( _6548_xcodeptr,_6556_j ),(int)1 )] += safe_add( (_ptr__6513_wi32[safe_add( _ptr__6509_codeptr[_6551_i],_ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6551_i],_6556_j ),(int)1 )] )] - _ptr__6513_wi32[safe_add( _ptr__6509_codeptr[_6551_i],_ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6551_i],_6556_j )] )]),safe_mul( (int)2,(_ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6551_i],_6556_j ),(int)1 )] - _ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6551_i],_6556_j )]) ) );
                    }
                  }
                }
              }
              else if(_6523_anycodeatom)
              {
                {
                  int32_t _11912_ = (int)0;
                  int32_t _11913_ = _ptr__6500_nelem[_6551_i];
                  for (int32_t _6557_j = _11912_; _6557_j < _11913_; ++_6557_j)
                  {
                    {
                      _ptr__6549_xi32[safe_add( safe_add( _6548_xcodeptr,_6557_j ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      int32_t _11914_ = (int)0;
      int32_t _11915_ = _6526_rnelem;
      for (int32_t _6558_i = _11914_; _6558_i < _11915_; ++_6558_i)
      {
        {
          _ptr__6543_ri32[safe_add( safe_add( _6535_rptr_base,_6558_i ),(int)1 )] += _ptr__6543_ri32[safe_add( _6535_rptr_base,_6558_i )];
        }
      }
      if ((_6525_rncodeatom > (int)0))
      {
        {
          int32_t _11916_ = (int)0;
          int32_t _11917_ = _6526_rnelem;
          for (int32_t _6559_i = _11916_; _6559_i < _11917_; ++_6559_i)
          {
            {
              _ptr__6549_xi32[safe_add( safe_add( _6548_xcodeptr,_6559_i ),(int)1 )] += _ptr__6549_xi32[safe_add( _6548_xcodeptr,_6559_i )];
            }
          }
        }
      }
      {}
      int32_t _11918_ = (int)0;
      int32_t _11919_ = _6497_n;
      for (int32_t _6560_i = _11918_; _6560_i < _11919_; ++_6560_i)
      {
        {
          if (((*_6511_hassp)(_6560_i)))
          {
            {
              int32_t _11920_ = (int)0;
              int32_t _11921_ = _ptr__6500_nelem[_6560_i];
              for (int32_t _6561_j = _11920_; _6561_j < _11921_; ++_6561_j)
              {
                {
                  int32_t _6562_p0 = _ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6560_i],_6561_j )];
                  int32_t _6563_p1 = _ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6560_i],_6561_j ),(int)1 )];
                  int64_t _6564_rii = _ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6560_i],_6561_j )];
                  int32_t _6565_b = _ptr__6543_ri32[safe_add( _6535_rptr_base,_6564_rii )];
                  int32_t _11922_;
                  bool _11923_ = _6523_anycodeatom;
                  if (_11923_)
                  {
                    _11922_ = _ptr__6549_xi32[safe_add( _6548_xcodeptr,_6564_rii )];
                  }
                  else
                  {
                    _11922_ = (-(int)10000);
                  }
                  int32_t _6566_codei = _11922_;
                  int32_t _11924_ = _6562_p0;
                  int32_t _11925_ = _6563_p1;
                  for (int32_t _6567_k = _11924_; _6567_k < _11925_; ++_6567_k)
                  {
                    {
                      _ptr__6544_ri64[safe_add( _6536_rnidxs_base,_6565_b )] = _ptr__6514_wi64[safe_add( _ptr__6504_nidxs_base[_6560_i],_6567_k )];
                      _ptr__6545_rf64[safe_add( _6539_rcof_base,_6565_b )] = (((*w)(_6560_i)) * _ptr__6515_wf64[safe_add( _ptr__6506_cof_base[_6560_i],_6567_k )]);
                      if (_6523_anycodeatom)
                      {
                        {
                          if ((_ptr__6502_ncodeatom[_6560_i] > (int)0))
                          {
                            {
                              int32_t _11926_ = _ptr__6513_wi32[safe_add( _ptr__6509_codeptr[_6560_i],_6567_k )];
                              int32_t _11927_ = _ptr__6513_wi32[safe_add( safe_add( _ptr__6509_codeptr[_6560_i],_6567_k ),(int)1 )];
                              for (int32_t _6568_l = _11926_; _6568_l < _11927_; ++_6568_l)
                              {
                                {
                                  _ptr__6543_ri32[safe_add( _6540_rcode,_6566_codei )] = _ptr__6513_wi32[safe_add( _ptr__6508_code[_6560_i],_6568_l )];
                                  _ptr__6545_rf64[safe_add( _6542_rcconst,_6566_codei )] = _ptr__6515_wf64[safe_add( _ptr__6510_cconst[_6560_i],_6568_l )];
                                  ++ _6566_codei;
                                }
                              }
                              _ptr__6543_ri32[safe_add( _6540_rcode,_6566_codei )] = 2;
                              _ptr__6545_rf64[safe_add( _6542_rcconst,_6566_codei )] = ((*w)(_6560_i));
                              ++ _6566_codei;
                              _ptr__6543_ri32[safe_add( _6540_rcode,_6566_codei )] = 5;
                              ++ _6566_codei;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6543_ri32[safe_add( _6540_rcode,_6566_codei )] = 2;
                              _ptr__6545_rf64[safe_add( _6542_rcconst,_6566_codei )] = 0.0;
                              ++ _6566_codei;
                            }
                          }
                          _ptr__6543_ri32[safe_add( safe_add( _6541_rcodeptr,_6565_b ),(int)1 )] = _6566_codei;
                        }
                      }
                      {}
                      ++ _6565_b;
                    }
                  }
                  if (_6523_anycodeatom)
                  {
                    {
                      _ptr__6549_xi32[safe_add( _6548_xcodeptr,_6564_rii )] = _6566_codei;
                    }
                  }
                  {}
                  _ptr__6543_ri32[safe_add( _6535_rptr_base,_6564_rii )] += (_6563_p1 - _6562_p0);
                }
              }
            }
          }
          else
          {
            {
              int32_t _11928_ = (int)0;
              int32_t _11929_ = _ptr__6500_nelem[_6560_i];
              for (int32_t _6569_j = _11928_; _6569_j < _11929_; ++_6569_j)
              {
                {
                  int32_t _6570_p0 = _ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6560_i],_6569_j )];
                  int32_t _6571_p1 = _ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6560_i],_6569_j ),(int)1 )];
                  int32_t _6572_rii = _6569_j;
                  int32_t _6573_b = _ptr__6543_ri32[safe_add( _6535_rptr_base,_6572_rii )];
                  int32_t _11930_;
                  bool _11931_ = _6523_anycodeatom;
                  if (_11931_)
                  {
                    _11930_ = _ptr__6549_xi32[safe_add( _6548_xcodeptr,_6572_rii )];
                  }
                  else
                  {
                    _11930_ = (-(int)10000);
                  }
                  int32_t _6574_codei = _11930_;
                  int32_t _11932_ = _6570_p0;
                  int32_t _11933_ = _6571_p1;
                  for (int32_t _6575_k = _11932_; _6575_k < _11933_; ++_6575_k)
                  {
                    {
                      _ptr__6544_ri64[safe_add( _6536_rnidxs_base,_6573_b )] = _ptr__6514_wi64[safe_add( _ptr__6504_nidxs_base[_6560_i],_6575_k )];
                      _ptr__6545_rf64[safe_add( _6539_rcof_base,_6573_b )] = (((*w)(_6560_i)) * _ptr__6515_wf64[safe_add( _ptr__6506_cof_base[_6560_i],_6575_k )]);
                      if (_6523_anycodeatom)
                      {
                        {
                          if ((_ptr__6502_ncodeatom[_6560_i] > (int)0))
                          {
                            {
                              int32_t _11934_ = _ptr__6513_wi32[safe_add( _ptr__6509_codeptr[_6560_i],_6575_k )];
                              int32_t _11935_ = _ptr__6513_wi32[safe_add( safe_add( _ptr__6509_codeptr[_6560_i],_6575_k ),(int)1 )];
                              for (int32_t _6576_l = _11934_; _6576_l < _11935_; ++_6576_l)
                              {
                                {
                                  _ptr__6543_ri32[safe_add( _6540_rcode,_6574_codei )] = _ptr__6513_wi32[safe_add( _ptr__6508_code[_6560_i],_6576_l )];
                                  _ptr__6545_rf64[safe_add( _6542_rcconst,_6574_codei )] = _ptr__6515_wf64[safe_add( _ptr__6510_cconst[_6560_i],_6576_l )];
                                  ++ _6574_codei;
                                }
                              }
                              _ptr__6543_ri32[safe_add( _6540_rcode,_6574_codei )] = 2;
                              _ptr__6545_rf64[safe_add( _6542_rcconst,_6574_codei )] = ((*w)(_6560_i));
                              ++ _6574_codei;
                              _ptr__6543_ri32[safe_add( _6540_rcode,_6574_codei )] = 5;
                              ++ _6574_codei;
                              _ptr__6543_ri32[safe_add( safe_add( _6541_rcodeptr,_6573_b ),(int)1 )] = _6574_codei;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6543_ri32[safe_add( _6540_rcode,_6574_codei )] = 2;
                              _ptr__6545_rf64[safe_add( _6542_rcconst,_6574_codei )] = 0.0;
                              ++ _6574_codei;
                            }
                          }
                          _ptr__6543_ri32[safe_add( safe_add( _6541_rcodeptr,_6573_b ),(int)1 )] = _6574_codei;
                        }
                      }
                      {}
                      ++ _6573_b;
                    }
                  }
                  if (_6523_anycodeatom)
                  {
                    {
                      _ptr__6549_xi32[safe_add( _6548_xcodeptr,_6572_rii )] = _6574_codei;
                    }
                  }
                  {}
                  _ptr__6543_ri32[safe_add( _6535_rptr_base,_6572_rii )] += (_6571_p1 - _6570_p0);
                }
              }
            }
          }
        }
      }
      int32_t _11936_ = (int)0;
      int32_t _11937_ = _6526_rnelem;
      for (int32_t _6577_i = _11936_; _6577_i < _11937_; ++_6577_i)
      {
        {
          _ptr__6543_ri32[(safe_add( _6535_rptr_base,_6526_rnelem ) - _6577_i)] = _ptr__6543_ri32[((safe_add( _6535_rptr_base,_6526_rnelem ) - _6577_i) - (int)1)];
        }
      }
      _ptr__6543_ri32[_6535_rptr_base] = (int)0;
    }
  }
  else
  {
    {
      bool _6578_done = false;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6579_ii = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_6497_n)));
      _checked_ptr_1<int32_t> _ptr__6579_ii(_6579_ii ? _6579_ii->raw() : nullptr,_6579_ii ? _6579_ii->size(0) : 0);
      int32_t _6580_codei = (int)0;
      int32_t _6581_kelm = (int)0;
      int32_t _6582_knz = (int)0;
      while ( (!_6578_done) )
      {
        {
          int64_t _6583_idx = (-(int)1);
          int32_t _11938_ = (int)0;
          int32_t _11939_ = _6497_n;
          for (int32_t _6584_j = _11938_; _6584_j < _11939_; ++_6584_j)
          {
            {
              if (((_ptr__6579_ii[_6584_j] < _ptr__6500_nelem[_6584_j]) && ((_6583_idx < (int)0) || (_ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6584_j],_ptr__6579_ii[_6584_j] )] < _6583_idx))))
              {
                {
                  _6583_idx = _ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6584_j],_ptr__6579_ii[_6584_j] )];
                }
              }
              {}
            }
          }
          if ((_6583_idx < (int)0))
          {
            {
              _6578_done = true;
            }
          }
          else
          {
            {
              int32_t _11940_ = (int)0;
              int32_t _11941_ = _6497_n;
              for (int32_t _6585_j = _11940_; _6585_j < _11941_; ++_6585_j)
              {
                {
                  if (((_ptr__6579_ii[_6585_j] < _ptr__6500_nelem[_6585_j]) && (_6583_idx == _ptr__6514_wi64[safe_add( _ptr__6505_sp_base[_6585_j],_ptr__6579_ii[_6585_j] )])))
                  {
                    {
                      int32_t _11942_ = _ptr__6513_wi32[safe_add( _ptr__6503_ptr_base[_6585_j],_ptr__6579_ii[_6585_j] )];
                      int32_t _11943_ = _ptr__6513_wi32[safe_add( safe_add( _ptr__6503_ptr_base[_6585_j],_ptr__6579_ii[_6585_j] ),(int)1 )];
                      for (int32_t _6586_k = _11942_; _6586_k < _11943_; ++_6586_k)
                      {
                        {
                          _ptr__6544_ri64[safe_add( _6536_rnidxs_base,_6582_knz )] = _ptr__6514_wi64[safe_add( _ptr__6504_nidxs_base[_6585_j],_6586_k )];
                          _ptr__6545_rf64[safe_add( _6539_rcof_base,_6582_knz )] = (((*w)(_6585_j)) * _ptr__6515_wf64[safe_add( _ptr__6506_cof_base[_6585_j],_6586_k )]);
                          if (_6523_anycodeatom)
                          {
                            {
                              if ((_ptr__6502_ncodeatom[_6585_j] > (int)0))
                              {
                                {
                                  int32_t _11944_ = _ptr__6513_wi32[safe_add( _ptr__6509_codeptr[_6585_j],_6586_k )];
                                  int32_t _11945_ = _ptr__6513_wi32[safe_add( safe_add( _ptr__6509_codeptr[_6585_j],_6586_k ),(int)1 )];
                                  for (int32_t _6587_l = _11944_; _6587_l < _11945_; ++_6587_l)
                                  {
                                    {
                                      _ptr__6543_ri32[safe_add( _6540_rcode,_6580_codei )] = _ptr__6513_wi32[safe_add( _ptr__6508_code[_6585_j],_6587_l )];
                                      _ptr__6545_rf64[safe_add( _6542_rcconst,_6580_codei )] = _ptr__6515_wf64[safe_add( _ptr__6510_cconst[_6585_j],_6587_l )];
                                      ++ _6580_codei;
                                    }
                                  }
                                  _ptr__6543_ri32[safe_add( _6540_rcode,_6580_codei )] = 2;
                                  _ptr__6545_rf64[safe_add( _6542_rcconst,_6580_codei )] = ((*w)(_6585_j));
                                  ++ _6580_codei;
                                  _ptr__6543_ri32[safe_add( _6540_rcode,_6580_codei )] = 5;
                                  ++ _6580_codei;
                                }
                              }
                              else
                              {
                                {
                                  _ptr__6543_ri32[safe_add( _6540_rcode,_6580_codei )] = 2;
                                  _ptr__6545_rf64[safe_add( _6542_rcconst,_6580_codei )] = 0.0;
                                  ++ _6580_codei;
                                }
                              }
                              _ptr__6543_ri32[safe_add( safe_add( _6541_rcodeptr,_6582_knz ),(int)1 )] = _6580_codei;
                            }
                          }
                          {}
                          ++ _6582_knz;
                        }
                      }
                      ++ _ptr__6579_ii[_6585_j];
                    }
                  }
                  {}
                }
              }
              _ptr__6543_ri32[safe_add( safe_add( _6535_rptr_base,_6581_kelm ),(int)1 )] = _6582_knz;
              _ptr__6544_ri64[safe_add( _6537_rsp_base,_6581_kelm )] = _6583_idx;
            }
          }
          ++ _6581_kelm;
        }
      }
    }
  }
  _6496_xs->clear();
}
// End mosek.fusion.ExprWSum.eval

// Begin mosek.fusion.ExprWSum.toString
// Method mosek.fusion.ExprWSum.toString @ src/fusion/ExprAdd.monty:244:6-253:7
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprWSum::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6588_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprWSum(["));
  _6588_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)((int)0))->toString());
  int32_t _11946_ = (int)1;
  int32_t _11947_ = (int)((es)->size(0));
  for (int32_t _6589_i = _11946_; _6589_i < _11947_; ++_6589_i)
  {
    {
      _6588_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)(_6589_i))->toString());
    }
  }
  _6588_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _6588_sb->toString();
}
// End mosek.fusion.ExprWSum.toString

void mosek::fusion::p_ExprWSum::destroy()
{
  w.reset();
  es.reset();
}
void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }
// } class ExprWSum
// class ExprSumReduce { // @ src/fusion/ExprAdd.monty:4:4-233:5
mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }
mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSumReduce::p_ExprSumReduce
  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSumReduce.ctor @ src/fusion/ExprAdd.monty:17:6-25:7
mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce
  (int32_t _6590_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6591_expr)
{ return new mosek::fusion::ExprSumReduce(_6590_dim,_6591_expr); }
mosek::fusion::ExprSumReduce::ExprSumReduce
  (int32_t _6590_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6591_expr) : 
   ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this))
{ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_6590_dim,_6591_expr); }
void mosek::fusion::p_ExprSumReduce::_initialize  (int32_t _6590_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _6591_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_6590_dim,_6591_expr->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _6591_expr;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _6590_dim;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6592_shape = _6591_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6592_shape(_6592_shape ? _6592_shape->raw() : nullptr,_6592_shape ? _6592_shape->size(0) : 0);
    if (((int)((_6592_shape)->size(0)) <= _6590_dim))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprSumReduce.ctor

// Begin mosek.fusion.ExprSumReduce.eval
// Method mosek.fusion.ExprSumReduce.eval @ src/fusion/ExprAdd.monty:27:6-232:7
void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6593_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6594_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6595_xs) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_6593_rs,_6594_ws,_6595_xs); }
void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6593_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6594_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6595_xs)
{
  expr->eval(_6594_ws,_6593_rs,_6595_xs);
  _6594_ws->pop_expr();
  int32_t _6596_nd = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->nd;
  int32_t _6597_shape_base = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->shape_base;
  int32_t _6598_nelem = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->nelem;
  int32_t _6599_nnz = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->nnz;
  int32_t _6600_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->ncodeatom;
  bool _6601_hassp = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->hassp;
  int32_t _6602_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->ptr_base;
  int32_t _6603_sp_base = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->sp_base;
  int32_t _6604_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->nidxs_base;
  int32_t _6605_cof_base = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->cof_base;
  int32_t _6606_code = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->code_base;
  int32_t _6607_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->codeptr_base;
  int32_t _6608_cconst = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6609_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6609_wi32(_6609_wi32 ? _6609_wi32->raw() : nullptr,_6609_wi32 ? _6609_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6610_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6610_wi64(_6610_wi64 ? _6610_wi64->raw() : nullptr,_6610_wi64 ? _6610_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6611_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6594_ws)->f64;
  _checked_ptr_1<double> _ptr__6611_wf64(_6611_wf64 ? _6611_wf64->raw() : nullptr,_6611_wf64 ? _6611_wf64->size(0) : 0);
  int32_t _6612_ptr = (int)99999;
  int32_t _6613_perm1 = (int)99999;
  int32_t _6614_perm2 = (int)99999;
  if (_6601_hassp)
  {
    {
      int32_t _6615_dimmax = (int)0;
      int32_t _11948_ = (int)0;
      int32_t _11949_ = _6596_nd;
      for (int32_t _6616_i = _11948_; _6616_i < _11949_; ++_6616_i)
      {
        {
          if ((_6615_dimmax < _ptr__6609_wi32[safe_add( _6597_shape_base,_6616_i )]))
          {
            {
              _6615_dimmax = _ptr__6609_wi32[safe_add( _6597_shape_base,_6616_i )];
            }
          }
          {}
        }
      }
      _6612_ptr = _6595_xs->alloci32(safe_add( _6615_dimmax,(int)1 ));
      _6613_perm1 = _6595_xs->alloci32(_6598_nelem);
      _6614_perm2 = _6595_xs->alloci32(_6598_nelem);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6617_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6595_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6617_xi32(_6617_xi32 ? _6617_xi32->raw() : nullptr,_6617_xi32 ? _6617_xi32->size(0) : 0);
  if (_6601_hassp)
  {
    {
      int32_t _6618_curperm = _6613_perm1;
      int32_t _6619_tgtperm = _6614_perm2;
      int32_t _11950_ = (int)0;
      int32_t _11951_ = _6598_nelem;
      for (int32_t _6620_i = _11950_; _6620_i < _11951_; ++_6620_i)
      {
        {
          _ptr__6617_xi32[safe_add( _6618_curperm,_6620_i )] = _6620_i;
        }
      }
      if ((dim < (_6596_nd - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6621_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_6596_nd)));
          _checked_ptr_1<int64_t> _ptr__6621_s(_6621_s ? _6621_s->raw() : nullptr,_6621_s ? _6621_s->size(0) : 0);
          _ptr__6621_s[(_6596_nd - (int)1)] = (int)1;
          int32_t _11952_ = (int)1;
          int32_t _11953_ = _6596_nd;
          for (int32_t _6622_i = _11952_; _6622_i < _11953_; ++_6622_i)
          {
            {
              _ptr__6621_s[((_6596_nd - _6622_i) - (int)1)] = safe_mul( _ptr__6621_s[(_6596_nd - _6622_i)],_ptr__6609_wi32[(safe_add( _6597_shape_base,_6596_nd ) - _6622_i)] );
            }
          }
          std::shared_ptr< monty::ndarray< int32_t,1 > > _6623_sortdims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((_6596_nd - (int)1))));
          _checked_ptr_1<int32_t> _ptr__6623_sortdims(_6623_sortdims ? _6623_sortdims->raw() : nullptr,_6623_sortdims ? _6623_sortdims->size(0) : 0);
          int32_t _11954_ = (int)0;
          int32_t _11955_ = dim;
          for (int32_t _6624_i = _11954_; _6624_i < _11955_; ++_6624_i)
          {
            {
              _ptr__6623_sortdims[((_6596_nd - _6624_i) - (int)2)] = _6624_i;
            }
          }
          int32_t _11956_ = safe_add( dim,(int)1 );
          int32_t _11957_ = _6596_nd;
          for (int32_t _6625_i = _11956_; _6625_i < _11957_; ++_6625_i)
          {
            {
              _ptr__6623_sortdims[((_6596_nd - _6625_i) - (int)1)] = _6625_i;
            }
          }
          int32_t _11958_ = (int)0;
          int32_t _11959_ = (_6596_nd - (int)1);
          for (int32_t _6626_ii = _11958_; _6626_ii < _11959_; ++_6626_ii)
          {
            {
              int32_t _6627_k = _ptr__6623_sortdims[_6626_ii];
              int32_t _6628_dk = _ptr__6609_wi32[safe_add( _6597_shape_base,_6627_k )];
              int32_t _11960_ = (int)0;
              int32_t _11961_ = safe_add( _6628_dk,(int)1 );
              for (int32_t _6629_i = _11960_; _6629_i < _11961_; ++_6629_i)
              {
                {
                  _ptr__6617_xi32[safe_add( _6612_ptr,_6629_i )] = (int)0;
                }
              }
              int32_t _11962_ = (int)0;
              int32_t _11963_ = _6598_nelem;
              for (int32_t _6630_i = _11962_; _6630_i < _11963_; ++_6630_i)
              {
                {
                  ++ _ptr__6617_xi32[safe_add( safe_add( _6612_ptr,(int)1 ),((_ptr__6610_wi64[safe_add( _6603_sp_base,_6630_i )] / _ptr__6621_s[_6627_k]) % _6628_dk) )];
                }
              }
              int32_t _11964_ = (int)0;
              int32_t _11965_ = _6628_dk;
              for (int32_t _6631_i = _11964_; _6631_i < _11965_; ++_6631_i)
              {
                {
                  _ptr__6617_xi32[safe_add( safe_add( _6612_ptr,_6631_i ),(int)1 )] += _ptr__6617_xi32[safe_add( _6612_ptr,_6631_i )];
                }
              }
              int32_t _11966_ = (int)0;
              int32_t _11967_ = _6598_nelem;
              for (int32_t _6632_ii = _11966_; _6632_ii < _11967_; ++_6632_ii)
              {
                {
                  int32_t _6633_i = _ptr__6617_xi32[safe_add( _6618_curperm,_6632_ii )];
                  int64_t _6634_sub = ((_ptr__6610_wi64[safe_add( _6603_sp_base,_6633_i )] / _ptr__6621_s[_6627_k]) % _6628_dk);
                  _ptr__6617_xi32[safe_add( _6619_tgtperm,_ptr__6617_xi32[safe_add( _6612_ptr,_6634_sub )] )] = _6633_i;
                  ++ _ptr__6617_xi32[safe_add( _6612_ptr,_6634_sub )];
                }
              }
              int32_t _6635_tmp = _6619_tgtperm;
              _6619_tgtperm = _6618_curperm;
              _6618_curperm = _6635_tmp;
            }
          }
        }
      }
      {}
      int32_t _6636_d0 = (int)1;
      int32_t _11968_ = (int)0;
      int32_t _11969_ = dim;
      for (int32_t _6637_i = _11968_; _6637_i < _11969_; ++_6637_i)
      {
        {
          _6636_d0 *= _ptr__6609_wi32[safe_add( _6597_shape_base,_6637_i )];
        }
      }
      int32_t _6638_d1 = _ptr__6609_wi32[safe_add( _6597_shape_base,dim )];
      int32_t _6639_d2 = (int)1;
      int32_t _11970_ = safe_add( dim,(int)1 );
      int32_t _11971_ = _6596_nd;
      for (int32_t _6640_i = _11970_; _6640_i < _11971_; ++_6640_i)
      {
        {
          _6639_d2 *= _ptr__6609_wi32[safe_add( _6597_shape_base,_6640_i )];
        }
      }
      int32_t _6641_s0 = safe_mul( _6639_d2,_6638_d1 );
      int32_t _6642_s1 = _6639_d2;
      int32_t _6643_s2 = (int)1;
      int32_t _6644_rnelem = (int)0;
      int64_t _6645_p2 = (-(int)1);
      int64_t _6646_p0 = (-(int)1);
      int32_t _11972_ = (int)0;
      int32_t _11973_ = _6598_nelem;
      for (int32_t _6647_ii = _11972_; _6647_ii < _11973_; ++_6647_ii)
      {
        {
          int32_t _6648_i = _ptr__6617_xi32[safe_add( _6618_curperm,_6647_ii )];
          int64_t _6649_k0 = ((_ptr__6610_wi64[safe_add( _6603_sp_base,_6648_i )] / _6641_s0) % _6636_d0);
          int64_t _6650_k2 = (_ptr__6610_wi64[safe_add( _6603_sp_base,_6648_i )] % _6639_d2);
          if (((_6646_p0 != _6649_k0) || (_6645_p2 != _6650_k2)))
          {
            {
              _6646_p0 = _6649_k0;
              _6645_p2 = _6650_k2;
              ++ _6644_rnelem;
            }
          }
          {}
        }
      }
      int32_t _6651_rnd = (_6596_nd - (int)1);
      bool _6652_rhassp = (_6644_rnelem < safe_mul( _6636_d0,_6639_d2 ));
      int32_t _6653_rnnz = _6599_nnz;
      int32_t _6654_rncodeatom = _6600_ncodeatom;
      _6593_rs->alloc_expr(_6651_rnd,_6644_rnelem,_6653_rnnz,_6652_rhassp,_6654_rncodeatom);
      int32_t _6655_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->ptr_base;
      int32_t _6656_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->nidxs_base;
      int32_t _11974_;
      bool _11975_ = _6652_rhassp;
      if (_11975_)
      {
        _11974_ = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->sp_base;
      }
      else
      {
        _11974_ = _6593_rs->alloci64(_6644_rnelem);
      }
      int32_t _6657_rsp_base = _11974_;
      int32_t _6658_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->cof_base;
      int32_t _6659_rshape_base = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->shape_base;
      int32_t _6660_rcode = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->code_base;
      int32_t _6661_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->codeptr_base;
      int32_t _6662_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6663_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6663_ri32(_6663_ri32 ? _6663_ri32->raw() : nullptr,_6663_ri32 ? _6663_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6664_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6664_ri64(_6664_ri64 ? _6664_ri64->raw() : nullptr,_6664_ri64 ? _6664_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6665_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->f64;
      _checked_ptr_1<double> _ptr__6665_rf64(_6665_rf64 ? _6665_rf64->raw() : nullptr,_6665_rf64 ? _6665_rf64->size(0) : 0);
      int32_t _11976_ = (int)0;
      int32_t _11977_ = dim;
      for (int32_t _6666_i = _11976_; _6666_i < _11977_; ++_6666_i)
      {
        {
          _ptr__6663_ri32[safe_add( _6659_rshape_base,_6666_i )] = _ptr__6609_wi32[safe_add( _6597_shape_base,_6666_i )];
        }
      }
      int32_t _11978_ = safe_add( dim,(int)1 );
      int32_t _11979_ = _6596_nd;
      for (int32_t _6667_i = _11978_; _6667_i < _11979_; ++_6667_i)
      {
        {
          _ptr__6663_ri32[(safe_add( _6659_rshape_base,_6667_i ) - (int)1)] = _ptr__6609_wi32[safe_add( _6597_shape_base,_6667_i )];
        }
      }
      _ptr__6663_ri32[_6655_rptr_base] = (int)0;
      if ((_6654_rncodeatom > (int)0))
      {
        {
          _ptr__6663_ri32[_6661_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _6668_codei = (int)0;
      int32_t _6669_kelm = (int)0;
      int32_t _6670_knz = (int)0;
      int32_t _6671_ii = (int)0;
      while ( (_6671_ii < _6598_nelem) )
      {
        {
          int32_t _6672_b = _6671_ii;
          int64_t _6673_p0 = ((_ptr__6610_wi64[safe_add( _6603_sp_base,_ptr__6617_xi32[safe_add( _6618_curperm,_6672_b )] )] / _6641_s0) % _6636_d0);
          int64_t _6674_p2 = (_ptr__6610_wi64[safe_add( _6603_sp_base,_ptr__6617_xi32[safe_add( _6618_curperm,_6672_b )] )] % _6639_d2);
          ++ _6671_ii;
          while ( ((_6671_ii < _6598_nelem) && ((_6673_p0 == ((_ptr__6610_wi64[safe_add( _6603_sp_base,_ptr__6617_xi32[safe_add( _6618_curperm,_6671_ii )] )] / _6641_s0) % _6636_d0)) && (_6674_p2 == (_ptr__6610_wi64[safe_add( _6603_sp_base,_ptr__6617_xi32[safe_add( _6618_curperm,_6671_ii )] )] % _6639_d2)))) )
          {
            {
              ++ _6671_ii;
            }
          }
          int32_t _11980_ = _6672_b;
          int32_t _11981_ = _6671_ii;
          for (int32_t _6675_kk = _11980_; _6675_kk < _11981_; ++_6675_kk)
          {
            {
              int32_t _6676_k = _ptr__6617_xi32[safe_add( _6618_curperm,_6675_kk )];
              int32_t _11982_ = _ptr__6609_wi32[safe_add( _6602_ptr_base,_6676_k )];
              int32_t _11983_ = _ptr__6609_wi32[safe_add( safe_add( _6602_ptr_base,_6676_k ),(int)1 )];
              for (int32_t _6677_j = _11982_; _6677_j < _11983_; ++_6677_j)
              {
                {
                  _ptr__6664_ri64[safe_add( _6656_rnidxs_base,_6670_knz )] = _ptr__6610_wi64[safe_add( _6604_nidxs_base,_6677_j )];
                  _ptr__6665_rf64[safe_add( _6658_rcof_base,_6670_knz )] = _ptr__6611_wf64[safe_add( _6605_cof_base,_6677_j )];
                  if ((_6654_rncodeatom > (int)0))
                  {
                    {
                      int32_t _11984_ = _ptr__6609_wi32[safe_add( _6607_codeptr,_6677_j )];
                      int32_t _11985_ = _ptr__6609_wi32[safe_add( safe_add( _6607_codeptr,_6677_j ),(int)1 )];
                      for (int32_t _6678_l = _11984_; _6678_l < _11985_; ++_6678_l)
                      {
                        {
                          _ptr__6663_ri32[safe_add( _6660_rcode,_6668_codei )] = _ptr__6609_wi32[safe_add( _6606_code,_6678_l )];
                          _ptr__6665_rf64[safe_add( _6662_rcconst,_6668_codei )] = _ptr__6611_wf64[safe_add( _6608_cconst,_6678_l )];
                          ++ _6668_codei;
                        }
                      }
                      _ptr__6663_ri32[safe_add( safe_add( _6661_rcodeptr,_6670_knz ),(int)1 )] = _6668_codei;
                    }
                  }
                  {}
                  ++ _6670_knz;
                }
              }
            }
          }
          _ptr__6664_ri64[safe_add( _6657_rsp_base,_6669_kelm )] = safe_add( safe_mul( _6673_p0,_6639_d2 ),_6674_p2 );
          _ptr__6663_ri32[safe_add( safe_add( _6655_rptr_base,_6669_kelm ),(int)1 )] = _6670_knz;
          ++ _6669_kelm;
        }
      }
      if ((!_6652_rhassp))
      {
        {
          _6593_rs->popi64(_6644_rnelem);
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _6679_d0 = (int)1;
      int32_t _11986_ = (int)0;
      int32_t _11987_ = dim;
      for (int32_t _6680_i = _11986_; _6680_i < _11987_; ++_6680_i)
      {
        {
          _6679_d0 *= _ptr__6609_wi32[safe_add( _6597_shape_base,_6680_i )];
        }
      }
      int32_t _6681_d1 = _ptr__6609_wi32[safe_add( _6597_shape_base,dim )];
      int32_t _6682_d2 = (int)1;
      int32_t _11988_ = safe_add( dim,(int)1 );
      int32_t _11989_ = _6596_nd;
      for (int32_t _6683_i = _11988_; _6683_i < _11989_; ++_6683_i)
      {
        {
          _6682_d2 *= _ptr__6609_wi32[safe_add( _6597_shape_base,_6683_i )];
        }
      }
      int32_t _6684_s0 = safe_mul( _6682_d2,_6681_d1 );
      int32_t _6685_s1 = _6682_d2;
      int32_t _6686_s2 = (int)1;
      int32_t _6687_rnelem = safe_mul( _6679_d0,_6682_d2 );
      int32_t _6688_rnnz = _6599_nnz;
      int32_t _6689_rncodeatom = _6600_ncodeatom;
      _6593_rs->alloc_expr((_6596_nd - (int)1),_6687_rnelem,_6688_rnnz,false,_6689_rncodeatom);
      int32_t _6690_rptr_base = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->ptr_base;
      int32_t _6691_rnidxs_base = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->nidxs_base;
      int32_t _6692_rcof_base = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->cof_base;
      int32_t _6693_rshape = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->shape_base;
      int32_t _6694_rcode = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->code_base;
      int32_t _6695_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->codeptr_base;
      int32_t _6696_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6697_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__6697_ri32(_6697_ri32 ? _6697_ri32->raw() : nullptr,_6697_ri32 ? _6697_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6698_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__6698_ri64(_6698_ri64 ? _6698_ri64->raw() : nullptr,_6698_ri64 ? _6698_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6699_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6593_rs)->f64;
      _checked_ptr_1<double> _ptr__6699_rf64(_6699_rf64 ? _6699_rf64->raw() : nullptr,_6699_rf64 ? _6699_rf64->size(0) : 0);
      int32_t _11990_ = (int)0;
      int32_t _11991_ = dim;
      for (int32_t _6700_i = _11990_; _6700_i < _11991_; ++_6700_i)
      {
        {
          _ptr__6697_ri32[safe_add( _6693_rshape,_6700_i )] = _ptr__6609_wi32[safe_add( _6597_shape_base,_6700_i )];
        }
      }
      int32_t _11992_ = safe_add( dim,(int)1 );
      int32_t _11993_ = _6596_nd;
      for (int32_t _6701_i = _11992_; _6701_i < _11993_; ++_6701_i)
      {
        {
          _ptr__6697_ri32[(safe_add( _6693_rshape,_6701_i ) - (int)1)] = _ptr__6609_wi32[safe_add( _6597_shape_base,_6701_i )];
        }
      }
      int32_t _6702_kelm = (int)0;
      int32_t _6703_knz = (int)0;
      _ptr__6697_ri32[_6690_rptr_base] = (int)0;
      if ((_6689_rncodeatom > (int)0))
      {
        {
          _ptr__6697_ri32[_6695_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _6704_codei = (int)0;
      int32_t _11994_ = (int)0;
      int32_t _11995_ = _6679_d0;
      for (int32_t _6705_i0 = _11994_; _6705_i0 < _11995_; ++_6705_i0)
      {
        {
          int32_t _11996_ = (int)0;
          int32_t _11997_ = _6682_d2;
          for (int32_t _6706_i2 = _11996_; _6706_i2 < _11997_; ++_6706_i2)
          {
            {
              int32_t _11998_ = (int)0;
              int32_t _11999_ = _6681_d1;
              for (int32_t _6707_i1 = _11998_; _6707_i1 < _11999_; ++_6707_i1)
              {
                {
                  int32_t _6708_i = safe_add( safe_add( safe_mul( _6705_i0,_6684_s0 ),safe_mul( _6707_i1,_6685_s1 ) ),_6706_i2 );
                  int32_t _12000_ = _ptr__6609_wi32[safe_add( _6602_ptr_base,_6708_i )];
                  int32_t _12001_ = _ptr__6609_wi32[safe_add( safe_add( _6602_ptr_base,_6708_i ),(int)1 )];
                  for (int32_t _6709_k = _12000_; _6709_k < _12001_; ++_6709_k)
                  {
                    {
                      _ptr__6698_ri64[safe_add( _6691_rnidxs_base,_6703_knz )] = _ptr__6610_wi64[safe_add( _6604_nidxs_base,_6709_k )];
                      _ptr__6699_rf64[safe_add( _6692_rcof_base,_6703_knz )] = _ptr__6611_wf64[safe_add( _6605_cof_base,_6709_k )];
                      if ((_6689_rncodeatom > (int)0))
                      {
                        {
                          int32_t _12002_ = _ptr__6609_wi32[safe_add( _6607_codeptr,_6709_k )];
                          int32_t _12003_ = _ptr__6609_wi32[safe_add( safe_add( _6607_codeptr,_6709_k ),(int)1 )];
                          for (int32_t _6710_l = _12002_; _6710_l < _12003_; ++_6710_l)
                          {
                            {
                              _ptr__6697_ri32[safe_add( _6694_rcode,_6704_codei )] = _ptr__6609_wi32[safe_add( _6606_code,_6710_l )];
                              _ptr__6699_rf64[safe_add( _6696_rcconst,_6704_codei )] = _ptr__6611_wf64[safe_add( _6608_cconst,_6710_l )];
                              ++ _6704_codei;
                            }
                          }
                          _ptr__6697_ri32[safe_add( safe_add( _6695_rcodeptr,_6703_knz ),(int)1 )] = _6704_codei;
                        }
                      }
                      {}
                      ++ _6703_knz;
                    }
                  }
                }
              }
              _ptr__6697_ri32[safe_add( safe_add( _6690_rptr_base,_6702_kelm ),(int)1 )] = _6703_knz;
              ++ _6702_kelm;
            }
          }
        }
      }
    }
  }
  _6595_xs->clear();
}
// End mosek.fusion.ExprSumReduce.eval

// Begin mosek.fusion.ExprSumReduce.computeShape
// Method mosek.fusion.ExprSumReduce.computeShape @ src/fusion/ExprAdd.monty:10:6-15:7
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int32_t _6711_dim,std::shared_ptr< monty::ndarray< int32_t,1 > > _6712_shape)
{
  _checked_ptr_1<int32_t> _ptr__6712_shape(_6712_shape ? _6712_shape->raw() : nullptr, _6712_shape ? _6712_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6713_r = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(((int)((_6712_shape)->size(0)) - (int)1))));
  _checked_ptr_1<int32_t> _ptr__6713_r(_6713_r ? _6713_r->raw() : nullptr,_6713_r ? _6713_r->size(0) : 0);
  int32_t _12004_ = (int)0;
  int32_t _12005_ = _6711_dim;
  for (int32_t _6714_i = _12004_; _6714_i < _12005_; ++_6714_i)
  {
    {
      _ptr__6713_r[_6714_i] = _ptr__6712_shape[_6714_i];
    }
  }
  int32_t _12006_ = safe_add( _6711_dim,(int)1 );
  int32_t _12007_ = (int)((_6712_shape)->size(0));
  for (int32_t _6715_i = _12006_; _6715_i < _12007_; ++_6715_i)
  {
    {
      _ptr__6713_r[(_6715_i - (int)1)] = _ptr__6712_shape[_6715_i];
    }
  }
  return _6713_r;
}
// End mosek.fusion.ExprSumReduce.computeShape

// Begin mosek.fusion.ExprSumReduce.toString
// Method mosek.fusion.ExprSumReduce.toString @ src/fusion/ExprAdd.monty:8:6-146
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSumReduce::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduce("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprSumReduce.toString

void mosek::fusion::p_ExprSumReduce::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }
// } class ExprSumReduce
// class ExprScaleVecPSD { // @ src/fusion/ExprShape.monty:1042:4-1222:5
mosek::fusion::ExprScaleVecPSD::ExprScaleVecPSD(mosek::fusion::p_ExprScaleVecPSD *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScaleVecPSD()" << this << std::endl; */ }
mosek::fusion::ExprScaleVecPSD::~ExprScaleVecPSD() {  /* std::cout << "~ExprScaleVecPSD()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprScaleVecPSD::p_ExprScaleVecPSD
  (::mosek::fusion::ExprScaleVecPSD * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprScaleVecPSD.ctor @ src/fusion/ExprShape.monty:1047:6-1054:7
mosek::fusion::ExprScaleVecPSD::t mosek::fusion::p_ExprScaleVecPSD::_new_ExprScaleVecPSD
  (int32_t _6716_dim0,
    int32_t _6717_dim1,
    monty::rc_ptr< ::mosek::fusion::BaseExpression > _6718_expr)
{ return new mosek::fusion::ExprScaleVecPSD(_6716_dim0,_6717_dim1,_6718_expr); }
mosek::fusion::ExprScaleVecPSD::ExprScaleVecPSD
  (int32_t _6716_dim0,
    int32_t _6717_dim1,
    monty::rc_ptr< ::mosek::fusion::BaseExpression > _6718_expr) : 
   ExprScaleVecPSD(new mosek::fusion::p_ExprScaleVecPSD(this))
{ mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->_initialize(_6716_dim0,_6717_dim1,_6718_expr); }
void mosek::fusion::p_ExprScaleVecPSD::_initialize  (int32_t _6716_dim0,
    int32_t _6717_dim1,
    monty::rc_ptr< ::mosek::fusion::BaseExpression > _6718_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6718_expr->getShape());
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->expr = (_6718_expr).as<::mosek::fusion::Expression>();
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->dim0 = _6716_dim0;
    mosek::fusion::p_ExprScaleVecPSD::_get_impl(::mosek::fusion::ExprScaleVecPSD::t(_pubthis))->dim1 = _6717_dim1;
    if (((_6716_dim0 < (int)0) || ((_6717_dim1 < (int)0) || (_6716_dim0 == _6717_dim1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprScaleVecPSD.ctor

// Begin mosek.fusion.ExprScaleVecPSD.eval
// Method mosek.fusion.ExprScaleVecPSD.eval @ src/fusion/ExprShape.monty:1056:6-1221:7
void mosek::fusion::ExprScaleVecPSD :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6719_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6720_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6721_xs) { mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->eval(_6719_rs,_6720_ws,_6721_xs); }
void mosek::fusion::p_ExprScaleVecPSD::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6719_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6720_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6721_xs)
{
  expr->eval(_6720_ws,_6719_rs,_6721_xs);
  _6720_ws->pop_expr();
  int32_t _6722_nd = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->nd;
  int32_t _6723_nnz = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->nnz;
  int32_t _6724_nelem = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->nelem;
  int32_t _6725_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->ncodeatom;
  bool _6726_hassp = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->hassp;
  int32_t _6727_shape = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->shape_base;
  int32_t _6728_ptr = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->ptr_base;
  int32_t _6729_code = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->code_base;
  int32_t _6730_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->codeptr_base;
  int32_t _6731_cconst = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->cconst_base;
  int32_t _6732_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->nidxs_base;
  int32_t _6733_sp = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->sp_base;
  int32_t _6734_cof = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6735_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6735_wi32(_6735_wi32 ? _6735_wi32->raw() : nullptr,_6735_wi32 ? _6735_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6736_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6736_wi64(_6736_wi64 ? _6736_wi64->raw() : nullptr,_6736_wi64 ? _6736_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6737_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6720_ws)->f64;
  _checked_ptr_1<double> _ptr__6737_wf64(_6737_wf64 ? _6737_wf64->raw() : nullptr,_6737_wf64 ? _6737_wf64->size(0) : 0);
  if (((dim0 >= _6722_nd) || (dim1 >= _6722_nd)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6735_wi32[safe_add( _6727_shape,dim0 )] != _ptr__6735_wi32[safe_add( _6727_shape,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  int64_t _6738_d4 = (int)1;
  int64_t _6739_d3 = (int)1;
  int64_t _6740_d2 = (int)1;
  int64_t _6741_d1 = (int)1;
  int64_t _6742_d0 = (int)1;
  int32_t _12008_;
  bool _12009_ = (dim0 < dim1);
  if (_12009_)
  {
    _12008_ = dim0;
  }
  else
  {
    _12008_ = dim1;
  }
  int32_t _6743_xdim0 = _12008_;
  int32_t _12010_;
  bool _12011_ = (dim0 < dim1);
  if (_12011_)
  {
    _12010_ = dim1;
  }
  else
  {
    _12010_ = dim0;
  }
  int32_t _6744_xdim1 = _12010_;
  int32_t _12012_ = (int)0;
  int32_t _12013_ = _6743_xdim0;
  for (int32_t _6745_i = _12012_; _6745_i < _12013_; ++_6745_i)
  {
    {
      _6742_d0 *= _ptr__6735_wi32[safe_add( _6727_shape,_6745_i )];
    }
  }
  int32_t _12014_ = safe_add( _6743_xdim0,(int)1 );
  int32_t _12015_ = _6744_xdim1;
  for (int32_t _6746_i = _12014_; _6746_i < _12015_; ++_6746_i)
  {
    {
      _6740_d2 *= _ptr__6735_wi32[safe_add( _6727_shape,_6746_i )];
    }
  }
  int32_t _12016_ = safe_add( _6744_xdim1,(int)1 );
  int32_t _12017_ = _6722_nd;
  for (int32_t _6747_i = _12016_; _6747_i < _12017_; ++_6747_i)
  {
    {
      _6738_d4 *= _ptr__6735_wi32[safe_add( _6727_shape,_6747_i )];
    }
  }
  _6741_d1 = _ptr__6735_wi32[safe_add( _6727_shape,dim0 )];
  _6739_d3 = _6741_d1;
  if ((_6725_ncodeatom == (int)0))
  {
    {
      _6719_rs->alloc_expr(_6722_nd,_6724_nelem,_6723_nnz,_6726_hassp,(int)0);
    }
  }
  else
  {
    {
      _6719_rs->alloc_expr(_6722_nd,_6724_nelem,_6723_nnz,_6726_hassp,safe_add( _6725_ncodeatom,safe_mul( _6723_nnz,(int)2 ) ));
    }
  }
  int32_t _6748_rptr = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->ptr_base;
  int32_t _6749_rshape = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->shape_base;
  int32_t _6750_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->nidxs_base;
  int32_t _6751_rsp = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->sp_base;
  int32_t _6752_rcof = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->cof_base;
  int32_t _6753_rcode = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->code_base;
  int32_t _6754_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->codeptr_base;
  int32_t _6755_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6756_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6756_ri32(_6756_ri32 ? _6756_ri32->raw() : nullptr,_6756_ri32 ? _6756_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6757_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6757_ri64(_6757_ri64 ? _6757_ri64->raw() : nullptr,_6757_ri64 ? _6757_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6758_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6719_rs)->f64;
  _checked_ptr_1<double> _ptr__6758_rf64(_6758_rf64 ? _6758_rf64->raw() : nullptr,_6758_rf64 ? _6758_rf64->size(0) : 0);
  {
    ::mosek::fusion::Utils::Tools::arraycopy(_6735_wi32,_6728_ptr,_6756_ri32,_6748_rptr,safe_add( _6724_nelem,(int)1 ));
    ::mosek::fusion::Utils::Tools::arraycopy(_6735_wi32,_6727_shape,_6756_ri32,_6749_rshape,_6722_nd);
    ::mosek::fusion::Utils::Tools::arraycopy(_6736_wi64,_6732_nidxs,_6757_ri64,_6750_rnidxs,_6723_nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_6737_wf64,_6734_cof,_6758_rf64,_6752_rcof,_6723_nnz);
    if (_6726_hassp)
    {
      {
        ::mosek::fusion::Utils::Tools::arraycopy(_6736_wi64,_6733_sp,_6757_ri64,_6751_rsp,_6724_nelem);
      }
    }
    {}
  }
  double _6759_scale = ::mosek::fusion::Utils::Tools::sqrt((double)((int)2));
  if ((!_6726_hassp))
  {
    {
      int32_t _6760_k = (int)0;
      int32_t _12018_ = (int)0;
      int64_t _12019_ = _6742_d0;
      for (int64_t _6761_i0 = _12018_; _6761_i0 < _12019_; ++_6761_i0)
      {
        {
          int32_t _12020_ = (int)0;
          int64_t _12021_ = _6741_d1;
          for (int64_t _6762_i1 = _12020_; _6762_i1 < _12021_; ++_6762_i1)
          {
            {
              int32_t _12022_ = (int)0;
              int64_t _12023_ = _6740_d2;
              for (int64_t _6763_i2 = _12022_; _6763_i2 < _12023_; ++_6763_i2)
              {
                {
                  int32_t _12024_ = (int)0;
                  int64_t _12025_ = _6739_d3;
                  for (int64_t _6764_i3 = _12024_; _6764_i3 < _12025_; ++_6764_i3)
                  {
                    {
                      int32_t _12026_ = (int)0;
                      int64_t _12027_ = _6738_d4;
                      for (int64_t _6765_i4 = _12026_; _6765_i4 < _12027_; ++_6765_i4)
                      {
                        {
                          if ((_6762_i1 != _6764_i3))
                          {
                            {
                              int32_t _12028_ = _ptr__6756_ri32[safe_add( _6748_rptr,_6760_k )];
                              int32_t _12029_ = _ptr__6756_ri32[safe_add( safe_add( _6748_rptr,_6760_k ),(int)1 )];
                              for (int32_t _6766_j = _12028_; _6766_j < _12029_; ++_6766_j)
                              {
                                {
                                  _ptr__6758_rf64[safe_add( _6752_rcof,_6766_j )] *= _6759_scale;
                                }
                              }
                            }
                          }
                          {}
                          ++ _6760_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int32_t _6767_k = (int)0;
      std::shared_ptr< monty::ndarray< int64_t,1 > > _6768_d = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
      _checked_ptr_1<int64_t> _ptr__6768_d(_6768_d ? _6768_d->raw() : nullptr,_6768_d ? _6768_d->size(0) : 0);
      _ptr__6768_d[(int)4] = (int)1;
      _ptr__6768_d[(int)3] = safe_mul( _ptr__6768_d[(int)4],_6738_d4 );
      _ptr__6768_d[(int)2] = safe_mul( _ptr__6768_d[(int)3],_6739_d3 );
      _ptr__6768_d[(int)1] = safe_mul( _ptr__6768_d[(int)2],_6740_d2 );
      _ptr__6768_d[(int)0] = safe_mul( _ptr__6768_d[(int)1],_6741_d1 );
      int32_t _12030_ = (int)0;
      int32_t _12031_ = _6724_nelem;
      for (int32_t _6769_k = _12030_; _6769_k < _12031_; ++_6769_k)
      {
        {
          int64_t _6770_idx = _ptr__6736_wi64[safe_add( _6733_sp,_6769_k )];
          int64_t _6771_d3 = ((_6770_idx / _ptr__6768_d[(int)3]) % _6739_d3);
          int64_t _6772_d1 = ((_6770_idx / _ptr__6768_d[(int)1]) % _6741_d1);
          if ((_6772_d1 != _6771_d3))
          {
            {
              int32_t _12032_ = _ptr__6756_ri32[safe_add( _6748_rptr,_6769_k )];
              int32_t _12033_ = _ptr__6756_ri32[safe_add( safe_add( _6748_rptr,_6769_k ),(int)1 )];
              for (int32_t _6773_j = _12032_; _6773_j < _12033_; ++_6773_j)
              {
                {
                  _ptr__6758_rf64[safe_add( _6752_rcof,_6773_j )] *= _6759_scale;
                }
              }
            }
          }
          {}
        }
      }
    }
  }
  if ((_6725_ncodeatom != (int)0))
  {
    {
      int32_t _6774_nzi = (int)0;
      int32_t _6775_codei = (int)0;
      _ptr__6756_ri32[_6754_rcodeptr] = (int)0;
      if ((!_6726_hassp))
      {
        {
          int32_t _6776_k = (int)0;
          int32_t _12034_ = (int)0;
          int64_t _12035_ = _6742_d0;
          for (int64_t _6777_i0 = _12034_; _6777_i0 < _12035_; ++_6777_i0)
          {
            {
              int32_t _12036_ = (int)0;
              int64_t _12037_ = _6741_d1;
              for (int64_t _6778_i1 = _12036_; _6778_i1 < _12037_; ++_6778_i1)
              {
                {
                  int32_t _12038_ = (int)0;
                  int64_t _12039_ = _6740_d2;
                  for (int64_t _6779_i2 = _12038_; _6779_i2 < _12039_; ++_6779_i2)
                  {
                    {
                      int32_t _12040_ = (int)0;
                      int64_t _12041_ = _6739_d3;
                      for (int64_t _6780_i3 = _12040_; _6780_i3 < _12041_; ++_6780_i3)
                      {
                        {
                          int32_t _12042_ = (int)0;
                          int64_t _12043_ = _6738_d4;
                          for (int64_t _6781_i4 = _12042_; _6781_i4 < _12043_; ++_6781_i4)
                          {
                            {
                              double _12044_;
                              bool _12045_ = (_6778_i1 != _6780_i3);
                              if (_12045_)
                              {
                                _12044_ = _6759_scale;
                              }
                              else
                              {
                                _12044_ = 1.0;
                              }
                              double _6782_s = _12044_;
                              int32_t _12046_ = _ptr__6735_wi32[safe_add( _6728_ptr,_6776_k )];
                              int32_t _12047_ = _ptr__6756_ri32[safe_add( safe_add( _6728_ptr,_6776_k ),(int)1 )];
                              for (int32_t _6783_j = _12046_; _6783_j < _12047_; ++_6783_j)
                              {
                                {
                                  int32_t _12048_ = _ptr__6735_wi32[safe_add( _6730_codeptr,_6783_j )];
                                  int32_t _12049_ = _ptr__6735_wi32[safe_add( safe_add( _6730_codeptr,_6783_j ),(int)1 )];
                                  for (int32_t _6784_l = _12048_; _6784_l < _12049_; ++_6784_l)
                                  {
                                    {
                                      _ptr__6756_ri32[safe_add( _6753_rcode,_6775_codei )] = _ptr__6735_wi32[safe_add( _6729_code,_6784_l )];
                                      _ptr__6758_rf64[safe_add( _6755_rcconst,_6775_codei )] = _ptr__6737_wf64[safe_add( _6731_cconst,_6784_l )];
                                      ++ _6775_codei;
                                    }
                                  }
                                  _ptr__6756_ri32[safe_add( _6753_rcode,_6775_codei )] = 2;
                                  _ptr__6758_rf64[safe_add( _6755_rcconst,_6775_codei )] = _6782_s;
                                  ++ _6775_codei;
                                  _ptr__6756_ri32[safe_add( _6753_rcode,_6775_codei )] = 5;
                                  ++ _6775_codei;
                                  _ptr__6756_ri32[safe_add( safe_add( _6754_rcodeptr,_6774_nzi ),(int)1 )] = _6775_codei;
                                  ++ _6774_nzi;
                                }
                              }
                              ++ _6776_k;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _6785_k = (int)0;
          std::shared_ptr< monty::ndarray< int64_t,1 > > _6786_d = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
          _checked_ptr_1<int64_t> _ptr__6786_d(_6786_d ? _6786_d->raw() : nullptr,_6786_d ? _6786_d->size(0) : 0);
          _ptr__6786_d[(int)4] = (int)1;
          _ptr__6786_d[(int)3] = safe_mul( _ptr__6786_d[(int)4],_6738_d4 );
          _ptr__6786_d[(int)2] = safe_mul( _ptr__6786_d[(int)3],_6739_d3 );
          _ptr__6786_d[(int)1] = safe_mul( _ptr__6786_d[(int)2],_6740_d2 );
          _ptr__6786_d[(int)0] = safe_mul( _ptr__6786_d[(int)1],_6741_d1 );
          int32_t _12050_ = (int)0;
          int32_t _12051_ = _6724_nelem;
          for (int32_t _6787_k = _12050_; _6787_k < _12051_; ++_6787_k)
          {
            {
              int64_t _6788_idx = _ptr__6736_wi64[safe_add( _6733_sp,_6787_k )];
              int64_t _6789_i3 = ((_6788_idx / _ptr__6786_d[(int)3]) % _6739_d3);
              int64_t _6790_i1 = ((_6788_idx / _ptr__6786_d[(int)1]) % _6741_d1);
              double _12052_;
              bool _12053_ = (_6790_i1 != _6789_i3);
              if (_12053_)
              {
                _12052_ = _6759_scale;
              }
              else
              {
                _12052_ = 1.0;
              }
              double _6791_s = _12052_;
              int32_t _12054_ = _ptr__6735_wi32[safe_add( _6728_ptr,_6787_k )];
              int32_t _12055_ = _ptr__6735_wi32[safe_add( safe_add( _6728_ptr,_6787_k ),(int)1 )];
              for (int32_t _6792_j = _12054_; _6792_j < _12055_; ++_6792_j)
              {
                {
                  int32_t _12056_ = _ptr__6735_wi32[safe_add( _6730_codeptr,_6792_j )];
                  int32_t _12057_ = _ptr__6735_wi32[safe_add( safe_add( _6730_codeptr,_6792_j ),(int)1 )];
                  for (int32_t _6793_l = _12056_; _6793_l < _12057_; ++_6793_l)
                  {
                    {
                      _ptr__6756_ri32[safe_add( _6753_rcode,_6775_codei )] = _ptr__6735_wi32[safe_add( _6729_code,_6793_l )];
                      _ptr__6758_rf64[safe_add( _6755_rcconst,_6775_codei )] = _ptr__6737_wf64[safe_add( _6731_cconst,_6793_l )];
                      ++ _6775_codei;
                    }
                  }
                  _ptr__6756_ri32[safe_add( _6753_rcode,_6775_codei )] = 2;
                  _ptr__6758_rf64[safe_add( _6755_rcconst,_6775_codei )] = _6791_s;
                  ++ _6775_codei;
                  _ptr__6756_ri32[safe_add( _6753_rcode,_6775_codei )] = 5;
                  ++ _6775_codei;
                  _ptr__6756_ri32[safe_add( safe_add( _6754_rcodeptr,_6774_nzi ),(int)1 )] = _6775_codei;
                  ++ _6774_nzi;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
}
// End mosek.fusion.ExprScaleVecPSD.eval

void mosek::fusion::p_ExprScaleVecPSD::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprScaleVecPSD::destroy() { mosek::fusion::p_ExprScaleVecPSD::_get_impl(this)->destroy(); }
// } class ExprScaleVecPSD
// class ExprDenseTril { // @ src/fusion/ExprShape.monty:778:4-1036:5
mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }
mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDenseTril::p_ExprDenseTril
  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDenseTril.ctor @ src/fusion/ExprShape.monty:798:6-805:7
mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril
  (int32_t _6794_dim0,
    int32_t _6795_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6796_expr,
    int32_t _6797_unchecked_)
{ return new mosek::fusion::ExprDenseTril(_6794_dim0,_6795_dim1,_6796_expr,_6797_unchecked_); }
mosek::fusion::ExprDenseTril::ExprDenseTril
  (int32_t _6794_dim0,
    int32_t _6795_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6796_expr,
    int32_t _6797_unchecked_) : 
   ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this))
{ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6794_dim0,_6795_dim1,_6796_expr,_6797_unchecked_); }
void mosek::fusion::p_ExprDenseTril::_initialize  (int32_t _6794_dim0,
    int32_t _6795_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6796_expr,
    int32_t _6797_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6796_expr->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _6796_expr;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _6794_dim0;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _6795_dim1;
  }
}
// mosek.fusion.ExprDenseTril.ctor

// mosek.fusion.ExprDenseTril.ctor @ src/fusion/ExprShape.monty:785:6-796:7
mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril
  (int32_t _6798_dim0_,
    int32_t _6799_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6800_expr)
{ return new mosek::fusion::ExprDenseTril(_6798_dim0_,_6799_dim1_,_6800_expr); }
mosek::fusion::ExprDenseTril::ExprDenseTril
  (int32_t _6798_dim0_,
    int32_t _6799_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6800_expr) : 
   ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this))
{ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6798_dim0_,_6799_dim1_,_6800_expr); }
void mosek::fusion::p_ExprDenseTril::_initialize  (int32_t _6798_dim0_,
    int32_t _6799_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6800_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprDenseTril::_initialize(_6798_dim0_,_6799_dim1_,_6800_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6801_shape = _6800_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6801_shape(_6801_shape ? _6801_shape->raw() : nullptr,_6801_shape ? _6801_shape->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_6801_shape)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_6801_shape)->size(0))) || (_ptr__6801_shape[dim0] != _ptr__6801_shape[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprDenseTril.ctor

// Begin mosek.fusion.ExprDenseTril.eval
// Method mosek.fusion.ExprDenseTril.eval @ src/fusion/ExprShape.monty:807:6-1035:7
void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6802_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6803_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6804_xs) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_6802_rs,_6803_ws,_6804_xs); }
void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6802_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6803_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6804_xs)
{
  expr->eval(_6803_ws,_6802_rs,_6804_xs);
  _6803_ws->pop_expr();
  int32_t _6805_nd = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->nd;
  int32_t _6806_nnz = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->nnz;
  int32_t _6807_nelem = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->nelem;
  int32_t _6808_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->ncodeatom;
  bool _6809_hassp = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->hassp;
  int32_t _6810_shape = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->shape_base;
  int32_t _6811_ptr = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->ptr_base;
  int32_t _6812_code = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->code_base;
  int32_t _6813_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->codeptr_base;
  int32_t _6814_cconst = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->cconst_base;
  int32_t _6815_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->nidxs_base;
  int32_t _6816_sp = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->sp_base;
  int32_t _6817_cof = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6818_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6818_wi32(_6818_wi32 ? _6818_wi32->raw() : nullptr,_6818_wi32 ? _6818_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6819_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6819_wi64(_6819_wi64 ? _6819_wi64->raw() : nullptr,_6819_wi64 ? _6819_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6820_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6803_ws)->f64;
  _checked_ptr_1<double> _ptr__6820_wf64(_6820_wf64 ? _6820_wf64->raw() : nullptr,_6820_wf64 ? _6820_wf64->size(0) : 0);
  int32_t _12058_;
  bool _12059_ = (dim0 < dim1);
  if (_12059_)
  {
    _12058_ = dim0;
  }
  else
  {
    _12058_ = dim1;
  }
  int32_t _6821_xdim0 = _12058_;
  int32_t _12060_;
  bool _12061_ = (dim0 > dim1);
  if (_12061_)
  {
    _12060_ = dim0;
  }
  else
  {
    _12060_ = dim1;
  }
  int32_t _6822_xdim1 = _12060_;
  bool _6823_tril = (dim0 < dim1);
  if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= _6805_nd) || ((dim1 < (int)0) || (dim1 >= _6805_nd))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6818_wi32[safe_add( _6810_shape,dim0 )] != _ptr__6818_wi32[safe_add( _6810_shape,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  std::vector<int32_t> _12062_;
  for (int32_t _6825_i = (int)0, _12063_ = (int)5; _6825_i < _12063_ ; ++_6825_i)
  {
    _12062_.push_back((int)1);
  }
  auto _12064_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12062_.size()),_12062_.begin(),_12062_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6824_dim = _12064_;
  _checked_ptr_1<int32_t> _ptr__6824_dim(_6824_dim ? _6824_dim->raw() : nullptr,_6824_dim ? _6824_dim->size(0) : 0);
  int32_t _12065_ = (int)0;
  int32_t _12066_ = _6821_xdim0;
  for (int32_t _6826_i = _12065_; _6826_i < _12066_; ++_6826_i)
  {
    {
      _ptr__6824_dim[(int)0] *= _ptr__6818_wi32[safe_add( _6810_shape,_6826_i )];
    }
  }
  _ptr__6824_dim[(int)1] = _ptr__6818_wi32[safe_add( _6810_shape,dim0 )];
  int32_t _12067_ = safe_add( _6821_xdim0,(int)1 );
  int32_t _12068_ = _6822_xdim1;
  for (int32_t _6827_i = _12067_; _6827_i < _12068_; ++_6827_i)
  {
    {
      _ptr__6824_dim[(int)2] *= _ptr__6818_wi32[safe_add( _6810_shape,_6827_i )];
    }
  }
  _ptr__6824_dim[(int)3] = _ptr__6818_wi32[safe_add( _6810_shape,dim1 )];
  int32_t _12069_ = safe_add( _6822_xdim1,(int)1 );
  int32_t _12070_ = _6805_nd;
  for (int32_t _6828_i = _12069_; _6828_i < _12070_; ++_6828_i)
  {
    {
      _ptr__6824_dim[(int)4] *= _ptr__6818_wi32[safe_add( _6810_shape,_6828_i )];
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6829_stride = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int32_t> _ptr__6829_stride(_6829_stride ? _6829_stride->raw() : nullptr,_6829_stride ? _6829_stride->size(0) : 0);
  _ptr__6829_stride[(int)4] = (int)1;
  int32_t _12071_ = (int)1;
  int32_t _12072_ = (int)5;
  for (int32_t _6830_i = _12071_; _6830_i < _12072_; ++_6830_i)
  {
    {
      _ptr__6829_stride[(((int)5 - _6830_i) - (int)1)] = safe_mul( _ptr__6829_stride[((int)5 - _6830_i)],_ptr__6824_dim[((int)5 - _6830_i)] );
    }
  }
  int32_t _6831_rnnz = (int)0;
  int32_t _6832_rnelem = safe_mul( safe_mul( safe_mul( _ptr__6824_dim[(int)0],_ptr__6824_dim[(int)2] ),_ptr__6824_dim[(int)4] ),(safe_mul( _ptr__6824_dim[(int)1],safe_add( _ptr__6824_dim[(int)1],(int)1 ) ) / (int)2) );
  int32_t _6833_rncodeatom = (int)0;
  {
    if (_6809_hassp)
    {
      {
        int32_t _6834_d = _ptr__6824_dim[(int)1];
        if (_6823_tril)
        {
          {
            int32_t _12073_ = (int)0;
            int32_t _12074_ = _6807_nelem;
            for (int32_t _6835_i = _12073_; _6835_i < _12074_; ++_6835_i)
            {
              {
                int64_t _6836_subi = ((_ptr__6819_wi64[safe_add( _6816_sp,_6835_i )] / _ptr__6829_stride[(int)1]) % _6834_d);
                int64_t _6837_subj = ((_ptr__6819_wi64[safe_add( _6816_sp,_6835_i )] / _ptr__6829_stride[(int)3]) % _6834_d);
                if ((_6836_subi >= _6837_subj))
                {
                  {
                    _6831_rnnz += (_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6835_i ),(int)1 )] - _ptr__6818_wi32[safe_add( _6811_ptr,_6835_i )]);
                    if ((_6808_ncodeatom > (int)0))
                    {
                      {
                        _6833_rncodeatom += (_ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6835_i ),(int)1 )] )] - _ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( _6811_ptr,_6835_i )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int32_t _12075_ = (int)0;
            int32_t _12076_ = _6807_nelem;
            for (int32_t _6838_i = _12075_; _6838_i < _12076_; ++_6838_i)
            {
              {
                int64_t _6839_subi = ((_ptr__6819_wi64[safe_add( _6816_sp,_6838_i )] / _ptr__6829_stride[(int)1]) % _ptr__6824_dim[(int)1]);
                int64_t _6840_subj = ((_ptr__6819_wi64[safe_add( _6816_sp,_6838_i )] / _ptr__6829_stride[(int)3]) % _ptr__6824_dim[(int)3]);
                if ((_6839_subi <= _6840_subj))
                {
                  {
                    _6831_rnnz += (_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6838_i ),(int)1 )] - _ptr__6818_wi32[safe_add( _6811_ptr,_6838_i )]);
                    if ((_6808_ncodeatom > (int)0))
                    {
                      {
                        _6833_rncodeatom += (_ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6838_i ),(int)1 )] )] - _ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( _6811_ptr,_6838_i )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        if (_6823_tril)
        {
          {
            int32_t _12077_ = (int)0;
            int32_t _12078_ = _ptr__6824_dim[(int)0];
            for (int32_t _6841_i0 = _12077_; _6841_i0 < _12078_; ++_6841_i0)
            {
              {
                int32_t _12079_ = (int)0;
                int32_t _12080_ = _ptr__6824_dim[(int)1];
                for (int32_t _6842_i1 = _12079_; _6842_i1 < _12080_; ++_6842_i1)
                {
                  {
                    int32_t _12081_ = (int)0;
                    int32_t _12082_ = _ptr__6824_dim[(int)2];
                    for (int32_t _6843_i2 = _12081_; _6843_i2 < _12082_; ++_6843_i2)
                    {
                      {
                        int32_t _12083_ = (int)0;
                        int32_t _12084_ = safe_add( _6842_i1,(int)1 );
                        for (int32_t _6844_i3 = _12083_; _6844_i3 < _12084_; ++_6844_i3)
                        {
                          {
                            int32_t _12085_ = (int)0;
                            int32_t _12086_ = _ptr__6824_dim[(int)4];
                            for (int32_t _6845_i4 = _12085_; _6845_i4 < _12086_; ++_6845_i4)
                            {
                              {
                                int32_t _6846_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _6841_i0,_ptr__6829_stride[(int)0] ),safe_mul( _6842_i1,_ptr__6829_stride[(int)1] ) ),safe_mul( _6843_i2,_ptr__6829_stride[(int)2] ) ),safe_mul( _6844_i3,_ptr__6829_stride[(int)3] ) ),safe_mul( _6845_i4,_ptr__6829_stride[(int)4] ) );
                                _6831_rnnz += (_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6846_p ),(int)1 )] - _ptr__6818_wi32[safe_add( _6811_ptr,_6846_p )]);
                                if ((_6808_ncodeatom > (int)0))
                                {
                                  {
                                    _6833_rncodeatom += (_ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6846_p ),(int)1 )] )] - _ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( _6811_ptr,_6846_p )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int32_t _12087_ = (int)0;
            int32_t _12088_ = _ptr__6824_dim[(int)0];
            for (int32_t _6847_i0 = _12087_; _6847_i0 < _12088_; ++_6847_i0)
            {
              {
                int32_t _12089_ = (int)0;
                int32_t _12090_ = _ptr__6824_dim[(int)1];
                for (int32_t _6848_i1 = _12089_; _6848_i1 < _12090_; ++_6848_i1)
                {
                  {
                    int32_t _12091_ = (int)0;
                    int32_t _12092_ = _ptr__6824_dim[(int)2];
                    for (int32_t _6849_i2 = _12091_; _6849_i2 < _12092_; ++_6849_i2)
                    {
                      {
                        int32_t _12093_ = _6848_i1;
                        int32_t _12094_ = _ptr__6824_dim[(int)3];
                        for (int32_t _6850_i3 = _12093_; _6850_i3 < _12094_; ++_6850_i3)
                        {
                          {
                            int32_t _12095_ = (int)0;
                            int32_t _12096_ = _ptr__6824_dim[(int)4];
                            for (int32_t _6851_i4 = _12095_; _6851_i4 < _12096_; ++_6851_i4)
                            {
                              {
                                int32_t _6852_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _6847_i0,_ptr__6829_stride[(int)0] ),safe_mul( _6848_i1,_ptr__6829_stride[(int)1] ) ),safe_mul( _6849_i2,_ptr__6829_stride[(int)2] ) ),safe_mul( _6850_i3,_ptr__6829_stride[(int)3] ) ),safe_mul( _6851_i4,_ptr__6829_stride[(int)4] ) );
                                _6831_rnnz += (_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6852_p ),(int)1 )] - _ptr__6818_wi32[safe_add( _6811_ptr,_6852_p )]);
                                if ((_6808_ncodeatom > (int)0))
                                {
                                  {
                                    _6833_rncodeatom += (_ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6852_p ),(int)1 )] )] - _ptr__6818_wi32[safe_add( _6813_codeptr,_ptr__6818_wi32[safe_add( _6811_ptr,_6852_p )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int32_t _6853_fullnelem = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__6824_dim[(int)0],_ptr__6824_dim[(int)2] ),_ptr__6824_dim[(int)4] ),_ptr__6824_dim[(int)1] ),safe_add( _ptr__6824_dim[(int)1],(int)1 ) ) / (int)2);
  _6802_rs->alloc_expr(_6805_nd,_6832_rnelem,_6831_rnnz,true,_6833_rncodeatom);
  int32_t _6854_rptr = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->ptr_base;
  int32_t _6855_rshape = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->shape_base;
  int32_t _6856_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->nidxs_base;
  int32_t _6857_rsp = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->sp_base;
  int32_t _6858_rcof = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->cof_base;
  int32_t _6859_rcode = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->code_base;
  int32_t _6860_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->codeptr_base;
  int32_t _6861_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6862_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6862_ri32(_6862_ri32 ? _6862_ri32->raw() : nullptr,_6862_ri32 ? _6862_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6863_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6863_ri64(_6863_ri64 ? _6863_ri64->raw() : nullptr,_6863_ri64 ? _6863_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6864_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6802_rs)->f64;
  _checked_ptr_1<double> _ptr__6864_rf64(_6864_rf64 ? _6864_rf64->raw() : nullptr,_6864_rf64 ? _6864_rf64->size(0) : 0);
  _ptr__6862_ri32[_6854_rptr] = (int)0;
  if ((_6833_rncodeatom > (int)0))
  {
    {
      _ptr__6862_ri32[_6860_rcodeptr] = (int)0;
    }
  }
  {}
  int32_t _12097_ = (int)0;
  int32_t _12098_ = _6805_nd;
  for (int32_t _6865_i = _12097_; _6865_i < _12098_; ++_6865_i)
  {
    {
      _ptr__6862_ri32[safe_add( _6855_rshape,_6865_i )] = _ptr__6818_wi32[safe_add( _6810_shape,_6865_i )];
    }
  }
  if (_6823_tril)
  {
    {
      int32_t _6866_k = (int)0;
      int32_t _12099_ = (int)0;
      int32_t _12100_ = _ptr__6824_dim[(int)0];
      for (int32_t _6867_i0 = _12099_; _6867_i0 < _12100_; ++_6867_i0)
      {
        {
          int32_t _12101_ = (int)0;
          int32_t _12102_ = _ptr__6824_dim[(int)1];
          for (int32_t _6868_i1 = _12101_; _6868_i1 < _12102_; ++_6868_i1)
          {
            {
              int32_t _12103_ = (int)0;
              int32_t _12104_ = _ptr__6824_dim[(int)2];
              for (int32_t _6869_i2 = _12103_; _6869_i2 < _12104_; ++_6869_i2)
              {
                {
                  int32_t _12105_ = (int)0;
                  int32_t _12106_ = safe_add( _6868_i1,(int)1 );
                  for (int32_t _6870_i3 = _12105_; _6870_i3 < _12106_; ++_6870_i3)
                  {
                    {
                      int32_t _12107_ = (int)0;
                      int32_t _12108_ = _ptr__6824_dim[(int)4];
                      for (int32_t _6871_i4 = _12107_; _6871_i4 < _12108_; ++_6871_i4)
                      {
                        {
                          _ptr__6863_ri64[safe_add( _6857_rsp,_6866_k )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6867_i0,_ptr__6829_stride[(int)0] ),safe_mul( _6868_i1,_ptr__6829_stride[(int)1] ) ),safe_mul( _6869_i2,_ptr__6829_stride[(int)2] ) ),safe_mul( _6870_i3,_ptr__6829_stride[(int)3] ) ),safe_mul( _6871_i4,_ptr__6829_stride[(int)4] ) );
                          ++ _6866_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6866_k != _6832_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int32_t _6872_k = (int)0;
      int32_t _12109_ = (int)0;
      int32_t _12110_ = _ptr__6824_dim[(int)0];
      for (int32_t _6873_i0 = _12109_; _6873_i0 < _12110_; ++_6873_i0)
      {
        {
          int32_t _12111_ = (int)0;
          int32_t _12112_ = _ptr__6824_dim[(int)1];
          for (int32_t _6874_i1 = _12111_; _6874_i1 < _12112_; ++_6874_i1)
          {
            {
              int32_t _12113_ = (int)0;
              int32_t _12114_ = _ptr__6824_dim[(int)2];
              for (int32_t _6875_i2 = _12113_; _6875_i2 < _12114_; ++_6875_i2)
              {
                {
                  int32_t _12115_ = _6874_i1;
                  int32_t _12116_ = _ptr__6824_dim[(int)3];
                  for (int32_t _6876_i3 = _12115_; _6876_i3 < _12116_; ++_6876_i3)
                  {
                    {
                      int32_t _12117_ = (int)0;
                      int32_t _12118_ = _ptr__6824_dim[(int)4];
                      for (int32_t _6877_i4 = _12117_; _6877_i4 < _12118_; ++_6877_i4)
                      {
                        {
                          _ptr__6863_ri64[safe_add( _6857_rsp,_6872_k )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6873_i0,_ptr__6829_stride[(int)0] ),safe_mul( _6874_i1,_ptr__6829_stride[(int)1] ) ),safe_mul( _6875_i2,_ptr__6829_stride[(int)2] ) ),safe_mul( _6876_i3,_ptr__6829_stride[(int)3] ) ),safe_mul( _6877_i4,_ptr__6829_stride[(int)4] ) );
                          ++ _6872_k;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6872_k != _6832_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  {
    int32_t _6878_nzi = (int)0;
    int32_t _6879_codei = (int)0;
    if (_6809_hassp)
    {
      {
        int32_t _6880_i1 = (int)0;
        int32_t _6881_i0 = (int)0;
        while ( ((_6881_i0 < _6807_nelem) && (_6880_i1 < _6853_fullnelem)) )
        {
          {
            if ((_ptr__6819_wi64[safe_add( _6816_sp,_6881_i0 )] < _ptr__6863_ri64[safe_add( _6857_rsp,_6880_i1 )]))
            {
              {
                ++ _6881_i0;
              }
            }
            else if((_ptr__6819_wi64[safe_add( _6816_sp,_6881_i0 )] > _ptr__6863_ri64[safe_add( _6857_rsp,_6880_i1 )]))
            {
              {
                _ptr__6862_ri32[safe_add( safe_add( _6854_rptr,_6880_i1 ),(int)1 )] = _6878_nzi;
                ++ _6880_i1;
              }
            }
            else
            {
              {
                int32_t _12119_ = _ptr__6818_wi32[safe_add( _6811_ptr,_6881_i0 )];
                int32_t _12120_ = _ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6881_i0 ),(int)1 )];
                for (int32_t _6882_j = _12119_; _6882_j < _12120_; ++_6882_j)
                {
                  {
                    _ptr__6863_ri64[safe_add( _6856_rnidxs,_6878_nzi )] = _ptr__6819_wi64[safe_add( _6815_nidxs,_6882_j )];
                    _ptr__6864_rf64[safe_add( _6858_rcof,_6878_nzi )] = _ptr__6820_wf64[safe_add( _6817_cof,_6882_j )];
                    if ((_6833_rncodeatom > (int)0))
                    {
                      {
                        int32_t _12121_ = _ptr__6818_wi32[safe_add( _6813_codeptr,_6882_j )];
                        int32_t _12122_ = _ptr__6818_wi32[safe_add( safe_add( _6813_codeptr,_6882_j ),(int)1 )];
                        for (int32_t _6883_k = _12121_; _6883_k < _12122_; ++_6883_k)
                        {
                          {
                            _ptr__6862_ri32[safe_add( _6859_rcode,_6879_codei )] = _ptr__6818_wi32[safe_add( _6812_code,_6883_k )];
                            _ptr__6864_rf64[safe_add( _6861_rcconst,_6879_codei )] = _ptr__6820_wf64[safe_add( _6814_cconst,_6883_k )];
                            ++ _6879_codei;
                          }
                        }
                        _ptr__6862_ri32[safe_add( safe_add( _6860_rcodeptr,_6878_nzi ),(int)1 )] = _6879_codei;
                      }
                    }
                    {}
                    ++ _6878_nzi;
                  }
                }
                _ptr__6862_ri32[safe_add( safe_add( _6854_rptr,_6880_i1 ),(int)1 )] = _6878_nzi;
                ++ _6881_i0;
                ++ _6880_i1;
              }
            }
          }
        }
        while ( (_6880_i1 < _6853_fullnelem) )
        {
          {
            _ptr__6862_ri32[safe_add( safe_add( _6854_rptr,_6880_i1 ),(int)1 )] = _6878_nzi;
            ++ _6880_i1;
          }
        }
      }
    }
    else
    {
      {
        int32_t _12123_ = (int)0;
        int32_t _12124_ = _6853_fullnelem;
        for (int32_t _6884_i = _12123_; _6884_i < _12124_; ++_6884_i)
        {
          {
            int64_t _6885_i0 = _ptr__6863_ri64[safe_add( _6857_rsp,_6884_i )];
            int32_t _12125_ = _ptr__6818_wi32[safe_add( _6811_ptr,_6885_i0 )];
            int32_t _12126_ = _ptr__6818_wi32[safe_add( safe_add( _6811_ptr,_6885_i0 ),(int)1 )];
            for (int32_t _6886_j = _12125_; _6886_j < _12126_; ++_6886_j)
            {
              {
                _ptr__6863_ri64[safe_add( _6856_rnidxs,_6878_nzi )] = _ptr__6819_wi64[safe_add( _6815_nidxs,_6886_j )];
                _ptr__6864_rf64[safe_add( _6858_rcof,_6878_nzi )] = _ptr__6820_wf64[safe_add( _6817_cof,_6886_j )];
                if ((_6833_rncodeatom > (int)0))
                {
                  {
                    int32_t _12127_ = _ptr__6818_wi32[safe_add( _6813_codeptr,_6886_j )];
                    int32_t _12128_ = _ptr__6818_wi32[safe_add( safe_add( _6813_codeptr,_6886_j ),(int)1 )];
                    for (int32_t _6887_k = _12127_; _6887_k < _12128_; ++_6887_k)
                    {
                      {
                        _ptr__6862_ri32[safe_add( _6859_rcode,_6879_codei )] = _ptr__6818_wi32[safe_add( _6812_code,_6887_k )];
                        _ptr__6864_rf64[safe_add( _6861_rcconst,_6879_codei )] = _ptr__6820_wf64[safe_add( _6814_cconst,_6887_k )];
                        ++ _6879_codei;
                      }
                    }
                    _ptr__6862_ri32[safe_add( safe_add( _6860_rcodeptr,_6878_nzi ),(int)1 )] = _6879_codei;
                  }
                }
                {}
                ++ _6878_nzi;
              }
            }
            _ptr__6862_ri32[safe_add( safe_add( _6854_rptr,_6884_i ),(int)1 )] = _6878_nzi;
          }
        }
      }
    }
    if ((_6878_nzi != _6831_rnnz))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
      }
    }
    {}
  }
}
// End mosek.fusion.ExprDenseTril.eval

// Begin mosek.fusion.ExprDenseTril.toString
// Method mosek.fusion.ExprDenseTril.toString @ src/fusion/ExprShape.monty:782:6-784:7
std::string mosek::fusion::ExprDenseTril :: toString() { return mosek::fusion::p_ExprDenseTril::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDenseTril::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDenseTril(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDenseTril.toString

void mosek::fusion::p_ExprDenseTril::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }
// } class ExprDenseTril
// class ExprDense { // @ src/fusion/ExprShape.monty:691:4-770:5
mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }
mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprDense::p_ExprDense
  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprDense.ctor @ src/fusion/ExprShape.monty:694:6-697:7
mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense
  (monty::rc_ptr< ::mosek::fusion::Expression > _6888_expr)
{ return new mosek::fusion::ExprDense(_6888_expr); }
mosek::fusion::ExprDense::ExprDense
  (monty::rc_ptr< ::mosek::fusion::Expression > _6888_expr) : 
   ExprDense(new mosek::fusion::p_ExprDense(this))
{ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_6888_expr); }
void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6888_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6888_expr->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _6888_expr;
  }
}
// mosek.fusion.ExprDense.ctor

// Begin mosek.fusion.ExprDense.eval
// Method mosek.fusion.ExprDense.eval @ src/fusion/ExprShape.monty:701:6-769:7
void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6889_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6890_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6891_xs) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_6889_rs,_6890_ws,_6891_xs); }
void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6889_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6890_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6891_xs)
{
  expr->eval(_6890_ws,_6889_rs,_6891_xs);
  _6890_ws->pop_expr();
  int32_t _6892_nd = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->nd;
  int32_t _6893_nnz = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->nnz;
  int32_t _6894_nelem = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->nelem;
  int32_t _6895_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->ncodeatom;
  bool _6896_hassp = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->hassp;
  int32_t _6897_shape = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->shape_base;
  int32_t _6898_ptr = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->ptr_base;
  int32_t _6899_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->nidxs_base;
  int32_t _6900_cof = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->cof_base;
  int32_t _6901_sp = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->sp_base;
  int32_t _6902_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->codeptr_base;
  int32_t _6903_code = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->code_base;
  int32_t _6904_cconst = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6905_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6905_wi32(_6905_wi32 ? _6905_wi32->raw() : nullptr,_6905_wi32 ? _6905_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6906_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6906_wi64(_6906_wi64 ? _6906_wi64->raw() : nullptr,_6906_wi64 ? _6906_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6907_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6890_ws)->f64;
  _checked_ptr_1<double> _ptr__6907_wf64(_6907_wf64 ? _6907_wf64->raw() : nullptr,_6907_wf64 ? _6907_wf64->size(0) : 0);
  int32_t _6908_rnelem = (int)1;
  if (_6896_hassp)
  {
    {
      bool _6909_ok = true;
      int32_t _12129_ = (int)0;
      int32_t _12130_ = _6892_nd;
      for (int32_t _6910_i = _12129_; _6910_i < _12130_; ++_6910_i)
      {
        {
          int32_t _6911_szx = safe_mul( _6908_rnelem,_ptr__6905_wi32[safe_add( _6897_shape,_6910_i )] );
          _6909_ok = (_6909_ok && ((_ptr__6905_wi32[safe_add( _6897_shape,_6910_i )] == (int)0) || ((_6911_szx / _ptr__6905_wi32[safe_add( _6897_shape,_6910_i )]) == _6908_rnelem)));
          _6908_rnelem = _6911_szx;
        }
      }
      if ((!_6909_ok))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("The domain is too large"));
        }
      }
      {}
    }
  }
  else
  {
    {
      _6908_rnelem = _6894_nelem;
    }
  }
  _6889_rs->alloc_expr(_6892_nd,_6908_rnelem,_6893_nnz,false,_6895_ncodeatom);
  int32_t _6912_rshape = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->shape_base;
  int32_t _6913_rptr = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->ptr_base;
  int32_t _6914_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->nidxs_base;
  int32_t _6915_rcof = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->cof_base;
  int32_t _6916_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->codeptr_base;
  int32_t _6917_rcode = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->code_base;
  int32_t _6918_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->cconst_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6919_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__6919_ri32(_6919_ri32 ? _6919_ri32->raw() : nullptr,_6919_ri32 ? _6919_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6920_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__6920_ri64(_6920_ri64 ? _6920_ri64->raw() : nullptr,_6920_ri64 ? _6920_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6921_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6889_rs)->f64;
  _checked_ptr_1<double> _ptr__6921_rf64(_6921_rf64 ? _6921_rf64->raw() : nullptr,_6921_rf64 ? _6921_rf64->size(0) : 0);
  {
    int32_t _12131_ = (int)0;
    int32_t _12132_ = _6892_nd;
    for (int32_t _6922_i = _12131_; _6922_i < _12132_; ++_6922_i)
    {
      {
        _ptr__6919_ri32[safe_add( _6912_rshape,_6922_i )] = _ptr__6905_wi32[safe_add( _6897_shape,_6922_i )];
      }
    }
    int32_t _12133_ = (int)0;
    int32_t _12134_ = _6893_nnz;
    for (int32_t _6923_i = _12133_; _6923_i < _12134_; ++_6923_i)
    {
      {
        _ptr__6920_ri64[safe_add( _6914_rnidxs,_6923_i )] = _ptr__6906_wi64[safe_add( _6899_nidxs,_6923_i )];
      }
    }
    int32_t _12135_ = (int)0;
    int32_t _12136_ = _6893_nnz;
    for (int32_t _6924_i = _12135_; _6924_i < _12136_; ++_6924_i)
    {
      {
        _ptr__6921_rf64[safe_add( _6915_rcof,_6924_i )] = _ptr__6907_wf64[safe_add( _6900_cof,_6924_i )];
      }
    }
    if ((_6895_ncodeatom > (int)0))
    {
      {
        int32_t _12137_ = (int)0;
        int32_t _12138_ = safe_add( _6893_nnz,(int)1 );
        for (int32_t _6925_i = _12137_; _6925_i < _12138_; ++_6925_i)
        {
          {
            _ptr__6919_ri32[safe_add( _6916_rcodeptr,_6925_i )] = _ptr__6905_wi32[safe_add( _6902_codeptr,_6925_i )];
          }
        }
        int32_t _12139_ = (int)0;
        int32_t _12140_ = _6895_ncodeatom;
        for (int32_t _6926_i = _12139_; _6926_i < _12140_; ++_6926_i)
        {
          {
            _ptr__6919_ri32[safe_add( _6917_rcode,_6926_i )] = _ptr__6905_wi32[safe_add( _6903_code,_6926_i )];
          }
        }
        int32_t _12141_ = (int)0;
        int32_t _12142_ = _6895_ncodeatom;
        for (int32_t _6927_i = _12141_; _6927_i < _12142_; ++_6927_i)
        {
          {
            _ptr__6921_rf64[safe_add( _6918_rcconst,_6927_i )] = _ptr__6907_wf64[safe_add( _6904_cconst,_6927_i )];
          }
        }
      }
    }
    {}
    if ((!_6896_hassp))
    {
      {
        int32_t _12143_ = (int)0;
        int32_t _12144_ = safe_add( _6908_rnelem,(int)1 );
        for (int32_t _6928_i = _12143_; _6928_i < _12144_; ++_6928_i)
        {
          {
            _ptr__6919_ri32[safe_add( _6913_rptr,_6928_i )] = _ptr__6905_wi32[safe_add( _6898_ptr,_6928_i )];
          }
        }
      }
    }
    else
    {
      {
        int32_t _12145_ = (int)0;
        int32_t _12146_ = safe_add( _6908_rnelem,(int)1 );
        for (int32_t _6929_i = _12145_; _6929_i < _12146_; ++_6929_i)
        {
          {
            _ptr__6919_ri32[safe_add( _6913_rptr,_6929_i )] = (int)0;
          }
        }
        int32_t _12147_ = (int)0;
        int32_t _12148_ = _6894_nelem;
        for (int32_t _6930_i = _12147_; _6930_i < _12148_; ++_6930_i)
        {
          {
            _ptr__6919_ri32[safe_add( safe_add( _6913_rptr,_ptr__6906_wi64[safe_add( _6901_sp,_6930_i )] ),(int)1 )] = (_ptr__6905_wi32[safe_add( safe_add( _6898_ptr,_6930_i ),(int)1 )] - _ptr__6905_wi32[safe_add( _6898_ptr,_6930_i )]);
          }
        }
        int32_t _12149_ = (int)0;
        int32_t _12150_ = _6908_rnelem;
        for (int32_t _6931_i = _12149_; _6931_i < _12150_; ++_6931_i)
        {
          {
            _ptr__6919_ri32[safe_add( safe_add( _6913_rptr,_6931_i ),(int)1 )] += _ptr__6919_ri32[safe_add( _6913_rptr,_6931_i )];
          }
        }
      }
    }
  }
}
// End mosek.fusion.ExprDense.eval

// Begin mosek.fusion.ExprDense.toString
// Method mosek.fusion.ExprDense.toString @ src/fusion/ExprShape.monty:699:6-127
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprDense::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprDense.toString

void mosek::fusion::p_ExprDense::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }
// } class ExprDense
// class ExprSymmetrize { // @ src/fusion/ExprShape.monty:148:4-684:5
mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }
mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize
  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprSymmetrize.ctor @ src/fusion/ExprShape.monty:165:6-178:7
mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize
  (int32_t _6932_dim0,
    int32_t _6933_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6934_expr,
    int32_t _6935_unchecked_)
{ return new mosek::fusion::ExprSymmetrize(_6932_dim0,_6933_dim1,_6934_expr,_6935_unchecked_); }
mosek::fusion::ExprSymmetrize::ExprSymmetrize
  (int32_t _6932_dim0,
    int32_t _6933_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6934_expr,
    int32_t _6935_unchecked_) : 
   ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this))
{ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6932_dim0,_6933_dim1,_6934_expr,_6935_unchecked_); }
void mosek::fusion::p_ExprSymmetrize::_initialize  (int32_t _6932_dim0,
    int32_t _6933_dim1,
    monty::rc_ptr< ::mosek::fusion::Expression > _6934_expr,
    int32_t _6935_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_6934_expr->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _6934_expr;
    if ((_6932_dim0 < _6933_dim1))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6932_dim0;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6933_dim1;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6933_dim1;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6932_dim0;
      }
    }
  }
}
// mosek.fusion.ExprSymmetrize.ctor

// mosek.fusion.ExprSymmetrize.ctor @ src/fusion/ExprShape.monty:157:6-163:7
mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize
  (int32_t _6936_dim0_,
    int32_t _6937_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6938_expr)
{ return new mosek::fusion::ExprSymmetrize(_6936_dim0_,_6937_dim1_,_6938_expr); }
mosek::fusion::ExprSymmetrize::ExprSymmetrize
  (int32_t _6936_dim0_,
    int32_t _6937_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6938_expr) : 
   ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this))
{ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6936_dim0_,_6937_dim1_,_6938_expr); }
void mosek::fusion::p_ExprSymmetrize::_initialize  (int32_t _6936_dim0_,
    int32_t _6937_dim1_,
    monty::rc_ptr< ::mosek::fusion::Expression > _6938_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_ExprSymmetrize::_initialize(_6936_dim0_,_6937_dim1_,_6938_expr,(int)1);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _6939_shape = _6938_expr->getShape();
    _checked_ptr_1<int32_t> _ptr__6939_shape(_6939_shape ? _6939_shape->raw() : nullptr,_6939_shape ? _6939_shape->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_6939_shape)->size(0))) || (_ptr__6939_shape[dim0] != _ptr__6939_shape[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}
// mosek.fusion.ExprSymmetrize.ctor

// Begin mosek.fusion.ExprSymmetrize.eval
// Method mosek.fusion.ExprSymmetrize.eval @ src/fusion/ExprShape.monty:180:6-683:7
void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6940_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6941_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6942_xs) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_6940_rs,_6941_ws,_6942_xs); }
void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6940_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _6941_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _6942_xs)
{
  expr->eval(_6941_ws,_6940_rs,_6942_xs);
  _6941_ws->pop_expr();
  int32_t _6943_dimmax = (int)0;
  int32_t _6944_nd = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->nd;
  int32_t _6945_nnz = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->nnz;
  int32_t _6946_nelem = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->nelem;
  int32_t _6947_ncodeatom = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->ncodeatom;
  bool _6948_hassp = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->hassp;
  int32_t _6949_shape = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->shape_base;
  int32_t _6950_ptr = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->ptr_base;
  int32_t _6951_code = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->code_base;
  int32_t _6952_codeptr = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->codeptr_base;
  int32_t _6953_cconst = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->cconst_base;
  int32_t _6954_nidxs = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->nidxs_base;
  int32_t _6955_sp = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->sp_base;
  int32_t _6956_cof = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->cof_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6957_wi32 = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->i32;
  _checked_ptr_1<int32_t> _ptr__6957_wi32(_6957_wi32 ? _6957_wi32->raw() : nullptr,_6957_wi32 ? _6957_wi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6958_wi64 = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->i64;
  _checked_ptr_1<int64_t> _ptr__6958_wi64(_6958_wi64 ? _6958_wi64->raw() : nullptr,_6958_wi64 ? _6958_wi64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6959_wf64 = mosek::fusion::p_WorkStack::_get_impl(_6941_ws)->f64;
  _checked_ptr_1<double> _ptr__6959_wf64(_6959_wf64 ? _6959_wf64->raw() : nullptr,_6959_wf64 ? _6959_wf64->size(0) : 0);
  int32_t _12151_ = (int)0;
  int32_t _12152_ = _6944_nd;
  for (int32_t _6960_i = _12151_; _6960_i < _12152_; ++_6960_i)
  {
    {
      int32_t _6961_d = _ptr__6957_wi32[safe_add( _6949_shape,_6960_i )];
      if ((_6961_d > _6943_dimmax))
      {
        {
          _6943_dimmax = _6961_d;
        }
      }
      {}
    }
  }
  int32_t _6962_xperm1 = _6942_xs->alloci32(_6946_nelem);
  int32_t _6963_xperm2 = _6942_xs->alloci32(_6946_nelem);
  int32_t _6964_xptr = _6942_xs->alloci32(safe_add( _6943_dimmax,(int)1 ));
  int32_t _6965_xsp = _6942_xs->alloci64(_6946_nelem);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6966_xi32 = mosek::fusion::p_WorkStack::_get_impl(_6942_xs)->i32;
  _checked_ptr_1<int32_t> _ptr__6966_xi32(_6966_xi32 ? _6966_xi32->raw() : nullptr,_6966_xi32 ? _6966_xi32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6967_xi64 = mosek::fusion::p_WorkStack::_get_impl(_6942_xs)->i64;
  _checked_ptr_1<int64_t> _ptr__6967_xi64(_6967_xi64 ? _6967_xi64->raw() : nullptr,_6967_xi64 ? _6967_xi64->size(0) : 0);
  int32_t _6968_rnelem = (int)0;
  int32_t _6969_rnnz = (int)0;
  int32_t _6970_rncodeatom = (int)0;
  std::vector<int32_t> _12153_;
  for (int32_t _6972_i = (int)0, _12154_ = (int)5; _6972_i < _12154_ ; ++_6972_i)
  {
    _12153_.push_back((int)1);
  }
  auto _12155_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12153_.size()),_12153_.begin(),_12153_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _6971_dim = _12155_;
  _checked_ptr_1<int32_t> _ptr__6971_dim(_6971_dim ? _6971_dim->raw() : nullptr,_6971_dim ? _6971_dim->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _6973_stride = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)5)));
  _checked_ptr_1<int64_t> _ptr__6973_stride(_6973_stride ? _6973_stride->raw() : nullptr,_6973_stride ? _6973_stride->size(0) : 0);
  int32_t _12156_ = (int)0;
  int32_t _12157_ = dim0;
  for (int32_t _6974_i = _12156_; _6974_i < _12157_; ++_6974_i)
  {
    {
      _ptr__6971_dim[(int)0] *= _ptr__6957_wi32[safe_add( _6949_shape,_6974_i )];
    }
  }
  _ptr__6971_dim[(int)1] = _ptr__6957_wi32[safe_add( _6949_shape,dim0 )];
  int32_t _12158_ = safe_add( dim0,(int)1 );
  int32_t _12159_ = dim1;
  for (int32_t _6975_i = _12158_; _6975_i < _12159_; ++_6975_i)
  {
    {
      _ptr__6971_dim[(int)2] *= _ptr__6957_wi32[safe_add( _6949_shape,_6975_i )];
    }
  }
  _ptr__6971_dim[(int)3] = _ptr__6957_wi32[safe_add( _6949_shape,dim1 )];
  int32_t _12160_ = safe_add( dim1,(int)1 );
  int32_t _12161_ = _6944_nd;
  for (int32_t _6976_i = _12160_; _6976_i < _12161_; ++_6976_i)
  {
    {
      _ptr__6971_dim[(int)4] *= _ptr__6957_wi32[safe_add( _6949_shape,_6976_i )];
    }
  }
  _ptr__6973_stride[(int)4] = (int)1;
  int32_t _12162_ = (int)1;
  int32_t _12163_ = (int)5;
  for (int32_t _6977_i = _12162_; _6977_i < _12163_; ++_6977_i)
  {
    {
      _ptr__6973_stride[(((int)5 - _6977_i) - (int)1)] = safe_mul( _ptr__6973_stride[((int)5 - _6977_i)],_ptr__6971_dim[((int)5 - _6977_i)] );
    }
  }
  if (_6948_hassp)
  {
    {
      int32_t _6978_curperm = _6962_xperm1;
      int32_t _12164_ = (int)0;
      int32_t _12165_ = _6946_nelem;
      for (int32_t _6979_i = _12164_; _6979_i < _12165_; ++_6979_i)
      {
        {
          _ptr__6966_xi32[safe_add( _6978_curperm,_6979_i )] = _6979_i;
        }
      }
      int32_t _6980_tgtperm = _6963_xperm2;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _6981_sortidx = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)((int)2),(int32_t)((int)3),(int32_t)((int)0)});
      _checked_ptr_1<int32_t> _ptr__6981_sortidx(_6981_sortidx ? _6981_sortidx->raw() : nullptr,_6981_sortidx ? _6981_sortidx->size(0) : 0);
      int32_t _12166_ = (int)0;
      int32_t _12167_ = (int)4;
      for (int32_t _6982_k = _12166_; _6982_k < _12167_; ++_6982_k)
      {
        {
          int64_t _6983_s = _ptr__6973_stride[_ptr__6981_sortidx[_6982_k]];
          int32_t _6984_d = _ptr__6971_dim[_ptr__6981_sortidx[_6982_k]];
          if ((_6984_d > (int)1))
          {
            {
              int32_t _12168_ = (int)0;
              int32_t _12169_ = safe_add( _6984_d,(int)1 );
              for (int32_t _6985_i = _12168_; _6985_i < _12169_; ++_6985_i)
              {
                {
                  _ptr__6966_xi32[safe_add( _6964_xptr,_6985_i )] = (int)0;
                }
              }
              int32_t _12170_ = (int)0;
              int32_t _12171_ = _6946_nelem;
              for (int32_t _6986_i = _12170_; _6986_i < _12171_; ++_6986_i)
              {
                {
                  ++ _ptr__6966_xi32[safe_add( safe_add( _6964_xptr,((_ptr__6958_wi64[safe_add( _6955_sp,_ptr__6966_xi32[safe_add( _6978_curperm,_6986_i )] )] / _6983_s) % _6984_d) ),(int)1 )];
                }
              }
              int32_t _12172_ = (int)0;
              int32_t _12173_ = _ptr__6971_dim[(int)3];
              for (int32_t _6987_i = _12172_; _6987_i < _12173_; ++_6987_i)
              {
                {
                  _ptr__6966_xi32[safe_add( safe_add( _6964_xptr,_6987_i ),(int)1 )] += _ptr__6966_xi32[safe_add( _6964_xptr,_6987_i )];
                }
              }
              int32_t _12174_ = (int)0;
              int32_t _12175_ = _6946_nelem;
              for (int32_t _6988_i = _12174_; _6988_i < _12175_; ++_6988_i)
              {
                {
                  int32_t _6989_ii = _ptr__6966_xi32[safe_add( _6978_curperm,_6988_i )];
                  int64_t _6990_idx = ((_ptr__6958_wi64[safe_add( _6955_sp,_6989_ii )] / _6983_s) % _6984_d);
                  _ptr__6966_xi32[safe_add( _6980_tgtperm,_ptr__6966_xi32[safe_add( _6964_xptr,_6990_idx )] )] = _6989_ii;
                  ++ _ptr__6966_xi32[safe_add( _6964_xptr,_6990_idx )];
                }
              }
              int32_t _6991_tmpperm = _6978_curperm;
              _6978_curperm = _6980_tgtperm;
              _6980_tgtperm = _6991_tmpperm;
            }
          }
          {}
        }
      }
      int32_t _12176_ = (int)0;
      int32_t _12177_ = _6946_nelem;
      for (int32_t _6992_i = _12176_; _6992_i < _12177_; ++_6992_i)
      {
        {
          _ptr__6967_xi64[safe_add( _6965_xsp,_6992_i )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__6958_wi64[safe_add( _6955_sp,_6992_i )] / _ptr__6973_stride[(int)0]) % _ptr__6971_dim[(int)0]),_ptr__6973_stride[(int)0] ),safe_mul( ((_ptr__6958_wi64[safe_add( _6955_sp,_6992_i )] / _ptr__6973_stride[(int)1]) % _ptr__6971_dim[(int)1]),_ptr__6973_stride[(int)3] ) ),safe_mul( ((_ptr__6958_wi64[safe_add( _6955_sp,_6992_i )] / _ptr__6973_stride[(int)2]) % _ptr__6971_dim[(int)2]),_ptr__6973_stride[(int)2] ) ),safe_mul( ((_ptr__6958_wi64[safe_add( _6955_sp,_6992_i )] / _ptr__6973_stride[(int)3]) % _ptr__6971_dim[(int)3]),_ptr__6973_stride[(int)1] ) ),safe_mul( ((_ptr__6958_wi64[safe_add( _6955_sp,_6992_i )] / _ptr__6973_stride[(int)4]) % _ptr__6971_dim[(int)4]),_ptr__6973_stride[(int)4] ) );
        }
      }
      {
        int32_t _6993_ii1 = (int)0;
        int32_t _6994_i0 = (int)0;
        while ( ((_6994_i0 < _6946_nelem) || (_6993_ii1 < _6946_nelem)) )
        {
          {
            int32_t _6995_i1 = _ptr__6966_xi32[safe_add( _6978_curperm,_6993_ii1 )];
            if (((_6994_i0 < _6946_nelem) && ((_6993_ii1 == _6946_nelem) || (_ptr__6958_wi64[safe_add( _6955_sp,_6994_i0 )] < _ptr__6967_xi64[safe_add( _6965_xsp,_6995_i1 )]))))
            {
              {
                _6969_rnnz += (_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )]);
                if ((_6947_ncodeatom > (int)0))
                {
                  {
                    _6970_rncodeatom += safe_add( (_ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] )] - _ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )] )]),safe_mul( (int)2,(_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )]) ) );
                  }
                }
                {}
                ++ _6968_rnelem;
                ++ _6994_i0;
              }
            }
            else if(((_6993_ii1 < _6946_nelem) && ((_6994_i0 == _6946_nelem) || (_ptr__6958_wi64[safe_add( _6955_sp,_6994_i0 )] > _ptr__6967_xi64[safe_add( _6965_xsp,_6995_i1 )]))))
            {
              {
                _6969_rnnz += (_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6995_i1 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6995_i1 )]);
                if ((_6947_ncodeatom > (int)0))
                {
                  {
                    _6970_rncodeatom += safe_add( (_ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6995_i1 ),(int)1 )] )] - _ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( _6950_ptr,_6995_i1 )] )]),safe_mul( (int)2,(_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6995_i1 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6995_i1 )]) ) );
                  }
                }
                {}
                ++ _6968_rnelem;
                ++ _6993_ii1;
              }
            }
            else if((_ptr__6958_wi64[safe_add( _6955_sp,_6994_i0 )] != _ptr__6967_xi64[safe_add( _6965_xsp,_6995_i1 )]))
            {
              {
                _6969_rnnz += (_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )]);
                _6969_rnnz += (_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6995_i1 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6995_i1 )]);
                if ((_6947_ncodeatom > (int)0))
                {
                  {
                    _6970_rncodeatom += safe_add( (_ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] )] - _ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )] )]),safe_mul( (int)2,(_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )]) ) );
                    _6970_rncodeatom += safe_add( (_ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6995_i1 ),(int)1 )] )] - _ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( _6950_ptr,_6995_i1 )] )]),safe_mul( (int)2,(_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6995_i1 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6995_i1 )]) ) );
                  }
                }
                {}
                ++ _6968_rnelem;
                ++ _6993_ii1;
                ++ _6994_i0;
              }
            }
            else
            {
              {
                _6969_rnnz += (_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )]);
                if ((_6947_ncodeatom > (int)0))
                {
                  {
                    _6970_rncodeatom += (_ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_6994_i0 ),(int)1 )] )] - _ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( _6950_ptr,_6994_i0 )] )]);
                  }
                }
                {}
                ++ _6968_rnelem;
                ++ _6993_ii1;
                ++ _6994_i0;
              }
            }
          }
        }
      }
      _6940_rs->alloc_expr(_6944_nd,_6968_rnelem,_6969_rnnz,true,_6970_rncodeatom);
      int32_t _6996_rnd = _6944_nd;
      int32_t _6997_rptr = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->ptr_base;
      int32_t _6998_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->nidxs_base;
      int32_t _6999_rshape = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->shape_base;
      int32_t _7000_rsp = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->sp_base;
      int32_t _7001_rcof = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->cof_base;
      int32_t _7002_rcode = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->code_base;
      int32_t _7003_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->codeptr_base;
      int32_t _7004_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7005_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__7005_ri32(_7005_ri32 ? _7005_ri32->raw() : nullptr,_7005_ri32 ? _7005_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7006_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__7006_ri64(_7006_ri64 ? _7006_ri64->raw() : nullptr,_7006_ri64 ? _7006_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7007_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->f64;
      _checked_ptr_1<double> _ptr__7007_rf64(_7007_rf64 ? _7007_rf64->raw() : nullptr,_7007_rf64 ? _7007_rf64->size(0) : 0);
      int32_t _12178_ = (int)0;
      int32_t _12179_ = _6944_nd;
      for (int32_t _7008_i = _12178_; _7008_i < _12179_; ++_7008_i)
      {
        {
          _ptr__7005_ri32[safe_add( _6999_rshape,_7008_i )] = _ptr__6957_wi32[safe_add( _6949_shape,_7008_i )];
        }
      }
      _ptr__7005_ri32[_6997_rptr] = (int)0;
      if ((_6970_rncodeatom > (int)0))
      {
        {
          _ptr__7005_ri32[_7003_rcodeptr] = (int)0;
        }
      }
      {}
      {
        int32_t _7009_nzi = (int)0;
        int32_t _7010_codei = (int)0;
        int32_t _7011_elmi = (int)0;
        int32_t _7012_ii1 = (int)0;
        int32_t _7013_i0 = (int)0;
        _ptr__7005_ri32[_6997_rptr] = (int)0;
        while ( ((_7013_i0 < _6946_nelem) || (_7012_ii1 < _6946_nelem)) )
        {
          {
            int32_t _7014_i1 = _ptr__6966_xi32[safe_add( _6978_curperm,_7012_ii1 )];
            if (((_7013_i0 < _6946_nelem) && ((_7012_ii1 == _6946_nelem) || (_ptr__6958_wi64[safe_add( _6955_sp,_7013_i0 )] < _ptr__6967_xi64[safe_add( _6965_xsp,_7014_i1 )]))))
            {
              {
                if ((_6970_rncodeatom == (int)0))
                {
                  {
                    int32_t _12180_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7013_i0 )];
                    int32_t _12181_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7013_i0 ),(int)1 )];
                    for (int32_t _7015_j = _12180_; _7015_j < _12181_; ++_7015_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7015_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7015_j )] * 0.5);
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12182_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7013_i0 )];
                    int32_t _12183_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7013_i0 ),(int)1 )];
                    for (int32_t _7016_j = _12182_; _7016_j < _12183_; ++_7016_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7016_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7016_j )] * 0.5);
                        int32_t _12184_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7016_j )];
                        int32_t _12185_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7016_j ),(int)1 )];
                        for (int32_t _7017_k = _12184_; _7017_k < _12185_; ++_7017_k)
                        {
                          {
                            _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7017_k )];
                            _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7017_k )];
                            ++ _7010_codei;
                          }
                        }
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 2;
                        _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = 0.5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( safe_add( _7003_rcodeptr,_7009_nzi ),(int)1 )] = _7010_codei;
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                _ptr__7006_ri64[safe_add( _7000_rsp,_7011_elmi )] = _ptr__6958_wi64[safe_add( _6955_sp,_7013_i0 )];
                _ptr__7005_ri32[safe_add( safe_add( _6997_rptr,_7011_elmi ),(int)1 )] = _7009_nzi;
                ++ _7011_elmi;
                ++ _7013_i0;
              }
            }
            else if(((_7012_ii1 < _6946_nelem) && ((_7013_i0 == _6946_nelem) || (_ptr__6958_wi64[safe_add( _6955_sp,_7013_i0 )] > _ptr__6967_xi64[safe_add( _6965_xsp,_7014_i1 )]))))
            {
              {
                if ((_6970_rncodeatom == (int)0))
                {
                  {
                    int32_t _12186_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7014_i1 )];
                    int32_t _12187_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7014_i1 ),(int)1 )];
                    for (int32_t _7018_j = _12186_; _7018_j < _12187_; ++_7018_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7018_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7018_j )] * 0.5);
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12188_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7014_i1 )];
                    int32_t _12189_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7014_i1 ),(int)1 )];
                    for (int32_t _7019_j = _12188_; _7019_j < _12189_; ++_7019_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7019_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7019_j )] * 0.5);
                        int32_t _12190_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7019_j )];
                        int32_t _12191_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7019_j ),(int)1 )];
                        for (int32_t _7020_k = _12190_; _7020_k < _12191_; ++_7020_k)
                        {
                          {
                            _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7020_k )];
                            _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7020_k )];
                            ++ _7010_codei;
                          }
                        }
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 2;
                        _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = 0.5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( safe_add( _7003_rcodeptr,_7009_nzi ),(int)1 )] = _7010_codei;
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                _ptr__7006_ri64[safe_add( _7000_rsp,_7011_elmi )] = _ptr__6958_wi64[safe_add( _6965_xsp,_7014_i1 )];
                _ptr__7005_ri32[safe_add( safe_add( _6997_rptr,_7011_elmi ),(int)1 )] = _7009_nzi;
                ++ _7011_elmi;
                ++ _7012_ii1;
              }
            }
            else if((_ptr__6958_wi64[safe_add( _6955_sp,_7013_i0 )] != _ptr__6967_xi64[safe_add( _6965_xsp,_7014_i1 )]))
            {
              {
                if ((_6970_rncodeatom == (int)0))
                {
                  {
                    int32_t _12192_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7013_i0 )];
                    int32_t _12193_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7013_i0 ),(int)1 )];
                    for (int32_t _7021_j = _12192_; _7021_j < _12193_; ++_7021_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7021_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7021_j )] * 0.5);
                        ++ _7009_nzi;
                      }
                    }
                    int32_t _12194_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7014_i1 )];
                    int32_t _12195_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7014_i1 ),(int)1 )];
                    for (int32_t _7022_j = _12194_; _7022_j < _12195_; ++_7022_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7022_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7022_j )] * 0.5);
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12196_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7013_i0 )];
                    int32_t _12197_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7013_i0 ),(int)1 )];
                    for (int32_t _7023_j = _12196_; _7023_j < _12197_; ++_7023_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7023_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7023_j )] * 0.5);
                        int32_t _12198_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7023_j )];
                        int32_t _12199_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7023_j ),(int)1 )];
                        for (int32_t _7024_k = _12198_; _7024_k < _12199_; ++_7024_k)
                        {
                          {
                            _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7024_k )];
                            _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7024_k )];
                            ++ _7010_codei;
                          }
                        }
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 2;
                        _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = 0.5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( safe_add( _7003_rcodeptr,_7009_nzi ),(int)1 )] = _7010_codei;
                        ++ _7009_nzi;
                      }
                    }
                    int32_t _12200_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7014_i1 )];
                    int32_t _12201_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7014_i1 ),(int)1 )];
                    for (int32_t _7025_j = _12200_; _7025_j < _12201_; ++_7025_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7025_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7025_j )] * 0.5);
                        int32_t _12202_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7025_j )];
                        int32_t _12203_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7025_j ),(int)1 )];
                        for (int32_t _7026_k = _12202_; _7026_k < _12203_; ++_7026_k)
                        {
                          {
                            _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7026_k )];
                            _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7026_k )];
                            ++ _7010_codei;
                          }
                        }
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 2;
                        _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = 0.5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = 5;
                        ++ _7010_codei;
                        _ptr__7005_ri32[safe_add( safe_add( _7003_rcodeptr,_7009_nzi ),(int)1 )] = _7010_codei;
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                _ptr__7006_ri64[safe_add( _7000_rsp,_7011_elmi )] = _ptr__6958_wi64[safe_add( _6955_sp,_7013_i0 )];
                _ptr__7005_ri32[safe_add( safe_add( _6997_rptr,_7011_elmi ),(int)1 )] = _7009_nzi;
                ++ _7011_elmi;
                ++ _7012_ii1;
                ++ _7013_i0;
              }
            }
            else
            {
              {
                if ((_6970_rncodeatom == (int)0))
                {
                  {
                    int32_t _12204_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7013_i0 )];
                    int32_t _12205_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7013_i0 ),(int)1 )];
                    for (int32_t _7027_j = _12204_; _7027_j < _12205_; ++_7027_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7027_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = _ptr__6959_wf64[safe_add( _6956_cof,_7027_j )];
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int32_t _12206_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7013_i0 )];
                    int32_t _12207_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7013_i0 ),(int)1 )];
                    for (int32_t _7028_j = _12206_; _7028_j < _12207_; ++_7028_j)
                    {
                      {
                        _ptr__7006_ri64[safe_add( _6998_rnidxs,_7009_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7028_j )];
                        _ptr__7007_rf64[safe_add( _7001_rcof,_7009_nzi )] = _ptr__6959_wf64[safe_add( _6956_cof,_7028_j )];
                        int32_t _12208_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7028_j )];
                        int32_t _12209_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7028_j ),(int)1 )];
                        for (int32_t _7029_k = _12208_; _7029_k < _12209_; ++_7029_k)
                        {
                          {
                            _ptr__7005_ri32[safe_add( _7002_rcode,_7010_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7029_k )];
                            _ptr__7007_rf64[safe_add( _7004_rcconst,_7010_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7029_k )];
                            ++ _7010_codei;
                          }
                        }
                        _ptr__7005_ri32[safe_add( safe_add( _7003_rcodeptr,_7009_nzi ),(int)1 )] = _7010_codei;
                        ++ _7009_nzi;
                      }
                    }
                  }
                }
                _ptr__7006_ri64[safe_add( _7000_rsp,_7011_elmi )] = _ptr__6958_wi64[safe_add( _6955_sp,_7013_i0 )];
                _ptr__7005_ri32[safe_add( safe_add( _6997_rptr,_7011_elmi ),(int)1 )] = _7009_nzi;
                ++ _7011_elmi;
                ++ _7012_ii1;
                ++ _7013_i0;
              }
            }
          }
        }
        if ((_7009_nzi != _6969_rnnz))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nzi"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      _6968_rnelem = _6946_nelem;
      _6969_rnnz = safe_mul( _6945_nnz,(int)2 );
      int32_t _12210_;
      bool _12211_ = (_6947_ncodeatom > (int)0);
      if (_12211_)
      {
        _12210_ = safe_add( safe_mul( (int)2,_6947_ncodeatom ),safe_mul( safe_mul( (int)2,(int)2 ),_6945_nnz ) );
      }
      else
      {
        _12210_ = (int)0;
      }
      _6970_rncodeatom = _12210_;
      int32_t _12212_ = (int)0;
      int32_t _12213_ = _ptr__6971_dim[(int)0];
      for (int32_t _7030_i0 = _12212_; _7030_i0 < _12213_; ++_7030_i0)
      {
        {
          int32_t _12214_ = (int)0;
          int32_t _12215_ = _ptr__6971_dim[(int)2];
          for (int32_t _7031_i2 = _12214_; _7031_i2 < _12215_; ++_7031_i2)
          {
            {
              int32_t _12216_ = (int)0;
              int32_t _12217_ = _ptr__6971_dim[(int)4];
              for (int32_t _7032_i4 = _12216_; _7032_i4 < _12217_; ++_7032_i4)
              {
                {
                  int32_t _12218_ = (int)0;
                  int32_t _12219_ = _ptr__6971_dim[(int)1];
                  for (int32_t _7033_i = _12218_; _7033_i < _12219_; ++_7033_i)
                  {
                    {
                      int64_t _7034_p = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__6973_stride[(int)0],_7030_i0 ),safe_mul( _ptr__6973_stride[(int)1],_7033_i ) ),safe_mul( _ptr__6973_stride[(int)2],_7031_i2 ) ),safe_mul( _ptr__6973_stride[(int)3],_7033_i ) ),safe_mul( _ptr__6973_stride[(int)4],_7032_i4 ) );
                      _6969_rnnz -= (_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7034_p ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_7034_p )]);
                      if ((_6947_ncodeatom > (int)0))
                      {
                        {
                          _6970_rncodeatom -= safe_add( (_ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7034_p ),(int)1 )] )] - _ptr__6957_wi32[safe_add( _6952_codeptr,_ptr__6957_wi32[safe_add( _6950_ptr,_7034_p )] )]),safe_mul( safe_mul( (int)2,(int)2 ),(_ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7034_p ),(int)1 )] - _ptr__6957_wi32[safe_add( _6950_ptr,_7034_p )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
      _6940_rs->alloc_expr(_6944_nd,_6968_rnelem,_6969_rnnz,false,_6970_rncodeatom);
      int32_t _7035_rptr = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->ptr_base;
      int32_t _7036_rshape = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->shape_base;
      int32_t _7037_rcode = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->code_base;
      int32_t _7038_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->codeptr_base;
      int32_t _7039_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->nidxs_base;
      int32_t _7040_rsp = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->sp_base;
      int32_t _7041_rcof = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->cof_base;
      int32_t _7042_rcconst = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->cconst_base;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7043_ri32 = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->i32;
      _checked_ptr_1<int32_t> _ptr__7043_ri32(_7043_ri32 ? _7043_ri32->raw() : nullptr,_7043_ri32 ? _7043_ri32->size(0) : 0);
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7044_ri64 = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->i64;
      _checked_ptr_1<int64_t> _ptr__7044_ri64(_7044_ri64 ? _7044_ri64->raw() : nullptr,_7044_ri64 ? _7044_ri64->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7045_rf64 = mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->f64;
      _checked_ptr_1<double> _ptr__7045_rf64(_7045_rf64 ? _7045_rf64->raw() : nullptr,_7045_rf64 ? _7045_rf64->size(0) : 0);
      int32_t _7046_nzi = (int)0;
      int32_t _7047_relmi = (int)0;
      int32_t _7048_codei = (int)0;
      int32_t _12220_ = (int)0;
      int32_t _12221_ = _6944_nd;
      for (int32_t _7049_i = _12220_; _7049_i < _12221_; ++_7049_i)
      {
        {
          _ptr__7043_ri32[safe_add( _7036_rshape,_7049_i )] = _ptr__6957_wi32[safe_add( _6949_shape,_7049_i )];
        }
      }
      _ptr__7043_ri32[_7035_rptr] = (int)0;
      if ((_6970_rncodeatom > (int)0))
      {
        {
          _ptr__7043_ri32[_7038_rcodeptr] = (int)0;
        }
      }
      {}
      int32_t _7050_k = (int)0;
      int32_t _12222_ = (int)0;
      int32_t _12223_ = _ptr__6971_dim[(int)0];
      for (int32_t _7051_i0 = _12222_; _7051_i0 < _12223_; ++_7051_i0)
      {
        {
          int32_t _12224_ = (int)0;
          int32_t _12225_ = _ptr__6971_dim[(int)1];
          for (int32_t _7052_i1 = _12224_; _7052_i1 < _12225_; ++_7052_i1)
          {
            {
              int32_t _12226_ = (int)0;
              int32_t _12227_ = _ptr__6971_dim[(int)2];
              for (int32_t _7053_i2 = _12226_; _7053_i2 < _12227_; ++_7053_i2)
              {
                {
                  int32_t _12228_ = (int)0;
                  int32_t _12229_ = _ptr__6971_dim[(int)3];
                  for (int32_t _7054_i3 = _12228_; _7054_i3 < _12229_; ++_7054_i3)
                  {
                    {
                      int32_t _12230_ = (int)0;
                      int32_t _12231_ = _ptr__6971_dim[(int)4];
                      for (int32_t _7055_i4 = _12230_; _7055_i4 < _12231_; ++_7055_i4)
                      {
                        {
                          if ((_7052_i1 == _7054_i3))
                          {
                            {
                              if ((_6970_rncodeatom == (int)0))
                              {
                                {
                                  int32_t _12232_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7050_k )];
                                  int32_t _12233_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7050_k ),(int)1 )];
                                  for (int32_t _7056_j = _12232_; _7056_j < _12233_; ++_7056_j)
                                  {
                                    {
                                      _ptr__7044_ri64[safe_add( _7039_rnidxs,_7046_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7056_j )];
                                      _ptr__7045_rf64[safe_add( _7041_rcof,_7046_nzi )] = _ptr__6959_wf64[safe_add( _6956_cof,_7056_j )];
                                      ++ _7046_nzi;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int32_t _12234_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7050_k )];
                                  int32_t _12235_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7050_k ),(int)1 )];
                                  for (int32_t _7057_j = _12234_; _7057_j < _12235_; ++_7057_j)
                                  {
                                    {
                                      _ptr__7044_ri64[safe_add( _7039_rnidxs,_7046_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7057_j )];
                                      _ptr__7045_rf64[safe_add( _7041_rcof,_7046_nzi )] = _ptr__6959_wf64[safe_add( _6956_cof,_7057_j )];
                                      int32_t _12236_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7057_j )];
                                      int32_t _12237_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7057_j ),(int)1 )];
                                      for (int32_t _7058_l = _12236_; _7058_l < _12237_; ++_7058_l)
                                      {
                                        {
                                          _ptr__7043_ri32[safe_add( _7037_rcode,_7048_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7058_l )];
                                          _ptr__7045_rf64[safe_add( _7042_rcconst,_7048_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7058_l )];
                                          ++ _7048_codei;
                                        }
                                      }
                                      _ptr__7043_ri32[safe_add( safe_add( _7038_rcodeptr,_7046_nzi ),(int)1 )] = _7048_codei;
                                      ++ _7046_nzi;
                                    }
                                  }
                                }
                              }
                              _ptr__7043_ri32[safe_add( safe_add( _7035_rptr,_7047_relmi ),(int)1 )] = _7046_nzi;
                              ++ _7050_k;
                            }
                          }
                          else
                          {
                            {
                              int64_t _7059_k2 = safe_add( safe_add( safe_add( safe_add( safe_mul( _7051_i0,_ptr__6973_stride[(int)0] ),safe_mul( _7054_i3,_ptr__6973_stride[(int)1] ) ),safe_mul( _7053_i2,_ptr__6973_stride[(int)2] ) ),safe_mul( _7052_i1,_ptr__6973_stride[(int)3] ) ),_7055_i4 );
                              if ((_6970_rncodeatom == (int)0))
                              {
                                {
                                  int32_t _12238_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7050_k )];
                                  int32_t _12239_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7050_k ),(int)1 )];
                                  for (int32_t _7060_j = _12238_; _7060_j < _12239_; ++_7060_j)
                                  {
                                    {
                                      _ptr__7044_ri64[safe_add( _7039_rnidxs,_7046_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7060_j )];
                                      _ptr__7045_rf64[safe_add( _7041_rcof,_7046_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7060_j )] * 0.5);
                                      ++ _7046_nzi;
                                    }
                                  }
                                  int32_t _12240_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7059_k2 )];
                                  int32_t _12241_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7059_k2 ),(int)1 )];
                                  for (int32_t _7061_j = _12240_; _7061_j < _12241_; ++_7061_j)
                                  {
                                    {
                                      _ptr__7044_ri64[safe_add( _7039_rnidxs,_7046_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7061_j )];
                                      _ptr__7045_rf64[safe_add( _7041_rcof,_7046_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7061_j )] * 0.5);
                                      ++ _7046_nzi;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int32_t _12242_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7050_k )];
                                  int32_t _12243_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7050_k ),(int)1 )];
                                  for (int32_t _7062_j = _12242_; _7062_j < _12243_; ++_7062_j)
                                  {
                                    {
                                      _ptr__7044_ri64[safe_add( _7039_rnidxs,_7046_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7062_j )];
                                      _ptr__7045_rf64[safe_add( _7041_rcof,_7046_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7062_j )] * 0.5);
                                      int32_t _12244_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7062_j )];
                                      int32_t _12245_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7062_j ),(int)1 )];
                                      for (int32_t _7063_l = _12244_; _7063_l < _12245_; ++_7063_l)
                                      {
                                        {
                                          _ptr__7043_ri32[safe_add( _7037_rcode,_7048_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7063_l )];
                                          _ptr__7045_rf64[safe_add( _7042_rcconst,_7048_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7063_l )];
                                          ++ _7048_codei;
                                        }
                                      }
                                      _ptr__7043_ri32[safe_add( _7037_rcode,_7048_codei )] = 2;
                                      _ptr__7045_rf64[safe_add( _7042_rcconst,_7048_codei )] = 0.5;
                                      ++ _7048_codei;
                                      _ptr__7043_ri32[safe_add( _7037_rcode,_7048_codei )] = 5;
                                      ++ _7048_codei;
                                      _ptr__7043_ri32[safe_add( safe_add( _7038_rcodeptr,_7046_nzi ),(int)1 )] = _7048_codei;
                                      ++ _7046_nzi;
                                    }
                                  }
                                  int32_t _12246_ = _ptr__6957_wi32[safe_add( _6950_ptr,_7059_k2 )];
                                  int32_t _12247_ = _ptr__6957_wi32[safe_add( safe_add( _6950_ptr,_7059_k2 ),(int)1 )];
                                  for (int32_t _7064_j = _12246_; _7064_j < _12247_; ++_7064_j)
                                  {
                                    {
                                      _ptr__7044_ri64[safe_add( _7039_rnidxs,_7046_nzi )] = _ptr__6958_wi64[safe_add( _6954_nidxs,_7064_j )];
                                      _ptr__7045_rf64[safe_add( _7041_rcof,_7046_nzi )] = (_ptr__6959_wf64[safe_add( _6956_cof,_7064_j )] * 0.5);
                                      int32_t _12248_ = _ptr__6957_wi32[safe_add( _6952_codeptr,_7064_j )];
                                      int32_t _12249_ = _ptr__6957_wi32[safe_add( safe_add( _6952_codeptr,_7064_j ),(int)1 )];
                                      for (int32_t _7065_l = _12248_; _7065_l < _12249_; ++_7065_l)
                                      {
                                        {
                                          _ptr__7043_ri32[safe_add( _7037_rcode,_7048_codei )] = _ptr__6957_wi32[safe_add( _6951_code,_7065_l )];
                                          _ptr__7045_rf64[safe_add( _7042_rcconst,_7048_codei )] = _ptr__6959_wf64[safe_add( _6953_cconst,_7065_l )];
                                          ++ _7048_codei;
                                        }
                                      }
                                      _ptr__7043_ri32[safe_add( _7037_rcode,_7048_codei )] = 2;
                                      _ptr__7045_rf64[safe_add( _7042_rcconst,_7048_codei )] = 0.5;
                                      ++ _7048_codei;
                                      _ptr__7043_ri32[safe_add( _7037_rcode,_7048_codei )] = 5;
                                      ++ _7048_codei;
                                      _ptr__7043_ri32[safe_add( safe_add( _7038_rcodeptr,_7046_nzi ),(int)1 )] = _7048_codei;
                                      ++ _7046_nzi;
                                    }
                                  }
                                }
                              }
                              _ptr__7043_ri32[safe_add( safe_add( _7035_rptr,_7047_relmi ),(int)1 )] = _7046_nzi;
                              ++ _7050_k;
                            }
                          }
                          ++ _7047_relmi;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_7046_nzi != _6969_rnnz))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
        }
      }
      {}
      if ((_7047_relmi != _6968_rnelem))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  _6942_xs->clear();
  _6940_rs->peek_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->nnz != ((*mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->ptr_base,mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
  if ((((*mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6940_rs)->ptr_base)) != (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
}
// End mosek.fusion.ExprSymmetrize.eval

// Begin mosek.fusion.ExprSymmetrize.toString
// Method mosek.fusion.ExprSymmetrize.toString @ src/fusion/ExprShape.monty:153:6-155:7
std::string mosek::fusion::ExprSymmetrize :: toString() { return mosek::fusion::p_ExprSymmetrize::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprSymmetrize::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSymmetrize(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprSymmetrize.toString

void mosek::fusion::p_ExprSymmetrize::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }
// } class ExprSymmetrize
// class ExprCondense { // @ src/fusion/ExprShape.monty:102:4-135:5
mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }
mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprCondense::p_ExprCondense
  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprCondense.ctor @ src/fusion/ExprShape.monty:104:6-107:7
mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense
  (monty::rc_ptr< ::mosek::fusion::Expression > _7066_expr)
{ return new mosek::fusion::ExprCondense(_7066_expr); }
mosek::fusion::ExprCondense::ExprCondense
  (monty::rc_ptr< ::mosek::fusion::Expression > _7066_expr) : 
   ExprCondense(new mosek::fusion::p_ExprCondense(this))
{ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_7066_expr); }
void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7066_expr)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7066_expr->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _7066_expr;
  }
}
// mosek.fusion.ExprCondense.ctor

// Begin mosek.fusion.ExprCondense.eval
// Method mosek.fusion.ExprCondense.eval @ src/fusion/ExprShape.monty:113:6-134:7
void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7067_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7068_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7069_xs) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_7067_rs,_7068_ws,_7069_xs); }
void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7067_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7068_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7069_xs)
{
  expr->eval(_7067_rs,_7068_ws,_7069_xs);
  _7067_rs->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_7067_rs)->hassp)
  {
    {
      int32_t _7070_nd = _7067_rs->popi32();
      _7067_rs->popi32(_7070_nd);
      int32_t _7071_nelem = _7067_rs->popi32();
      int32_t _7072_nnz = _7067_rs->popi32();
      _7067_rs->popi32();
      _7067_rs->popi64(_7071_nelem);
      _7067_rs->pushi32((int)0);
      _7067_rs->pushi32(_7072_nnz);
      _7067_rs->pushi32(_7071_nelem);
      _7067_rs->pushi32(_7071_nelem);
      _7067_rs->pushi32((int)1);
      _7067_rs->peek_expr();
    }
  }
  {}
}
// End mosek.fusion.ExprCondense.eval

// Begin mosek.fusion.ExprCondense.toString
// Method mosek.fusion.ExprCondense.toString @ src/fusion/ExprShape.monty:109:6-111:7
std::string mosek::fusion::ExprCondense :: toString() { return mosek::fusion::p_ExprCondense::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprCondense::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCondense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprCondense.toString

void mosek::fusion::p_ExprCondense::destroy()
{
  expr.reset();
}
void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }
// } class ExprCondense
// class ExprFromVar { // @ src/fusion/ExprShape.monty:51:4-91:5
mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }
mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprFromVar::p_ExprFromVar
  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprFromVar.ctor @ src/fusion/ExprShape.monty:53:6-56:7
mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar
  (monty::rc_ptr< ::mosek::fusion::Variable > _7073_x)
{ return new mosek::fusion::ExprFromVar(_7073_x); }
mosek::fusion::ExprFromVar::ExprFromVar
  (monty::rc_ptr< ::mosek::fusion::Variable > _7073_x) : 
   ExprFromVar(new mosek::fusion::p_ExprFromVar(this))
{ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_7073_x); }
void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _7073_x)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7073_x->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _7073_x;
  }
}
// mosek.fusion.ExprFromVar.ctor

// Begin mosek.fusion.ExprFromVar.eval
// Method mosek.fusion.ExprFromVar.eval @ src/fusion/ExprShape.monty:62:6-90:7
void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7074_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7075_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7076_xs) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_7074_rs,_7075_ws,_7076_xs); }
void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7074_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7075_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7076_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7077_shape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__7077_shape(_7077_shape ? _7077_shape->raw() : nullptr,_7077_shape ? _7077_shape->size(0) : 0);
  int64_t _7078_size = ::mosek::fusion::p_Set::size(_7077_shape);
  int32_t _7079_nelm = x->numInst();
  int32_t _7080_nnz = _7079_nelm;
  bool _7081_hassp = (_7078_size > _7079_nelm);
  _7074_rs->alloc_expr((int)((_7077_shape)->size(0)),_7079_nelm,_7080_nnz,_7081_hassp);
  int32_t _7082_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->ptr_base;
  int32_t _7083_nidx_base = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->nidxs_base;
  int32_t _7084_nsp_base = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->sp_base;
  int32_t _7085_cof_base = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->cof_base;
  int32_t _7086_shape_base = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7087_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7087_ri32(_7087_ri32 ? _7087_ri32->raw() : nullptr,_7087_ri32 ? _7087_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7088_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7088_ri64(_7088_ri64 ? _7088_ri64->raw() : nullptr,_7088_ri64 ? _7088_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7089_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7074_rs)->f64;
  _checked_ptr_1<double> _ptr__7089_rf64(_7089_rf64 ? _7089_rf64->raw() : nullptr,_7089_rf64 ? _7089_rf64->size(0) : 0);
  int32_t _12250_ = (int)0;
  int32_t _12251_ = (int)((_7077_shape)->size(0));
  for (int32_t _7090_i = _12250_; _7090_i < _12251_; ++_7090_i)
  {
    {
      _ptr__7087_ri32[safe_add( _7086_shape_base,_7090_i )] = _ptr__7077_shape[_7090_i];
    }
  }
  {
    int32_t _12252_ = (int)0;
    int32_t _12253_ = safe_add( _7079_nelm,(int)1 );
    for (int32_t _7091_i = _12252_; _7091_i < _12253_; ++_7091_i)
    {
      {
        _ptr__7087_ri32[safe_add( _7082_ptr_base,_7091_i )] = _7091_i;
      }
    }
    int32_t _12254_ = (int)0;
    int32_t _12255_ = _7080_nnz;
    for (int32_t _7092_i = _12254_; _7092_i < _12255_; ++_7092_i)
    {
      {
        _ptr__7089_rf64[safe_add( _7085_cof_base,_7092_i )] = 1.0;
      }
    }
  }
  if (_7081_hassp)
  {
    {
      x->inst(_7084_nsp_base,_7088_ri64,_7083_nidx_base,_7088_ri64);
    }
  }
  else
  {
    {
      x->inst(_7083_nidx_base,_7088_ri64);
    }
  }
}
// End mosek.fusion.ExprFromVar.eval

// Begin mosek.fusion.ExprFromVar.toString
// Method mosek.fusion.ExprFromVar.toString @ src/fusion/ExprShape.monty:58:6-60:7
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprFromVar::toString()
{
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
// End mosek.fusion.ExprFromVar.toString

void mosek::fusion::p_ExprFromVar::destroy()
{
  x.reset();
}
void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }
// } class ExprFromVar
// class ExprReshape { // @ src/fusion/ExprShape.monty:5:4-43:5
mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }
mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }
mosek::fusion::p_ExprReshape::p_ExprReshape
  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.ExprReshape.ctor @ src/fusion/ExprShape.monty:7:6-14:7
mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7093_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7094_e)
{ return new mosek::fusion::ExprReshape(_7093_shape,_7094_e); }
mosek::fusion::ExprReshape::ExprReshape
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7093_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7094_e) : 
   ExprReshape(new mosek::fusion::p_ExprReshape(this))
{ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_7093_shape,_7094_e); }
void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7093_shape,
    monty::rc_ptr< ::mosek::fusion::Expression > _7094_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7093_shape(_7093_shape ? _7093_shape->raw() : nullptr, _7093_shape ? _7093_shape->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_7093_shape));
    int64_t _7095_esize = _7094_e->getSize();
    if ((::mosek::fusion::p_Set::size(_7093_shape) != _7094_e->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _7094_e;
  }
}
// mosek.fusion.ExprReshape.ctor

// Begin mosek.fusion.ExprReshape.eval
// Method mosek.fusion.ExprReshape.eval @ src/fusion/ExprShape.monty:27:6-42:7
void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7096_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7097_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7098_xs) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_7096_rs,_7097_ws,_7098_xs); }
void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7096_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7097_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7098_xs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7099_eshape = _pubthis->getShape();
  _checked_ptr_1<int32_t> _ptr__7099_eshape(_7099_eshape ? _7099_eshape->raw() : nullptr,_7099_eshape ? _7099_eshape->size(0) : 0);
  e->eval(_7096_rs,_7097_ws,_7098_xs);
  _7096_rs->peek_expr();
  int32_t _7100_nd = _7096_rs->popi32();
  int64_t _7101_sz = (int)1;
  int32_t _12256_ = (int)0;
  int32_t _12257_ = _7100_nd;
  for (int32_t _7102_i = _12256_; _7102_i < _12257_; ++_7102_i)
  {
    {
      _7101_sz *= _7096_rs->popi32();
    }
  }
  if ((_7101_sz != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int32_t _12258_ = (int)0;
  int32_t _12259_ = (int)((_7099_eshape)->size(0));
  for (int32_t _7103_i = _12258_; _7103_i < _12259_; ++_7103_i)
  {
    {
      _7096_rs->pushi32(_ptr__7099_eshape[_7103_i]);
    }
  }
  _7096_rs->pushi32((int)((_7099_eshape)->size(0)));
}
// End mosek.fusion.ExprReshape.eval

// Begin mosek.fusion.ExprReshape.toString
// Method mosek.fusion.ExprReshape.toString @ src/fusion/ExprShape.monty:16:6-25:7
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }
std::string mosek::fusion::p_ExprReshape::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7104_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _7104_sb->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int32_t _12260_ = (int)1;
      int32_t _12261_ = _pubthis->getND();
      for (int32_t _7105_i = _12260_; _7105_i < _12261_; ++_7105_i)
      {
        {
          _7104_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_7105_i));
        }
      }
    }
  }
  {}
  _7104_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _7104_sb->toString();
}
// End mosek.fusion.ExprReshape.toString

void mosek::fusion::p_ExprReshape::destroy()
{
  e.reset();
}
void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }
// } class ExprReshape
// class BaseExpression { // @ src/fusion/BaseExpression.monty:400:4-485:5
mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }
mosek::fusion::p_BaseExpression::p_BaseExpression
  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.BaseExpression.ctor @ src/fusion/BaseExpression.monty:403:6-405:7
void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7106_shape)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7106_shape(_7106_shape ? _7106_shape->raw() : nullptr, _7106_shape ? _7106_shape->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _7106_shape;
  }
}
// mosek.fusion.BaseExpression.ctor

// Begin mosek.fusion.BaseExpression.toString
// Method mosek.fusion.BaseExpression.toString @ src/fusion/BaseExpression.monty:484:6-64
std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }
std::string mosek::fusion::p_BaseExpression::toString()
{
  return std::string ("Expression()");
}
// End mosek.fusion.BaseExpression.toString

// Begin mosek.fusion.BaseExpression.printStack
// Method mosek.fusion.BaseExpression.printStack @ src/fusion/BaseExpression.monty:437:6-482:7
void mosek::fusion::p_BaseExpression::printStack(monty::rc_ptr< ::mosek::fusion::WorkStack > _7107_rs)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7108_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7108_ri32(_7108_ri32 ? _7108_ri32->raw() : nullptr,_7108_ri32 ? _7108_ri32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7109_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7109_ri64(_7109_ri64 ? _7109_ri64->raw() : nullptr,_7109_ri64 ? _7109_ri64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7110_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->f64;
  _checked_ptr_1<double> _ptr__7110_rf64(_7110_rf64 ? _7110_rf64->raw() : nullptr,_7110_rf64 ? _7110_rf64->size(0) : 0);
  int32_t _7111_rptr = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->ptr_base;
  int32_t _7112_rnidxs = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->nidxs_base;
  int32_t _7113_rcof = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->cof_base;
  int32_t _7114_rshape = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->shape_base;
  int32_t _7115_rcodeptr = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->codeptr_base;
  int32_t _7116_rcode = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->code_base;
  int32_t _7117_rcconst = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->cconst_base;
  int32_t _7118_rsp = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->sp_base;
  int32_t _7119_rnelem = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->nelem;
  int32_t _7120_rnnz = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->nnz;
  int32_t _7121_rncodeatom = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->ncodeatom;
  int32_t _7122_rnd = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->nd;
  bool _7123_rhassp = mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->hassp;
  std::vector<int32_t> _12262_;
  for (int32_t _7124_i = (int)0, _12263_ = _7122_rnd; _7124_i < _12263_ ; ++_7124_i)
  {
    _12262_.push_back(_ptr__7108_ri32[safe_add( _7114_rshape,_7124_i )]);
  }
  auto _12264_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12262_.size()),_12262_.begin(),_12262_.end()));
  std::vector<int32_t> _12265_;
  for (int32_t _7125_i = (int)0, _12266_ = safe_add( _7119_rnelem,(int)1 ); _7125_i < _12266_ ; ++_7125_i)
  {
    _12265_.push_back(_ptr__7108_ri32[safe_add( _7111_rptr,_7125_i )]);
  }
  auto _12267_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12265_.size()),_12265_.begin(),_12265_.end()));
  ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("### "))->__mosek_2fusion_2Debug__p(_pubthis->toString())->__mosek_2fusion_2Debug__p(std::string (" ###"))->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nelem     = "))->__mosek_2fusion_2Debug__p(_7119_rnelem)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nnz       = "))->__mosek_2fusion_2Debug__p(_7120_rnnz)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  hassp     = "))->__mosek_2fusion_2Debug__p(_7123_rhassp)->__mosek_2fusion_2Debug__p(std::string (" / "))->__mosek_2fusion_2Debug__p(_ptr__7108_ri32[((mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->pi32 - _7122_rnd) - (int)4)])->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  shape     = "))->__mosek_2fusion_2Debug__p(_12264_)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  ptr       = "))->__mosek_2fusion_2Debug__p(_12267_)->__mosek_2fusion_2Debug__lf();
  if (mosek::fusion::p_WorkStack::_get_impl(_7107_rs)->hassp)
  {
    {
      std::vector<int64_t> _12268_;
      for (int32_t _7126_i = (int)0, _12269_ = _7119_rnelem; _7126_i < _12269_ ; ++_7126_i)
      {
        _12268_.push_back(_ptr__7109_ri64[safe_add( _7118_rsp,_7126_i )]);
      }
      auto _12270_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12268_.size()),_12268_.begin(),_12268_.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  sp       = "))->__mosek_2fusion_2Debug__p(_12270_)->__mosek_2fusion_2Debug__lf();
    }
  }
  {}
  int32_t _12271_ = (int)0;
  int32_t _12272_ = _7119_rnelem;
  for (int32_t _7127_i = _12271_; _7127_i < _12272_; ++_7127_i)
  {
    {
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  row["))->__mosek_2fusion_2Debug__p(_7127_i)->__mosek_2fusion_2Debug__p(std::string ("]"))->__mosek_2fusion_2Debug__lf();
      std::vector<int64_t> _12273_;
      for (int32_t _7128_j = _ptr__7108_ri32[safe_add( _7111_rptr,_7127_i )], _12274_ = _ptr__7108_ri32[safe_add( safe_add( _7111_rptr,_7127_i ),(int)1 )]; _7128_j < _12274_ ; ++_7128_j)
      {
        _12273_.push_back(_ptr__7109_ri64[safe_add( _7112_rnidxs,_7128_j )]);
      }
      auto _12275_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12273_.size()),_12273_.begin(),_12273_.end()));
      std::vector<double> _12276_;
      for (int32_t _7129_j = _ptr__7108_ri32[safe_add( _7111_rptr,_7127_i )], _12277_ = _ptr__7108_ri32[safe_add( safe_add( _7111_rptr,_7127_i ),(int)1 )]; _7129_j < _12277_ ; ++_7129_j)
      {
        _12276_.push_back(_ptr__7110_rf64[safe_add( _7113_rcof,_7129_j )]);
      }
      auto _12278_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12276_.size()),_12276_.begin(),_12276_.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("    nidx : "))->__mosek_2fusion_2Debug__p(_12275_)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("    cof  : "))->__mosek_2fusion_2Debug__p(_12278_)->__mosek_2fusion_2Debug__lf();
      if ((_7121_rncodeatom > (int)0))
      {
        {
          int32_t _12279_ = _ptr__7108_ri32[safe_add( _7111_rptr,_7127_i )];
          int32_t _12280_ = _ptr__7108_ri32[safe_add( safe_add( _7111_rptr,_7127_i ),(int)1 )];
          for (int32_t _7130_j = _12279_; _7130_j < _12280_; ++_7130_j)
          {
            {
              std::vector<int32_t> _12281_;
              for (int32_t _7131_k = _ptr__7108_ri32[safe_add( _7115_rcodeptr,_7130_j )], _12282_ = _ptr__7108_ri32[safe_add( safe_add( _7115_rcodeptr,_7130_j ),(int)1 )]; _7131_k < _12282_ ; ++_7131_k)
              {
                _12281_.push_back(_ptr__7108_ri32[safe_add( _7116_rcode,_7131_k )]);
              }
              auto _12283_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12281_.size()),_12281_.begin(),_12281_.end()));
              std::vector<double> _12284_;
              for (int32_t _7132_k = _ptr__7108_ri32[safe_add( _7115_rcodeptr,_7130_j )], _12285_ = _ptr__7108_ri32[safe_add( safe_add( _7115_rcodeptr,_7130_j ),(int)1 )]; _7132_k < _12285_ ; ++_7132_k)
              {
                _12284_.push_back(_ptr__7110_rf64[safe_add( _7117_rcconst,_7132_k )]);
              }
              auto _12286_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12284_.size()),_12284_.begin(),_12284_.end()));
              ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("      code["))->__mosek_2fusion_2Debug__p(_ptr__7109_ri64[safe_add( _7112_rnidxs,_7130_j )])->__mosek_2fusion_2Debug__p(std::string ("] "))->__mosek_2fusion_2Debug__p(_12283_)->__mosek_2fusion_2Debug__p(_12286_)->__mosek_2fusion_2Debug__lf();
            }
          }
        }
      }
      {}
    }
  }
}
// End mosek.fusion.BaseExpression.printStack

// Begin mosek.fusion.BaseExpression.eval
// End mosek.fusion.BaseExpression.eval

// Begin mosek.fusion.BaseExpression.pick
// Method mosek.fusion.BaseExpression.pick @ src/fusion/BaseExpression.monty:430:6-432:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7136_indexrows) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_7136_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7136_indexrows) { return __mosek_2fusion_2BaseExpression__pick(_7136_indexrows); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7136_indexrows) { return __mosek_2fusion_2BaseExpression__pick(_7136_indexrows); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7136_indexrows)
{
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7136_indexrows)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.pick

// Begin mosek.fusion.BaseExpression.pick
// Method mosek.fusion.BaseExpression.pick @ src/fusion/BaseExpression.monty:426:6-429:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7137_indexes) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_7137_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7137_indexes) { return __mosek_2fusion_2BaseExpression__pick(_7137_indexes); }
/* override: mosek.fusion.Expression.pick*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7137_indexes) { return __mosek_2fusion_2BaseExpression__pick(_7137_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7137_indexes)
{
  _checked_ptr_1<int32_t> _ptr__7137_indexes(_7137_indexes ? _7137_indexes->raw() : nullptr, _7137_indexes ? _7137_indexes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7138_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_7137_indexes)->size(0)),(int)1)));
  int32_t _12287_ = (int)0;
  int32_t _12288_ = (int)((_7137_indexes)->size(0));
  for (int32_t _7139_i = _12287_; _7139_i < _12288_; ++_7139_i)
  {
    {
      ((*_7138_idxs)(_7139_i,(int)0)) = _ptr__7137_indexes[_7139_i];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7138_idxs)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.pick

// Begin mosek.fusion.BaseExpression.index
// Method mosek.fusion.BaseExpression.index @ src/fusion/BaseExpression.monty:422:6-425:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7140_indexes) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_7140_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7140_indexes) { return __mosek_2fusion_2BaseExpression__index(_7140_indexes); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7140_indexes) { return __mosek_2fusion_2BaseExpression__index(_7140_indexes); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7140_indexes)
{
  _checked_ptr_1<int32_t> _ptr__7140_indexes(_7140_indexes ? _7140_indexes->raw() : nullptr, _7140_indexes ? _7140_indexes->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7141_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)((_7140_indexes)->size(0)))));
  int32_t _12289_ = (int)0;
  int32_t _12290_ = (int)((_7140_indexes)->size(0));
  for (int32_t _7142_i = _12289_; _7142_i < _12290_; ++_7142_i)
  {
    {
      ((*_7141_idxs)((int)0,_7142_i)) = _ptr__7140_indexes[_7142_i];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7141_idxs)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.index

// Begin mosek.fusion.BaseExpression.index
// Method mosek.fusion.BaseExpression.index @ src/fusion/BaseExpression.monty:418:6-421:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int32_t _7143_i) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_7143_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int32_t _7143_i) { return __mosek_2fusion_2BaseExpression__index(_7143_i); }
/* override: mosek.fusion.Expression.index*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int32_t _7143_i) { return __mosek_2fusion_2BaseExpression__index(_7143_i); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int32_t _7143_i)
{
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7144_idxs = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)1,(int)1)));
  ((*_7144_idxs)((int)0,(int)0)) = _7143_i;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7144_idxs)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.index

// Begin mosek.fusion.BaseExpression.slice
// Method mosek.fusion.BaseExpression.slice @ src/fusion/BaseExpression.monty:415:6-417:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7145_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7146_lasta) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_7145_firsta,_7146_lasta); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7145_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7146_lasta) { return __mosek_2fusion_2BaseExpression__slice(_7145_firsta,_7146_lasta); }
/* override: mosek.fusion.Expression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7145_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7146_lasta) { return __mosek_2fusion_2BaseExpression__slice(_7145_firsta,_7146_lasta); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7145_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7146_lasta)
{
  _checked_ptr_1<int32_t> _ptr__7145_firsta(_7145_firsta ? _7145_firsta->raw() : nullptr, _7145_firsta ? _7145_firsta->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7146_lasta(_7146_lasta ? _7146_lasta->raw() : nullptr, _7146_lasta ? _7146_lasta->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_7145_firsta,_7146_lasta)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.slice

// Begin mosek.fusion.BaseExpression.slice
// Method mosek.fusion.BaseExpression.slice @ src/fusion/BaseExpression.monty:412:6-414:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int32_t _7147_first,int32_t _7148_last) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_7147_first,_7148_last); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int32_t _7147_first,int32_t _7148_last) { return __mosek_2fusion_2BaseExpression__slice(_7147_first,_7148_last); }
/* override: mosek.fusion.Expression.slice*/
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int32_t _7147_first,int32_t _7148_last) { return __mosek_2fusion_2BaseExpression__slice(_7147_first,_7148_last); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int32_t _7147_first,int32_t _7148_last)
{
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7147_first)}),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7148_last)}))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.BaseExpression.slice

// Begin mosek.fusion.BaseExpression.getSize
// Method mosek.fusion.BaseExpression.getSize @ src/fusion/BaseExpression.monty:410:6-64
int64_t mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }
int64_t mosek::fusion::p_BaseExpression::getSize()
{
  return ::mosek::fusion::p_Set::size(shape);
}
// End mosek.fusion.BaseExpression.getSize

// Begin mosek.fusion.BaseExpression.getND
// Method mosek.fusion.BaseExpression.getND @ src/fusion/BaseExpression.monty:409:6-59
int32_t mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }
int32_t mosek::fusion::p_BaseExpression::getND()
{
  return (int)((shape)->size(0));
}
// End mosek.fusion.BaseExpression.getND

// Begin mosek.fusion.BaseExpression.getDim
// Method mosek.fusion.BaseExpression.getDim @ src/fusion/BaseExpression.monty:408:6-64
int32_t mosek::fusion::BaseExpression :: getDim(int32_t _7149_d) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_7149_d); }
int32_t mosek::fusion::p_BaseExpression::getDim(int32_t _7149_d)
{
  return ((*shape)(_7149_d));
}
// End mosek.fusion.BaseExpression.getDim

// Begin mosek.fusion.BaseExpression.getShape
// Method mosek.fusion.BaseExpression.getShape @ src/fusion/BaseExpression.monty:407:6-79
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::p_BaseExpression::getShape()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
// End mosek.fusion.BaseExpression.getShape

void mosek::fusion::p_BaseExpression::destroy()
{
  shape.reset();
}
void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }
// } class BaseExpression
// class WorkStack { // @ src/fusion/BaseExpression.monty:46:4-395:5
mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }
mosek::fusion::p_WorkStack::p_WorkStack
  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis)
{}
int32_t mosek::fusion::WorkStack::get_code_base() { return _impl->code_base; }
void mosek::fusion::WorkStack::set_code_base(int32_t _val) { _impl->code_base = _val; }
int32_t mosek::fusion::WorkStack::get_cconst_base() { return _impl->cconst_base; }
void mosek::fusion::WorkStack::set_cconst_base(int32_t _val) { _impl->cconst_base = _val; }
int32_t mosek::fusion::WorkStack::get_codeptr_base() { return _impl->codeptr_base; }
void mosek::fusion::WorkStack::set_codeptr_base(int32_t _val) { _impl->codeptr_base = _val; }
int32_t mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int32_t _val) { _impl->cof_base = _val; }
int32_t mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int32_t _val) { _impl->nidxs_base = _val; }
int32_t mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int32_t _val) { _impl->sp_base = _val; }
int32_t mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int32_t _val) { _impl->shape_base = _val; }
int32_t mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int32_t _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int32_t mosek::fusion::WorkStack::get_ncodeatom() { return _impl->ncodeatom; }
void mosek::fusion::WorkStack::set_ncodeatom(int32_t _val) { _impl->ncodeatom = _val; }
int32_t mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int32_t _val) { _impl->nelem = _val; }
int32_t mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int32_t _val) { _impl->nnz = _val; }
int32_t mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int32_t _val) { _impl->nd = _val; }
int32_t mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int32_t _val) { _impl->pf64 = _val; }
int32_t mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int32_t _val) { _impl->pi64 = _val; }
int32_t mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int32_t _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< int64_t,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int32_t,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int32_t,1 > > _val) { _impl->i32 = _val; }
// mosek.fusion.WorkStack.ctor @ src/fusion/BaseExpression.monty:212:6-236:7
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack
  ()
{ return new mosek::fusion::WorkStack(); }
mosek::fusion::WorkStack::WorkStack
  () : 
   WorkStack(new mosek::fusion::p_WorkStack(this))
{ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }
void mosek::fusion::p_WorkStack::_initialize  ()
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    i32 = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ncodeatom = (int)0;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    cof_base = (int)0;
    cconst_base = (int)0;
    code_base = (int)0;
    codeptr_base = (int)0;
  }
}
// mosek.fusion.WorkStack.ctor

// Begin mosek.fusion.WorkStack.formatCurrent
// Method mosek.fusion.WorkStack.formatCurrent @ src/fusion/BaseExpression.monty:366:6-394:7
std::string mosek::fusion::WorkStack :: formatCurrent() { return mosek::fusion::p_WorkStack::_get_impl(this)->formatCurrent(); }
std::string mosek::fusion::p_WorkStack::formatCurrent()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7150_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  std::vector<int32_t> _12291_;
  for (int32_t _7151_i = (int)0, _12292_ = nd; _7151_i < _12292_ ; ++_7151_i)
  {
    _12291_.push_back(((*i32)(safe_add( shape_base,_7151_i ))));
  }
  auto _12293_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12291_.size()),_12291_.begin(),_12291_.end()));
  std::vector<int32_t> _12294_;
  for (int32_t _7152_i = (int)0, _12295_ = safe_add( nelem,(int)1 ); _7152_i < _12295_ ; ++_7152_i)
  {
    _12294_.push_back(((*i32)(safe_add( ptr_base,_7152_i ))));
  }
  auto _12296_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12294_.size()),_12294_.begin(),_12294_.end()));
  _7150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nelem     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nelem)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nnz       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nnz)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  hassp     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" / "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  shape     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12293_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  ptr       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12296_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
  if ((ncodeatom > (int)0))
  {
    {
      std::vector<int32_t> _12297_;
      for (int32_t _7153_i = (int)0, _12298_ = safe_add( nnz,(int)1 ); _7153_i < _12298_ ; ++_7153_i)
      {
        _12297_.push_back(((*i32)(safe_add( codeptr_base,_7153_i ))));
      }
      auto _12299_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12297_.size()),_12297_.begin(),_12297_.end()));
      _7150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  codeptr   = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12299_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  if (hassp)
  {
    {
      std::vector<int64_t> _12300_;
      for (int32_t _7154_i = (int)0, _12301_ = nelem; _7154_i < _12301_ ; ++_7154_i)
      {
        _12300_.push_back(((*i64)(safe_add( sp_base,_7154_i ))));
      }
      auto _12302_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12300_.size()),_12300_.begin(),_12300_.end()));
      _7150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  sp        = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12302_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  int32_t _12303_ = (int)0;
  int32_t _12304_ = nelem;
  for (int32_t _7155_i = _12303_; _7155_i < _12304_; ++_7155_i)
  {
    {
      std::vector<int64_t> _12305_;
      for (int32_t _7156_j = ((*i32)(safe_add( ptr_base,_7155_i ))), _12306_ = ((*i32)(safe_add( safe_add( ptr_base,_7155_i ),(int)1 ))); _7156_j < _12306_ ; ++_7156_j)
      {
        _12305_.push_back(((*i64)(safe_add( nidxs_base,_7156_j ))));
      }
      auto _12307_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12305_.size()),_12305_.begin(),_12305_.end()));
      std::vector<double> _12308_;
      for (int32_t _7157_j = ((*i32)(safe_add( ptr_base,_7155_i ))), _12309_ = ((*i32)(safe_add( safe_add( ptr_base,_7155_i ),(int)1 ))); _7157_j < _12309_ ; ++_7157_j)
      {
        _12308_.push_back(((*f64)(safe_add( cof_base,_7157_j ))));
      }
      auto _12310_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12308_.size()),_12308_.begin(),_12308_.end()));
      _7150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  row["))->__mosek_2fusion_2Utils_2StringBuffer__a(_7155_i)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    nidx : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12307_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    cof  : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12310_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
      if ((ncodeatom > (int)0))
      {
        {
          int32_t _12311_ = ((*i32)(safe_add( ptr_base,_7155_i )));
          int32_t _12312_ = ((*i32)(safe_add( safe_add( ptr_base,_7155_i ),(int)1 )));
          for (int32_t _7158_j = _12311_; _7158_j < _12312_; ++_7158_j)
          {
            {
              std::vector<int32_t> _12313_;
              for (int32_t _7159_k = ((*i32)(safe_add( codeptr_base,_7158_j ))), _12314_ = ((*i32)(safe_add( safe_add( codeptr_base,_7158_j ),(int)1 ))); _7159_k < _12314_ ; ++_7159_k)
              {
                _12313_.push_back(((*i32)(safe_add( code_base,_7159_k ))));
              }
              auto _12315_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12313_.size()),_12313_.begin(),_12313_.end()));
              std::vector<double> _12316_;
              for (int32_t _7160_k = ((*i32)(safe_add( codeptr_base,_7158_j ))), _12317_ = ((*i32)(safe_add( safe_add( codeptr_base,_7158_j ),(int)1 ))); _7160_k < _12317_ ; ++_7160_k)
              {
                _12316_.push_back(((*f64)(safe_add( cconst_base,_7160_k ))));
              }
              auto _12318_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12316_.size()),_12316_.begin(),_12316_.end()));
              _7150_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("      code["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*i64)(safe_add( nidxs_base,_7158_j ))))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] "))->__mosek_2fusion_2Utils_2StringBuffer__a(_12315_)->__mosek_2fusion_2Utils_2StringBuffer__a(_12318_)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
            }
          }
        }
      }
      {}
    }
  }
  return _7150_sb->toString();
}
// End mosek.fusion.WorkStack.formatCurrent

// Begin mosek.fusion.WorkStack.peek_hassp
// Method mosek.fusion.WorkStack.peek_hassp @ src/fusion/BaseExpression.monty:364:6-77
bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }
bool mosek::fusion::p_WorkStack::peek_hassp()
{
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
// End mosek.fusion.WorkStack.peek_hassp

// Begin mosek.fusion.WorkStack.peek_nnz
// Method mosek.fusion.WorkStack.peek_nnz @ src/fusion/BaseExpression.monty:362:6-72
int32_t mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }
int32_t mosek::fusion::p_WorkStack::peek_nnz()
{
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
// End mosek.fusion.WorkStack.peek_nnz

// Begin mosek.fusion.WorkStack.peek_nelem
// Method mosek.fusion.WorkStack.peek_nelem @ src/fusion/BaseExpression.monty:360:6-72
int32_t mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }
int32_t mosek::fusion::p_WorkStack::peek_nelem()
{
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
// End mosek.fusion.WorkStack.peek_nelem

// Begin mosek.fusion.WorkStack.peek_dim
// Method mosek.fusion.WorkStack.peek_dim @ src/fusion/BaseExpression.monty:358:6-71
int32_t mosek::fusion::WorkStack :: peek_dim(int32_t _7161_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_7161_i); }
int32_t mosek::fusion::p_WorkStack::peek_dim(int32_t _7161_i)
{
  return _pubthis->peeki32(safe_add( _7161_i,(int)1 ));
}
// End mosek.fusion.WorkStack.peek_dim

// Begin mosek.fusion.WorkStack.peek_nd
// Method mosek.fusion.WorkStack.peek_nd @ src/fusion/BaseExpression.monty:356:6-68
int32_t mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }
int32_t mosek::fusion::p_WorkStack::peek_nd()
{
  return _pubthis->peeki32();
}
// End mosek.fusion.WorkStack.peek_nd

// Begin mosek.fusion.WorkStack.alloc_expr
// Method mosek.fusion.WorkStack.alloc_expr @ src/fusion/BaseExpression.monty:351:6-353:7
void mosek::fusion::WorkStack :: alloc_expr(int32_t _7162_nd,int32_t _7163_nelem,int32_t _7164_nnz,bool _7165_hassp) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_7162_nd,_7163_nelem,_7164_nnz,_7165_hassp); }
void mosek::fusion::p_WorkStack::alloc_expr(int32_t _7162_nd,int32_t _7163_nelem,int32_t _7164_nnz,bool _7165_hassp)
{
  _pubthis->alloc_expr(_7162_nd,_7163_nelem,_7164_nnz,_7165_hassp,(int)0);
}
// End mosek.fusion.WorkStack.alloc_expr

// Begin mosek.fusion.WorkStack.alloc_expr
// Method mosek.fusion.WorkStack.alloc_expr @ src/fusion/BaseExpression.monty:323:6-348:7
void mosek::fusion::WorkStack :: alloc_expr(int32_t _7166_nd,int32_t _7167_nelem,int32_t _7168_nnz,bool _7169_hassp,int32_t _7170_ncodeatom) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_7166_nd,_7167_nelem,_7168_nnz,_7169_hassp,_7170_ncodeatom); }
void mosek::fusion::p_WorkStack::alloc_expr(int32_t _7166_nd,int32_t _7167_nelem,int32_t _7168_nnz,bool _7169_hassp,int32_t _7170_ncodeatom)
{
  cof_base = _pubthis->allocf64(_7168_nnz);
  cconst_base = _pubthis->allocf64(_7170_ncodeatom);
  nidxs_base = _pubthis->alloci64(_7168_nnz);
  int32_t _12319_;
  bool _12320_ = _7169_hassp;
  if (_12320_)
  {
    _12319_ = _pubthis->alloci64(_7167_nelem);
  }
  else
  {
    _12319_ = (-(int)9999);
  }
  sp_base = _12319_;
  code_base = _pubthis->alloci32(_7170_ncodeatom);
  int32_t _12321_;
  bool _12322_ = (_7170_ncodeatom > (int)0);
  if (_12322_)
  {
    _12321_ = _pubthis->alloci32(safe_add( _7168_nnz,(int)1 ));
  }
  else
  {
    _12321_ = (-(int)9999);
  }
  codeptr_base = _12321_;
  ptr_base = _pubthis->alloci32(safe_add( _7167_nelem,(int)1 ));
  _pubthis->pushi32(_7170_ncodeatom);
  int32_t _12323_;
  bool _12324_ = _7169_hassp;
  if (_12324_)
  {
    _12323_ = (int)1;
  }
  else
  {
    _12323_ = (int)0;
  }
  _pubthis->pushi32(_12323_);
  _pubthis->pushi32(_7168_nnz);
  _pubthis->pushi32(_7167_nelem);
  shape_base = _pubthis->alloci32(_7166_nd);
  _pubthis->pushi32(_7166_nd);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->ncodeatom = _7170_ncodeatom;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _7166_nd;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _7167_nelem;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _7168_nnz;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _7169_hassp;
}
// End mosek.fusion.WorkStack.alloc_expr

// Begin mosek.fusion.WorkStack.pop_expr
// Method mosek.fusion.WorkStack.pop_expr @ src/fusion/BaseExpression.monty:301:6-320:7
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }
void mosek::fusion::p_WorkStack::pop_expr()
{
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ncodeatom = _pubthis->popi32();
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int32_t _12325_;
  bool _12326_ = (ncodeatom > (int)0);
  if (_12326_)
  {
    _12325_ = _pubthis->popi32(safe_add( nnz,(int)1 ));
  }
  else
  {
    _12325_ = (-(int)9999);
  }
  codeptr_base = _12325_;
  code_base = _pubthis->popi32(ncodeatom);
  int32_t _12327_;
  bool _12328_ = hassp;
  if (_12328_)
  {
    _12327_ = _pubthis->popi64(nelem);
  }
  else
  {
    _12327_ = (-(int)9999);
  }
  sp_base = _12327_;
  nidxs_base = _pubthis->popi64(nnz);
  cconst_base = _pubthis->popf64(ncodeatom);
  cof_base = _pubthis->popf64(nnz);
}
// End mosek.fusion.WorkStack.pop_expr

// Begin mosek.fusion.WorkStack.move_expr
// Method mosek.fusion.WorkStack.move_expr @ src/fusion/BaseExpression.monty:284:6-298:7
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _7171_to) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_7171_to); }
void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _7171_to)
{
  int32_t _7172_tmp_pi32 = pi32;
  int32_t _7173_tmp_pi64 = pi64;
  int32_t _7174_tmp_pf64 = pf64;
  _pubthis->pop_expr();
  int32_t _7175_ti32 = _7171_to->alloci32((_7172_tmp_pi32 - pi32));
  int32_t _7176_ti64 = _7171_to->alloci64((_7173_tmp_pi64 - pi64));
  int32_t _7177_tf64 = _7171_to->allocf64((_7174_tmp_pf64 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_7171_to)->i32,_7175_ti32,(_7172_tmp_pi32 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_7171_to)->i64,_7176_ti64,(_7173_tmp_pi64 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_7171_to)->f64,_7177_tf64,(_7174_tmp_pf64 - pf64));
}
// End mosek.fusion.WorkStack.move_expr

// Begin mosek.fusion.WorkStack.peek_expr
// Method mosek.fusion.WorkStack.peek_expr @ src/fusion/BaseExpression.monty:272:6-281:7
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }
void mosek::fusion::p_WorkStack::peek_expr()
{
  int32_t _7178_tmp_pi32 = pi32;
  int32_t _7179_tmp_pi64 = pi64;
  int32_t _7180_tmp_pf64 = pf64;
  _pubthis->pop_expr();
  pi32 = _7178_tmp_pi32;
  pi64 = _7179_tmp_pi64;
  pf64 = _7180_tmp_pf64;
}
// End mosek.fusion.WorkStack.peek_expr

// Begin mosek.fusion.WorkStack.ensure_sparsity
// Method mosek.fusion.WorkStack.ensure_sparsity @ src/fusion/BaseExpression.monty:258:6-268:7
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }
void mosek::fusion::p_WorkStack::ensure_sparsity()
{
  int32_t _7181_nd = ((*i32)((pi32 - (int)1)));
  bool _7182_hassp = (((*i32)(((pi32 - _7181_nd) - (int)3))) != (int)0);
  int32_t _7183_nelem = ((*i32)(((pi32 - _7181_nd) - (int)1)));
  if ((!_7182_hassp))
  {
    {
      ((*i32)(((pi32 - _7181_nd) - (int)3))) = (int)1;
      int32_t _7184_sp = _pubthis->alloci64(_7183_nelem);
      int32_t _12329_ = (int)0;
      int32_t _12330_ = _7183_nelem;
      for (int32_t _7185_i = _12329_; _7185_i < _12330_; ++_7185_i)
      {
        {
          ((*i64)(_7184_sp)) = _7185_i;
        }
      }
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensure_sparsity

// Begin mosek.fusion.WorkStack.clear
// Method mosek.fusion.WorkStack.clear @ src/fusion/BaseExpression.monty:210:6-61
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }
void mosek::fusion::p_WorkStack::clear()
{
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
// End mosek.fusion.WorkStack.clear

// Begin mosek.fusion.WorkStack.allocf64
// Method mosek.fusion.WorkStack.allocf64 @ src/fusion/BaseExpression.monty:201:6-207:7
int32_t mosek::fusion::WorkStack :: allocf64(int32_t _7186_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_7186_n); }
int32_t mosek::fusion::p_WorkStack::allocf64(int32_t _7186_n)
{
  _pubthis->ensuref64(_7186_n);
  int32_t _7187_r = pf64;
  int32_t _12331_ = pf64;
  int32_t _12332_ = safe_add( pf64,_7186_n );
  for (int32_t _7188_i = _12331_; _7188_i < _12332_; ++_7188_i)
  {
    {
      ((*f64)(_7188_i)) = (int)99997;
    }
  }
  pf64 += _7186_n;
  return _7187_r;
}
// End mosek.fusion.WorkStack.allocf64

// Begin mosek.fusion.WorkStack.alloci64
// Method mosek.fusion.WorkStack.alloci64 @ src/fusion/BaseExpression.monty:191:6-197:7
int32_t mosek::fusion::WorkStack :: alloci64(int32_t _7189_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_7189_n); }
int32_t mosek::fusion::p_WorkStack::alloci64(int32_t _7189_n)
{
  _pubthis->ensurei64(_7189_n);
  int32_t _7190_r = pi64;
  int32_t _12333_ = pi64;
  int32_t _12334_ = safe_add( pi64,_7189_n );
  for (int32_t _7191_i = _12333_; _7191_i < _12334_; ++_7191_i)
  {
    {
      ((*i64)(_7191_i)) = (int)99998;
    }
  }
  pi64 += _7189_n;
  return _7190_r;
}
// End mosek.fusion.WorkStack.alloci64

// Begin mosek.fusion.WorkStack.alloci32
// Method mosek.fusion.WorkStack.alloci32 @ src/fusion/BaseExpression.monty:177:6-187:7
int32_t mosek::fusion::WorkStack :: alloci32(int32_t _7192_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_7192_n); }
int32_t mosek::fusion::p_WorkStack::alloci32(int32_t _7192_n)
{
  if ((_7192_n > (int)0))
  {
    {
      _pubthis->ensurei32(_7192_n);
      int32_t _7193_r = pi32;
      int32_t _12335_ = pi32;
      int32_t _12336_ = safe_add( pi32,_7192_n );
      for (int32_t _7194_i = _12335_; _7194_i < _12336_; ++_7194_i)
      {
        {
          ((*i32)(_7194_i)) = (int)99999;
        }
      }
      pi32 += _7192_n;
      return _7193_r;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
// End mosek.fusion.WorkStack.alloci32

// Begin mosek.fusion.WorkStack.pushf64
// Method mosek.fusion.WorkStack.pushf64 @ src/fusion/BaseExpression.monty:168:6-172:7
void mosek::fusion::WorkStack :: pushf64(double _7195_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_7195_v); }
void mosek::fusion::p_WorkStack::pushf64(double _7195_v)
{
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _7195_v;
  ++ pf64;
}
// End mosek.fusion.WorkStack.pushf64

// Begin mosek.fusion.WorkStack.pushi64
// Method mosek.fusion.WorkStack.pushi64 @ src/fusion/BaseExpression.monty:160:6-164:7
void mosek::fusion::WorkStack :: pushi64(int64_t _7196_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_7196_v); }
void mosek::fusion::p_WorkStack::pushi64(int64_t _7196_v)
{
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _7196_v;
  ++ pi64;
}
// End mosek.fusion.WorkStack.pushi64

// Begin mosek.fusion.WorkStack.pushi32
// Method mosek.fusion.WorkStack.pushi32 @ src/fusion/BaseExpression.monty:152:6-156:7
void mosek::fusion::WorkStack :: pushi32(int32_t _7197_v) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_7197_v); }
void mosek::fusion::p_WorkStack::pushi32(int32_t _7197_v)
{
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _7197_v;
  ++ pi32;
}
// End mosek.fusion.WorkStack.pushi32

// Begin mosek.fusion.WorkStack.ensuref64
// Method mosek.fusion.WorkStack.ensuref64 @ src/fusion/BaseExpression.monty:141:6-147:7
void mosek::fusion::WorkStack :: ensuref64(int32_t _7198_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_7198_n); }
void mosek::fusion::p_WorkStack::ensuref64(int32_t _7198_n)
{
  if ((safe_add( pf64,_7198_n ) > (int)((f64)->size(0))))
  {
    {
      int32_t _12337_;
      bool _12338_ = ((_7198_n < (int)((f64)->size(0))) && ((int)((f64)->size(0)) < (int)0x3FFFFFFF));
      if (_12338_)
      {
        _12337_ = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _12337_ = safe_add( (int)((f64)->size(0)),_7198_n );
      }
      int32_t _7199_newsz = _12337_;
      std::shared_ptr< monty::ndarray< double,1 > > _7200_tmp = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7199_newsz)));
      _checked_ptr_1<double> _ptr__7200_tmp(_7200_tmp ? _7200_tmp->raw() : nullptr,_7200_tmp ? _7200_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_7200_tmp,(int)0,pf64);
      f64 = _7200_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensuref64

// Begin mosek.fusion.WorkStack.ensurei64
// Method mosek.fusion.WorkStack.ensurei64 @ src/fusion/BaseExpression.monty:131:6-137:7
void mosek::fusion::WorkStack :: ensurei64(int32_t _7201_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_7201_n); }
void mosek::fusion::p_WorkStack::ensurei64(int32_t _7201_n)
{
  if ((safe_add( pi64,_7201_n ) > (int)((i64)->size(0))))
  {
    {
      int32_t _12339_;
      bool _12340_ = ((_7201_n < (int)((i64)->size(0))) && ((int)((i64)->size(0)) < (int)0x3FFFFFFF));
      if (_12340_)
      {
        _12339_ = (int)((i64)->size(0));
      }
      else
      {
        _12339_ = _7201_n;
      }
      int32_t _7202_newsz = safe_add( (int)((i64)->size(0)),_12339_ );
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7203_tmp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7202_newsz)));
      _checked_ptr_1<int64_t> _ptr__7203_tmp(_7203_tmp ? _7203_tmp->raw() : nullptr,_7203_tmp ? _7203_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_7203_tmp,(int)0,pi64);
      i64 = _7203_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensurei64

// Begin mosek.fusion.WorkStack.ensurei32
// Method mosek.fusion.WorkStack.ensurei32 @ src/fusion/BaseExpression.monty:121:6-127:7
void mosek::fusion::WorkStack :: ensurei32(int32_t _7204_n) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_7204_n); }
void mosek::fusion::p_WorkStack::ensurei32(int32_t _7204_n)
{
  if ((safe_add( pi32,_7204_n ) > (int)((i32)->size(0))))
  {
    {
      int32_t _12341_;
      bool _12342_ = ((_7204_n < (int)((i32)->size(0))) && ((int)((i32)->size(0)) < (int)0x3FFFFFFF));
      if (_12342_)
      {
        _12341_ = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _12341_ = safe_add( (int)((i32)->size(0)),_7204_n );
      }
      int32_t _7205_newsz = _12341_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7206_tmp = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7205_newsz)));
      _checked_ptr_1<int32_t> _ptr__7206_tmp(_7206_tmp ? _7206_tmp->raw() : nullptr,_7206_tmp ? _7206_tmp->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_7206_tmp,(int)0,pi32);
      i32 = _7206_tmp;
    }
  }
  {}
}
// End mosek.fusion.WorkStack.ensurei32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ src/fusion/BaseExpression.monty:112:6-116:7
int32_t mosek::fusion::WorkStack :: popf64(int32_t _7207_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_7207_n); }
int32_t mosek::fusion::p_WorkStack::popf64(int32_t _7207_n)
{
  pf64 -= _7207_n;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pf64;
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ src/fusion/BaseExpression.monty:107:6-111:7
int32_t mosek::fusion::WorkStack :: popi64(int32_t _7208_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_7208_n); }
int32_t mosek::fusion::p_WorkStack::popi64(int32_t _7208_n)
{
  pi64 -= _7208_n;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi64;
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ src/fusion/BaseExpression.monty:102:6-106:7
int32_t mosek::fusion::WorkStack :: popi32(int32_t _7209_n) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_7209_n); }
int32_t mosek::fusion::p_WorkStack::popi32(int32_t _7209_n)
{
  pi32 -= _7209_n;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi32;
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ src/fusion/BaseExpression.monty:97:6-101:7
void mosek::fusion::WorkStack :: popf64(int32_t _7210_n,std::shared_ptr< monty::ndarray< double,1 > > _7211_r,int32_t _7212_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_7210_n,_7211_r,_7212_ofs); }
void mosek::fusion::p_WorkStack::popf64(int32_t _7210_n,std::shared_ptr< monty::ndarray< double,1 > > _7211_r,int32_t _7212_ofs)
{
  _checked_ptr_1<double> _ptr__7211_r(_7211_r ? _7211_r->raw() : nullptr, _7211_r ? _7211_r->size(0) : 0);
  pf64 -= _7210_n;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_7211_r,_7212_ofs,_7210_n);
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ src/fusion/BaseExpression.monty:92:6-96:7
void mosek::fusion::WorkStack :: popi64(int32_t _7213_n,std::shared_ptr< monty::ndarray< int64_t,1 > > _7214_r,int32_t _7215_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_7213_n,_7214_r,_7215_ofs); }
void mosek::fusion::p_WorkStack::popi64(int32_t _7213_n,std::shared_ptr< monty::ndarray< int64_t,1 > > _7214_r,int32_t _7215_ofs)
{
  _checked_ptr_1<int64_t> _ptr__7214_r(_7214_r ? _7214_r->raw() : nullptr, _7214_r ? _7214_r->size(0) : 0);
  pi64 -= _7213_n;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_7214_r,_7215_ofs,_7213_n);
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ src/fusion/BaseExpression.monty:87:6-91:7
void mosek::fusion::WorkStack :: popi32(int32_t _7216_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7217_r,int32_t _7218_ofs) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_7216_n,_7217_r,_7218_ofs); }
void mosek::fusion::p_WorkStack::popi32(int32_t _7216_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7217_r,int32_t _7218_ofs)
{
  _checked_ptr_1<int32_t> _ptr__7217_r(_7217_r ? _7217_r->raw() : nullptr, _7217_r ? _7217_r->size(0) : 0);
  pi32 -= _7216_n;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_7217_r,_7218_ofs,_7216_n);
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.popf64
// Method mosek.fusion.WorkStack.popf64 @ src/fusion/BaseExpression.monty:82:6-86:7
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }
double mosek::fusion::p_WorkStack::popf64()
{
  -- pf64;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*f64)(pf64));
}
// End mosek.fusion.WorkStack.popf64

// Begin mosek.fusion.WorkStack.popi64
// Method mosek.fusion.WorkStack.popi64 @ src/fusion/BaseExpression.monty:77:6-81:7
int64_t mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }
int64_t mosek::fusion::p_WorkStack::popi64()
{
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  -- pi64;
  return ((*i64)(pi64));
}
// End mosek.fusion.WorkStack.popi64

// Begin mosek.fusion.WorkStack.popi32
// Method mosek.fusion.WorkStack.popi32 @ src/fusion/BaseExpression.monty:72:6-76:7
int32_t mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }
int32_t mosek::fusion::p_WorkStack::popi32()
{
  -- pi32;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*i32)(pi32));
}
// End mosek.fusion.WorkStack.popi32

// Begin mosek.fusion.WorkStack.peekf64
// Method mosek.fusion.WorkStack.peekf64 @ src/fusion/BaseExpression.monty:70:6-61
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }
double mosek::fusion::p_WorkStack::peekf64()
{
  return ((*f64)((pf64 - (int)1)));
}
// End mosek.fusion.WorkStack.peekf64

// Begin mosek.fusion.WorkStack.peeki64
// Method mosek.fusion.WorkStack.peeki64 @ src/fusion/BaseExpression.monty:69:6-61
int64_t mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }
int64_t mosek::fusion::p_WorkStack::peeki64()
{
  return ((*i64)((pi64 - (int)1)));
}
// End mosek.fusion.WorkStack.peeki64

// Begin mosek.fusion.WorkStack.peeki32
// Method mosek.fusion.WorkStack.peeki32 @ src/fusion/BaseExpression.monty:68:6-61
int32_t mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }
int32_t mosek::fusion::p_WorkStack::peeki32()
{
  return ((*i32)((pi32 - (int)1)));
}
// End mosek.fusion.WorkStack.peeki32

// Begin mosek.fusion.WorkStack.peekf64
// Method mosek.fusion.WorkStack.peekf64 @ src/fusion/BaseExpression.monty:66:6-70
double mosek::fusion::WorkStack :: peekf64(int32_t _7219_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_7219_i); }
double mosek::fusion::p_WorkStack::peekf64(int32_t _7219_i)
{
  return ((*f64)(((pf64 - _7219_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peekf64

// Begin mosek.fusion.WorkStack.peeki64
// Method mosek.fusion.WorkStack.peeki64 @ src/fusion/BaseExpression.monty:65:6-70
int64_t mosek::fusion::WorkStack :: peeki64(int32_t _7220_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_7220_i); }
int64_t mosek::fusion::p_WorkStack::peeki64(int32_t _7220_i)
{
  return ((*i64)(((pi64 - _7220_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peeki64

// Begin mosek.fusion.WorkStack.peeki32
// Method mosek.fusion.WorkStack.peeki32 @ src/fusion/BaseExpression.monty:64:6-70
int32_t mosek::fusion::WorkStack :: peeki32(int32_t _7221_i) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_7221_i); }
int32_t mosek::fusion::p_WorkStack::peeki32(int32_t _7221_i)
{
  return ((*i32)(((pi32 - _7221_i) - (int)1)));
}
// End mosek.fusion.WorkStack.peeki32

void mosek::fusion::p_WorkStack::destroy()
{
  f64.reset();
  i64.reset();
  i32.reset();
}
void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }
// } class WorkStack
// class Expr { // @ src/fusion/Expr.mbi:342:4-1708:5
mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }
mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }
mosek::fusion::p_Expr::p_Expr
  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.Expr.ctor @ src/fusion/Expr.mbi:568:6-609:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7222_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7223_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7224_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7225_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7226_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7227_inst)
{ return new mosek::fusion::Expr(_7222_ptrb,_7223_subj,_7224_cof,_7225_bfix,_7226_shape,_7227_inst); }
mosek::fusion::Expr::Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7222_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7223_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7224_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7225_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7226_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7227_inst) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7222_ptrb,_7223_subj,_7224_cof,_7225_bfix,_7226_shape,_7227_inst); }
void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7222_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7223_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7224_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7225_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7226_shape,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7227_inst)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__7222_ptrb(_7222_ptrb ? _7222_ptrb->raw() : nullptr, _7222_ptrb ? _7222_ptrb->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7223_subj(_7223_subj ? _7223_subj->raw() : nullptr, _7223_subj ? _7223_subj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7224_cof(_7224_cof ? _7224_cof->raw() : nullptr, _7224_cof ? _7224_cof->size(0) : 0);
    _checked_ptr_1<double> _ptr__7225_bfix(_7225_bfix ? _7225_bfix->raw() : nullptr, _7225_bfix ? _7225_bfix->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7226_shape(_7226_shape ? _7226_shape->raw() : nullptr, _7226_shape ? _7226_shape->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7227_inst(_7227_inst ? _7227_inst->raw() : nullptr, _7227_inst ? _7227_inst->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _12343_;
    bool _12344_ = (NULL != _7226_shape.get());
    if (_12344_)
    {
      _12343_ = ::mosek::fusion::Utils::Tools::arraycopy(_7226_shape);
    }
    else
    {
      _12343_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(((int)((_7222_ptrb)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< int64_t,1 > > _12345_;
    bool _12346_ = (NULL != _7227_inst.get());
    if (_12346_)
    {
      _12345_ = ::mosek::fusion::Utils::Tools::arraycopy(_7227_inst);
    }
    else
    {
      _12345_ = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_7222_ptrb),::mosek::fusion::Utils::Tools::arraycopy(_7223_subj),::mosek::fusion::Utils::Tools::arraycopy(_7224_cof),::mosek::fusion::Utils::Tools::arraycopy(_7225_bfix),_12343_,_12345_,(int)1);
    int32_t _7228_nelem = ((int)((_7222_ptrb)->size(0)) - (int)1);
    if ((_7228_nelem < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    int64_t _7229_nnz = _ptr__7222_ptrb[_7228_nelem];
    if (((_7229_nnz < (int)0) || ((_7229_nnz != (int)((_7224_cof)->size(0))) || (_7229_nnz != (int)((_7223_subj)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _7230_ptrb_ok = true;
    bool _7231_shape_ok = true;
    bool _7232_inst_ok = true;
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7233_thisshape = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int32_t> _ptr__7233_thisshape(_7233_thisshape ? _7233_thisshape->raw() : nullptr,_7233_thisshape ? _7233_thisshape->size(0) : 0);
    int64_t _7234_sz = ::mosek::fusion::p_Set::size(_7233_thisshape);
    {
      int32_t _12347_ = (int)0;
      int32_t _12348_ = (int)((_7233_thisshape)->size(0));
      for (int32_t _7235_i = _12347_; _7235_i < _12348_; ++_7235_i)
      {
        {
          _7231_shape_ok = (_7231_shape_ok && (_ptr__7233_thisshape[_7235_i] >= (int)0));
        }
      }
      int32_t _12349_ = (int)0;
      int32_t _12350_ = _7228_nelem;
      for (int32_t _7236_i = _12349_; _7236_i < _12350_; ++_7236_i)
      {
        {
          _7230_ptrb_ok = (_7230_ptrb_ok && (_ptr__7222_ptrb[_7236_i] <= _ptr__7222_ptrb[safe_add( _7236_i,(int)1 )]));
        }
      }
      if (((NULL != _7227_inst.get()) && ((int)((_7227_inst)->size(0)) > (int)0)))
      {
        {
          _7232_inst_ok = ((_ptr__7227_inst[(int)0] >= (int)0) && (_ptr__7227_inst[(_7228_nelem - (int)1)] < _7234_sz));
          int32_t _12351_ = (int)0;
          int32_t _12352_ = (_7228_nelem - (int)1);
          for (int32_t _7237_i = _12351_; _7237_i < _12352_; ++_7237_i)
          {
            {
              _7232_inst_ok = (_7232_inst_ok && (_ptr__7227_inst[_7237_i] < _ptr__7227_inst[safe_add( _7237_i,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_7231_shape_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_7230_ptrb_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_7232_inst_ok))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// mosek.fusion.Expr.ctor @ src/fusion/Expr.mbi:504:6-524:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7238_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7239_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7240_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7241_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7242_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7243_inst,
    int32_t _7244_unchecked_)
{ return new mosek::fusion::Expr(_7238_ptrb,_7239_subj,_7240_cof,_7241_bfix,_7242_shp,_7243_inst,_7244_unchecked_); }
mosek::fusion::Expr::Expr
  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7238_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7239_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7240_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7241_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7242_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7243_inst,
    int32_t _7244_unchecked_) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7238_ptrb,_7239_subj,_7240_cof,_7241_bfix,_7242_shp,_7243_inst,_7244_unchecked_); }
void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< int64_t,1 > > _7238_ptrb,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7239_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _7240_cof,
    std::shared_ptr< monty::ndarray< double,1 > > _7241_bfix,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7242_shp,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7243_inst,
    int32_t _7244_unchecked_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int64_t> _ptr__7238_ptrb(_7238_ptrb ? _7238_ptrb->raw() : nullptr, _7238_ptrb ? _7238_ptrb->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7239_subj(_7239_subj ? _7239_subj->raw() : nullptr, _7239_subj ? _7239_subj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7240_cof(_7240_cof ? _7240_cof->raw() : nullptr, _7240_cof ? _7240_cof->size(0) : 0);
    _checked_ptr_1<double> _ptr__7241_bfix(_7241_bfix ? _7241_bfix->raw() : nullptr, _7241_bfix ? _7241_bfix->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7242_shp(_7242_shp ? _7242_shp->raw() : nullptr, _7242_shp ? _7242_shp->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7243_inst(_7243_inst ? _7243_inst->raw() : nullptr, _7243_inst ? _7243_inst->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_7242_shp);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _7242_shp;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _7238_ptrb;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _7239_subj;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _7240_cof;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _7241_bfix;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _7243_inst;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// mosek.fusion.Expr.ctor @ src/fusion/Expr.mbi:380:6-426:7
mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr
  (monty::rc_ptr< ::mosek::fusion::Expression > _7245_e)
{ return new mosek::fusion::Expr(_7245_e); }
mosek::fusion::Expr::Expr
  (monty::rc_ptr< ::mosek::fusion::Expression > _7245_e) : 
   Expr(new mosek::fusion::p_Expr(this))
{ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_7245_e); }
void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _7245_e)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_BaseExpression::_initialize(_7245_e->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _12353_ = _7245_e;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_12353_.get()))
    {
      ::mosek::fusion::Expr::t _7246_ee (dynamic_cast<::mosek::fusion::Expr*>(_12353_.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_7246_ee)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_7246_ee)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_7246_ee)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_7246_ee)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_7246_ee)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_7246_ee)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _7247_ee = _12353_;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7248_xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7249_ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _7250_rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _7247_ee->eval(_7250_rs,_7249_ws,_7248_xs);
        int32_t _7251_nd = _7250_rs->popi32();
        int32_t _7252_shape_base = _7250_rs->popi32(_7251_nd);
        int32_t _7253_nelem = _7250_rs->popi32();
        int32_t _7254_nnz = _7250_rs->popi32();
        bool _7255_hassp = (_7250_rs->popi32() != (int)0);
        int32_t _7256_ptr_base = _7250_rs->popi32(safe_add( _7253_nelem,(int)1 ));
        int32_t _12354_;
        bool _12355_ = _7255_hassp;
        if (_12355_)
        {
          _12354_ = _7250_rs->popi64(_7253_nelem);
        }
        else
        {
          _12354_ = (int)0;
        }
        int32_t _7257_sp_base = _12354_;
        int32_t _7258_nidxs_base = _7250_rs->popi64(_7254_nnz);
        int32_t _7259_bfix_base = _7250_rs->popf64(_7253_nelem);
        int32_t _7260_cof_base = _7250_rs->popf64(_7254_nnz);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _7261_ri32 = mosek::fusion::p_WorkStack::_get_impl(_7250_rs)->i32;
        _checked_ptr_1<int32_t> _ptr__7261_ri32(_7261_ri32 ? _7261_ri32->raw() : nullptr,_7261_ri32 ? _7261_ri32->size(0) : 0);
        std::shared_ptr< monty::ndarray< int64_t,1 > > _7262_ri64 = mosek::fusion::p_WorkStack::_get_impl(_7250_rs)->i64;
        _checked_ptr_1<int64_t> _ptr__7262_ri64(_7262_ri64 ? _7262_ri64->raw() : nullptr,_7262_ri64 ? _7262_ri64->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _7263_rf64 = mosek::fusion::p_WorkStack::_get_impl(_7250_rs)->f64;
        _checked_ptr_1<double> _ptr__7263_rf64(_7263_rf64 ? _7263_rf64->raw() : nullptr,_7263_rf64 ? _7263_rf64->size(0) : 0);
        std::vector<int32_t> _12356_;
        for (int32_t _7264_i = (int)0, _12357_ = _7251_nd; _7264_i < _12357_ ; ++_7264_i)
        {
          _12356_.push_back(_ptr__7261_ri32[safe_add( _7252_shape_base,_7264_i )]);
        }
        auto _12358_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12356_.size()),_12356_.begin(),_12356_.end()));
        shape = _12358_;
        std::vector<int64_t> _12359_;
        for (int32_t _7265_i = (int)0, _12360_ = safe_add( _7253_nelem,(int)1 ); _7265_i < _12360_ ; ++_7265_i)
        {
          _12359_.push_back(_ptr__7261_ri32[safe_add( _7256_ptr_base,_7265_i )]);
        }
        auto _12361_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12359_.size()),_12359_.begin(),_12359_.end()));
        ptrb = _12361_;
        std::vector<int64_t> _12362_;
        for (int32_t _7266_i = (int)0, _12363_ = _7254_nnz; _7266_i < _12363_ ; ++_7266_i)
        {
          _12362_.push_back(_ptr__7262_ri64[safe_add( _7258_nidxs_base,_7266_i )]);
        }
        auto _12364_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12362_.size()),_12362_.begin(),_12362_.end()));
        subj = _12364_;
        std::vector<double> _12365_;
        for (int32_t _7267_i = (int)0, _12366_ = _7254_nnz; _7267_i < _12366_ ; ++_7267_i)
        {
          _12365_.push_back(_ptr__7263_rf64[safe_add( _7260_cof_base,_7267_i )]);
        }
        auto _12367_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12365_.size()),_12365_.begin(),_12365_.end()));
        cof_v = _12367_;
        std::vector<double> _12368_;
        for (int32_t _7268_i = (int)0, _12369_ = _7254_nnz; _7268_i < _12369_ ; ++_7268_i)
        {
          _12368_.push_back(_ptr__7263_rf64[safe_add( _7259_bfix_base,_7268_i )]);
        }
        auto _12370_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12368_.size()),_12368_.begin(),_12368_.end()));
        bfix = _12370_;
        std::shared_ptr< monty::ndarray< int64_t,1 > > _12371_;
        bool _12372_ = _7255_hassp;
        if (_12372_)
        {
          std::vector<int64_t> _12373_;
          for (int32_t _7269_i = (int)0, _12374_ = _7254_nnz; _7269_i < _12374_ ; ++_7269_i)
          {
            _12373_.push_back(_ptr__7262_ri64[safe_add( _7257_sp_base,_7269_i )]);
          }
          auto _12375_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12373_.size()),_12373_.begin(),_12373_.end()));
          _12371_ = _12375_;
        }
        else
        {
          _12371_ = nullptr;
        }
        inst = _12371_;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}
// mosek.fusion.Expr.ctor

// Begin mosek.fusion.Expr.prod
// Method mosek.fusion.Expr.prod @ src/fusion/Expr.mbi:1707:6-110
int64_t mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int32_t,1 > > _7270_vals)
{
  _checked_ptr_1<int32_t> _ptr__7270_vals(_7270_vals ? _7270_vals->raw() : nullptr, _7270_vals ? _7270_vals->size(0) : 0);
  int32_t _7271_r = (int)1;
  int32_t _12376_ = (int)0;
  int32_t _12377_ = (int)((_7270_vals)->size(0));
  for (int32_t _7272_i = _12376_; _7272_i < _12377_; ++_7272_i)
  {
    {
      _7271_r *= _ptr__7270_vals[_7272_i];
    }
  }
  return _7271_r;
}
// End mosek.fusion.Expr.prod

// Begin mosek.fusion.Expr.varstack
// Method mosek.fusion.Expr.varstack @ src/fusion/Expr.mbi:1702:6-1705:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _7273_vs)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _12378_;
  for (int32_t _7274_i = (int)0, _12379_ = (int)((_7273_vs)->size(0)); _7274_i < _12379_ ; ++_7274_i)
  {
    for (int32_t _7275_j = (int)0, _12380_ = (int)((((*_7273_vs)(_7274_i)))->size(0)); _7275_j < _12380_ ; ++_7275_j)
    {
      _12378_.push_back(((*((*_7273_vs)(_7274_i)))(_7275_j)));
    }
  }
  auto _12381_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_12378_.size()),_12378_.begin(),_12378_.end()));
  return _12381_;
}
// End mosek.fusion.Expr.varstack

// Begin mosek.fusion.Expr.varstack
// Method mosek.fusion.Expr.varstack @ src/fusion/Expr.mbi:1689:6-1700:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7276_v1,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7277_v2)
{
  if ((NULL == _7276_v1.get()))
  {
    {
      return _7277_v2;
    }
  }
  else if((NULL == _7277_v2.get()))
  {
    {
      return _7276_v1;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7278_r = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_7276_v1)->size(0)),(int)((_7277_v2)->size(0)) ))));
      int32_t _12382_ = (int)0;
      int32_t _12383_ = (int)((_7276_v1)->size(0));
      for (int32_t _7279_i = _12382_; _7279_i < _12383_; ++_7279_i)
      {
        {
          ((*_7278_r)(_7279_i)) = ((*_7276_v1)(_7279_i));
        }
      }
      int32_t _12384_ = (int)0;
      int32_t _12385_ = (int)((_7277_v2)->size(0));
      for (int32_t _7280_i = _12384_; _7280_i < _12385_; ++_7280_i)
      {
        {
          ((*_7278_r)(safe_add( _7280_i,(int)((_7276_v1)->size(0)) ))) = ((*_7277_v2)(_7280_i));
        }
      }
      return _7278_r;
    }
  }
}
// End mosek.fusion.Expr.varstack

// Begin mosek.fusion.Expr.condense
// Method mosek.fusion.Expr.condense @ src/fusion/Expr.mbi:1686:6-93
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7281_e) { return mosek::fusion::p_Expr::condense(_7281_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _7281_e)
{
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_7281_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.condense

// Begin mosek.fusion.Expr.flatten
// Method mosek.fusion.Expr.flatten @ src/fusion/Expr.mbi:1673:6-1681:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7282_e) { return mosek::fusion::p_Expr::flatten(_7282_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _7282_e)
{
  if ((NULL == _7282_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  int64_t _7283_sz = _7282_e->getSize();
  if ((!(_7283_sz <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum dimension size exceeded"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7282_e,(int32_t)_7283_sz);
}
// End mosek.fusion.Expr.flatten

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ src/fusion/Expr.mbi:1664:6-1668:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7284_e,
    int32_t _7285_dimi,
    int32_t _7286_dimj) { return mosek::fusion::p_Expr::reshape(_7284_e,_7285_dimi,_7286_dimj); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7284_e,int32_t _7285_dimi,int32_t _7286_dimj)
{
  if ((NULL == _7284_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7284_e,::mosek::fusion::p_Set::make(_7285_dimi,_7286_dimj));
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ src/fusion/Expr.mbi:1654:6-1658:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7287_e,
    int32_t _7288_size) { return mosek::fusion::p_Expr::reshape(_7287_e,_7288_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7287_e,int32_t _7288_size)
{
  if ((NULL == _7287_e.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_7287_e,::mosek::fusion::p_Set::make(_7288_size));
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.reshape
// Method mosek.fusion.Expr.reshape @ src/fusion/Expr.mbi:1653:6-118
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7289_e,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7290_newshape) { return mosek::fusion::p_Expr::reshape(_7289_e,_7290_newshape); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _7289_e,std::shared_ptr< monty::ndarray< int32_t,1 > > _7290_newshape)
{
  _checked_ptr_1<int32_t> _ptr__7290_newshape(_7290_newshape ? _7290_newshape->raw() : nullptr, _7290_newshape ? _7290_newshape->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7290_newshape,_7289_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.reshape

// Begin mosek.fusion.Expr.zeros
// Method mosek.fusion.Expr.zeros @ src/fusion/Expr.mbi:1639:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7291_shp) { return mosek::fusion::p_Expr::zeros(_7291_shp); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int32_t,1 > > _7291_shp)
{
  _checked_ptr_1<int32_t> _ptr__7291_shp(_7291_shp ? _7291_shp->raw() : nullptr, _7291_shp ? _7291_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7291_shp,(double)((int)0));
}
// End mosek.fusion.Expr.zeros

// Begin mosek.fusion.Expr.zeros
// Method mosek.fusion.Expr.zeros @ src/fusion/Expr.mbi:1638:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros
  ( int32_t _7292_size) { return mosek::fusion::p_Expr::zeros(_7292_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int32_t _7292_size)
{
  return ::mosek::fusion::p_Expr::constTerm(_7292_size,(double)((int)0));
}
// End mosek.fusion.Expr.zeros

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1636:6-70
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( ) { return mosek::fusion::p_Expr::ones(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones()
{
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1635:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7293_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7294_sparsity) { return mosek::fusion::p_Expr::ones(_7293_shp,_7294_sparsity); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int32_t,1 > > _7293_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7294_sparsity)
{
  _checked_ptr_1<int32_t> _ptr__7293_shp(_7293_shp ? _7293_shp->raw() : nullptr, _7293_shp ? _7293_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7293_shp,_7294_sparsity,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1634:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7295_shp) { return mosek::fusion::p_Expr::ones(_7295_shp); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int32_t,1 > > _7295_shp)
{
  _checked_ptr_1<int32_t> _ptr__7295_shp(_7295_shp ? _7295_shp->raw() : nullptr, _7295_shp ? _7295_shp->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_7295_shp,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.ones
// Method mosek.fusion.Expr.ones @ src/fusion/Expr.mbi:1633:6-87
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones
  ( int32_t _7296_size) { return mosek::fusion::p_Expr::ones(_7296_size); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int32_t _7296_size)
{
  return ::mosek::fusion::p_Expr::constTerm(_7296_size,(double)((int)1));
}
// End mosek.fusion.Expr.ones

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1627:6-1630:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7297_nda) { return mosek::fusion::p_Expr::constTerm(_7297_nda); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7297_nda)
{
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_7297_nda)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_7297_nda)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7297_nda)->cof)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1606:6-1625:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7298_m) { return mosek::fusion::p_Expr::constTerm(_7298_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _7298_m)
{
  int32_t _7299_dim0 = _7298_m->numRows();
  int32_t _7300_dim1 = _7298_m->numColumns();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7301_shape = ::mosek::fusion::p_Set::make(_7299_dim0,_7300_dim1);
  _checked_ptr_1<int32_t> _ptr__7301_shape(_7301_shape ? _7301_shape->raw() : nullptr,_7301_shape ? _7301_shape->size(0) : 0);
  if (_7298_m->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7302_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7298_m->numNonzeros())));
      _checked_ptr_1<double> _ptr__7302_mval(_7302_mval ? _7302_mval->raw() : nullptr,_7302_mval ? _7302_mval->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7303_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7298_m->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__7303_msubj(_7303_msubj ? _7303_msubj->raw() : nullptr,_7303_msubj ? _7303_msubj->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7304_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7298_m->numNonzeros())));
      _checked_ptr_1<int32_t> _ptr__7304_msubi(_7304_msubi ? _7304_msubi->raw() : nullptr,_7304_msubi ? _7304_msubi->size(0) : 0);
      _7298_m->getDataAsTriplets(_7304_msubi,_7303_msubj,_7302_mval);
      std::vector<int64_t> _12386_;
      for (int32_t _7306_i = (int)0, _12387_ = (int)((_7303_msubj)->size(0)); _7306_i < _12387_ ; ++_7306_i)
      {
        _12386_.push_back(safe_add( safe_mul( _ptr__7304_msubi[_7306_i],_7300_dim1 ),_ptr__7303_msubj[_7306_i] ));
      }
      auto _12388_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12386_.size()),_12386_.begin(),_12386_.end()));
      std::shared_ptr< monty::ndarray< int64_t,1 > > _7305_sp = _12388_;
      _checked_ptr_1<int64_t> _ptr__7305_sp(_7305_sp ? _7305_sp->raw() : nullptr,_7305_sp ? _7305_sp->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7301_shape,_7305_sp,_7302_mval)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7301_shape,nullptr,_7298_m->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1601:6-1604:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( double _7307_val) { return mosek::fusion::p_Expr::constTerm(_7307_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _7307_val)
{
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),nullptr,_7307_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1590:6-1599:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7308_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7309_sparsity,
    double _7310_val) { return mosek::fusion::p_Expr::constTerm(_7308_shp,_7309_sparsity,_7310_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7308_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7309_sparsity,double _7310_val)
{
  _checked_ptr_1<int32_t> _ptr__7308_shp(_7308_shp ? _7308_shp->raw() : nullptr, _7308_shp ? _7308_shp->size(0) : 0);
  int32_t _7311_n = (int)((_7309_sparsity)->size(0));
  int32_t _7312_nd = (int)((_7308_shp)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7313_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7311_n)));
  _checked_ptr_1<int64_t> _ptr__7313_sp(_7313_sp ? _7313_sp->raw() : nullptr,_7313_sp ? _7313_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7314_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7312_nd)));
  _checked_ptr_1<int64_t> _ptr__7314_s(_7314_s ? _7314_s->raw() : nullptr,_7314_s ? _7314_s->size(0) : 0);
  _ptr__7314_s[(_7312_nd - (int)1)] = (int)1;
  int32_t _12389_ = (int)1;
  int32_t _12390_ = _7312_nd;
  for (int32_t _7315_i = _12389_; _7315_i < _12390_; ++_7315_i)
  {
    {
      _ptr__7314_s[((_7312_nd - _7315_i) - (int)1)] = safe_mul( _ptr__7314_s[(_7312_nd - _7315_i)],_ptr__7308_shp[(_7312_nd - _7315_i)] );
    }
  }
  int32_t _12391_ = (int)0;
  int32_t _12392_ = _7311_n;
  for (int32_t _7316_i = _12391_; _7316_i < _12392_; ++_7316_i)
  {
    {
      int32_t _12393_ = (int)0;
      int32_t _12394_ = _7312_nd;
      for (int32_t _7317_j = _12393_; _7317_j < _12394_; ++_7317_j)
      {
        {
          _ptr__7313_sp[_7316_i] += safe_mul( _ptr__7314_s[_7317_j],((*_7309_sparsity)(_7316_i,_7317_j)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7308_shp,_7313_sp,_7310_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1579:6-1589:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7318_shp,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7319_sparsity,
    std::shared_ptr< monty::ndarray< double,1 > > _7320_vals1) { return mosek::fusion::p_Expr::constTerm(_7318_shp,_7319_sparsity,_7320_vals1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7318_shp,std::shared_ptr< monty::ndarray< int32_t,2 > > _7319_sparsity,std::shared_ptr< monty::ndarray< double,1 > > _7320_vals1)
{
  _checked_ptr_1<int32_t> _ptr__7318_shp(_7318_shp ? _7318_shp->raw() : nullptr, _7318_shp ? _7318_shp->size(0) : 0);
  _checked_ptr_1<double> _ptr__7320_vals1(_7320_vals1 ? _7320_vals1->raw() : nullptr, _7320_vals1 ? _7320_vals1->size(0) : 0);
  int32_t _7321_n = (int)((_7319_sparsity)->size(0));
  int32_t _7322_nd = (int)((_7318_shp)->size(0));
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7323_sp = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7321_n)));
  _checked_ptr_1<int64_t> _ptr__7323_sp(_7323_sp ? _7323_sp->raw() : nullptr,_7323_sp ? _7323_sp->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7324_s = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7322_nd)));
  _checked_ptr_1<int64_t> _ptr__7324_s(_7324_s ? _7324_s->raw() : nullptr,_7324_s ? _7324_s->size(0) : 0);
  _ptr__7324_s[(_7322_nd - (int)1)] = (int)1;
  int32_t _12395_ = (int)1;
  int32_t _12396_ = _7322_nd;
  for (int32_t _7325_i = _12395_; _7325_i < _12396_; ++_7325_i)
  {
    {
      _ptr__7324_s[((_7322_nd - _7325_i) - (int)1)] = safe_mul( _ptr__7324_s[(_7322_nd - _7325_i)],_ptr__7318_shp[(_7322_nd - _7325_i)] );
    }
  }
  int32_t _12397_ = (int)0;
  int32_t _12398_ = _7321_n;
  for (int32_t _7326_i = _12397_; _7326_i < _12398_; ++_7326_i)
  {
    {
      int32_t _12399_ = (int)0;
      int32_t _12400_ = _7322_nd;
      for (int32_t _7327_j = _12399_; _7327_j < _12400_; ++_7327_j)
      {
        {
          _ptr__7323_sp[_7326_i] += safe_mul( _ptr__7324_s[_7327_j],((*_7319_sparsity)(_7326_i,_7327_j)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7318_shp,_7323_sp,_7320_vals1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1574:6-1577:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _7328_shp,
    double _7329_val) { return mosek::fusion::p_Expr::constTerm(_7328_shp,_7329_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int32_t,1 > > _7328_shp,double _7329_val)
{
  _checked_ptr_1<int32_t> _ptr__7328_shp(_7328_shp ? _7328_shp->raw() : nullptr, _7328_shp ? _7328_shp->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7328_shp,nullptr,_7329_val)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1570:6-1572:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( int32_t _7330_size,
    double _7331_val) { return mosek::fusion::p_Expr::constTerm(_7330_size,_7331_val); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int32_t _7330_size,double _7331_val)
{
  std::vector<double> _12401_;
  for (int32_t _7332_i = (int)0, _12402_ = _7330_size; _7332_i < _12402_ ; ++_7332_i)
  {
    _12401_.push_back(_7331_val);
  }
  auto _12403_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12401_.size()),_12401_.begin(),_12401_.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7330_size)}),nullptr,_12403_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1563:6-1565:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< double,2 > > _7333_vals2) { return mosek::fusion::p_Expr::constTerm(_7333_vals2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _7333_vals2)
{
  std::vector<double> _12404_;
  for (int32_t _7334_i = (int)0, _12405_ = (int)((_7333_vals2)->size(0)); _7334_i < _12405_ ; ++_7334_i)
  {
    for (int32_t _7335_j = (int)0, _12406_ = (int)((_7333_vals2)->size(1)); _7335_j < _12406_ ; ++_7335_j)
    {
      _12404_.push_back(((*_7333_vals2)(_7334_i,_7335_j)));
    }
  }
  auto _12407_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12404_.size()),_12404_.begin(),_12404_.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7333_vals2)->size(0))),(int32_t)((int)((_7333_vals2)->size(1)))}),nullptr,_12407_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.constTerm
// Method mosek.fusion.Expr.constTerm @ src/fusion/Expr.mbi:1556:6-1558:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm
  ( std::shared_ptr< monty::ndarray< double,1 > > _7336_vals1) { return mosek::fusion::p_Expr::constTerm(_7336_vals1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _7336_vals1)
{
  _checked_ptr_1<double> _ptr__7336_vals1(_7336_vals1 ? _7336_vals1->raw() : nullptr, _7336_vals1 ? _7336_vals1->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7336_vals1)->size(0)))}),nullptr,_7336_vals1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.constTerm

// Begin mosek.fusion.Expr.sum
// Method mosek.fusion.Expr.sum @ src/fusion/Expr.mbi:1541:6-110
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7337_expr,
    int32_t _7338_dim) { return mosek::fusion::p_Expr::sum(_7337_expr,_7338_dim); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7337_expr,int32_t _7338_dim)
{
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_7338_dim,_7337_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.sum

// Begin mosek.fusion.Expr.sum
// Method mosek.fusion.Expr.sum @ src/fusion/Expr.mbi:1540:6-117
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7339_expr) { return mosek::fusion::p_Expr::sum(_7339_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7339_expr)
{
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_7339_expr))).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.sum

// Begin mosek.fusion.Expr.neg
// Method mosek.fusion.Expr.neg @ src/fusion/Expr.mbi:1539:6-98
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7340_e) { return mosek::fusion::p_Expr::neg(_7340_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _7340_e)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_7340_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.neg

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1524:6-1537:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _7341_left,monty::rc_ptr< ::mosek::fusion::Matrix > _7342_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7343_expr)
{
  int64_t _7344_nnz = _7342_mx->numNonzeros();
  int32_t _7345_dimi = _7342_mx->numRows();
  int32_t _7346_dimj = _7342_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7347_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7344_nnz)));
  _checked_ptr_1<double> _ptr__7347_mcof(_7347_mcof ? _7347_mcof->raw() : nullptr,_7347_mcof ? _7347_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7348_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7344_nnz)));
  _checked_ptr_1<int32_t> _ptr__7348_msubj(_7348_msubj ? _7348_msubj->raw() : nullptr,_7348_msubj ? _7348_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7349_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7344_nnz)));
  _checked_ptr_1<int32_t> _ptr__7349_msubi(_7349_msubi ? _7349_msubi->raw() : nullptr,_7349_msubi ? _7349_msubi->size(0) : 0);
  _7342_mx->getDataAsTriplets(_7349_msubi,_7348_msubj,_7347_mcof);
  if (_7341_left)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_7345_dimi,_7346_dimj,_7349_msubi,_7348_msubj,_7347_mcof,_7343_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_7345_dimi,_7346_dimj,_7349_msubi,_7348_msubj,_7347_mcof,_7343_expr)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1521:6-140
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7350_v,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7351_p) { return mosek::fusion::p_Expr::mulDiag(_7350_v,_7351_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7350_v,monty::rc_ptr< ::mosek::fusion::Parameter > _7351_p)
{
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7350_v->__mosek_2fusion_2Variable__asExpr(),_7351_p)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1520:6-139
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7352_p,
    monty::rc_ptr< ::mosek::fusion::Variable > _7353_v) { return mosek::fusion::p_Expr::mulDiag(_7352_p,_7353_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7352_p,monty::rc_ptr< ::mosek::fusion::Variable > _7353_v)
{
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7352_p,_7353_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1519:6-134
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7354_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7355_p) { return mosek::fusion::p_Expr::mulDiag(_7354_expr,_7355_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7354_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7355_p)
{
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7354_expr,_7355_p)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1518:6-133
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7356_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7357_expr) { return mosek::fusion::p_Expr::mulDiag(_7356_p,_7357_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7356_p,monty::rc_ptr< ::mosek::fusion::Expression > _7357_expr)
{
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7356_p,_7357_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1516:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7358_v,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7359_mx) { return mosek::fusion::p_Expr::mulDiag(_7358_v,_7359_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7358_v,monty::rc_ptr< ::mosek::fusion::Matrix > _7359_mx)
{
  return ::mosek::fusion::p_Expr::mulDiag(false,_7359_mx,_7358_v->__mosek_2fusion_2Variable__asExpr());
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1515:6-128
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7360_mx,
    monty::rc_ptr< ::mosek::fusion::Variable > _7361_v) { return mosek::fusion::p_Expr::mulDiag(_7360_mx,_7361_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7360_mx,monty::rc_ptr< ::mosek::fusion::Variable > _7361_v)
{
  return ::mosek::fusion::p_Expr::mulDiag(true,_7360_mx,_7361_v->__mosek_2fusion_2Variable__asExpr());
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1514:6-123
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7362_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7363_mx) { return mosek::fusion::p_Expr::mulDiag(_7362_expr,_7363_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7362_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7363_mx)
{
  return ::mosek::fusion::p_Expr::mulDiag(false,_7363_mx,_7362_expr);
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1513:6-122
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7364_mx,
    monty::rc_ptr< ::mosek::fusion::Expression > _7365_expr) { return mosek::fusion::p_Expr::mulDiag(_7364_mx,_7365_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7364_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7365_expr)
{
  return ::mosek::fusion::p_Expr::mulDiag(true,_7364_mx,_7365_expr);
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1512:6-306
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7366_v,
    std::shared_ptr< monty::ndarray< double,2 > > _7367_a) { return mosek::fusion::p_Expr::mulDiag(_7366_v,_7367_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7366_v,std::shared_ptr< monty::ndarray< double,2 > > _7367_a)
{
  std::vector<int32_t> _12408_;
  for (int32_t _7368_i = (int)0, _12409_ = (int)((_7367_a)->size(0)); _7368_i < _12409_ ; ++_7368_i)
  {
    for (int32_t _7369_j = (int)0, _12410_ = (int)((_7367_a)->size(1)); _7369_j < _12410_ ; ++_7369_j)
    {
      _12408_.push_back(_7368_i);
    }
  }
  auto _12411_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12408_.size()),_12408_.begin(),_12408_.end()));
  std::vector<int32_t> _12412_;
  for (int32_t _7370_i = (int)0, _12413_ = (int)((_7367_a)->size(0)); _7370_i < _12413_ ; ++_7370_i)
  {
    for (int32_t _7371_j = (int)0, _12414_ = (int)((_7367_a)->size(1)); _7371_j < _12414_ ; ++_7371_j)
    {
      _12412_.push_back(_7371_j);
    }
  }
  auto _12415_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12412_.size()),_12412_.begin(),_12412_.end()));
  std::vector<double> _12416_;
  for (int32_t _7372_i = (int)0, _12417_ = (int)((_7367_a)->size(0)); _7372_i < _12417_ ; ++_7372_i)
  {
    for (int32_t _7373_j = (int)0, _12418_ = (int)((_7367_a)->size(1)); _7373_j < _12418_ ; ++_7373_j)
    {
      _12416_.push_back(((*_7367_a)(_7372_i,_7373_j)));
    }
  }
  auto _12419_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12416_.size()),_12416_.begin(),_12416_.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7367_a)->size(0)),(int)((_7367_a)->size(1)),_12411_,_12415_,_12419_,_7366_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1511:6-300
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7374_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7375_a) { return mosek::fusion::p_Expr::mulDiag(_7374_expr,_7375_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7374_expr,std::shared_ptr< monty::ndarray< double,2 > > _7375_a)
{
  std::vector<int32_t> _12420_;
  for (int32_t _7376_i = (int)0, _12421_ = (int)((_7375_a)->size(0)); _7376_i < _12421_ ; ++_7376_i)
  {
    for (int32_t _7377_j = (int)0, _12422_ = (int)((_7375_a)->size(1)); _7377_j < _12422_ ; ++_7377_j)
    {
      _12420_.push_back(_7376_i);
    }
  }
  auto _12423_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12420_.size()),_12420_.begin(),_12420_.end()));
  std::vector<int32_t> _12424_;
  for (int32_t _7378_i = (int)0, _12425_ = (int)((_7375_a)->size(0)); _7378_i < _12425_ ; ++_7378_i)
  {
    for (int32_t _7379_j = (int)0, _12426_ = (int)((_7375_a)->size(1)); _7379_j < _12426_ ; ++_7379_j)
    {
      _12424_.push_back(_7379_j);
    }
  }
  auto _12427_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12424_.size()),_12424_.begin(),_12424_.end()));
  std::vector<double> _12428_;
  for (int32_t _7380_i = (int)0, _12429_ = (int)((_7375_a)->size(0)); _7380_i < _12429_ ; ++_7380_i)
  {
    for (int32_t _7381_j = (int)0, _12430_ = (int)((_7375_a)->size(1)); _7381_j < _12430_ ; ++_7381_j)
    {
      _12428_.push_back(((*_7375_a)(_7380_i,_7381_j)));
    }
  }
  auto _12431_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12428_.size()),_12428_.begin(),_12428_.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7375_a)->size(0)),(int)((_7375_a)->size(1)),_12423_,_12427_,_12431_,_7374_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1510:6-306
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( std::shared_ptr< monty::ndarray< double,2 > > _7382_a,
    monty::rc_ptr< ::mosek::fusion::Variable > _7383_v) { return mosek::fusion::p_Expr::mulDiag(_7382_a,_7383_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7382_a,monty::rc_ptr< ::mosek::fusion::Variable > _7383_v)
{
  std::vector<int32_t> _12432_;
  for (int32_t _7384_i = (int)0, _12433_ = (int)((_7382_a)->size(0)); _7384_i < _12433_ ; ++_7384_i)
  {
    for (int32_t _7385_j = (int)0, _12434_ = (int)((_7382_a)->size(1)); _7385_j < _12434_ ; ++_7385_j)
    {
      _12432_.push_back(_7384_i);
    }
  }
  auto _12435_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12432_.size()),_12432_.begin(),_12432_.end()));
  std::vector<int32_t> _12436_;
  for (int32_t _7386_i = (int)0, _12437_ = (int)((_7382_a)->size(0)); _7386_i < _12437_ ; ++_7386_i)
  {
    for (int32_t _7387_j = (int)0, _12438_ = (int)((_7382_a)->size(1)); _7387_j < _12438_ ; ++_7387_j)
    {
      _12436_.push_back(_7387_j);
    }
  }
  auto _12439_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12436_.size()),_12436_.begin(),_12436_.end()));
  std::vector<double> _12440_;
  for (int32_t _7388_i = (int)0, _12441_ = (int)((_7382_a)->size(0)); _7388_i < _12441_ ; ++_7388_i)
  {
    for (int32_t _7389_j = (int)0, _12442_ = (int)((_7382_a)->size(1)); _7389_j < _12442_ ; ++_7389_j)
    {
      _12440_.push_back(((*_7382_a)(_7388_i,_7389_j)));
    }
  }
  auto _12443_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12440_.size()),_12440_.begin(),_12440_.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7382_a)->size(0)),(int)((_7382_a)->size(1)),_12435_,_12439_,_12443_,_7383_v->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulDiag
// Method mosek.fusion.Expr.mulDiag @ src/fusion/Expr.mbi:1509:6-300
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag
  ( std::shared_ptr< monty::ndarray< double,2 > > _7390_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7391_expr) { return mosek::fusion::p_Expr::mulDiag(_7390_a,_7391_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7390_a,monty::rc_ptr< ::mosek::fusion::Expression > _7391_expr)
{
  std::vector<int32_t> _12444_;
  for (int32_t _7392_i = (int)0, _12445_ = (int)((_7390_a)->size(0)); _7392_i < _12445_ ; ++_7392_i)
  {
    for (int32_t _7393_j = (int)0, _12446_ = (int)((_7390_a)->size(1)); _7393_j < _12446_ ; ++_7393_j)
    {
      _12444_.push_back(_7392_i);
    }
  }
  auto _12447_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12444_.size()),_12444_.begin(),_12444_.end()));
  std::vector<int32_t> _12448_;
  for (int32_t _7394_i = (int)0, _12449_ = (int)((_7390_a)->size(0)); _7394_i < _12449_ ; ++_7394_i)
  {
    for (int32_t _7395_j = (int)0, _12450_ = (int)((_7390_a)->size(1)); _7395_j < _12450_ ; ++_7395_j)
    {
      _12448_.push_back(_7395_j);
    }
  }
  auto _12451_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12448_.size()),_12448_.begin(),_12448_.end()));
  std::vector<double> _12452_;
  for (int32_t _7396_i = (int)0, _12453_ = (int)((_7390_a)->size(0)); _7396_i < _12453_ ; ++_7396_i)
  {
    for (int32_t _7397_j = (int)0, _12454_ = (int)((_7390_a)->size(1)); _7397_j < _12454_ ; ++_7397_j)
    {
      _12452_.push_back(((*_7390_a)(_7396_i,_7397_j)));
    }
  }
  auto _12455_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12452_.size()),_12452_.begin(),_12452_.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7390_a)->size(0)),(int)((_7390_a)->size(1)),_12447_,_12451_,_12455_,_7391_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulDiag

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ src/fusion/Expr.mbi:1486:6-1507:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _7398_m,monty::rc_ptr< ::mosek::fusion::Expression > _7399_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7400_eshape = _7399_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7400_eshape(_7400_eshape ? _7400_eshape->raw() : nullptr,_7400_eshape ? _7400_eshape->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _7401_expr = _7399_e;
  if (((int)((_7400_eshape)->size(0)) == (int)1))
  {
    {
      _7400_eshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7400_eshape[(int)0]),(int32_t)((int)1)});
      _ptr__7400_eshape.update(_7400_eshape ? _7400_eshape->raw() : nullptr, _7400_eshape ? _7400_eshape->size(0) : 0);
      _7401_expr = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7400_eshape,_7399_e)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7400_eshape)->size(0)) != (int)2) || ((_7398_m->numRows() != _ptr__7400_eshape[(int)0]) || (_7398_m->numColumns() != _ptr__7400_eshape[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int32_t _7402_mdim1 = _7398_m->numColumns();
  int64_t _7403_mnnz = _7398_m->numNonzeros();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7404_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7403_mnnz)));
  _checked_ptr_1<int32_t> _ptr__7404_msubi(_7404_msubi ? _7404_msubi->raw() : nullptr,_7404_msubi ? _7404_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7405_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7403_mnnz)));
  _checked_ptr_1<int32_t> _ptr__7405_msubj(_7405_msubj ? _7405_msubj->raw() : nullptr,_7405_msubj ? _7405_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7406_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7403_mnnz)));
  _checked_ptr_1<double> _ptr__7406_mcof(_7406_mcof ? _7406_mcof->raw() : nullptr,_7406_mcof ? _7406_mcof->size(0) : 0);
  _7398_m->getDataAsTriplets(_7404_msubi,_7405_msubj,_7406_mcof);
  std::vector<int64_t> _12456_;
  for (int64_t _7407_i = (int)0, _12457_ = _7403_mnnz; _7407_i < _12457_ ; ++_7407_i)
  {
    _12456_.push_back(safe_add( safe_mul( _ptr__7404_msubi[_7407_i],_7402_mdim1 ),_ptr__7405_msubj[_7407_i] ));
  }
  auto _12458_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12456_.size()),_12456_.begin(),_12456_.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7406_mcof,_12458_,_7401_expr,(int)1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ src/fusion/Expr.mbi:1472:6-1483:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _7408_a,monty::rc_ptr< ::mosek::fusion::Expression > _7409_expr)
{
  _checked_ptr_1<double> _ptr__7408_a(_7408_a ? _7408_a->raw() : nullptr, _7408_a ? _7408_a->size(0) : 0);
  if (((NULL == _7408_a.get()) || (NULL == _7409_expr.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_7409_expr->getND() == (int)0) && ((int)((_7408_a)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__7408_a[(int)0],_7409_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7409_expr->getND() != (int)1) || (_7409_expr->getDim((int)0) != (int)((_7408_a)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<int64_t> _12459_;
      for (int32_t _7410_i = (int)0, _12460_ = (int)((_7408_a)->size(0)); _7410_i < _12460_ ; ++_7410_i)
      {
        _12459_.push_back(_7410_i);
      }
      auto _12461_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12459_.size()),_12459_.begin(),_12459_.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7408_a,_12461_,_7409_expr)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mulElm_
// Method mosek.fusion.Expr.mulElm_ @ src/fusion/Expr.mbi:1460:6-1470:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7411_spm,monty::rc_ptr< ::mosek::fusion::Expression > _7412_expr)
{
  if (((NULL == _7411_spm.get()) || (NULL == _7412_expr.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7413_eshape = _7412_expr->getShape();
  _checked_ptr_1<int32_t> _ptr__7413_eshape(_7413_eshape ? _7413_eshape->raw() : nullptr,_7413_eshape ? _7413_eshape->size(0) : 0);
  if (((int)((_7413_eshape)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7411_spm)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int32_t _12462_ = (int)0;
  int32_t _12463_ = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7411_spm)->dims)->size(0));
  for (int32_t _7414_i = _12462_; _7414_i < _12463_; ++_7414_i)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7411_spm)->dims)(_7414_i)) != _ptr__7413_eshape[_7414_i]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_7411_spm)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_7411_spm)->inst,_7412_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm_

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1458:6-118
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7415_expr,
    double _7416_c) { return mosek::fusion::p_Expr::mul(_7415_expr,_7416_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7415_expr,double _7416_c)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7416_c,_7415_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1457:6-121
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( double _7417_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7418_expr) { return mosek::fusion::p_Expr::mul(_7417_c,_7418_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _7417_c,monty::rc_ptr< ::mosek::fusion::Expression > _7418_expr)
{
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7417_c,_7418_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1456:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7419_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _7420_a) { return mosek::fusion::p_Expr::mul(_7419_expr,_7420_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7419_expr,std::shared_ptr< monty::ndarray< double,1 > > _7420_a)
{
  _checked_ptr_1<double> _ptr__7420_a(_7420_a ? _7420_a->raw() : nullptr, _7420_a ? _7420_a->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_7420_a,_7419_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1455:6-107
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( std::shared_ptr< monty::ndarray< double,1 > > _7421_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7422_expr) { return mosek::fusion::p_Expr::mul(_7421_a,_7422_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _7421_a,monty::rc_ptr< ::mosek::fusion::Expression > _7422_expr)
{
  _checked_ptr_1<double> _ptr__7421_a(_7421_a ? _7421_a->raw() : nullptr, _7421_a ? _7421_a->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_7421_a,_7422_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1454:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7423_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7424_a) { return mosek::fusion::p_Expr::mul(_7423_expr,_7424_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7423_expr,std::shared_ptr< monty::ndarray< double,2 > > _7424_a)
{
  return ::mosek::fusion::p_Expr::mul(false,_7424_a,_7423_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1453:6-107
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( std::shared_ptr< monty::ndarray< double,2 > > _7425_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7426_expr) { return mosek::fusion::p_Expr::mul(_7425_a,_7426_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7425_a,monty::rc_ptr< ::mosek::fusion::Expression > _7426_expr)
{
  return ::mosek::fusion::p_Expr::mul(true,_7425_a,_7426_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1452:6-106
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7427_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7428_mx) { return mosek::fusion::p_Expr::mul(_7427_expr,_7428_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7427_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7428_mx)
{
  return ::mosek::fusion::p_Expr::mul(false,_7428_mx,_7427_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1451:6-108
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7429_mx,
    monty::rc_ptr< ::mosek::fusion::Expression > _7430_expr) { return mosek::fusion::p_Expr::mul(_7429_mx,_7430_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7429_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7430_expr)
{
  return ::mosek::fusion::p_Expr::mul(true,_7429_mx,_7430_expr);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1429:6-1449:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7431_left,std::shared_ptr< monty::ndarray< double,1 > > _7432_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7433_e)
{
  _checked_ptr_1<double> _ptr__7432_mx(_7432_mx ? _7432_mx->raw() : nullptr, _7432_mx ? _7432_mx->size(0) : 0);
  int32_t _7434_mdim0 = (int)((_7432_mx)->size(0));
  int32_t _7435_nnz = _7434_mdim0;
  std::shared_ptr< monty::ndarray< double,1 > > _7436_mval = ::mosek::fusion::Utils::Tools::arraycopy(_7432_mx);
  _checked_ptr_1<double> _ptr__7436_mval(_7436_mval ? _7436_mval->raw() : nullptr,_7436_mval ? _7436_mval->size(0) : 0);
  int32_t _7437_nd = _7433_e->getND();
  if ((_7437_nd == (int)0))
  {
    {
      std::vector<int32_t> _12464_;
      for (int32_t _7438_i = (int)0, _12465_ = _7434_mdim0; _7438_i < _12465_ ; ++_7438_i)
      {
        _12464_.push_back(_7438_i);
      }
      auto _12466_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12464_.size()),_12464_.begin(),_12464_.end()));
      std::vector<int32_t> _12467_;
      for (int32_t _7439_i = (int)0, _12468_ = _7434_mdim0; _7439_i < _12468_ ; ++_7439_i)
      {
        _12467_.push_back((int)0);
      }
      auto _12469_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12467_.size()),_12467_.begin(),_12467_.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7434_mdim0)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7434_mdim0,(int)1,_12466_,_12469_,_7436_mval,_7433_e,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7437_nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_7431_left && (_7433_e->getDim((int)0) == (int)((_7432_mx)->size(0)))))
  {
    {
      std::vector<int32_t> _12470_;
      for (int32_t _7440_i = (int)0, _12471_ = _7434_mdim0; _7440_i < _12471_ ; ++_7440_i)
      {
        _12470_.push_back((int)0);
      }
      auto _12472_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12470_.size()),_12470_.begin(),_12470_.end()));
      std::vector<int32_t> _12473_;
      for (int32_t _7441_i = (int)0, _12474_ = _7434_mdim0; _7441_i < _12474_ ; ++_7441_i)
      {
        _12473_.push_back(_7441_i);
      }
      auto _12475_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12473_.size()),_12473_.begin(),_12473_.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7433_e->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_7434_mdim0,_12472_,_12475_,_7436_mval,_7433_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7431_left && (_7433_e->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int32_t> _12476_;
      for (int32_t _7442_i = (int)0, _12477_ = _7434_mdim0; _7442_i < _12477_ ; ++_7442_i)
      {
        _12476_.push_back(_7442_i);
      }
      auto _12478_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12476_.size()),_12476_.begin(),_12476_.end()));
      std::vector<int32_t> _12479_;
      for (int32_t _7443_i = (int)0, _12480_ = _7434_mdim0; _7443_i < _12480_ ; ++_7443_i)
      {
        _12479_.push_back((int)0);
      }
      auto _12481_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12479_.size()),_12479_.begin(),_12479_.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7434_mdim0,(int)1,_12478_,_12481_,_7436_mval,_7433_e,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7431_left) && (_7433_e->getDim((int)1) == _7434_mdim0)))
  {
    {
      std::vector<int32_t> _12482_;
      for (int32_t _7444_i = (int)0, _12483_ = _7434_mdim0; _7444_i < _12483_ ; ++_7444_i)
      {
        _12482_.push_back(_7444_i);
      }
      auto _12484_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12482_.size()),_12482_.begin(),_12482_.end()));
      std::vector<int32_t> _12485_;
      for (int32_t _7445_i = (int)0, _12486_ = _7434_mdim0; _7445_i < _12486_ ; ++_7445_i)
      {
        _12485_.push_back((int)0);
      }
      auto _12487_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12485_.size()),_12485_.begin(),_12485_.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7433_e->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7434_mdim0,(int)1,_12484_,_12487_,_7436_mval,_7433_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7431_left) && (_7433_e->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int32_t> _12488_;
      for (int32_t _7446_i = (int)0, _12489_ = _7434_mdim0; _7446_i < _12489_ ; ++_7446_i)
      {
        _12488_.push_back((int)0);
      }
      auto _12490_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12488_.size()),_12488_.begin(),_12488_.end()));
      std::vector<int32_t> _12491_;
      for (int32_t _7447_i = (int)0, _12492_ = _7434_mdim0; _7447_i < _12492_ ; ++_7447_i)
      {
        _12491_.push_back(_7447_i);
      }
      auto _12493_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12491_.size()),_12491_.begin(),_12491_.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_7434_mdim0,_12490_,_12493_,_7436_mval,_7433_e,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1398:6-1427:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7448_left,std::shared_ptr< monty::ndarray< double,2 > > _7449_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7450_e)
{
  int32_t _7451_mdim0 = (int)((_7449_mx)->size(0));
  int32_t _7452_mdim1 = (int)((_7449_mx)->size(1));
  int32_t _7453_nnz = safe_mul( _7451_mdim0,_7452_mdim1 );
  std::vector<int32_t> _12494_;
  for (int32_t _7455_i = (int)0, _12495_ = _7451_mdim0; _7455_i < _12495_ ; ++_7455_i)
  {
    for (int32_t _7456_j = (int)0, _12496_ = _7452_mdim1; _7456_j < _12496_ ; ++_7456_j)
    {
      _12494_.push_back(_7455_i);
    }
  }
  auto _12497_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12494_.size()),_12494_.begin(),_12494_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7454_msubi = _12497_;
  _checked_ptr_1<int32_t> _ptr__7454_msubi(_7454_msubi ? _7454_msubi->raw() : nullptr,_7454_msubi ? _7454_msubi->size(0) : 0);
  std::vector<int32_t> _12498_;
  for (int32_t _7458_i = (int)0, _12499_ = _7451_mdim0; _7458_i < _12499_ ; ++_7458_i)
  {
    for (int32_t _7459_j = (int)0, _12500_ = _7452_mdim1; _7459_j < _12500_ ; ++_7459_j)
    {
      _12498_.push_back(_7459_j);
    }
  }
  auto _12501_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12498_.size()),_12498_.begin(),_12498_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7457_msubj = _12501_;
  _checked_ptr_1<int32_t> _ptr__7457_msubj(_7457_msubj ? _7457_msubj->raw() : nullptr,_7457_msubj ? _7457_msubj->size(0) : 0);
  std::vector<double> _12502_;
  for (int32_t _7461_i = (int)0, _12503_ = _7451_mdim0; _7461_i < _12503_ ; ++_7461_i)
  {
    for (int32_t _7462_j = (int)0, _12504_ = _7452_mdim1; _7462_j < _12504_ ; ++_7462_j)
    {
      _12502_.push_back(((*_7449_mx)(_7461_i,_7462_j)));
    }
  }
  auto _12505_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12502_.size()),_12502_.begin(),_12502_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7460_mval = _12505_;
  _checked_ptr_1<double> _ptr__7460_mval(_7460_mval ? _7460_mval->raw() : nullptr,_7460_mval ? _7460_mval->size(0) : 0);
  int64_t _7463_esize = _7450_e->getSize();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7464_eshape = _7450_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7464_eshape(_7464_eshape ? _7464_eshape->raw() : nullptr,_7464_eshape ? _7464_eshape->size(0) : 0);
  if (((int)((_7464_eshape)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7451_mdim0,_7452_mdim1,_7454_msubi,_7457_msubj,_7460_mval,_7450_e,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_7448_left)
  {
    {
      if (((int)((_7464_eshape)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7449_mx)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7451_mdim0,_7452_mdim1,_7454_msubi,_7457_msubj,_7460_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7464_eshape[(int)0]),(int32_t)((int)1)}),_7450_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7464_eshape)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7451_mdim0,_7452_mdim1,_7454_msubi,_7457_msubj,_7460_mval,_7450_e)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_7464_eshape)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)((_7449_mx)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7451_mdim0,_7452_mdim1,_7454_msubi,_7457_msubj,_7460_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7464_eshape[(int)0])}),_7450_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7464_eshape)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7451_mdim0,_7452_mdim1,_7454_msubi,_7457_msubj,_7460_mval,_7450_e)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1367:6-1396:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7465_left,monty::rc_ptr< ::mosek::fusion::Matrix > _7466_mx,monty::rc_ptr< ::mosek::fusion::Expression > _7467_e)
{
  int64_t _7468_nnz = _7466_mx->numNonzeros();
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7469_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7468_nnz)));
  _checked_ptr_1<int32_t> _ptr__7469_msubi(_7469_msubi ? _7469_msubi->raw() : nullptr,_7469_msubi ? _7469_msubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7470_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7468_nnz)));
  _checked_ptr_1<int32_t> _ptr__7470_msubj(_7470_msubj ? _7470_msubj->raw() : nullptr,_7470_msubj ? _7470_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7471_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7468_nnz)));
  _checked_ptr_1<double> _ptr__7471_mval(_7471_mval ? _7471_mval->raw() : nullptr,_7471_mval ? _7471_mval->size(0) : 0);
  int32_t _7472_mdim0 = _7466_mx->numRows();
  int32_t _7473_mdim1 = _7466_mx->numColumns();
  _7466_mx->getDataAsTriplets(_7469_msubi,_7470_msubj,_7471_mval);
  int32_t _7474_nd = _7467_e->getND();
  if ((_7474_nd == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7472_mdim0,_7473_mdim1,_7469_msubi,_7470_msubj,_7471_mval,_7467_e)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7474_nd == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7475_eshape = _7467_e->getShape();
      _checked_ptr_1<int32_t> _ptr__7475_eshape(_7475_eshape ? _7475_eshape->raw() : nullptr,_7475_eshape ? _7475_eshape->size(0) : 0);
      if (_7465_left)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7472_mdim0)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7472_mdim0,_7473_mdim1,_7469_msubi,_7470_msubj,_7471_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7475_eshape[(int)0]),(int32_t)((int)1)}),_7467_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7473_mdim1)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7472_mdim0,_7473_mdim1,_7469_msubi,_7470_msubj,_7471_mval,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7475_eshape[(int)0])}),_7467_e)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_7474_nd == (int)2))
  {
    {
      if (_7465_left)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7472_mdim0,_7473_mdim1,_7469_msubi,_7470_msubj,_7471_mval,_7467_e)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7472_mdim0,_7473_mdim1,_7469_msubi,_7470_msubj,_7471_mval,_7467_e)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1357:6-1365:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7476_v,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7477_mx) { return mosek::fusion::p_Expr::mul(_7476_v,_7477_mx); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7476_v,monty::rc_ptr< ::mosek::fusion::Matrix > _7477_mx)
{
  int32_t _7478_mdimi = _7477_mx->numRows();
  int32_t _7479_mdimj = _7477_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7480_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7477_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__7480_mcof(_7480_mcof ? _7480_mcof->raw() : nullptr,_7480_mcof ? _7480_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7481_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7477_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7481_msubj(_7481_msubj ? _7481_msubj->raw() : nullptr,_7481_msubj ? _7481_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7482_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7477_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7482_msubi(_7482_msubi ? _7482_msubi->raw() : nullptr,_7482_msubi ? _7482_msubi->size(0) : 0);
  _7477_mx->getDataAsTriplets(_7482_msubi,_7481_msubj,_7480_mcof);
  return ::mosek::fusion::p_Expr::mul(false,_7478_mdimi,_7479_mdimj,_7482_msubi,_7481_msubj,_7480_mcof,_7476_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1347:6-1356:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7483_mx,
    monty::rc_ptr< ::mosek::fusion::Variable > _7484_v) { return mosek::fusion::p_Expr::mul(_7483_mx,_7484_v); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7483_mx,monty::rc_ptr< ::mosek::fusion::Variable > _7484_v)
{
  int32_t _7485_mdimi = _7483_mx->numRows();
  int32_t _7486_mdimj = _7483_mx->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7487_mcof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7483_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__7487_mcof(_7487_mcof ? _7487_mcof->raw() : nullptr,_7487_mcof ? _7487_mcof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7488_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7483_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7488_msubj(_7488_msubj ? _7488_msubj->raw() : nullptr,_7488_msubj ? _7488_msubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7489_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7483_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__7489_msubi(_7489_msubi ? _7489_msubi->raw() : nullptr,_7489_msubi ? _7489_msubi->size(0) : 0);
  _7483_mx->getDataAsTriplets(_7489_msubi,_7488_msubj,_7487_mcof);
  return ::mosek::fusion::p_Expr::mul(true,_7485_mdimi,_7486_mdimj,_7489_msubi,_7488_msubj,_7487_mcof,_7484_v);
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1333:6-1344:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7490_left,int32_t _7491_mdimi,int32_t _7492_mdimj,std::shared_ptr< monty::ndarray< int32_t,1 > > _7493_msubi,std::shared_ptr< monty::ndarray< int32_t,1 > > _7494_msubj,std::shared_ptr< monty::ndarray< double,1 > > _7495_mcof,monty::rc_ptr< ::mosek::fusion::Variable > _7496_v)
{
  _checked_ptr_1<int32_t> _ptr__7493_msubi(_7493_msubi ? _7493_msubi->raw() : nullptr, _7493_msubi ? _7493_msubi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7494_msubj(_7494_msubj ? _7494_msubj->raw() : nullptr, _7494_msubj ? _7494_msubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7495_mcof(_7495_mcof ? _7495_mcof->raw() : nullptr, _7495_mcof ? _7495_mcof->size(0) : 0);
  if ((_7496_v->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_7491_mdimi,_7492_mdimj,_7493_msubi,_7494_msubj,_7495_mcof,_7496_v)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7496_v->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7497_vshape = _7496_v->getShape();
      _checked_ptr_1<int32_t> _ptr__7497_vshape(_7497_vshape ? _7497_vshape->raw() : nullptr,_7497_vshape ? _7497_vshape->size(0) : 0);
      int32_t _12506_;
      bool _12507_ = _7490_left;
      if (_12507_)
      {
        _12506_ = _7491_mdimi;
      }
      else
      {
        _12506_ = _7492_mdimj;
      }
      std::shared_ptr< monty::ndarray< int32_t,1 > > _12508_;
      bool _12509_ = _7490_left;
      if (_12509_)
      {
        _12508_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7497_vshape[(int)0]),(int32_t)((int)1)});
      }
      else
      {
        _12508_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7497_vshape[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_12506_)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7490_left,_7491_mdimi,_7492_mdimj,_7493_msubi,_7494_msubj,_7495_mcof,::mosek::fusion::p_Var::reshape(_7496_v,_12508_))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7490_left,_7491_mdimi,_7492_mdimj,_7493_msubi,_7494_msubj,_7495_mcof,_7496_v)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1318:6-1331:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7498_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7499_p) { return mosek::fusion::p_Expr::mul(_7498_expr,_7499_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7498_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7499_p)
{
  if (((_7499_p->getND() == (int)2) && (_7498_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7498_expr,_7499_p)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7499_p->getND() == (int)1) && (_7498_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7498_expr->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7498_expr,_7499_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7499_p->getDim((int)0)),(int32_t)((int)1)})))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7499_p->getND() == (int)2) && (_7498_expr->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7499_p->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight((::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7498_expr->getDim((int)0))}),_7498_expr)).as<::mosek::fusion::Expression>(),_7499_p)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7499_p->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7499_p,_7498_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7498_expr->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7499_p,_7498_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.mul
// Method mosek.fusion.Expr.mul @ src/fusion/Expr.mbi:1304:6-1317:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7500_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7501_expr) { return mosek::fusion::p_Expr::mul(_7500_p,_7501_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Parameter > _7500_p,monty::rc_ptr< ::mosek::fusion::Expression > _7501_expr)
{
  if (((_7500_p->getND() == (int)2) && (_7501_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7500_p,_7501_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7500_p->getND() == (int)1) && (_7501_expr->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7501_expr->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7500_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7500_p->getDim((int)0))})),_7501_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7500_p->getND() == (int)2) && (_7501_expr->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7500_p->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7500_p,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_7501_expr->getDim((int)0)),(int32_t)((int)1)}),_7501_expr)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7500_p->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7500_p,_7501_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7501_expr->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7500_p,_7501_expr)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
// End mosek.fusion.Expr.mul

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1289:6-1302:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7502_e,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7503_m) { return mosek::fusion::p_Expr::dot(_7502_e,_7503_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7502_e,monty::rc_ptr< ::mosek::fusion::Matrix > _7503_m)
{
  int64_t _7504_nnz = _7503_m->numNonzeros();
  if ((!_7503_m->isSparse()))
  {
    {
      std::vector<int64_t> _12510_;
      for (int64_t _7505_i = (int)0, _12511_ = _7504_nnz; _7505_i < _12511_ ; ++_7505_i)
      {
        _12510_.push_back(_7505_i);
      }
      auto _12512_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12510_.size()),_12510_.begin(),_12510_.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7502_e,_12512_,_7503_m->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7506_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7504_nnz)));
      _checked_ptr_1<int32_t> _ptr__7506_subi(_7506_subi ? _7506_subi->raw() : nullptr,_7506_subi ? _7506_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7507_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7504_nnz)));
      _checked_ptr_1<int32_t> _ptr__7507_subj(_7507_subj ? _7507_subj->raw() : nullptr,_7507_subj ? _7507_subj->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7508_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7504_nnz)));
      _checked_ptr_1<double> _ptr__7508_cof(_7508_cof ? _7508_cof->raw() : nullptr,_7508_cof ? _7508_cof->size(0) : 0);
      int32_t _7509_dimj = _7503_m->numColumns();
      _7503_m->getDataAsTriplets(_7506_subi,_7507_subj,_7508_cof);
      std::vector<int64_t> _12513_;
      for (int32_t _7510_i = (int)0, _12514_ = (int)((_7506_subi)->size(0)); _7510_i < _12514_ ; ++_7510_i)
      {
        _12513_.push_back(safe_add( safe_mul( _ptr__7506_subi[_7510_i],_7509_dimj ),_ptr__7507_subj[_7510_i] ));
      }
      auto _12515_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12513_.size()),_12513_.begin(),_12513_.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7502_e,_12515_,_7508_cof)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1288:6-217
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7511_e,
    std::shared_ptr< monty::ndarray< double,2 > > _7512_c2) { return mosek::fusion::p_Expr::dot(_7511_e,_7512_c2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7511_e,std::shared_ptr< monty::ndarray< double,2 > > _7512_c2)
{
  std::vector<int64_t> _12516_;
  for (int32_t _7513_i = (int)0, _12517_ = safe_mul( (int)((_7512_c2)->size(0)),(int)((_7512_c2)->size(1)) ); _7513_i < _12517_ ; ++_7513_i)
  {
    _12516_.push_back(_7513_i);
  }
  auto _12518_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12516_.size()),_12516_.begin(),_12516_.end()));
  std::vector<double> _12519_;
  for (int32_t _7514_i = (int)0, _12520_ = (int)((_7512_c2)->size(0)); _7514_i < _12520_ ; ++_7514_i)
  {
    for (int32_t _7515_j = (int)0, _12521_ = (int)((_7512_c2)->size(1)); _7515_j < _12521_ ; ++_7515_j)
    {
      _12519_.push_back(((*_7512_c2)(_7514_i,_7515_j)));
    }
  }
  auto _12522_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12519_.size()),_12519_.begin(),_12519_.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7511_e,_12518_,_12522_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1287:6-126
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7516_e,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7517_nda) { return mosek::fusion::p_Expr::dot(_7516_e,_7517_nda); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7516_e,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7517_nda)
{
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7516_e,mosek::fusion::p_NDSparseArray::_get_impl(_7517_nda)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7517_nda)->cof)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1271:6-1286:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7518_e,
    std::shared_ptr< monty::ndarray< double,1 > > _7519_c1) { return mosek::fusion::p_Expr::dot(_7518_e,_7519_c1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7518_e,std::shared_ptr< monty::ndarray< double,1 > > _7519_c1)
{
  _checked_ptr_1<double> _ptr__7519_c1(_7519_c1 ? _7519_c1->raw() : nullptr, _7519_c1 ? _7519_c1->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7520_eshape = _7518_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7520_eshape(_7520_eshape ? _7520_eshape->raw() : nullptr,_7520_eshape ? _7520_eshape->size(0) : 0);
  if (((_7518_e->getSize() == (int)((_7519_c1)->size(0))) && ((int)((_7520_eshape)->size(0)) > (int)1)))
  {
    {
      int32_t _7521_numnotone = (int)0;
      int32_t _12523_ = (int)0;
      int32_t _12524_ = (int)((_7520_eshape)->size(0));
      for (int32_t _7522_i = _12523_; _7522_i < _12524_; ++_7522_i)
      {
        {
          if ((_ptr__7520_eshape[_7522_i] > (int)1))
          {
            {
              ++ _7521_numnotone;
            }
          }
          {}
        }
      }
      if ((_7521_numnotone > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7523_newshape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int32_t)_7518_e->getSize())});
          _checked_ptr_1<int32_t> _ptr__7523_newshape(_7523_newshape ? _7523_newshape->raw() : nullptr,_7523_newshape ? _7523_newshape->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7523_newshape,_7518_e)).as<::mosek::fusion::Expression>(),_7519_c1)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7518_e,_7519_c1)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1269:6-99
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7524_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7525_e) { return mosek::fusion::p_Expr::dot(_7524_m,_7525_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _7524_m,monty::rc_ptr< ::mosek::fusion::Expression > _7525_e)
{
  return ::mosek::fusion::p_Expr::dot(_7525_e,_7524_m);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1268:6-101
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7526_nda,
    monty::rc_ptr< ::mosek::fusion::Expression > _7527_e) { return mosek::fusion::p_Expr::dot(_7526_nda,_7527_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7526_nda,monty::rc_ptr< ::mosek::fusion::Expression > _7527_e)
{
  return ::mosek::fusion::p_Expr::dot(_7527_e,_7526_nda);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1267:6-100
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( std::shared_ptr< monty::ndarray< double,2 > > _7528_c2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7529_e) { return mosek::fusion::p_Expr::dot(_7528_c2,_7529_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _7528_c2,monty::rc_ptr< ::mosek::fusion::Expression > _7529_e)
{
  return ::mosek::fusion::p_Expr::dot(_7529_e,_7528_c2);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1266:6-100
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( std::shared_ptr< monty::ndarray< double,1 > > _7530_c1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7531_e) { return mosek::fusion::p_Expr::dot(_7530_c1,_7531_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _7530_c1,monty::rc_ptr< ::mosek::fusion::Expression > _7531_e)
{
  _checked_ptr_1<double> _ptr__7530_c1(_7530_c1 ? _7530_c1->raw() : nullptr, _7530_c1 ? _7530_c1->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_7531_e,_7530_c1);
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1264:6-103
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7532_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7533_p) { return mosek::fusion::p_Expr::dot(_7532_e,_7533_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7532_e,monty::rc_ptr< ::mosek::fusion::Parameter > _7533_p)
{
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7533_p,_7532_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.dot
// Method mosek.fusion.Expr.dot @ src/fusion/Expr.mbi:1263:6-103
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7534_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7535_e) { return mosek::fusion::p_Expr::dot(_7534_p,_7535_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Parameter > _7534_p,monty::rc_ptr< ::mosek::fusion::Expression > _7535_e)
{
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7534_p,_7535_e)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.dot

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1249:6-1261:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7536_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7537_e) { return mosek::fusion::p_Expr::outer(_7536_p,_7537_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Parameter > _7536_p,monty::rc_ptr< ::mosek::fusion::Expression > _7537_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7538_vshape = _7537_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7538_vshape(_7538_vshape ? _7538_vshape->raw() : nullptr,_7538_vshape ? _7538_vshape->size(0) : 0);
  if ((!(((int)((_7538_vshape)->size(0)) == (int)1) || (((int)((_7538_vshape)->size(0)) == (int)2) && (_ptr__7538_vshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7539_pshape = _7536_p->getShape();
  _checked_ptr_1<int32_t> _ptr__7539_pshape(_7539_pshape ? _7539_pshape->raw() : nullptr,_7539_pshape ? _7539_pshape->size(0) : 0);
  if ((!((_7536_p->getND() == (int)1) || ((_7536_p->getND() == (int)2) && (_ptr__7539_pshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7536_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_ptr__7539_pshape[(int)0]),(int32_t)((int)1)})),::mosek::fusion::p_Expr::reshape(_7537_e,(int)1,_ptr__7538_vshape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1235:6-1247:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7540_e,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7541_p) { return mosek::fusion::p_Expr::outer(_7540_e,_7541_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7540_e,monty::rc_ptr< ::mosek::fusion::Parameter > _7541_p)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7542_shape = _7540_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7542_shape(_7542_shape ? _7542_shape->raw() : nullptr,_7542_shape ? _7542_shape->size(0) : 0);
  if ((!((_7540_e->getND() == (int)1) || ((_7540_e->getND() == (int)2) && (_ptr__7542_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7543_pshape = _7541_p->getShape();
  _checked_ptr_1<int32_t> _ptr__7543_pshape(_7543_pshape ? _7543_pshape->raw() : nullptr,_7543_pshape ? _7543_pshape->size(0) : 0);
  if ((!((_7541_p->getND() == (int)1) || ((_7541_p->getND() == (int)2) && (_ptr__7543_pshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Parameter argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7540_e,_ptr__7542_shape[(int)0],(int)1),_7541_p->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_ptr__7543_pshape[(int)0])})));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1223:6-1233:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7544_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7545_e) { return mosek::fusion::p_Expr::outer(_7544_m,_7545_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _7544_m,monty::rc_ptr< ::mosek::fusion::Expression > _7545_e)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7546_vshape = _7545_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7546_vshape(_7546_vshape ? _7546_vshape->raw() : nullptr,_7546_vshape ? _7546_vshape->size(0) : 0);
  if ((!(((int)((_7546_vshape)->size(0)) == (int)1) || (((int)((_7546_vshape)->size(0)) == (int)2) && (_ptr__7546_vshape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7544_m)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(_7544_m,::mosek::fusion::p_Expr::reshape(_7545_e,(int)1,_ptr__7546_vshape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1211:6-1221:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7547_e,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7548_m) { return mosek::fusion::p_Expr::outer(_7547_e,_7548_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7547_e,monty::rc_ptr< ::mosek::fusion::Matrix > _7548_m)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7549_shape = _7547_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7549_shape(_7549_shape ? _7549_shape->raw() : nullptr,_7549_shape ? _7549_shape->size(0) : 0);
  if ((!((_7547_e->getND() == (int)1) || ((_7547_e->getND() == (int)2) && (_ptr__7549_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7548_m)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7547_e,_ptr__7549_shape[(int)0],(int)1),_7548_m->__mosek_2fusion_2Matrix__transpose());
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1201:6-1209:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( std::shared_ptr< monty::ndarray< double,1 > > _7550_a,
    monty::rc_ptr< ::mosek::fusion::Expression > _7551_e) { return mosek::fusion::p_Expr::outer(_7550_a,_7551_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _7550_a,monty::rc_ptr< ::mosek::fusion::Expression > _7551_e)
{
  _checked_ptr_1<double> _ptr__7550_a(_7550_a ? _7550_a->raw() : nullptr, _7550_a ? _7550_a->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7552_shape = _7551_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7552_shape(_7552_shape ? _7552_shape->raw() : nullptr,_7552_shape ? _7552_shape->size(0) : 0);
  if ((!((_7551_e->getND() == (int)1) || ((_7551_e->getND() == (int)2) && (_ptr__7552_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Matrix::dense((int)((_7550_a)->size(0)),(int)1,_7550_a),::mosek::fusion::p_Expr::reshape(_7551_e,(int)1,_ptr__7552_shape[(int)0]));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer
// Method mosek.fusion.Expr.outer @ src/fusion/Expr.mbi:1191:6-1199:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7553_e,
    std::shared_ptr< monty::ndarray< double,1 > > _7554_a) { return mosek::fusion::p_Expr::outer(_7553_e,_7554_a); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Expression > _7553_e,std::shared_ptr< monty::ndarray< double,1 > > _7554_a)
{
  _checked_ptr_1<double> _ptr__7554_a(_7554_a ? _7554_a->raw() : nullptr, _7554_a ? _7554_a->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7555_shape = _7553_e->getShape();
  _checked_ptr_1<int32_t> _ptr__7555_shape(_7555_shape ? _7555_shape->raw() : nullptr,_7555_shape ? _7555_shape->size(0) : 0);
  if ((!((_7553_e->getND() == (int)1) || ((_7553_e->getND() == (int)2) && (_ptr__7555_shape[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::mul(::mosek::fusion::p_Expr::reshape(_7553_e,_ptr__7555_shape[(int)0],(int)1),::mosek::fusion::p_Matrix::dense((int)1,(int)((_7554_a)->size(0)),_7554_a));
}
// End mosek.fusion.Expr.outer

// Begin mosek.fusion.Expr.outer_
// Method mosek.fusion.Expr.outer_ @ src/fusion/Expr.mbi:1094:6-1189:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int32_t _7556_edim,std::shared_ptr< monty::ndarray< int64_t,1 > > _7557_eptrb,std::shared_ptr< monty::ndarray< int64_t,1 > > _7558_esubj,std::shared_ptr< monty::ndarray< double,1 > > _7559_ecof,std::shared_ptr< monty::ndarray< double,1 > > _7560_ebfix,std::shared_ptr< monty::ndarray< int64_t,1 > > _7561_einst,std::shared_ptr< monty::ndarray< double,1 > > _7562_a,std::shared_ptr< monty::ndarray< int32_t,1 > > _7563_sub,int32_t _7564_dim,bool _7565_transpose)
{
  _checked_ptr_1<int64_t> _ptr__7557_eptrb(_7557_eptrb ? _7557_eptrb->raw() : nullptr, _7557_eptrb ? _7557_eptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7558_esubj(_7558_esubj ? _7558_esubj->raw() : nullptr, _7558_esubj ? _7558_esubj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7559_ecof(_7559_ecof ? _7559_ecof->raw() : nullptr, _7559_ecof ? _7559_ecof->size(0) : 0);
  _checked_ptr_1<double> _ptr__7560_ebfix(_7560_ebfix ? _7560_ebfix->raw() : nullptr, _7560_ebfix ? _7560_ebfix->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7561_einst(_7561_einst ? _7561_einst->raw() : nullptr, _7561_einst ? _7561_einst->size(0) : 0);
  _checked_ptr_1<double> _ptr__7562_a(_7562_a ? _7562_a->raw() : nullptr, _7562_a ? _7562_a->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7563_sub(_7563_sub ? _7563_sub->raw() : nullptr, _7563_sub ? _7563_sub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12525_;
  bool _12526_ = (!_7565_transpose);
  if (_12526_)
  {
    _12525_ = ::mosek::fusion::p_Set::make(_7556_edim,_7564_dim);
  }
  else
  {
    _12525_ = ::mosek::fusion::p_Set::make(_7564_dim,_7556_edim);
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7566_shape = _12525_;
  _checked_ptr_1<int32_t> _ptr__7566_shape(_7566_shape ? _7566_shape->raw() : nullptr,_7566_shape ? _7566_shape->size(0) : 0);
  int32_t _7567_nnzelm = safe_mul( (int)((_7562_a)->size(0)),(int)((_7561_einst)->size(0)) );
  int32_t _7568_nnz = safe_mul( (int)((_7562_a)->size(0)),(int)((_7558_esubj)->size(0)) );
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7569_inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7567_nnzelm)));
  _checked_ptr_1<int64_t> _ptr__7569_inst(_7569_inst ? _7569_inst->raw() : nullptr,_7569_inst ? _7569_inst->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12527_;
  bool _12528_ = (NULL != _7560_ebfix.get());
  if (_12528_)
  {
    _12527_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7567_nnzelm)));
  }
  else
  {
    _12527_ = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7570_bfix = _12527_;
  _checked_ptr_1<double> _ptr__7570_bfix(_7570_bfix ? _7570_bfix->raw() : nullptr,_7570_bfix ? _7570_bfix->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7571_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7568_nnz)));
  _checked_ptr_1<double> _ptr__7571_cof(_7571_cof ? _7571_cof->raw() : nullptr,_7571_cof ? _7571_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7572_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7568_nnz)));
  _checked_ptr_1<int64_t> _ptr__7572_subj(_7572_subj ? _7572_subj->raw() : nullptr,_7572_subj ? _7572_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7573_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _7567_nnzelm,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7573_ptrb(_7573_ptrb ? _7573_ptrb->raw() : nullptr,_7573_ptrb ? _7573_ptrb->size(0) : 0);
  int32_t _7574_ennz = (int32_t)_ptr__7573_ptrb[((int)((_7573_ptrb)->size(0)) - (int)1)];
  if ((!_7565_transpose))
  {
    {
      int64_t _7575_k = (int64_t)0;
      int64_t _7576_ptr = (int64_t)0;
      int32_t _12529_ = (int)0;
      int32_t _12530_ = (int)((_7561_einst)->size(0));
      for (int32_t _7577_i = _12529_; _7577_i < _12530_; ++_7577_i)
      {
        {
          int64_t _7578_num = (_ptr__7557_eptrb[safe_add( _7577_i,(int)1 )] - _ptr__7557_eptrb[_7577_i]);
          int32_t _12531_ = (int)0;
          int32_t _12532_ = (int)((_7562_a)->size(0));
          for (int32_t _7579_j = _12531_; _7579_j < _12532_; ++_7579_j)
          {
            {
              _ptr__7561_einst[_7575_k] = safe_add( safe_mul( _ptr__7561_einst[_7577_i],_7564_dim ),_ptr__7563_sub[_7579_j] );
              _ptr__7573_ptrb[safe_add( _7575_k,(int)1 )] = safe_add( _ptr__7573_ptrb[_7575_k],_7578_num );
              ++ _7575_k;
              int64_t _12533_ = _ptr__7557_eptrb[_7577_i];
              int64_t _12534_ = _ptr__7557_eptrb[safe_add( _7577_i,(int)1 )];
              for (int64_t _7580_l = _12533_; _7580_l < _12534_; ++_7580_l)
              {
                {
                  _ptr__7572_subj[_7576_ptr] = _ptr__7558_esubj[_7580_l];
                  _ptr__7571_cof[_7576_ptr] = (_ptr__7559_ecof[_7580_l] * _ptr__7562_a[_7579_j]);
                  ++ _7576_ptr;
                }
              }
            }
          }
        }
      }
      if ((NULL != _7570_bfix.get()))
      {
        {
          int32_t _7581_k = (int)0;
          int32_t _12535_ = (int)0;
          int32_t _12536_ = (int)((_7561_einst)->size(0));
          for (int32_t _7582_i = _12535_; _7582_i < _12536_; ++_7582_i)
          {
            {
              int32_t _12537_ = (int)0;
              int32_t _12538_ = (int)((_7562_a)->size(0));
              for (int32_t _7583_j = _12537_; _7583_j < _12538_; ++_7583_j)
              {
                {
                  _ptr__7570_bfix[_7581_k] = (_ptr__7562_a[_7583_j] * _ptr__7560_ebfix[_7582_i]);
                  ++ _7581_k;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int64_t _7584_k = (int64_t)0;
      int64_t _7585_ptr = (int64_t)0;
      int32_t _12539_ = (int)0;
      int32_t _12540_ = (int)((_7562_a)->size(0));
      for (int32_t _7586_j = _12539_; _7586_j < _12540_; ++_7586_j)
      {
        {
          double _7587_c = _ptr__7562_a[_7586_j];
          ::mosek::fusion::Utils::Tools::arraycopy(_7558_esubj,(int64_t)((int)0),_7572_subj,_7585_ptr,(int64_t)(_7574_ennz));
          int32_t _12541_ = (int)0;
          int32_t _12542_ = _7574_ennz;
          for (int32_t _7588_l = _12541_; _7588_l < _12542_; ++_7588_l)
          {
            {
              _ptr__7571_cof[safe_add( _7585_ptr,_7588_l )] = (_ptr__7559_ecof[_7588_l] * _ptr__7562_a[_7586_j]);
            }
          }
          int32_t _12543_ = (int)0;
          int32_t _12544_ = (int)((_7561_einst)->size(0));
          for (int32_t _7589_i = _12543_; _7589_i < _12544_; ++_7589_i)
          {
            {
              int64_t _7590_num = (_ptr__7557_eptrb[safe_add( _7589_i,(int)1 )] - _ptr__7557_eptrb[_7589_i]);
              _ptr__7561_einst[_7584_k] = safe_add( safe_mul( _ptr__7561_einst[_7589_i],_7564_dim ),_ptr__7563_sub[_7586_j] );
              _ptr__7573_ptrb[safe_add( _7584_k,(int)1 )] = safe_add( _ptr__7573_ptrb[_7584_k],_7590_num );
              ++ _7584_k;
            }
          }
          _7585_ptr += _7574_ennz;
        }
      }
      if ((NULL != _7570_bfix.get()))
      {
        {
          int32_t _7591_k = (int)0;
          int32_t _12545_ = (int)0;
          int32_t _12546_ = (int)((_7562_a)->size(0));
          for (int32_t _7592_j = _12545_; _7592_j < _12546_; ++_7592_j)
          {
            {
              double _7593_c = _ptr__7562_a[_7592_j];
              int32_t _12547_ = (int)0;
              int32_t _12548_ = (int)((_7561_einst)->size(0));
              for (int32_t _7594_i = _12547_; _7594_i < _12548_; ++_7594_i)
              {
                {
                  _ptr__7570_bfix[_7591_k] = (_ptr__7560_ebfix[_7594_i] * _7593_c);
                  ++ _7591_k;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7573_ptrb,_7572_subj,_7571_cof,_7570_bfix,_7566_shape,_7569_inst)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.outer_

// Begin mosek.fusion.Expr.outer_
// Method mosek.fusion.Expr.outer_ @ src/fusion/Expr.mbi:1015:6-1081:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _7595_v,int32_t _7596_vdim,std::shared_ptr< monty::ndarray< double,1 > > _7597_a,std::shared_ptr< monty::ndarray< int32_t,1 > > _7598_sub,int32_t _7599_dim,bool _7600_transpose)
{
  _checked_ptr_1<double> _ptr__7597_a(_7597_a ? _7597_a->raw() : nullptr, _7597_a ? _7597_a->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7598_sub(_7598_sub ? _7598_sub->raw() : nullptr, _7598_sub ? _7598_sub->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12549_;
  bool _12550_ = (!_7600_transpose);
  if (_12550_)
  {
    _12549_ = ::mosek::fusion::p_Set::make(_7596_vdim,_7599_dim);
  }
  else
  {
    _12549_ = ::mosek::fusion::p_Set::make(_7599_dim,_7596_vdim);
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7601_shape = _12549_;
  _checked_ptr_1<int32_t> _ptr__7601_shape(_7601_shape ? _7601_shape->raw() : nullptr,_7601_shape ? _7601_shape->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _12551_;
  bool _12552_ = (_7599_dim == (int)((_7597_a)->size(0)));
  if (_12552_)
  {
    _12551_ = nullptr;
  }
  else
  {
    _12551_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( (int)((_7597_a)->size(0)),_7596_vdim ))));
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7602_inst = _12551_;
  _checked_ptr_1<int64_t> _ptr__7602_inst(_7602_inst ? _7602_inst->raw() : nullptr,_7602_inst ? _7602_inst->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7603_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7597_a)->size(0)),_7596_vdim ))));
  _checked_ptr_1<double> _ptr__7603_bfix(_7603_bfix ? _7603_bfix->raw() : nullptr,_7603_bfix ? _7603_bfix->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7604_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7597_a)->size(0)),_7596_vdim ))));
  _checked_ptr_1<double> _ptr__7604_cof(_7604_cof ? _7604_cof->raw() : nullptr,_7604_cof ? _7604_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7605_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_mul( (int)((_7597_a)->size(0)),_7596_vdim ))));
  _checked_ptr_1<int64_t> _ptr__7605_subj(_7605_subj ? _7605_subj->raw() : nullptr,_7605_subj ? _7605_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7606_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( safe_mul( (int)((_7597_a)->size(0)),_7596_vdim ),(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7606_ptrb(_7606_ptrb ? _7606_ptrb->raw() : nullptr,_7606_ptrb ? _7606_ptrb->size(0) : 0);
  if ((_7599_dim == (int)((_7597_a)->size(0))))
  {
    {
      int64_t _7607_k = (int64_t)0;
      if ((!_7600_transpose))
      {
        {
          int32_t _12553_ = (int)0;
          int32_t _12554_ = _7596_vdim;
          for (int32_t _7608_j = _12553_; _7608_j < _12554_; ++_7608_j)
          {
            {
              int32_t _12555_ = (int)0;
              int32_t _12556_ = _7599_dim;
              for (int32_t _7609_i = _12555_; _7609_i < _12556_; ++_7609_i)
              {
                {
                  _ptr__7606_ptrb[safe_add( _7607_k,(int)1 )] = safe_add( _7607_k,(int)1 );
                  _ptr__7605_subj[_7607_k] = (int64_t)_7608_j;
                  _ptr__7604_cof[_7607_k] = _ptr__7597_a[_7609_i];
                  ++ _7607_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _12557_ = (int)0;
          int32_t _12558_ = _7599_dim;
          for (int32_t _7610_i = _12557_; _7610_i < _12558_; ++_7610_i)
          {
            {
              int32_t _12559_ = (int)0;
              int32_t _12560_ = _7596_vdim;
              for (int32_t _7611_j = _12559_; _7611_j < _12560_; ++_7611_j)
              {
                {
                  _ptr__7606_ptrb[safe_add( _7607_k,(int)1 )] = safe_add( _7607_k,(int)1 );
                  _ptr__7605_subj[_7607_k] = (int64_t)_7611_j;
                  _ptr__7604_cof[_7607_k] = _ptr__7597_a[_7610_i];
                  ++ _7607_k;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int64_t _7612_k = (int64_t)0;
      if ((!_7600_transpose))
      {
        {
          int32_t _12561_ = (int)0;
          int32_t _12562_ = _7596_vdim;
          for (int32_t _7613_j = _12561_; _7613_j < _12562_; ++_7613_j)
          {
            {
              int32_t _12563_ = (int)0;
              int32_t _12564_ = (int)((_7597_a)->size(0));
              for (int32_t _7614_i = _12563_; _7614_i < _12564_; ++_7614_i)
              {
                {
                  _ptr__7606_ptrb[safe_add( _7612_k,(int)1 )] = safe_add( _7612_k,(int)1 );
                  _ptr__7605_subj[_7612_k] = (int64_t)_7613_j;
                  _ptr__7604_cof[_7612_k] = _ptr__7597_a[_7614_i];
                  _ptr__7602_inst[_7612_k] = safe_add( safe_mul( _7613_j,_7599_dim ),_ptr__7598_sub[_7614_i] );
                  ++ _7612_k;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int32_t _12565_ = (int)0;
          int32_t _12566_ = (int)((_7597_a)->size(0));
          for (int32_t _7615_i = _12565_; _7615_i < _12566_; ++_7615_i)
          {
            {
              int32_t _12567_ = (int)0;
              int32_t _12568_ = _7596_vdim;
              for (int32_t _7616_j = _12567_; _7616_j < _12568_; ++_7616_j)
              {
                {
                  _ptr__7606_ptrb[safe_add( _7612_k,(int)1 )] = safe_add( _7612_k,(int)1 );
                  _ptr__7605_subj[_7612_k] = (int64_t)_7616_j;
                  _ptr__7604_cof[_7612_k] = _ptr__7597_a[_7615_i];
                  _ptr__7602_inst[_7612_k] = safe_add( safe_mul( _ptr__7598_sub[_7615_i],_7596_vdim ),_7616_j );
                  ++ _7612_k;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7606_ptrb,_7605_subj,_7604_cof,_7603_bfix,_7601_shape,_7602_inst)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.outer_

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:994:6-1008:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7617_exprs) { return mosek::fusion::p_Expr::stack(_7617_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7617_exprs)
{
  if ((NULL == _7617_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12569_ = (int)0;
  int32_t _12570_ = (int)((_7617_exprs)->size(0));
  for (int32_t _7618_i = _12569_; _7618_i < _12570_; ++_7618_i)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7619_es = ((*_7617_exprs)(_7618_i));
      if ((NULL == _7619_es.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int32_t _12571_ = (int)0;
      int32_t _12572_ = (int)((_7619_es)->size(0));
      for (int32_t _7620_j = _12571_; _7620_j < _12572_; ++_7620_j)
      {
        {
          if ((NULL == ((*_7619_es)(_7620_j)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12573_;
  for (int32_t _7622_i = (int)0, _12574_ = (int)((_7617_exprs)->size(0)); _7622_i < _12574_ ; ++_7622_i)
  {
    _12573_.push_back(::mosek::fusion::p_Expr::stack_(((*_7617_exprs)(_7622_i)),(int)1));
  }
  auto _12575_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12573_.size()),_12573_.begin(),_12573_.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7621_tmp = _12575_;
  return ::mosek::fusion::p_Expr::stack_(_7621_tmp,(int)0);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:984:6-160
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7623_a1,
    double _7624_a2,
    double _7625_a3) { return mosek::fusion::p_Expr::vstack(_7623_a1,_7624_a2,_7625_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7623_a1,double _7624_a2,double _7625_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7623_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7624_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7625_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:983:6-149
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7626_a1,
    double _7627_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7628_e3) { return mosek::fusion::p_Expr::vstack(_7626_a1,_7627_a2,_7628_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7626_a1,double _7627_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7628_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7626_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7627_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7628_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:982:6-149
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7629_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7630_e2,
    double _7631_a3) { return mosek::fusion::p_Expr::vstack(_7629_a1,_7630_e2,_7631_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7629_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7630_e2,double _7631_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7629_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7630_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7631_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:981:6-138
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7632_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7633_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7634_e3) { return mosek::fusion::p_Expr::vstack(_7632_a1,_7633_e2,_7634_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7632_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7633_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7634_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7632_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7633_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7634_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:979:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7635_e1,
    double _7636_a2,
    double _7637_a3) { return mosek::fusion::p_Expr::vstack(_7635_e1,_7636_a2,_7637_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7635_e1,double _7636_a2,double _7637_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7635_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7636_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7637_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:978:6-142
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7638_e1,
    double _7639_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7640_e3) { return mosek::fusion::p_Expr::vstack(_7638_e1,_7639_a2,_7640_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7638_e1,double _7639_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7640_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7638_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7639_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7640_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:977:6-142
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7641_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7642_e2,
    double _7643_a3) { return mosek::fusion::p_Expr::vstack(_7641_e1,_7642_e2,_7643_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7641_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7642_e2,double _7643_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7641_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7642_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7643_a3).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:976:6-131
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7644_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7645_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7646_e3) { return mosek::fusion::p_Expr::vstack(_7644_e1,_7645_e2,_7646_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7644_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7645_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7646_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7644_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7645_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7646_e3.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:972:6-120
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( double _7647_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7648_e2) { return mosek::fusion::p_Expr::vstack(_7647_a1,_7648_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7647_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7648_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7647_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7648_e2.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:971:6-124
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7649_e1,
    double _7650_a2) { return mosek::fusion::p_Expr::vstack(_7649_e1,_7650_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7649_e1,double _7650_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7649_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7650_a2).get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:970:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7651_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7652_e2) { return mosek::fusion::p_Expr::vstack(_7651_e1,_7652_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7651_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7652_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7651_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7652_e2.get())}),(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.vstack
// Method mosek.fusion.Expr.vstack @ src/fusion/Expr.mbi:959:6-966:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7653_exprs) { return mosek::fusion::p_Expr::vstack(_7653_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7653_exprs)
{
  if ((NULL == _7653_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12576_ = (int)0;
  int32_t _12577_ = (int)((_7653_exprs)->size(0));
  for (int32_t _7654_i = _12576_; _7654_i < _12577_; ++_7654_i)
  {
    {
      if ((NULL == ((*_7653_exprs)(_7654_i)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7653_exprs,(int)0);
}
// End mosek.fusion.Expr.vstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:951:6-250
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7655_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7656_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7657_e3) { return mosek::fusion::p_Expr::hstack(_7655_e1,_7656_e2,_7657_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7655_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7656_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7657_e3)
{
  if (((NULL == _7655_e1.get()) || ((NULL == _7656_e2.get()) || (NULL == _7657_e3.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7655_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7656_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7657_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:920:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7658_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7659_e2,
    double _7660_a3) { return mosek::fusion::p_Expr::hstack(_7658_e1,_7659_e2,_7660_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7658_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7659_e2,double _7660_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7658_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7659_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7660_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:919:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7661_e1,
    double _7662_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7663_e3) { return mosek::fusion::p_Expr::hstack(_7661_e1,_7662_a2,_7663_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7661_e1,double _7662_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7663_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7661_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7662_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7663_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:918:6-153
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7664_e1,
    double _7665_a2,
    double _7666_a3) { return mosek::fusion::p_Expr::hstack(_7664_e1,_7665_a2,_7666_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7664_e1,double _7665_a2,double _7666_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7664_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7665_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7666_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:916:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7667_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7668_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7669_e3) { return mosek::fusion::p_Expr::hstack(_7667_a1,_7668_e2,_7669_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7667_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7668_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7669_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7667_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7668_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7669_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:915:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7670_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7671_e2,
    double _7672_a3) { return mosek::fusion::p_Expr::hstack(_7670_a1,_7671_e2,_7672_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7670_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7671_e2,double _7672_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7670_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7671_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7672_a3).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:914:6-164
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7673_a1,
    double _7674_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7675_e3) { return mosek::fusion::p_Expr::hstack(_7673_a1,_7674_a2,_7675_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7673_a1,double _7674_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7675_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7673_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7674_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7675_e3.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:912:6-122
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( double _7676_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7677_e2) { return mosek::fusion::p_Expr::hstack(_7676_a1,_7677_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7676_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7677_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7676_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7677_e2.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:911:6-124
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7678_e1,
    double _7679_a2) { return mosek::fusion::p_Expr::hstack(_7678_e1,_7679_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7678_e1,double _7679_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7678_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7679_a2).get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:910:6-113
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7680_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7681_e2) { return mosek::fusion::p_Expr::hstack(_7680_e1,_7681_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7680_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7681_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7680_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7681_e2.get())}),(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.hstack
// Method mosek.fusion.Expr.hstack @ src/fusion/Expr.mbi:900:6-908:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7682_exprs) { return mosek::fusion::p_Expr::hstack(_7682_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7682_exprs)
{
  if ((NULL == _7682_exprs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int32_t _12578_ = (int)0;
  int32_t _12579_ = (int)((_7682_exprs)->size(0));
  for (int32_t _7683_i = _12578_; _7683_i < _12579_; ++_7683_i)
  {
    {
      if ((NULL == ((*_7682_exprs)(_7683_i)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7682_exprs,(int)1);
}
// End mosek.fusion.Expr.hstack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:897:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7684_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7685_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7686_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7687_e3) { return mosek::fusion::p_Expr::stack(_7684_dim,_7685_e1,_7686_e2,_7687_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7684_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7685_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7686_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7687_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7685_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7686_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7687_e3.get())}),_7684_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:896:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7688_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7689_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7690_e2,
    double _7691_a3) { return mosek::fusion::p_Expr::stack(_7688_dim,_7689_e1,_7690_e2,_7691_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7688_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7689_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7690_e2,double _7691_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7689_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7690_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7691_a3).get())}),_7688_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:895:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7692_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7693_e1,
    double _7694_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7695_e3) { return mosek::fusion::p_Expr::stack(_7692_dim,_7693_e1,_7694_a2,_7695_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7692_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7693_e1,double _7694_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7695_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7693_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7694_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7695_e3.get())}),_7692_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:894:6-165
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7696_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7697_e1,
    double _7698_a2,
    double _7699_a3) { return mosek::fusion::p_Expr::stack(_7696_dim,_7697_e1,_7698_a2,_7699_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7696_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7697_e1,double _7698_a2,double _7699_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7697_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7698_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7699_a3).get())}),_7696_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:892:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7700_dim,
    double _7701_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7702_e2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7703_e3) { return mosek::fusion::p_Expr::stack(_7700_dim,_7701_a1,_7702_e2,_7703_e3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7700_dim,double _7701_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7702_e2,monty::rc_ptr< ::mosek::fusion::Expression > _7703_e3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7701_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7702_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7703_e3.get())}),_7700_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:891:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7704_dim,
    double _7705_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7706_e2,
    double _7707_a3) { return mosek::fusion::p_Expr::stack(_7704_dim,_7705_a1,_7706_e2,_7707_a3); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7704_dim,double _7705_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7706_e2,double _7707_a3)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7705_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7706_e2.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7707_a3).get())}),_7704_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:890:6-176
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7708_dim,
    double _7709_a1,
    double _7710_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7711_e1) { return mosek::fusion::p_Expr::stack(_7708_dim,_7709_a1,_7710_a2,_7711_e1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7708_dim,double _7709_a1,double _7710_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7711_e1)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7709_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7710_a2).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7711_e1.get())}),_7708_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:889:6-134
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7712_dim,
    double _7713_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7714_e2) { return mosek::fusion::p_Expr::stack(_7712_dim,_7713_a1,_7714_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7712_dim,double _7713_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7714_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7713_a1).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7714_e2.get())}),_7712_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:888:6-136
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7715_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7716_e1,
    double _7717_a2) { return mosek::fusion::p_Expr::stack(_7715_dim,_7716_e1,_7717_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7715_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7716_e1,double _7717_a2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7716_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7717_a2).get())}),_7715_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:887:6-125
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7718_dim,
    monty::rc_ptr< ::mosek::fusion::Expression > _7719_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7720_e2) { return mosek::fusion::p_Expr::stack(_7718_dim,_7719_e1,_7720_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7718_dim,monty::rc_ptr< ::mosek::fusion::Expression > _7719_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7720_e2)
{
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7719_e1.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7720_e2.get())}),_7718_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack
// Method mosek.fusion.Expr.stack @ src/fusion/Expr.mbi:886:6-105
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack
  ( int32_t _7721_dim,
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7722_exprs) { return mosek::fusion::p_Expr::stack(_7721_dim,_7722_exprs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int32_t _7721_dim,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7722_exprs)
{
  return ::mosek::fusion::p_Expr::stack_(_7722_exprs,_7721_dim);
}
// End mosek.fusion.Expr.stack

// Begin mosek.fusion.Expr.stack_
// Method mosek.fusion.Expr.stack_ @ src/fusion/Expr.mbi:875:6-884:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7723_exprs,int32_t _7724_dim)
{
  if (((int)((_7723_exprs)->size(0)) == (int)1))
  {
    {
      return ((*_7723_exprs)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_7723_exprs,_7724_dim),_7724_dim)).as<::mosek::fusion::Expression>();
    }
  }
}
// End mosek.fusion.Expr.stack_

// Begin mosek.fusion.Expr.promote
// Method mosek.fusion.Expr.promote @ src/fusion/Expr.mbi:844:6-873:7
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7725_exprs,int32_t _7726_dim)
{
  int32_t _7727_n = (int)((_7725_exprs)->size(0));
  std::vector<int32_t> _12580_;
  for (int32_t _7729_i = (int)0, _12581_ = _7727_n; _7729_i < _12581_ ; ++_7729_i)
  {
    _12580_.push_back(((*_7725_exprs)(_7729_i))->getND());
  }
  auto _12582_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12580_.size()),_12580_.begin(),_12580_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7728_nds = _12582_;
  _checked_ptr_1<int32_t> _ptr__7728_nds(_7728_nds ? _7728_nds->raw() : nullptr,_7728_nds ? _7728_nds->size(0) : 0);
  int32_t _7730_maxnd = _ptr__7728_nds[(int)0];
  int32_t _7731_minnd = _ptr__7728_nds[(int)0];
  int32_t _12583_ = (int)1;
  int32_t _12584_ = _7727_n;
  for (int32_t _7732_i = _12583_; _7732_i < _12584_; ++_7732_i)
  {
    {
      if ((_ptr__7728_nds[_7732_i] < _7731_minnd))
      {
        {
          _7731_minnd = _ptr__7728_nds[_7732_i];
        }
      }
      {}
      if ((_ptr__7728_nds[_7732_i] > _7730_maxnd))
      {
        {
          _7730_maxnd = _ptr__7728_nds[_7732_i];
        }
      }
      {}
    }
  }
  if ((_7730_maxnd < _7726_dim))
  {
    {
      _7730_maxnd = _7726_dim;
    }
  }
  {}
  if ((_7731_minnd < _7730_maxnd))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7733_rexprs = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_7727_n)));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7734_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7730_maxnd)));
      _checked_ptr_1<int32_t> _ptr__7734_shape(_7734_shape ? _7734_shape->raw() : nullptr,_7734_shape ? _7734_shape->size(0) : 0);
      int32_t _12585_ = (int)0;
      int32_t _12586_ = _7727_n;
      for (int32_t _7735_i = _12585_; _7735_i < _12586_; ++_7735_i)
      {
        {
          if ((((*_7725_exprs)(_7735_i))->getND() == _7730_maxnd))
          {
            {
              ((*_7733_rexprs)(_7735_i)) = ((*_7725_exprs)(_7735_i));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int32_t,1 > > _7736_s = ((*_7725_exprs)(_7735_i))->getShape();
              _checked_ptr_1<int32_t> _ptr__7736_s(_7736_s ? _7736_s->raw() : nullptr,_7736_s ? _7736_s->size(0) : 0);
              int32_t _12587_ = (int)0;
              int32_t _12588_ = (int)((_7736_s)->size(0));
              for (int32_t _7737_j = _12587_; _7737_j < _12588_; ++_7737_j)
              {
                {
                  _ptr__7734_shape[_7737_j] = _ptr__7736_s[_7737_j];
                }
              }
              int32_t _12589_ = (int)((_7736_s)->size(0));
              int32_t _12590_ = _7730_maxnd;
              for (int32_t _7738_j = _12589_; _7738_j < _12590_; ++_7738_j)
              {
                {
                  _ptr__7734_shape[_7738_j] = (int)1;
                }
              }
              ((*_7733_rexprs)(_7735_i)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7734_shape,((*_7725_exprs)(_7735_i)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _7733_rexprs;
    }
  }
  else
  {
    {
      return _7725_exprs;
    }
  }
}
// End mosek.fusion.Expr.promote

// Begin mosek.fusion.Expr.repeat
// Method mosek.fusion.Expr.repeat @ src/fusion/Expr.mbi:839:6-841:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat
  ( monty::rc_ptr< ::mosek::fusion::Variable > _7739_x,
    int32_t _7740_n,
    int32_t _7741_d) { return mosek::fusion::p_Expr::repeat(_7739_x,_7740_n,_7741_d); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _7739_x,int32_t _7740_n,int32_t _7741_d)
{
  return ::mosek::fusion::p_Expr::repeat(_7739_x->__mosek_2fusion_2Variable__asExpr(),_7740_n,_7741_d);
}
// End mosek.fusion.Expr.repeat

// Begin mosek.fusion.Expr.repeat
// Method mosek.fusion.Expr.repeat @ src/fusion/Expr.mbi:822:6-837:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7742_e,
    int32_t _7743_n,
    int32_t _7744_d) { return mosek::fusion::p_Expr::repeat(_7742_e,_7743_n,_7744_d); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _7742_e,int32_t _7743_n,int32_t _7744_d)
{
  if ((_7743_n <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  if (((_7744_d < (int)0) || (_7744_d > _7742_e->getND())))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  else
  {
    {
      if ((_7744_d == _7742_e->getND()))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7745_s = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(safe_add( _7744_d,(int)1 ))));
          _checked_ptr_1<int32_t> _ptr__7745_s(_7745_s ? _7745_s->raw() : nullptr,_7745_s ? _7745_s->size(0) : 0);
          int32_t _12591_ = (int)0;
          int32_t _12592_ = _7744_d;
          for (int32_t _7746_i = _12591_; _7746_i < _12592_; ++_7746_i)
          {
            {
              _ptr__7745_s[_7746_i] = _7742_e->getDim(_7746_i);
            }
          }
          _ptr__7745_s[_7744_d] = (int)1;
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(::mosek::fusion::p_Expr::reshape(_7742_e,_7745_s),_7744_d,_7743_n)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(_7742_e,_7744_d,_7743_n)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.Expr.repeat

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:815:6-820:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7747_exps) { return mosek::fusion::p_Expr::add(_7747_exps); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7747_exps)
{
  std::vector<double> _12593_;
  for (int32_t _7748_i = (int)0, _12594_ = (int)((_7747_exps)->size(0)); _7748_i < _12594_ ; ++_7748_i)
  {
    _12593_.push_back(1.0);
  }
  auto _12595_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12593_.size()),_12593_.begin(),_12593_.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_7747_exps,_12595_)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:745:6-801:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7749_vs) { return mosek::fusion::p_Expr::add(_7749_vs); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7749_vs)
{
  if ((NULL == _7749_vs.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_7749_vs)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >{(int64_t)((int)0)}),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7749_vs)->size(0)) > (int)0) && (NULL == ((*_7749_vs)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int32_t _7750_nd = ((*_7749_vs)((int)0))->getND();
  int32_t _12596_ = (int)1;
  int32_t _12597_ = (int)((_7749_vs)->size(0));
  for (int32_t _7751_i = _12596_; _7751_i < _12597_; ++_7751_i)
  {
    {
      if ((_7750_nd < ((*_7749_vs)(_7751_i))->getND()))
      {
        {
          _7750_nd = ((*_7749_vs)(_7751_i))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,2 > > _7752_shapes = std::shared_ptr< monty::ndarray< int32_t,2 > >(new monty::ndarray< int32_t,2 >(monty::shape((int)((_7749_vs)->size(0)),_7750_nd)));
  int32_t _12598_ = (int)0;
  int32_t _12599_ = (int)((_7749_vs)->size(0));
  for (int32_t _7753_i = _12598_; _7753_i < _12599_; ++_7753_i)
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7754_shp = ((*_7749_vs)(_7753_i))->getShape();
      _checked_ptr_1<int32_t> _ptr__7754_shp(_7754_shp ? _7754_shp->raw() : nullptr,_7754_shp ? _7754_shp->size(0) : 0);
      int32_t _12600_ = (int)0;
      int32_t _12601_ = (int)((_7754_shp)->size(0));
      for (int32_t _7755_j = _12600_; _7755_j < _12601_; ++_7755_j)
      {
        {
          ((*_7752_shapes)(_7753_i,_7755_j)) = _ptr__7754_shp[_7755_j];
        }
      }
      int32_t _12602_ = (int)((_7754_shp)->size(0));
      int32_t _12603_ = _7750_nd;
      for (int32_t _7756_j = _12602_; _7756_j < _12603_; ++_7756_j)
      {
        {
          ((*_7752_shapes)(_7753_i,_7756_j)) = (int)1;
        }
      }
    }
  }
  int32_t _12604_ = (int)1;
  int32_t _12605_ = (int)((_7749_vs)->size(0));
  for (int32_t _7757_i = _12604_; _7757_i < _12605_; ++_7757_i)
  {
    {
      int32_t _12606_ = (int)0;
      int32_t _12607_ = _7750_nd;
      for (int32_t _7758_j = _12606_; _7758_j < _12607_; ++_7758_j)
      {
        {
          if ((((*_7752_shapes)((int)0,_7758_j)) != ((*_7752_shapes)(_7757_i,_7758_j))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int32_t> _12608_;
  for (int32_t _7760_j = (int)0, _12609_ = _7750_nd; _7760_j < _12609_ ; ++_7760_j)
  {
    _12608_.push_back(((*_7752_shapes)((int)0,_7760_j)));
  }
  auto _12610_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12608_.size()),_12608_.begin(),_12608_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7759_shape = _12610_;
  _checked_ptr_1<int32_t> _ptr__7759_shape(_7759_shape ? _7759_shape->raw() : nullptr,_7759_shape ? _7759_shape->size(0) : 0);
  int32_t _7761_sz = (int)1;
  int32_t _12611_ = (int)0;
  int32_t _12612_ = _7750_nd;
  for (int32_t _7762_i = _12611_; _7762_i < _12612_; ++_7762_i)
  {
    {
      _7761_sz *= _ptr__7759_shape[_7762_i];
    }
  }
  int32_t _7763_nnz = (int)0;
  int32_t _7764_maxnnz = (int)0;
  int32_t _12613_ = (int)0;
  int32_t _12614_ = (int)((_7749_vs)->size(0));
  for (int32_t _7765_i = _12613_; _7765_i < _12614_; ++_7765_i)
  {
    {
      int32_t _7766_n = ((*_7749_vs)(_7765_i))->numInst();
      _7763_nnz += _7766_n;
      int32_t _12615_;
      bool _12616_ = (_7764_maxnnz > _7766_n);
      if (_12616_)
      {
        _12615_ = _7764_maxnnz;
      }
      else
      {
        _12615_ = _7766_n;
      }
      _7764_maxnnz = _12615_;
    }
  }
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7767_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( _7761_sz,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__7767_ptrb(_7767_ptrb ? _7767_ptrb->raw() : nullptr,_7767_ptrb ? _7767_ptrb->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7768_subj = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7763_nnz)));
  _checked_ptr_1<int64_t> _ptr__7768_subj(_7768_subj ? _7768_subj->raw() : nullptr,_7768_subj ? _7768_subj->size(0) : 0);
  std::vector<double> _12617_;
  for (int32_t _7770_i = (int)0, _12618_ = _7763_nnz; _7770_i < _12618_ ; ++_7770_i)
  {
    _12617_.push_back(1.0);
  }
  auto _12619_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12617_.size()),_12617_.begin(),_12617_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7769_cof = _12619_;
  _checked_ptr_1<double> _ptr__7769_cof(_7769_cof ? _7769_cof->raw() : nullptr,_7769_cof ? _7769_cof->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7771_ii = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7764_maxnnz)));
    _checked_ptr_1<int64_t> _ptr__7771_ii(_7771_ii ? _7771_ii->raw() : nullptr,_7771_ii ? _7771_ii->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7772_idxs = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7764_maxnnz)));
    _checked_ptr_1<int64_t> _ptr__7772_idxs(_7772_idxs ? _7772_idxs->raw() : nullptr,_7772_idxs ? _7772_idxs->size(0) : 0);
    int32_t _12620_ = (int)0;
    int32_t _12621_ = (int)((_7749_vs)->size(0));
    for (int32_t _7773_i = _12620_; _7773_i < _12621_; ++_7773_i)
    {
      {
        int32_t _7774_n = ((*_7749_vs)(_7773_i))->inst((int)0,_7771_ii,(int)0,_7772_idxs);
        int32_t _12622_ = (int)0;
        int32_t _12623_ = _7774_n;
        for (int32_t _7775_j = _12622_; _7775_j < _12623_; ++_7775_j)
        {
          {
            _ptr__7767_ptrb[safe_add( _ptr__7771_ii[_7775_j],(int)1 )] += (int)1;
          }
        }
      }
    }
    int32_t _12624_ = (int)0;
    int32_t _12625_ = _7761_sz;
    for (int32_t _7776_i = _12624_; _7776_i < _12625_; ++_7776_i)
    {
      {
        _ptr__7767_ptrb[safe_add( _7776_i,(int)1 )] += _ptr__7767_ptrb[_7776_i];
      }
    }
    int32_t _12626_ = (int)0;
    int32_t _12627_ = (int)((_7749_vs)->size(0));
    for (int32_t _7777_i = _12626_; _7777_i < _12627_; ++_7777_i)
    {
      {
        int32_t _7778_n = ((*_7749_vs)(_7777_i))->inst((int)0,_7771_ii,(int)0,_7772_idxs);
        int32_t _12628_ = (int)0;
        int32_t _12629_ = _7778_n;
        for (int32_t _7779_j = _12628_; _7779_j < _12629_; ++_7779_j)
        {
          {
            _ptr__7768_subj[_ptr__7767_ptrb[_ptr__7771_ii[_7779_j]]] = _ptr__7772_idxs[_7779_j];
            ++ _ptr__7767_ptrb[_ptr__7771_ii[_7779_j]];
          }
        }
      }
    }
    int32_t _12630_ = (int)0;
    int32_t _12631_ = _7761_sz;
    for (int32_t _7780_i = _12630_; _7780_i < _12631_; ++_7780_i)
    {
      {
        _ptr__7767_ptrb[(_7761_sz - _7780_i)] = _ptr__7767_ptrb[((_7761_sz - _7780_i) - (int)1)];
      }
    }
    _ptr__7767_ptrb[(int)0] = (int)0;
  }
  std::vector<double> _12632_;
  for (int32_t _7781_i = (int)0, _12633_ = _7761_sz; _7781_i < _12633_ ; ++_7781_i)
  {
    _12632_.push_back(0.0);
  }
  auto _12634_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12632_.size()),_12632_.begin(),_12632_.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_7767_ptrb,_7768_subj,_7769_cof,_12634_,_7759_shape,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add_
// Method mosek.fusion.Expr.add_ @ src/fusion/Expr.mbi:702:6-729:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _7782_e1,double _7783_m1,monty::rc_ptr< ::mosek::fusion::Expression > _7784_e2,double _7785_m2)
{
  int32_t _7786_nd1 = _7782_e1->getND();
  int32_t _7787_nd2 = _7784_e2->getND();
  if ((_7786_nd1 == _7787_nd2))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7782_e1,_7784_e2,_7783_m1,_7785_m2)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int32_t _12635_;
      bool _12636_ = (_7786_nd1 > _7787_nd2);
      if (_12636_)
      {
        _12635_ = _7786_nd1;
      }
      else
      {
        _12635_ = _7787_nd2;
      }
      int32_t _7788_nd = _12635_;
      std::shared_ptr< monty::ndarray< int32_t,1 > > _7789_shape = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7788_nd)));
      _checked_ptr_1<int32_t> _ptr__7789_shape(_7789_shape ? _7789_shape->raw() : nullptr,_7789_shape ? _7789_shape->size(0) : 0);
      if ((_7786_nd1 < _7787_nd2))
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7790_sh = _7782_e1->getShape();
          _checked_ptr_1<int32_t> _ptr__7790_sh(_7790_sh ? _7790_sh->raw() : nullptr,_7790_sh ? _7790_sh->size(0) : 0);
          int32_t _12637_ = (int)0;
          int32_t _12638_ = _7786_nd1;
          for (int32_t _7791_i = _12637_; _7791_i < _12638_; ++_7791_i)
          {
            {
              _ptr__7789_shape[_7791_i] = _ptr__7790_sh[_7791_i];
            }
          }
          int32_t _12639_ = _7786_nd1;
          int32_t _12640_ = _7788_nd;
          for (int32_t _7792_i = _12639_; _7792_i < _12640_; ++_7792_i)
          {
            {
              _ptr__7789_shape[_7792_i] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7789_shape,_7782_e1)).as<::mosek::fusion::Expression>(),_7784_e2,_7783_m1,_7785_m2)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int32_t,1 > > _7793_sh = _7784_e2->getShape();
          _checked_ptr_1<int32_t> _ptr__7793_sh(_7793_sh ? _7793_sh->raw() : nullptr,_7793_sh ? _7793_sh->size(0) : 0);
          int32_t _12641_ = (int)0;
          int32_t _12642_ = _7787_nd2;
          for (int32_t _7794_i = _12641_; _7794_i < _12642_; ++_7794_i)
          {
            {
              _ptr__7789_shape[_7794_i] = _ptr__7793_sh[_7794_i];
            }
          }
          int32_t _12643_ = _7787_nd2;
          int32_t _12644_ = _7788_nd;
          for (int32_t _7795_i = _12643_; _7795_i < _12644_; ++_7795_i)
          {
            {
              _ptr__7789_shape[_7795_i] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7782_e1,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7789_shape,_7784_e2)).as<::mosek::fusion::Expression>(),_7783_m1,_7785_m2)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
// End mosek.fusion.Expr.add_

// Begin mosek.fusion.Expr.transpose
// Method mosek.fusion.Expr.transpose @ src/fusion/Expr.mbi:691:6-700:7
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7796_e) { return mosek::fusion::p_Expr::transpose(_7796_e); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _7796_e)
{
  if ((_7796_e->getND() == (int)0))
  {
    {
      return _7796_e;
    }
  }
  else if((_7796_e->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)((int)1),(int32_t)(_7796_e->getDim((int)0))}),_7796_e)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7796_e->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7796_e)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
// End mosek.fusion.Expr.transpose

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:686:6-114
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7797_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7798_expr) { return mosek::fusion::p_Expr::mulElm(_7797_m,_7798_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _7797_m,monty::rc_ptr< ::mosek::fusion::Expression > _7798_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7797_m,_7798_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:685:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7799_spm,
    monty::rc_ptr< ::mosek::fusion::Expression > _7800_expr) { return mosek::fusion::p_Expr::mulElm(_7799_spm,_7800_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7799_spm,monty::rc_ptr< ::mosek::fusion::Expression > _7800_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7799_spm,_7800_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:684:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( std::shared_ptr< monty::ndarray< double,2 > > _7801_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7802_expr) { return mosek::fusion::p_Expr::mulElm(_7801_a2,_7802_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _7801_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7802_expr)
{
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7801_a2),_7802_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:683:6-115
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( std::shared_ptr< monty::ndarray< double,1 > > _7803_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7804_expr) { return mosek::fusion::p_Expr::mulElm(_7803_a1,_7804_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _7803_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7804_expr)
{
  _checked_ptr_1<double> _ptr__7803_a1(_7803_a1 ? _7803_a1->raw() : nullptr, _7803_a1 ? _7803_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7803_a1,_7804_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:682:6-114
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7805_expr,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7806_m) { return mosek::fusion::p_Expr::mulElm(_7805_expr,_7806_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7805_expr,monty::rc_ptr< ::mosek::fusion::Matrix > _7806_m)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7806_m,_7805_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:681:6-129
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7807_expr,
    std::shared_ptr< monty::ndarray< double,2 > > _7808_a2) { return mosek::fusion::p_Expr::mulElm(_7807_expr,_7808_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7807_expr,std::shared_ptr< monty::ndarray< double,2 > > _7808_a2)
{
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7808_a2),_7807_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:680:6-115
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7809_expr,
    std::shared_ptr< monty::ndarray< double,1 > > _7810_a1) { return mosek::fusion::p_Expr::mulElm(_7809_expr,_7810_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7809_expr,std::shared_ptr< monty::ndarray< double,1 > > _7810_a1)
{
  _checked_ptr_1<double> _ptr__7810_a1(_7810_a1 ? _7810_a1->raw() : nullptr, _7810_a1 ? _7810_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7810_a1,_7809_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:679:6-116
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7811_expr,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7812_spm) { return mosek::fusion::p_Expr::mulElm(_7811_expr,_7812_spm); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7811_expr,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7812_spm)
{
  return ::mosek::fusion::p_Expr::mulElm_(_7812_spm,_7811_expr);
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:678:6-127
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7813_p,
    monty::rc_ptr< ::mosek::fusion::Expression > _7814_expr) { return mosek::fusion::p_Expr::mulElm(_7813_p,_7814_expr); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Parameter > _7813_p,monty::rc_ptr< ::mosek::fusion::Expression > _7814_expr)
{
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7813_p,_7814_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.mulElm
// Method mosek.fusion.Expr.mulElm @ src/fusion/Expr.mbi:677:6-127
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7815_expr,
    monty::rc_ptr< ::mosek::fusion::Parameter > _7816_p) { return mosek::fusion::p_Expr::mulElm(_7815_expr,_7816_p); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7815_expr,monty::rc_ptr< ::mosek::fusion::Parameter > _7816_p)
{
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7816_p,_7815_expr)).as<::mosek::fusion::Expression>();
}
// End mosek.fusion.Expr.mulElm

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:675:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7817_n,
    monty::rc_ptr< ::mosek::fusion::Expression > _7818_e2) { return mosek::fusion::p_Expr::sub(_7817_n,_7818_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7817_n,monty::rc_ptr< ::mosek::fusion::Expression > _7818_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7817_n),1.0,_7818_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:674:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7819_e1,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7820_n) { return mosek::fusion::p_Expr::sub(_7819_e1,_7820_n); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7819_e1,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7820_n)
{
  return ::mosek::fusion::p_Expr::add_(_7819_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7820_n),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:673:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7821_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7822_e2) { return mosek::fusion::p_Expr::sub(_7821_m,_7822_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _7821_m,monty::rc_ptr< ::mosek::fusion::Expression > _7822_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7821_m),1.0,_7822_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:672:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7823_e1,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7824_m) { return mosek::fusion::p_Expr::sub(_7823_e1,_7824_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7823_e1,monty::rc_ptr< ::mosek::fusion::Matrix > _7824_m)
{
  return ::mosek::fusion::p_Expr::add_(_7823_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7824_m),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:671:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( double _7825_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7826_e2) { return mosek::fusion::p_Expr::sub(_7825_c,_7826_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _7825_c,monty::rc_ptr< ::mosek::fusion::Expression > _7826_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7826_e2->getShape(),_7825_c),1.0,_7826_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:670:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7827_e1,
    double _7828_c) { return mosek::fusion::p_Expr::sub(_7827_e1,_7828_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7827_e1,double _7828_c)
{
  return ::mosek::fusion::p_Expr::add_(_7827_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7827_e1->getShape(),_7828_c),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:669:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( std::shared_ptr< monty::ndarray< double,2 > > _7829_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7830_e2) { return mosek::fusion::p_Expr::sub(_7829_a2,_7830_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _7829_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7830_e2)
{
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7829_a2),1.0,_7830_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:668:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( std::shared_ptr< monty::ndarray< double,1 > > _7831_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7832_e2) { return mosek::fusion::p_Expr::sub(_7831_a1,_7832_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _7831_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7832_e2)
{
  _checked_ptr_1<double> _ptr__7831_a1(_7831_a1 ? _7831_a1->raw() : nullptr, _7831_a1 ? _7831_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7831_a1),1.0,_7832_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:667:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7833_e1,
    std::shared_ptr< monty::ndarray< double,2 > > _7834_a2) { return mosek::fusion::p_Expr::sub(_7833_e1,_7834_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7833_e1,std::shared_ptr< monty::ndarray< double,2 > > _7834_a2)
{
  return ::mosek::fusion::p_Expr::add_(_7833_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7834_a2),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:666:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7835_e1,
    std::shared_ptr< monty::ndarray< double,1 > > _7836_a1) { return mosek::fusion::p_Expr::sub(_7835_e1,_7836_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7835_e1,std::shared_ptr< monty::ndarray< double,1 > > _7836_a1)
{
  _checked_ptr_1<double> _ptr__7836_a1(_7836_a1 ? _7836_a1->raw() : nullptr, _7836_a1 ? _7836_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7835_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7836_a1),(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.sub
// Method mosek.fusion.Expr.sub @ src/fusion/Expr.mbi:665:6-167
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7837_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7838_e2) { return mosek::fusion::p_Expr::sub(_7837_e1,_7838_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7837_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7838_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7837_e1,1.0,_7838_e2,(-1.0));
}
// End mosek.fusion.Expr.sub

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:661:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7839_n,
    monty::rc_ptr< ::mosek::fusion::Expression > _7840_e2) { return mosek::fusion::p_Expr::add(_7839_n,_7840_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7839_n,monty::rc_ptr< ::mosek::fusion::Expression > _7840_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7840_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7839_n),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:660:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7841_e1,
    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7842_n) { return mosek::fusion::p_Expr::add(_7841_e1,_7842_n); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7841_e1,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7842_n)
{
  return ::mosek::fusion::p_Expr::add_(_7841_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7842_n),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:659:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7843_m,
    monty::rc_ptr< ::mosek::fusion::Expression > _7844_e2) { return mosek::fusion::p_Expr::add(_7843_m,_7844_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _7843_m,monty::rc_ptr< ::mosek::fusion::Expression > _7844_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7844_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7843_m),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:658:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7845_e1,
    monty::rc_ptr< ::mosek::fusion::Matrix > _7846_m) { return mosek::fusion::p_Expr::add(_7845_e1,_7846_m); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7845_e1,monty::rc_ptr< ::mosek::fusion::Matrix > _7846_m)
{
  return ::mosek::fusion::p_Expr::add_(_7845_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7846_m),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:657:6-169
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( double _7847_c,
    monty::rc_ptr< ::mosek::fusion::Expression > _7848_e2) { return mosek::fusion::p_Expr::add(_7847_c,_7848_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _7847_c,monty::rc_ptr< ::mosek::fusion::Expression > _7848_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7848_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7848_e2->getShape(),_7847_c),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:656:6-169
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7849_e1,
    double _7850_c) { return mosek::fusion::p_Expr::add(_7849_e1,_7850_c); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7849_e1,double _7850_c)
{
  return ::mosek::fusion::p_Expr::add_(_7849_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7849_e1->getShape(),_7850_c),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:655:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< double,2 > > _7851_a2,
    monty::rc_ptr< ::mosek::fusion::Expression > _7852_e2) { return mosek::fusion::p_Expr::add(_7851_a2,_7852_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _7851_a2,monty::rc_ptr< ::mosek::fusion::Expression > _7852_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7852_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7851_a2),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:654:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( std::shared_ptr< monty::ndarray< double,1 > > _7853_a1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7854_e2) { return mosek::fusion::p_Expr::add(_7853_a1,_7854_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _7853_a1,monty::rc_ptr< ::mosek::fusion::Expression > _7854_e2)
{
  _checked_ptr_1<double> _ptr__7853_a1(_7853_a1 ? _7853_a1->raw() : nullptr, _7853_a1 ? _7853_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7854_e2,1.0,::mosek::fusion::p_Expr::constTerm(_7853_a1),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:653:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7855_e1,
    std::shared_ptr< monty::ndarray< double,2 > > _7856_a2) { return mosek::fusion::p_Expr::add(_7855_e1,_7856_a2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7855_e1,std::shared_ptr< monty::ndarray< double,2 > > _7856_a2)
{
  return ::mosek::fusion::p_Expr::add_(_7855_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7856_a2),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:652:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7857_e1,
    std::shared_ptr< monty::ndarray< double,1 > > _7858_a1) { return mosek::fusion::p_Expr::add(_7857_e1,_7858_a1); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7857_e1,std::shared_ptr< monty::ndarray< double,1 > > _7858_a1)
{
  _checked_ptr_1<double> _ptr__7858_a1(_7858_a1 ? _7858_a1->raw() : nullptr, _7858_a1 ? _7858_a1->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7857_e1,1.0,::mosek::fusion::p_Expr::constTerm(_7858_a1),1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.add
// Method mosek.fusion.Expr.add @ src/fusion/Expr.mbi:651:6-166
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add
  ( monty::rc_ptr< ::mosek::fusion::Expression > _7859_e1,
    monty::rc_ptr< ::mosek::fusion::Expression > _7860_e2) { return mosek::fusion::p_Expr::add(_7859_e1,_7860_e2); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7859_e1,monty::rc_ptr< ::mosek::fusion::Expression > _7860_e2)
{
  return ::mosek::fusion::p_Expr::add_(_7859_e1,1.0,_7860_e2,1.0);
}
// End mosek.fusion.Expr.add

// Begin mosek.fusion.Expr.eval
// Method mosek.fusion.Expr.eval @ src/fusion/Expr.mbi:611:6-644:7
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7861_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7862_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7863_xs) { mosek::fusion::p_Expr::_get_impl(this)->eval(_7861_rs,_7862_ws,_7863_xs); }
void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7861_rs,monty::rc_ptr< ::mosek::fusion::WorkStack > _7862_ws,monty::rc_ptr< ::mosek::fusion::WorkStack > _7863_xs)
{
  int32_t _7864_nelem = ((int)((ptrb)->size(0)) - (int)1);
  int32_t _7865_nnz = safe_add( (int32_t)((*ptrb)(_7864_nelem)),_7864_nelem );
  int32_t _7866_nd = (int)((shape)->size(0));
  _7861_rs->alloc_expr(_7866_nd,_7864_nelem,_7865_nnz,(NULL != inst.get()));
  int32_t _7867_ptr_base = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->ptr_base;
  int32_t _7868_nidxs_base = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->nidxs_base;
  int32_t _7869_sp_base = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->sp_base;
  int32_t _7870_cof_base = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->cof_base;
  int32_t _7871_shape_base = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->shape_base;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7872_i32 = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->i32;
  _checked_ptr_1<int32_t> _ptr__7872_i32(_7872_i32 ? _7872_i32->raw() : nullptr,_7872_i32 ? _7872_i32->size(0) : 0);
  std::shared_ptr< monty::ndarray< int64_t,1 > > _7873_i64 = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->i64;
  _checked_ptr_1<int64_t> _ptr__7873_i64(_7873_i64 ? _7873_i64->raw() : nullptr,_7873_i64 ? _7873_i64->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7874_f64 = mosek::fusion::p_WorkStack::_get_impl(_7861_rs)->f64;
  _checked_ptr_1<double> _ptr__7874_f64(_7874_f64 ? _7874_f64->raw() : nullptr,_7874_f64 ? _7874_f64->size(0) : 0);
  {
    int32_t _12645_ = (int)0;
    int32_t _12646_ = _7866_nd;
    for (int32_t _7875_i = _12645_; _7875_i < _12646_; ++_7875_i)
    {
      {
        _ptr__7872_i32[safe_add( _7871_shape_base,_7875_i )] = ((*shape)(_7875_i));
      }
    }
    _ptr__7872_i32[_7867_ptr_base] = (int)0;
    int32_t _7876_p = (int)0;
    int32_t _12647_ = (int)0;
    int32_t _12648_ = _7864_nelem;
    for (int32_t _7877_i = _12647_; _7877_i < _12648_; ++_7877_i)
    {
      {
        int64_t _12649_ = ((*ptrb)(_7877_i));
        int64_t _12650_ = ((*ptrb)(safe_add( _7877_i,(int)1 )));
        for (int64_t _7878_j = _12649_; _7878_j < _12650_; ++_7878_j)
        {
          {
            _ptr__7873_i64[safe_add( _7868_nidxs_base,_7876_p )] = ((*subj)(_7878_j));
            _ptr__7874_f64[safe_add( _7870_cof_base,_7876_p )] = ((*cof_v)(_7878_j));
            ++ _7876_p;
          }
        }
        _ptr__7873_i64[safe_add( _7868_nidxs_base,_7876_p )] = (int)0;
        _ptr__7874_f64[safe_add( _7870_cof_base,_7876_p )] = ((*bfix)(_7877_i));
        ++ _7876_p;
        _ptr__7872_i32[safe_add( safe_add( _7867_ptr_base,_7877_i ),(int)1 )] = _7876_p;
      }
    }
  }
}
// End mosek.fusion.Expr.eval

// Begin mosek.fusion.Expr.validateData
// Method mosek.fusion.Expr.validateData @ src/fusion/Expr.mbi:435:6-497:7
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< int64_t,1 > > _7879_ptrb,std::shared_ptr< monty::ndarray< int64_t,1 > > _7880_subj,std::shared_ptr< monty::ndarray< double,1 > > _7881_cof,std::shared_ptr< monty::ndarray< double,1 > > _7882_bfix,std::shared_ptr< monty::ndarray< int32_t,1 > > _7883_shape,std::shared_ptr< monty::ndarray< int64_t,1 > > _7884_inst)
{
  _checked_ptr_1<int64_t> _ptr__7879_ptrb(_7879_ptrb ? _7879_ptrb->raw() : nullptr, _7879_ptrb ? _7879_ptrb->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7880_subj(_7880_subj ? _7880_subj->raw() : nullptr, _7880_subj ? _7880_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__7881_cof(_7881_cof ? _7881_cof->raw() : nullptr, _7881_cof ? _7881_cof->size(0) : 0);
  _checked_ptr_1<double> _ptr__7882_bfix(_7882_bfix ? _7882_bfix->raw() : nullptr, _7882_bfix ? _7882_bfix->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__7883_shape(_7883_shape ? _7883_shape->raw() : nullptr, _7883_shape ? _7883_shape->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__7884_inst(_7884_inst ? _7884_inst->raw() : nullptr, _7884_inst ? _7884_inst->size(0) : 0);
  if ((NULL == _7883_shape.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int32_t _7885_exprnume = ((int)((_7879_ptrb)->size(0)) - (int)1);
  int64_t _7886_numelm = _ptr__7879_ptrb[((int)((_7879_ptrb)->size(0)) - (int)1)];
  int32_t _7887_nd = (int)((_7883_shape)->size(0));
  int64_t _7888_size = (int64_t)1;
  int32_t _12651_ = (int)0;
  int32_t _12652_ = _7887_nd;
  for (int32_t _7889_i = _12651_; _7889_i < _12652_; ++_7889_i)
  {
    {
      _7888_size *= _ptr__7883_shape[_7889_i];
    }
  }
  if (((int)((_7879_ptrb)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_7886_numelm != (int)((_7880_subj)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_7886_numelm != (int)((_7881_cof)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _7882_bfix.get()) || (_7885_exprnume != (int)((_7882_bfix)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _7884_inst.get()) && ((int)((_7884_inst)->size(0)) < _7888_size)))
  {
    {
      if (((int)((_7884_inst)->size(0)) != ((int)((_7879_ptrb)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_7884_inst)->size(0)) > (int)0))
      {
        {
          if (((_ptr__7884_inst[(int)0] < (int)0) || (_ptr__7884_inst[(int)0] >= _7888_size)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _7890_sorted_in_range = true;
          int64_t _7891_tot_size = _7888_size;
          int32_t _12653_ = (int)1;
          int32_t _12654_ = (int)((_7884_inst)->size(0));
          for (int32_t _7892_i = _12653_; _7892_i < _12654_; ++_7892_i)
          {
            {
              _7890_sorted_in_range = (_7890_sorted_in_range && ((_ptr__7884_inst[_7892_i] >= (int)0) && ((_ptr__7884_inst[_7892_i] < _7891_tot_size) && (_ptr__7884_inst[_7892_i] > _ptr__7884_inst[(_7892_i - (int)1)]))));
            }
          }
          if ((!_7890_sorted_in_range))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_7888_size != ((int64_t)((_7879_ptrb)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _7893_invalid_ptrb = false;
  bool _7894_invalid_subj = false;
  if ((_ptr__7879_ptrb[(int)0] != (int64_t)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _7895_ptrb_sorted = true;
  int32_t _12655_ = (int)0;
  int32_t _12656_ = _7885_exprnume;
  for (int32_t _7896_i = _12655_; _7896_i < _12656_; ++_7896_i)
  {
    {
      _7895_ptrb_sorted = (_7895_ptrb_sorted && (_ptr__7879_ptrb[_7896_i] <= _ptr__7879_ptrb[safe_add( _7896_i,(int)1 )]));
    }
  }
  if ((!_7895_ptrb_sorted))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
// End mosek.fusion.Expr.validateData

// Begin mosek.fusion.Expr.extractModel
// Method mosek.fusion.Expr.extractModel @ src/fusion/Expr.mbi:434:6-128
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7897_v)
{
  monty::rc_ptr< ::mosek::fusion::Model > _12657_;
  bool _12658_ = ((NULL == _7897_v.get()) || ((int)((_7897_v)->size(0)) == (int)0));
  if (_12658_)
  {
    _12657_ = nullptr;
  }
  else
  {
    _12657_ = ((*_7897_v)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _12657_;
}
// End mosek.fusion.Expr.extractModel

void mosek::fusion::p_Expr::destroy()
{
  inst.reset();
  cof_v.reset();
  subj.reset();
  ptrb.reset();
  bfix.reset();
  shape.reset();
}
void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }
// } class Expr
// class Expression { // @ src/fusion/Expression.mbi:30:4-93:5
// Begin mosek.fusion.Expression.toString
// End mosek.fusion.Expression.toString

// Begin mosek.fusion.Expression.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int32_t,2 > > _7898_indexrows) { return __mosek_2fusion_2Expression__pick(_7898_indexrows); }
// End mosek.fusion.Expression.pick

// Begin mosek.fusion.Expression.pick
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int32_t,1 > > _7899_indexes) { return __mosek_2fusion_2Expression__pick(_7899_indexes); }
// End mosek.fusion.Expression.pick

// Begin mosek.fusion.Expression.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int32_t,1 > > _7900_indexes) { return __mosek_2fusion_2Expression__index(_7900_indexes); }
// End mosek.fusion.Expression.index

// Begin mosek.fusion.Expression.index
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int32_t _7901_i) { return __mosek_2fusion_2Expression__index(_7901_i); }
// End mosek.fusion.Expression.index

// Begin mosek.fusion.Expression.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int32_t,1 > > _7902_firsta,std::shared_ptr< monty::ndarray< int32_t,1 > > _7903_lasta) { return __mosek_2fusion_2Expression__slice(_7902_firsta,_7903_lasta); }
// End mosek.fusion.Expression.slice

// Begin mosek.fusion.Expression.slice
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int32_t _7904_first,int32_t _7905_last) { return __mosek_2fusion_2Expression__slice(_7904_first,_7905_last); }
// End mosek.fusion.Expression.slice

// Begin mosek.fusion.Expression.eval
// End mosek.fusion.Expression.eval

// Begin mosek.fusion.Expression.getND
// End mosek.fusion.Expression.getND

// Begin mosek.fusion.Expression.getDim
// End mosek.fusion.Expression.getDim

// Begin mosek.fusion.Expression.getSize
// End mosek.fusion.Expression.getSize

// Begin mosek.fusion.Expression.getShape
// End mosek.fusion.Expression.getShape

// } class Expression
// class SymmetricMatrix { // @ src/fusion/SymmetricMatrix.monty:16:4-180:5
mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }
mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix
  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.SymmetricMatrix.ctor @ src/fusion/SymmetricMatrix.monty:39:6-60:7
mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix
  (int32_t _7910_dim0,
    int32_t _7911_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7912_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7913_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7914_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7915_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7916_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7917_vval,
    double _7918_scale)
{ return new mosek::fusion::SymmetricMatrix(_7910_dim0,_7911_dim1,_7912_usubi,_7913_usubj,_7914_uval,_7915_vsubi,_7916_vsubj,_7917_vval,_7918_scale); }
mosek::fusion::SymmetricMatrix::SymmetricMatrix
  (int32_t _7910_dim0,
    int32_t _7911_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7912_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7913_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7914_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7915_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7916_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7917_vval,
    double _7918_scale) : 
   SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this))
{ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_7910_dim0,_7911_dim1,_7912_usubi,_7913_usubj,_7914_uval,_7915_vsubi,_7916_vsubj,_7917_vval,_7918_scale); }
void mosek::fusion::p_SymmetricMatrix::_initialize  (int32_t _7910_dim0,
    int32_t _7911_dim1,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7912_usubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7913_usubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7914_uval,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7915_vsubi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7916_vsubj,
    std::shared_ptr< monty::ndarray< double,1 > > _7917_vval,
    double _7918_scale)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7912_usubi(_7912_usubi ? _7912_usubi->raw() : nullptr, _7912_usubi ? _7912_usubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7913_usubj(_7913_usubj ? _7913_usubj->raw() : nullptr, _7913_usubj ? _7913_usubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7914_uval(_7914_uval ? _7914_uval->raw() : nullptr, _7914_uval ? _7914_uval->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7915_vsubi(_7915_vsubi ? _7915_vsubi->raw() : nullptr, _7915_vsubi ? _7915_vsubi->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__7916_vsubj(_7916_vsubj ? _7916_vsubj->raw() : nullptr, _7916_vsubj ? _7916_vsubj->size(0) : 0);
    _checked_ptr_1<double> _ptr__7917_vval(_7917_vval ? _7917_vval->raw() : nullptr, _7917_vval ? _7917_vval->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _7910_dim0;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _7911_dim1;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _7912_usubi;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _7913_usubj;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _7914_uval;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _7915_vsubi;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _7916_vsubj;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _7917_vval;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _7918_scale;
    nnz = (-(int)1);
  }
}
// mosek.fusion.SymmetricMatrix.ctor

// Begin mosek.fusion.SymmetricMatrix.rankOne
// Method mosek.fusion.SymmetricMatrix.rankOne @ src/fusion/SymmetricMatrix.monty:166:6-179:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne
  ( int32_t _7919_n,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _7920_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _7921_v) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7919_n,_7920_sub,_7921_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int32_t _7919_n,std::shared_ptr< monty::ndarray< int32_t,1 > > _7920_sub,std::shared_ptr< monty::ndarray< double,1 > > _7921_v)
{
  _checked_ptr_1<int32_t> _ptr__7920_sub(_7920_sub ? _7920_sub->raw() : nullptr, _7920_sub ? _7920_sub->size(0) : 0);
  _checked_ptr_1<double> _ptr__7921_v(_7921_v ? _7921_v->raw() : nullptr, _7921_v ? _7921_v->size(0) : 0);
  if (((int)((_7920_sub)->size(0)) != (int)((_7921_v)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int32_t _12659_ = (int)0;
  int32_t _12660_ = (int)((_7920_sub)->size(0));
  for (int32_t _7922_i = _12659_; _7922_i < _12660_; ++_7922_i)
  {
    {
      if (((_ptr__7920_sub[_7922_i] < (int)0) || (_ptr__7920_sub[_7922_i] >= _7919_n)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int32_t> _12661_;
  for (int32_t _7924_i = (int)0, _12662_ = (int)((_7920_sub)->size(0)); _7924_i < _12662_ ; ++_7924_i)
  {
    _12661_.push_back(_ptr__7920_sub[_7924_i]);
  }
  auto _12663_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12661_.size()),_12661_.begin(),_12661_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7923_subi = _12663_;
  _checked_ptr_1<int32_t> _ptr__7923_subi(_7923_subi ? _7923_subi->raw() : nullptr,_7923_subi ? _7923_subi->size(0) : 0);
  std::vector<int32_t> _12664_;
  for (int32_t _7926_i = (int)0, _12665_ = (int)((_7920_sub)->size(0)); _7926_i < _12665_ ; ++_7926_i)
  {
    _12664_.push_back((int)1);
  }
  auto _12666_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12664_.size()),_12664_.begin(),_12664_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7925_subj = _12666_;
  _checked_ptr_1<int32_t> _ptr__7925_subj(_7925_subj ? _7925_subj->raw() : nullptr,_7925_subj ? _7925_subj->size(0) : 0);
  std::vector<double> _12667_;
  for (int32_t _7928_i = (int)0, _12668_ = (int)((_7921_v)->size(0)); _7928_i < _12668_ ; ++_7928_i)
  {
    _12667_.push_back(_ptr__7921_v[_7928_i]);
  }
  auto _12669_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12667_.size()),_12667_.begin(),_12667_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7927_val = _12669_;
  _checked_ptr_1<double> _ptr__7927_val(_7927_val ? _7927_val->raw() : nullptr,_7927_val ? _7927_val->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7919_n,(int)1,_7923_subi,_7925_subj,_7927_val,_7923_subi,_7925_subj,_7927_val,1.0);
}
// End mosek.fusion.SymmetricMatrix.rankOne

// Begin mosek.fusion.SymmetricMatrix.rankOne
// Method mosek.fusion.SymmetricMatrix.rankOne @ src/fusion/SymmetricMatrix.monty:157:6-164:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne
  ( std::shared_ptr< monty::ndarray< double,1 > > _7929_v) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7929_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _7929_v)
{
  _checked_ptr_1<double> _ptr__7929_v(_7929_v ? _7929_v->raw() : nullptr, _7929_v ? _7929_v->size(0) : 0);
  int32_t _7930_n = (int)((_7929_v)->size(0));
  std::vector<int32_t> _12670_;
  for (int32_t _7932_i = (int)0, _12671_ = _7930_n; _7932_i < _12671_ ; ++_7932_i)
  {
    _12670_.push_back(_7932_i);
  }
  auto _12672_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12670_.size()),_12670_.begin(),_12670_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7931_subi = _12672_;
  _checked_ptr_1<int32_t> _ptr__7931_subi(_7931_subi ? _7931_subi->raw() : nullptr,_7931_subi ? _7931_subi->size(0) : 0);
  std::vector<int32_t> _12673_;
  for (int32_t _7934_i = (int)0, _12674_ = _7930_n; _7934_i < _12674_ ; ++_7934_i)
  {
    _12673_.push_back((int)1);
  }
  auto _12675_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12673_.size()),_12673_.begin(),_12673_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7933_subj = _12675_;
  _checked_ptr_1<int32_t> _ptr__7933_subj(_7933_subj ? _7933_subj->raw() : nullptr,_7933_subj ? _7933_subj->size(0) : 0);
  std::vector<double> _12676_;
  for (int32_t _7936_i = (int)0, _12677_ = _7930_n; _7936_i < _12677_ ; ++_7936_i)
  {
    _12676_.push_back(_ptr__7929_v[_7936_i]);
  }
  auto _12678_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12676_.size()),_12676_.begin(),_12676_.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7935_val = _12678_;
  _checked_ptr_1<double> _ptr__7935_val(_7935_val ? _7935_val->raw() : nullptr,_7935_val ? _7935_val->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7930_n,(int)1,_7931_subi,_7933_subj,_7935_val,_7931_subi,_7933_subj,_7935_val,1.0);
}
// End mosek.fusion.SymmetricMatrix.rankOne

// Begin mosek.fusion.SymmetricMatrix.antiDiag
// Method mosek.fusion.SymmetricMatrix.antiDiag @ src/fusion/SymmetricMatrix.monty:147:6-155:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _7937_vals) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_7937_vals); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _7937_vals)
{
  _checked_ptr_1<double> _ptr__7937_vals(_7937_vals ? _7937_vals->raw() : nullptr, _7937_vals ? _7937_vals->size(0) : 0);
  int32_t _7938_n = (int)((_7937_vals)->size(0));
  std::vector<int32_t> _12679_;
  for (int32_t _7940_i = (int)0, _12680_ = _7938_n; _7940_i < _12680_ ; ++_7940_i)
  {
    _12679_.push_back(_7940_i);
  }
  auto _12681_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12679_.size()),_12679_.begin(),_12679_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7939_subarr = _12681_;
  _checked_ptr_1<int32_t> _ptr__7939_subarr(_7939_subarr ? _7939_subarr->raw() : nullptr,_7939_subarr ? _7939_subarr->size(0) : 0);
  std::vector<int32_t> _12682_;
  for (int32_t _7941_i = (int)0, _12683_ = _7938_n; _7941_i < _12683_ ; ++_7941_i)
  {
    _12682_.push_back((_7938_n - _7941_i));
  }
  auto _12684_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12682_.size()),_12682_.begin(),_12682_.end()));
  std::vector<double> _12685_;
  for (int32_t _7942_i = (int)0, _12686_ = _7938_n; _7942_i < _12686_ ; ++_7942_i)
  {
    _12685_.push_back(_ptr__7937_vals[_7942_i]);
  }
  auto _12687_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12685_.size()),_12685_.begin(),_12685_.end()));
  std::vector<double> _12688_;
  for (int32_t _7943_i = (int)0, _12689_ = _7938_n; _7943_i < _12689_ ; ++_7943_i)
  {
    _12688_.push_back(1.0);
  }
  auto _12690_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12688_.size()),_12688_.begin(),_12688_.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7938_n,_7938_n,_7939_subarr,_12684_,_12687_,_7939_subarr,_7939_subarr,_12690_,1.0);
}
// End mosek.fusion.SymmetricMatrix.antiDiag

// Begin mosek.fusion.SymmetricMatrix.diag
// Method mosek.fusion.SymmetricMatrix.diag @ src/fusion/SymmetricMatrix.monty:137:6-145:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _7944_vals) { return mosek::fusion::p_SymmetricMatrix::diag(_7944_vals); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7944_vals)
{
  _checked_ptr_1<double> _ptr__7944_vals(_7944_vals ? _7944_vals->raw() : nullptr, _7944_vals ? _7944_vals->size(0) : 0);
  int32_t _7945_n = (int)((_7944_vals)->size(0));
  std::vector<int32_t> _12691_;
  for (int32_t _7947_i = (int)0, _12692_ = _7945_n; _7947_i < _12692_ ; ++_7947_i)
  {
    _12691_.push_back(_7947_i);
  }
  auto _12693_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12691_.size()),_12691_.begin(),_12691_.end()));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7946_subarr = _12693_;
  _checked_ptr_1<int32_t> _ptr__7946_subarr(_7946_subarr ? _7946_subarr->raw() : nullptr,_7946_subarr ? _7946_subarr->size(0) : 0);
  std::vector<double> _12694_;
  for (int32_t _7948_i = (int)0, _12695_ = _7945_n; _7948_i < _12695_ ; ++_7948_i)
  {
    _12694_.push_back(_ptr__7944_vals[_7948_i]);
  }
  auto _12696_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12694_.size()),_12694_.begin(),_12694_.end()));
  std::vector<double> _12697_;
  for (int32_t _7949_i = (int)0, _12698_ = _7945_n; _7949_i < _12698_ ; ++_7949_i)
  {
    _12697_.push_back(1.0);
  }
  auto _12699_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12697_.size()),_12697_.begin(),_12697_.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7945_n,_7945_n,_7946_subarr,_7946_subarr,_12696_,_7946_subarr,_7946_subarr,_12699_,1.0);
}
// End mosek.fusion.SymmetricMatrix.diag

// Begin mosek.fusion.SymmetricMatrix.add
// Method mosek.fusion.SymmetricMatrix.add @ src/fusion/SymmetricMatrix.monty:75:6-133:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7950_m) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_7950_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7950_m) { return __mosek_2fusion_2SymmetricMatrix__add(_7950_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7950_m)
{
  int32_t _7951_n = _pubthis->getdim();
  if ((_7950_m->getdim() != _7951_n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int32_t _7952_unnz = (int)((usubi)->size(0));
  int32_t _7953_munnz = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->usubi)->size(0));
  int32_t _7954_newunnz = safe_add( _7952_unnz,_7953_munnz );
  int32_t _7955_vnnz = (int)((vsubi)->size(0));
  int32_t _7956_mvnnz = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->vsubi)->size(0));
  int32_t _7957_newvnnz = safe_add( _7955_vnnz,_7956_mvnnz );
  std::shared_ptr< monty::ndarray< double,1 > > _7958_new_vval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7957_newvnnz)));
  _checked_ptr_1<double> _ptr__7958_new_vval(_7958_new_vval ? _7958_new_vval->raw() : nullptr,_7958_new_vval ? _7958_new_vval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7959_new_vsubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7957_newvnnz)));
  _checked_ptr_1<int32_t> _ptr__7959_new_vsubj(_7959_new_vsubj ? _7959_new_vsubj->raw() : nullptr,_7959_new_vsubj ? _7959_new_vsubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7960_new_vsubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7957_newvnnz)));
  _checked_ptr_1<int32_t> _ptr__7960_new_vsubi(_7960_new_vsubi ? _7960_new_vsubi->raw() : nullptr,_7960_new_vsubi ? _7960_new_vsubi->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7961_new_uval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7954_newunnz)));
  _checked_ptr_1<double> _ptr__7961_new_uval(_7961_new_uval ? _7961_new_uval->raw() : nullptr,_7961_new_uval ? _7961_new_uval->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7962_new_usubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7954_newunnz)));
  _checked_ptr_1<int32_t> _ptr__7962_new_usubj(_7962_new_usubj ? _7962_new_usubj->raw() : nullptr,_7962_new_usubj ? _7962_new_usubj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _7963_new_usubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_7954_newunnz)));
  _checked_ptr_1<int32_t> _ptr__7963_new_usubi(_7963_new_usubi ? _7963_new_usubi->raw() : nullptr,_7963_new_usubi ? _7963_new_usubi->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7963_new_usubi,(int)0,_7952_unnz);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->usubi,(int)0,_7963_new_usubi,_7952_unnz,_7953_munnz);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_7962_new_usubj,(int)0,_7952_unnz);
  int32_t _12700_ = (int)0;
  int32_t _12701_ = _7953_munnz;
  for (int32_t _7964_i = _12700_; _7964_i < _12701_; ++_7964_i)
  {
    {
      _ptr__7962_new_usubj[safe_add( _7964_i,_7952_unnz )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->usubj)(_7964_i)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_7961_new_uval,(int)0,_7952_unnz);
    }
  }
  else
  {
    {
      int32_t _12702_ = (int)0;
      int32_t _12703_ = _7952_unnz;
      for (int32_t _7965_i = _12702_; _7965_i < _12703_; ++_7965_i)
      {
        {
          _ptr__7961_new_uval[_7965_i] = (scale * ((*uval)(_7965_i)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->uval,(int)0,_7961_new_uval,_7952_unnz,_7953_munnz);
    }
  }
  else
  {
    {
      int32_t _12704_ = (int)0;
      int32_t _12705_ = _7953_munnz;
      for (int32_t _7966_i = _12704_; _7966_i < _12705_; ++_7966_i)
      {
        {
          _ptr__7961_new_uval[safe_add( _7966_i,_7952_unnz )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->uval)(_7966_i)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7963_new_usubi,(int)0,_7952_unnz);
  int32_t _12706_ = (int)0;
  int32_t _12707_ = _7956_mvnnz;
  for (int32_t _7967_i = _12706_; _7967_i < _12707_; ++_7967_i)
  {
    {
      _ptr__7960_new_vsubi[safe_add( _7967_i,_7955_vnnz )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->vsubi)(_7967_i)),mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_7959_new_vsubj,(int)0,_7955_vnnz);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->vsubj,_7955_vnnz,_7959_new_vsubj,_7955_vnnz,_7956_mvnnz);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_7958_new_vval,(int)0,_7955_vnnz);
    }
  }
  else
  {
    {
      int32_t _12708_ = (int)0;
      int32_t _12709_ = _7955_vnnz;
      for (int32_t _7968_i = _12708_; _7968_i < _12709_; ++_7968_i)
      {
        {
          _ptr__7958_new_vval[_7968_i] = (scale * ((*vval)(_7968_i)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->vval,(int)0,_7958_new_vval,_7955_vnnz,_7956_mvnnz);
    }
  }
  else
  {
    {
      int32_t _12710_ = (int)0;
      int32_t _12711_ = _7956_mvnnz;
      for (int32_t _7969_i = _12710_; _7969_i < _12711_; ++_7969_i)
      {
        {
          _ptr__7958_new_vval[safe_add( _7969_i,_7955_vnnz )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->vval)(_7969_i)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_7950_m)->d1 ),_7963_new_usubi,_7962_new_usubj,_7961_new_uval,_7960_new_vsubi,_7959_new_vsubj,_7958_new_vval,1.0);
}
// End mosek.fusion.SymmetricMatrix.add

// Begin mosek.fusion.SymmetricMatrix.sub
// Method mosek.fusion.SymmetricMatrix.sub @ src/fusion/SymmetricMatrix.monty:70:6-73:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7970_m) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_7970_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7970_m) { return __mosek_2fusion_2SymmetricMatrix__sub(_7970_m); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7970_m)
{
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_7970_m->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
// End mosek.fusion.SymmetricMatrix.sub

// Begin mosek.fusion.SymmetricMatrix.mul
// Method mosek.fusion.SymmetricMatrix.mul @ src/fusion/SymmetricMatrix.monty:65:6-68:7
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _7971_v) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_7971_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _7971_v) { return __mosek_2fusion_2SymmetricMatrix__mul(_7971_v); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _7971_v)
{
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _7971_v));
}
// End mosek.fusion.SymmetricMatrix.mul

// Begin mosek.fusion.SymmetricMatrix.getdim
// Method mosek.fusion.SymmetricMatrix.getdim @ src/fusion/SymmetricMatrix.monty:63:6-51
int32_t mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }
int32_t mosek::fusion::p_SymmetricMatrix::getdim()
{
  return d0;
}
// End mosek.fusion.SymmetricMatrix.getdim

void mosek::fusion::p_SymmetricMatrix::destroy()
{
  vval.reset();
  vsubj.reset();
  vsubi.reset();
  uval.reset();
  usubj.reset();
  usubi.reset();
}
void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }
// } class SymmetricMatrix
// class NDSparseArray { // @ src/fusion/Matrix.mbi:976:4-1151:5
mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }
mosek::fusion::p_NDSparseArray::p_NDSparseArray
  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.NDSparseArray.ctor @ src/fusion/Matrix.mbi:1072:6-1150:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7972_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7973_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _7974_cof_)
{ return new mosek::fusion::NDSparseArray(_7972_dims_,_7973_sub,_7974_cof_); }
mosek::fusion::NDSparseArray::NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7972_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7973_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _7974_cof_) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7972_dims_,_7973_sub,_7974_cof_); }
void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7972_dims_,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _7973_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _7974_cof_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7972_dims_(_7972_dims_ ? _7972_dims_->raw() : nullptr, _7972_dims_ ? _7972_dims_->size(0) : 0);
    _checked_ptr_1<double> _ptr__7974_cof_(_7974_cof_ ? _7974_cof_->raw() : nullptr, _7974_cof_ ? _7974_cof_->size(0) : 0);
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7975_inst_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape((int)((_7973_sub)->size(0)))));
    _checked_ptr_1<int64_t> _ptr__7975_inst_(_7975_inst_ ? _7975_inst_->raw() : nullptr,_7975_inst_ ? _7975_inst_->size(0) : 0);
    size = (int64_t)1;
    int32_t _12712_ = (int)0;
    int32_t _12713_ = (int)((_7972_dims_)->size(0));
    for (int32_t _7976_i = _12712_; _7976_i < _12713_; ++_7976_i)
    {
      {
        size = safe_mul( size,_ptr__7972_dims_[_7976_i] );
      }
    }
    int32_t _7977_nd = (int)((_7972_dims_)->size(0));
    if (((int)((_7973_sub)->size(0)) != (int)((_7974_cof_)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_7973_sub)->size(1)) != _7977_nd))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _7978_outofbounds = false;
    int32_t _12714_ = (int)0;
    int32_t _12715_ = (int)((_7973_sub)->size(0));
    for (int32_t _7979_i = _12714_; _7979_i < _12715_; ++_7979_i)
    {
      {
        int32_t _12716_ = (int)0;
        int32_t _12717_ = (int)((_7973_sub)->size(1));
        for (int32_t _7980_j = _12716_; _7980_j < _12717_; ++_7980_j)
        {
          {
            if (((((*_7973_sub)(_7979_i,_7980_j)) < (int)0) || (((*_7973_sub)(_7979_i,_7980_j)) >= _ptr__7972_dims_[_7980_j])))
            {
              {
                _7978_outofbounds = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_7978_outofbounds)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int32_t _12718_ = (int)0;
    int32_t _12719_ = (int)((_7973_sub)->size(0));
    for (int32_t _7981_i = _12718_; _7981_i < _12719_; ++_7981_i)
    {
      {
        int64_t _7982_k = (int64_t)0;
        int32_t _12720_ = (int)0;
        int32_t _12721_ = (int)((_7973_sub)->size(1));
        for (int32_t _7983_j = _12720_; _7983_j < _12721_; ++_7983_j)
        {
          {
            _7982_k = safe_add( safe_mul( _7982_k,_ptr__7972_dims_[_7983_j] ),((*_7973_sub)(_7981_i,_7983_j)) );
          }
        }
        _ptr__7975_inst_[_7981_i] = _7982_k;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7972_dims_);
    bool _7984_issorted = true;
    int32_t _12722_ = (int)1;
    int32_t _12723_ = (int)((_7975_inst_)->size(0));
    for (int32_t _7985_i = _12722_; _7985_i < _12723_; ++_7985_i)
    {
      {
        _7984_issorted = (_7984_issorted && (_ptr__7975_inst_[_7985_i] >= _ptr__7975_inst_[(_7985_i - (int)1)]));
      }
    }
    if (_7984_issorted)
    {
      {
        int32_t _7986_nunique = (int)1;
        int32_t _12724_ = (int)1;
        int32_t _12725_ = (int)((_7975_inst_)->size(0));
        for (int32_t _7987_i = _12724_; _7987_i < _12725_; ++_7987_i)
        {
          {
            if ((_ptr__7975_inst_[(_7987_i - (int)1)] < _ptr__7975_inst_[_7987_i]))
            {
              {
                ++ _7986_nunique;
              }
            }
            {}
          }
        }
        if ((_7986_nunique == (int)((_7975_inst_)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7975_inst_);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7974_cof_);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7986_nunique)));
            ((*inst)((int)0)) = _ptr__7975_inst_[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7986_nunique)));
            ((*cof)((int)0)) = _ptr__7974_cof_[(int)0];
            int32_t _7988_j = (int)0;
            int32_t _12726_ = (int)1;
            int32_t _12727_ = (int)((_7975_inst_)->size(0));
            for (int32_t _7989_i = _12726_; _7989_i < _12727_; ++_7989_i)
            {
              {
                if ((_ptr__7975_inst_[_7989_i] > _ptr__7975_inst_[(_7989_i - (int)1)]))
                {
                  {
                    ++ _7988_j;
                    ((*inst)(_7988_j)) = _ptr__7975_inst_[_7989_i];
                    ((*cof)(_7988_j)) = _ptr__7974_cof_[_7989_i];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7988_j)) = (((*cof)(_7988_j)) + _ptr__7974_cof_[_7989_i]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< int64_t,1 > > _7990_perm = ::mosek::fusion::Utils::Tools::range((int64_t)((_7975_inst_)->size(0)));
        _checked_ptr_1<int64_t> _ptr__7990_perm(_7990_perm ? _7990_perm->raw() : nullptr,_7990_perm ? _7990_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7990_perm,_7975_inst_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)0,(int64_t)((_7975_inst_)->size(0)));
        int32_t _7991_nunique = (int)1;
        int32_t _12728_ = (int)1;
        int32_t _12729_ = (int)((_7975_inst_)->size(0));
        for (int32_t _7992_i = _12728_; _7992_i < _12729_; ++_7992_i)
        {
          {
            if ((_ptr__7975_inst_[_ptr__7990_perm[(_7992_i - (int)1)]] < _ptr__7975_inst_[_ptr__7990_perm[_7992_i]]))
            {
              {
                ++ _7991_nunique;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_7991_nunique)));
        ((*inst)((int)0)) = _ptr__7975_inst_[_ptr__7990_perm[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7991_nunique)));
        ((*cof)((int)0)) = _ptr__7974_cof_[_ptr__7990_perm[(int)0]];
        int32_t _7993_j = (int)0;
        int32_t _12730_ = (int)1;
        int32_t _12731_ = (int)((_7975_inst_)->size(0));
        for (int32_t _7994_i = _12730_; _7994_i < _12731_; ++_7994_i)
        {
          {
            if ((_ptr__7975_inst_[_ptr__7990_perm[_7994_i]] > _ptr__7975_inst_[_ptr__7990_perm[(_7994_i - (int)1)]]))
            {
              {
                ++ _7993_j;
                ((*inst)(_7993_j)) = _ptr__7975_inst_[_ptr__7990_perm[_7994_i]];
                ((*cof)(_7993_j)) = _ptr__7974_cof_[_ptr__7990_perm[_7994_i]];
              }
            }
            else
            {
              {
                ((*cof)(_7993_j)) = (((*cof)(_7993_j)) + _ptr__7974_cof_[_ptr__7990_perm[_7994_i]]);
              }
            }
          }
        }
      }
    }
  }
}
// mosek.fusion.NDSparseArray.ctor

// mosek.fusion.NDSparseArray.ctor @ src/fusion/Matrix.mbi:1004:6-1070:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7995_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7996_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _7997_cof_)
{ return new mosek::fusion::NDSparseArray(_7995_dims_,_7996_inst_,_7997_cof_); }
mosek::fusion::NDSparseArray::NDSparseArray
  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7995_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7996_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _7997_cof_) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7995_dims_,_7996_inst_,_7997_cof_); }
void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int32_t,1 > > _7995_dims_,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _7996_inst_,
    std::shared_ptr< monty::ndarray< double,1 > > _7997_cof_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__7995_dims_(_7995_dims_ ? _7995_dims_->raw() : nullptr, _7995_dims_ ? _7995_dims_->size(0) : 0);
    _checked_ptr_1<int64_t> _ptr__7996_inst_(_7996_inst_ ? _7996_inst_->raw() : nullptr, _7996_inst_ ? _7996_inst_->size(0) : 0);
    _checked_ptr_1<double> _ptr__7997_cof_(_7997_cof_ ? _7997_cof_->raw() : nullptr, _7997_cof_ ? _7997_cof_->size(0) : 0);
    size = (int64_t)1;
    int32_t _12732_ = (int)0;
    int32_t _12733_ = (int)((_7995_dims_)->size(0));
    for (int32_t _7998_i = _12732_; _7998_i < _12733_; ++_7998_i)
    {
      {
        size = safe_mul( size,_ptr__7995_dims_[_7998_i] );
      }
    }
    int32_t _7999_n = (int)((_7996_inst_)->size(0));
    if ((_7999_n != (int)((_7997_cof_)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _8000_err = false;
      int32_t _12734_ = (int)0;
      int32_t _12735_ = _7999_n;
      for (int32_t _8001_i = _12734_; _8001_i < _12735_; ++_8001_i)
      {
        {
          _8000_err = (_8000_err || ((_ptr__7996_inst_[_8001_i] < (int)0) || (_ptr__7996_inst_[_8001_i] >= size)));
        }
      }
      if (_8000_err)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7995_dims_);
    bool _8002_issorted = true;
    int32_t _12736_ = (int)1;
    int32_t _12737_ = (int)((_7996_inst_)->size(0));
    for (int32_t _8003_i = _12736_; _8003_i < _12737_; ++_8003_i)
    {
      {
        _8002_issorted = (_8002_issorted && (_ptr__7996_inst_[_8003_i] >= _ptr__7996_inst_[(_8003_i - (int)1)]));
      }
    }
    if (_8002_issorted)
    {
      {
        int32_t _8004_nunique = (int)1;
        int32_t _12738_ = (int)1;
        int32_t _12739_ = (int)((_7996_inst_)->size(0));
        for (int32_t _8005_i = _12738_; _8005_i < _12739_; ++_8005_i)
        {
          {
            if ((_ptr__7996_inst_[(_8005_i - (int)1)] < _ptr__7996_inst_[_8005_i]))
            {
              {
                ++ _8004_nunique;
              }
            }
            {}
          }
        }
        if ((_8004_nunique == (int)((_7996_inst_)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7996_inst_);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7997_cof_);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8004_nunique)));
            ((*inst)((int)0)) = _ptr__7996_inst_[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8004_nunique)));
            ((*cof)((int)0)) = _ptr__7997_cof_[(int)0];
            int32_t _8006_j = (int)0;
            int32_t _12740_ = (int)1;
            int32_t _12741_ = (int)((_7996_inst_)->size(0));
            for (int32_t _8007_i = _12740_; _8007_i < _12741_; ++_8007_i)
            {
              {
                if ((_ptr__7996_inst_[_8007_i] > _ptr__7996_inst_[(_8007_i - (int)1)]))
                {
                  {
                    ++ _8006_j;
                    ((*inst)(_8006_j)) = _ptr__7996_inst_[_8007_i];
                    ((*cof)(_8006_j)) = _ptr__7997_cof_[_8007_i];
                  }
                }
                else
                {
                  {
                    ((*cof)(_8006_j)) = (((*cof)(_8006_j)) + _ptr__7997_cof_[_8007_i]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< int64_t,1 > > _8008_perm = ::mosek::fusion::Utils::Tools::range((int64_t)((_7996_inst_)->size(0)));
        _checked_ptr_1<int64_t> _ptr__8008_perm(_8008_perm ? _8008_perm->raw() : nullptr,_8008_perm ? _8008_perm->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_8008_perm,_7996_inst_,std::shared_ptr< monty::ndarray< int64_t,1 > >(nullptr),(int64_t)0,(int64_t)((_7996_inst_)->size(0)));
        int32_t _8009_nunique = (int)1;
        int32_t _12742_ = (int)1;
        int32_t _12743_ = (int)((_7996_inst_)->size(0));
        for (int32_t _8010_i = _12742_; _8010_i < _12743_; ++_8010_i)
        {
          {
            if ((_ptr__7996_inst_[_ptr__8008_perm[(_8010_i - (int)1)]] < _ptr__7996_inst_[_ptr__8008_perm[_8010_i]]))
            {
              {
                ++ _8009_nunique;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_8009_nunique)));
        ((*inst)((int)0)) = _ptr__7996_inst_[_ptr__8008_perm[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8009_nunique)));
        ((*cof)((int)0)) = _ptr__7997_cof_[_ptr__8008_perm[(int)0]];
        int32_t _8011_j = (int)0;
        int32_t _12744_ = (int)1;
        int32_t _12745_ = (int)((_7996_inst_)->size(0));
        for (int32_t _8012_i = _12744_; _8012_i < _12745_; ++_8012_i)
        {
          {
            if ((_ptr__7996_inst_[_ptr__8008_perm[_8012_i]] > ((*inst)(_ptr__8008_perm[(_8012_i - (int)1)]))))
            {
              {
                ++ _8011_j;
                ((*inst)(_8011_j)) = _ptr__7996_inst_[_ptr__8008_perm[_8012_i]];
                ((*cof)(_8011_j)) = _ptr__7997_cof_[_ptr__8008_perm[_8012_i]];
              }
            }
            else
            {
              {
                ((*cof)(_8011_j)) = (((*cof)(_8011_j)) + _ptr__7997_cof_[_ptr__8008_perm[_8012_i]]);
              }
            }
          }
        }
      }
    }
  }
}
// mosek.fusion.NDSparseArray.ctor

// mosek.fusion.NDSparseArray.ctor @ src/fusion/Matrix.mbi:987:6-1001:7
mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8013_m)
{ return new mosek::fusion::NDSparseArray(_8013_m); }
mosek::fusion::NDSparseArray::NDSparseArray
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8013_m) : 
   NDSparseArray(new mosek::fusion::p_NDSparseArray(this))
{ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_8013_m); }
void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _8013_m)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    int64_t _8014_nnz = _8013_m->numNonzeros();
    int32_t _8015_dim1 = _8013_m->numColumns();
    int32_t _8016_dim0 = _8013_m->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _8017_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8014_nnz)));
    _checked_ptr_1<double> _ptr__8017_val(_8017_val ? _8017_val->raw() : nullptr,_8017_val ? _8017_val->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8018_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8014_nnz)));
    _checked_ptr_1<int32_t> _ptr__8018_subj(_8018_subj ? _8018_subj->raw() : nullptr,_8018_subj ? _8018_subj->size(0) : 0);
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8019_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8014_nnz)));
    _checked_ptr_1<int32_t> _ptr__8019_subi(_8019_subi ? _8019_subi->raw() : nullptr,_8019_subi ? _8019_subi->size(0) : 0);
    _8013_m->getDataAsTriplets(_8019_subi,_8018_subj,_8017_val);
    size = safe_mul( (int64_t)_8013_m->numRows(),(int64_t)_8013_m->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >{(int32_t)(_8016_dim0),(int32_t)(_8015_dim1)});
    std::vector<int64_t> _12746_;
    for (int64_t _8020_i = (int64_t)0, _12747_ = _8014_nnz; _8020_i < _12747_ ; ++_8020_i)
    {
      _12746_.push_back(safe_add( safe_mul( (int64_t)_ptr__8019_subi[_8020_i],_8015_dim1 ),(int64_t)_ptr__8018_subj[_8020_i] ));
    }
    auto _12748_ = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(_12746_.size()),_12746_.begin(),_12746_.end()));
    inst = _12748_;
    cof = _8017_val;
  }
}
// mosek.fusion.NDSparseArray.ctor

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ src/fusion/Matrix.mbi:985:6-88
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8021_m) { return mosek::fusion::p_NDSparseArray::make(_8021_m); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _8021_m)
{
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8021_m);
}
// End mosek.fusion.NDSparseArray.make

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ src/fusion/Matrix.mbi:984:6-133
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8022_dims,
    std::shared_ptr< monty::ndarray< int64_t,1 > > _8023_inst,
    std::shared_ptr< monty::ndarray< double,1 > > _8024_cof) { return mosek::fusion::p_NDSparseArray::make(_8022_dims,_8023_inst,_8024_cof); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _8022_dims,std::shared_ptr< monty::ndarray< int64_t,1 > > _8023_inst,std::shared_ptr< monty::ndarray< double,1 > > _8024_cof)
{
  _checked_ptr_1<int32_t> _ptr__8022_dims(_8022_dims ? _8022_dims->raw() : nullptr, _8022_dims ? _8022_dims->size(0) : 0);
  _checked_ptr_1<int64_t> _ptr__8023_inst(_8023_inst ? _8023_inst->raw() : nullptr, _8023_inst ? _8023_inst->size(0) : 0);
  _checked_ptr_1<double> _ptr__8024_cof(_8024_cof ? _8024_cof->raw() : nullptr, _8024_cof ? _8024_cof->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8022_dims,_8023_inst,_8024_cof);
}
// End mosek.fusion.NDSparseArray.make

// Begin mosek.fusion.NDSparseArray.make
// Method mosek.fusion.NDSparseArray.make @ src/fusion/Matrix.mbi:983:6-131
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8025_dims,
    std::shared_ptr< monty::ndarray< int32_t,2 > > _8026_sub,
    std::shared_ptr< monty::ndarray< double,1 > > _8027_cof) { return mosek::fusion::p_NDSparseArray::make(_8025_dims,_8026_sub,_8027_cof); }
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int32_t,1 > > _8025_dims,std::shared_ptr< monty::ndarray< int32_t,2 > > _8026_sub,std::shared_ptr< monty::ndarray< double,1 > > _8027_cof)
{
  _checked_ptr_1<int32_t> _ptr__8025_dims(_8025_dims ? _8025_dims->raw() : nullptr, _8025_dims ? _8025_dims->size(0) : 0);
  _checked_ptr_1<double> _ptr__8027_cof(_8027_cof ? _8027_cof->raw() : nullptr, _8027_cof ? _8027_cof->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_8025_dims,_8026_sub,_8027_cof);
}
// End mosek.fusion.NDSparseArray.make

void mosek::fusion::p_NDSparseArray::destroy()
{
  cof.reset();
  inst.reset();
  dims.reset();
}
void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }
// } class NDSparseArray
// class DenseMatrix { // @ src/fusion/Matrix.mbi:796:4-959:5
mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }
mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }
mosek::fusion::p_DenseMatrix::p_DenseMatrix
  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:907:6-916:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (int32_t _8028_dimi_,
    int32_t _8029_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8030_cof)
{ return new mosek::fusion::DenseMatrix(_8028_dimi_,_8029_dimj_,_8030_cof); }
mosek::fusion::DenseMatrix::DenseMatrix
  (int32_t _8028_dimi_,
    int32_t _8029_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8030_cof) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8028_dimi_,_8029_dimj_,_8030_cof); }
void mosek::fusion::p_DenseMatrix::_initialize  (int32_t _8028_dimi_,
    int32_t _8029_dimj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8030_cof)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<double> _ptr__8030_cof(_8030_cof ? _8030_cof->raw() : nullptr, _8030_cof ? _8030_cof->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8028_dimi_,_8029_dimj_);
    nnz = (int64_t)safe_mul( _8028_dimi_,_8029_dimj_ );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _8028_dimi_,_8029_dimj_ ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_8030_cof,(int)0,data,(int)0,safe_mul( _8028_dimi_,_8029_dimj_ ));
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:873:6-895:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8031_m_)
{ return new mosek::fusion::DenseMatrix(_8031_m_); }
mosek::fusion::DenseMatrix::DenseMatrix
  (monty::rc_ptr< ::mosek::fusion::Matrix > _8031_m_) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8031_m_); }
void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _8031_m_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_8031_m_)->dimi,mosek::fusion::p_Matrix::_get_impl(_8031_m_)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _12749_ = _8031_m_;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12749_.get()))
    {
      ::mosek::fusion::DenseMatrix::t _8032_m (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12749_.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_8032_m)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12749_.get()))
    {
      ::mosek::fusion::SparseMatrix::t _8033_m (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12749_.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_8033_m)->dimi,mosek::fusion::p_Matrix::_get_impl(_8033_m)->dimj ));
        int64_t _12750_ = (int64_t)0;
        int64_t _12751_ = mosek::fusion::p_SparseMatrix::_get_impl(_8033_m)->nnz;
        for (int64_t _8035_i = _12750_; _8035_i < _12751_; ++_8035_i)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_8033_m)->subi)(_8035_i)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_8033_m)->subj)(_8035_i)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_8033_m)->val)(_8035_i));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _8034_m = _12749_;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (int64_t)safe_mul( dimi,dimj );
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:862:6-867:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (std::shared_ptr< monty::ndarray< double,2 > > _8036_d)
{ return new mosek::fusion::DenseMatrix(_8036_d); }
mosek::fusion::DenseMatrix::DenseMatrix
  (std::shared_ptr< monty::ndarray< double,2 > > _8036_d) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8036_d); }
void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _8036_d)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize((int)((_8036_d)->size(0)),(int)((_8036_d)->size(1)));
    std::vector<double> _12752_;
    for (int32_t _8037_i = (int)0, _12753_ = dimi; _8037_i < _12753_ ; ++_8037_i)
    {
      for (int32_t _8038_j = (int)0, _12754_ = dimj; _8038_j < _12754_ ; ++_8038_j)
      {
        _12752_.push_back(((*_8036_d)(_8037_i,_8038_j)));
      }
    }
    auto _12755_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12752_.size()),_12752_.begin(),_12752_.end()));
    data = _12755_;
    nnz = (int64_t)safe_mul( dimi,dimj );
  }
}
// mosek.fusion.DenseMatrix.ctor

// mosek.fusion.DenseMatrix.ctor @ src/fusion/Matrix.mbi:851:6-856:7
mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix
  (int32_t _8039_dimi_,
    int32_t _8040_dimj_,
    double _8041_value_)
{ return new mosek::fusion::DenseMatrix(_8039_dimi_,_8040_dimj_,_8041_value_); }
mosek::fusion::DenseMatrix::DenseMatrix
  (int32_t _8039_dimi_,
    int32_t _8040_dimj_,
    double _8041_value_) : 
   DenseMatrix(new mosek::fusion::p_DenseMatrix(this))
{ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_8039_dimi_,_8040_dimj_,_8041_value_); }
void mosek::fusion::p_DenseMatrix::_initialize  (int32_t _8039_dimi_,
    int32_t _8040_dimj_,
    double _8041_value_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_Matrix::_initialize(_8039_dimi_,_8040_dimj_);
    std::vector<double> _12756_;
    for (int32_t _8042_i = (int)0, _12757_ = _8039_dimi_; _8042_i < _12757_ ; ++_8042_i)
    {
      for (int32_t _8043_j = (int)0, _12758_ = _8040_dimj_; _8043_j < _12758_ ; ++_8043_j)
      {
        _12756_.push_back(_8041_value_);
      }
    }
    auto _12759_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12756_.size()),_12756_.begin(),_12756_.end()));
    data = _12759_;
    nnz = (int64_t)safe_mul( _8039_dimi_,_8040_dimj_ );
  }
}
// mosek.fusion.DenseMatrix.ctor

// Begin mosek.fusion.DenseMatrix.toString
// Method mosek.fusion.DenseMatrix.toString @ src/fusion/Matrix.mbi:940:6-958:7
std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_DenseMatrix::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _8044_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int32_t _8045_k = (int)0;
  {
    int32_t _8046_i = (int)0;
    for(;(_8046_i < dimi);++ _8046_i)
    {
      {
        if ((_8046_i > (int)0))
        {
          {
            _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_8045_k)));
        ++ _8045_k;
        {
          int32_t _8047_j = (int)1;
          for(;(_8047_j < dimj);++ _8047_j)
          {
            {
              _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_8045_k)));
              ++ _8045_k;
            }
          }
        }
        _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _8044_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _8044_sb->toString();
}
// End mosek.fusion.DenseMatrix.toString

// Begin mosek.fusion.DenseMatrix.transpose
// Method mosek.fusion.DenseMatrix.transpose @ src/fusion/Matrix.mbi:919:6-938:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
/* override: mosek.fusion.Matrix.transpose*/
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose()
{
  std::shared_ptr< monty::ndarray< double,1 > > _8048_newdata = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__8048_newdata(_8048_newdata ? _8048_newdata->raw() : nullptr,_8048_newdata ? _8048_newdata->size(0) : 0);
  int32_t _8049_srci = (int)0;
  int32_t _8050_step = dimi;
  int32_t _12760_ = (int)0;
  int32_t _12761_ = dimi;
  for (int32_t _8051_i = _12760_; _8051_i < _12761_; ++_8051_i)
  {
    {
      int32_t _8052_dsti = _8051_i;
      int32_t _12762_ = (int)0;
      int32_t _12763_ = dimj;
      for (int32_t _8053_j = _12762_; _8053_j < _12763_; ++_8053_j)
      {
        {
          _ptr__8048_newdata[_8052_dsti] = ((*data)(_8049_srci));
          _8052_dsti = safe_add( _8052_dsti,_8050_step );
          ++ _8049_srci;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_8048_newdata)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.DenseMatrix.transpose

// Begin mosek.fusion.DenseMatrix.isSparse
// Method mosek.fusion.DenseMatrix.isSparse @ src/fusion/Matrix.mbi:842:6-54
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_DenseMatrix::isSparse()
{
  return false;
}
// End mosek.fusion.DenseMatrix.isSparse

// Begin mosek.fusion.DenseMatrix.getDataAsArray
// Method mosek.fusion.DenseMatrix.getDataAsArray @ src/fusion/Matrix.mbi:837:6-840:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray()
{
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
// End mosek.fusion.DenseMatrix.getDataAsArray

// Begin mosek.fusion.DenseMatrix.getDataAsTriplets
// Method mosek.fusion.DenseMatrix.getDataAsTriplets @ src/fusion/Matrix.mbi:812:6-835:7
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8054_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8055_subj,std::shared_ptr< monty::ndarray< double,1 > > _8056_cof) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_8054_subi,_8055_subj,_8056_cof); }
void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8054_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8055_subj,std::shared_ptr< monty::ndarray< double,1 > > _8056_cof)
{
  _checked_ptr_1<int32_t> _ptr__8054_subi(_8054_subi ? _8054_subi->raw() : nullptr, _8054_subi ? _8054_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8055_subj(_8055_subj ? _8055_subj->raw() : nullptr, _8055_subj ? _8055_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8056_cof(_8056_cof ? _8056_cof->raw() : nullptr, _8056_cof ? _8056_cof->size(0) : 0);
  if ((((int)((_8054_subi)->size(0)) < nnz) || (((int)((_8055_subj)->size(0)) < nnz) || ((int)((_8056_cof)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_8056_cof,(int)0,(int)((data)->size(0)));
  int32_t _8057_k = (int)0;
  int32_t _12764_ = (int)0;
  int32_t _12765_ = dimi;
  for (int32_t _8058_i = _12764_; _8058_i < _12765_; ++_8058_i)
  {
    {
      int32_t _12766_ = (int)0;
      int32_t _12767_ = dimj;
      for (int32_t _8059_j = _12766_; _8059_j < _12767_; ++_8059_j)
      {
        {
          _ptr__8054_subi[_8057_k] = _8058_i;
          _ptr__8055_subj[_8057_k] = _8059_j;
          ++ _8057_k;
        }
      }
    }
  }
}
// End mosek.fusion.DenseMatrix.getDataAsTriplets

// Begin mosek.fusion.DenseMatrix.get
// Method mosek.fusion.DenseMatrix.get @ src/fusion/Matrix.mbi:810:6-82
double mosek::fusion::DenseMatrix :: get(int32_t _8060_i,int32_t _8061_j) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_8060_i,_8061_j); }
double mosek::fusion::p_DenseMatrix::get(int32_t _8060_i,int32_t _8061_j)
{
  return ((*data)(safe_add( safe_mul( _8060_i,dimj ),_8061_j )));
}
// End mosek.fusion.DenseMatrix.get

// Begin mosek.fusion.DenseMatrix.numNonzeros
// Method mosek.fusion.DenseMatrix.numNonzeros @ src/fusion/Matrix.mbi:805:6-808:7
int64_t mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }
int64_t mosek::fusion::p_DenseMatrix::numNonzeros()
{
  return (int64_t)safe_mul( dimi,dimj );
}
// End mosek.fusion.DenseMatrix.numNonzeros

void mosek::fusion::p_DenseMatrix::destroy()
{
  data.reset();
}
void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }
// } class DenseMatrix
// class SparseMatrix { // @ src/fusion/Matrix.mbi:575:4-790:5
mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }
mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }
mosek::fusion::p_SparseMatrix::p_SparseMatrix
  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),
    _pubthis(_pubthis)
{}
// mosek.fusion.SparseMatrix.ctor @ src/fusion/Matrix.mbi:668:6-713:7
mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix
  (int32_t _8062_dimi_,
    int32_t _8063_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8064_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8065_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8066_val_,
    int64_t _8067_nelm)
{ return new mosek::fusion::SparseMatrix(_8062_dimi_,_8063_dimj_,_8064_subi_,_8065_subj_,_8066_val_,_8067_nelm); }
mosek::fusion::SparseMatrix::SparseMatrix
  (int32_t _8062_dimi_,
    int32_t _8063_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8064_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8065_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8066_val_,
    int64_t _8067_nelm) : 
   SparseMatrix(new mosek::fusion::p_SparseMatrix(this))
{ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_8062_dimi_,_8063_dimj_,_8064_subi_,_8065_subj_,_8066_val_,_8067_nelm); }
void mosek::fusion::p_SparseMatrix::_initialize  (int32_t _8062_dimi_,
    int32_t _8063_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8064_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8065_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8066_val_,
    int64_t _8067_nelm)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8064_subi_(_8064_subi_ ? _8064_subi_->raw() : nullptr, _8064_subi_ ? _8064_subi_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8065_subj_(_8065_subj_ ? _8065_subj_->raw() : nullptr, _8065_subj_ ? _8065_subj_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8066_val_(_8066_val_ ? _8066_val_->raw() : nullptr, _8066_val_ ? _8066_val_->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8062_dimi_,_8063_dimj_);
    if ((_8067_nelm > (int)0))
    {
      {
        if ((((int)((_8064_subi_)->size(0)) < _8067_nelm) || (((int)((_8065_subj_)->size(0)) < _8067_nelm) || ((int)((_8066_val_)->size(0)) < _8067_nelm))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _8068_outofbounds = false;
        int64_t _12768_ = (int64_t)0;
        int64_t _12769_ = _8067_nelm;
        for (int64_t _8069_i = _12768_; _8069_i < _12769_; ++_8069_i)
        {
          {
            if (((_ptr__8064_subi_[_8069_i] < (int)0) || ((_ptr__8064_subi_[_8069_i] >= dimi) || ((_ptr__8065_subj_[_8069_i] < (int)0) || (_ptr__8065_subj_[_8069_i] >= dimj)))))
            {
              {
                _8068_outofbounds = true;
              }
            }
            {}
          }
        }
        if (_8068_outofbounds)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _8070_ressubi = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > > _8071_ressubj = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int32_t,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _8072_resval = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_8064_subi_,_8065_subj_,_8066_val_,_8070_ressubi,_8071_ressubj,_8072_resval,_8067_nelm,dimi,dimj);
        subi = ((*_8070_ressubi)((int)0));
        subj = ((*_8071_ressubj)((int)0));
        val = ((*_8072_resval)((int)0));
        nnz = (int64_t)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (int64_t)0;
      }
    }
  }
}
// mosek.fusion.SparseMatrix.ctor

// mosek.fusion.SparseMatrix.ctor @ src/fusion/Matrix.mbi:617:6-653:7
mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix
  (int32_t _8073_dimi_,
    int32_t _8074_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8075_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8076_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8077_val_)
{ return new mosek::fusion::SparseMatrix(_8073_dimi_,_8074_dimj_,_8075_subi_,_8076_subj_,_8077_val_); }
mosek::fusion::SparseMatrix::SparseMatrix
  (int32_t _8073_dimi_,
    int32_t _8074_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8075_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8076_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8077_val_) : 
   SparseMatrix(new mosek::fusion::p_SparseMatrix(this))
{ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_8073_dimi_,_8074_dimj_,_8075_subi_,_8076_subj_,_8077_val_); }
void mosek::fusion::p_SparseMatrix::_initialize  (int32_t _8073_dimi_,
    int32_t _8074_dimj_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8075_subi_,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8076_subj_,
    std::shared_ptr< monty::ndarray< double,1 > > _8077_val_)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    _checked_ptr_1<int32_t> _ptr__8075_subi_(_8075_subi_ ? _8075_subi_->raw() : nullptr, _8075_subi_ ? _8075_subi_->size(0) : 0);
    _checked_ptr_1<int32_t> _ptr__8076_subj_(_8076_subj_ ? _8076_subj_->raw() : nullptr, _8076_subj_ ? _8076_subj_->size(0) : 0);
    _checked_ptr_1<double> _ptr__8077_val_(_8077_val_ ? _8077_val_->raw() : nullptr, _8077_val_ ? _8077_val_->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_8073_dimi_,_8074_dimj_);
    int32_t _8078_n = (int)0;
    int32_t _12770_ = (int)0;
    int32_t _12771_ = (int)((_8077_val_)->size(0));
    for (int32_t _8079_i = _12770_; _8079_i < _12771_; ++_8079_i)
    {
      {
        if (((_ptr__8077_val_[_8079_i] > (int)0) || (_ptr__8077_val_[_8079_i] < (int)0)))
        {
          {
            ++ _8078_n;
          }
        }
        {}
      }
    }
    if (((_8078_n > (int)0) && (_8078_n < (int)((_8075_subi_)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8078_n)));
        subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8078_n)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8078_n)));
        nnz = _8078_n;
        int32_t _8080_j = (int)0;
        int32_t _12772_ = (int)0;
        int32_t _12773_ = (int)((_8077_val_)->size(0));
        for (int32_t _8081_i = _12772_; _8081_i < _12773_; ++_8081_i)
        {
          {
            if (((_ptr__8077_val_[_8081_i] < (int)0) || (_ptr__8077_val_[_8081_i] > (int)0)))
            {
              {
                ((*val)(_8080_j)) = _ptr__8077_val_[_8081_i];
                ((*subj)(_8080_j)) = _ptr__8076_subj_[_8081_i];
                ((*subi)(_8080_j)) = _ptr__8075_subi_[_8081_i];
                ++ _8080_j;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _8075_subi_;
        subj = _8076_subj_;
        val = _8077_val_;
        if ((NULL == _8075_subi_.get()))
        {
          {
            nnz = (int64_t)0;
          }
        }
        else
        {
          {
            nnz = (int64_t)((subi)->size(0));
          }
        }
      }
    }
  }
}
// mosek.fusion.SparseMatrix.ctor

// Begin mosek.fusion.SparseMatrix.formPtrb
// Method mosek.fusion.SparseMatrix.formPtrb @ src/fusion/Matrix.mbi:775:6-789:7
std::shared_ptr< monty::ndarray< int64_t,1 > > mosek::fusion::p_SparseMatrix::formPtrb()
{
  std::shared_ptr< monty::ndarray< int64_t,1 > > _8082_ptrb = std::shared_ptr< monty::ndarray< int64_t,1 > >(new monty::ndarray< int64_t,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<int64_t> _ptr__8082_ptrb(_8082_ptrb ? _8082_ptrb->raw() : nullptr,_8082_ptrb ? _8082_ptrb->size(0) : 0);
  int64_t _8083_pos = (int64_t)0;
  int32_t _12774_ = (int)0;
  int32_t _12775_ = dimi;
  for (int32_t _8084_row = _12774_; _8084_row < _12775_; ++_8084_row)
  {
    {
      _ptr__8082_ptrb[_8084_row] = _8083_pos;
      {
        for(;((_8083_pos < nnz) && (((*subi)(_8083_pos)) == _8084_row));++ _8083_pos)
        {
          {
          }
        }
      }
    }
  }
  _ptr__8082_ptrb[dimi] = _8083_pos;
  return _8082_ptrb;
}
// End mosek.fusion.SparseMatrix.formPtrb

// Begin mosek.fusion.SparseMatrix.toString
// Method mosek.fusion.SparseMatrix.toString @ src/fusion/Matrix.mbi:760:6-772:7
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_SparseMatrix::toString()
{
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _8085_sb = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _8085_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _8085_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int32_t _12776_ = (int)1;
      int32_t _12777_ = (int)((subi)->size(0));
      for (int32_t _8086_i = _12776_; _8086_i < _12777_; ++_8086_i)
      {
        {
          _8085_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_8086_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_8086_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_8086_i)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _8085_sb->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _8085_sb->toString();
}
// End mosek.fusion.SparseMatrix.toString

// Begin mosek.fusion.SparseMatrix.numNonzeros
// Method mosek.fusion.SparseMatrix.numNonzeros @ src/fusion/Matrix.mbi:755:6-758:7
int64_t mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }
int64_t mosek::fusion::p_SparseMatrix::numNonzeros()
{
  return nnz;
}
// End mosek.fusion.SparseMatrix.numNonzeros

// Begin mosek.fusion.SparseMatrix.transpose
// Method mosek.fusion.SparseMatrix.transpose @ src/fusion/Matrix.mbi:748:6-752:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
/* override: mosek.fusion.Matrix.transpose*/
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose()
{
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
// End mosek.fusion.SparseMatrix.transpose

// Begin mosek.fusion.SparseMatrix.isSparse
// Method mosek.fusion.SparseMatrix.isSparse @ src/fusion/Matrix.mbi:745:6-53
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }
bool mosek::fusion::p_SparseMatrix::isSparse()
{
  return true;
}
// End mosek.fusion.SparseMatrix.isSparse

// Begin mosek.fusion.SparseMatrix.getDataAsArray
// Method mosek.fusion.SparseMatrix.getDataAsArray @ src/fusion/Matrix.mbi:737:6-743:7
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray()
{
  std::shared_ptr< monty::ndarray< double,1 > > _8087_r = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__8087_r(_8087_r ? _8087_r->raw() : nullptr,_8087_r ? _8087_r->size(0) : 0);
  int32_t _12778_ = (int)0;
  int32_t _12779_ = (int)((subi)->size(0));
  for (int32_t _8088_i = _12778_; _8088_i < _12779_; ++_8088_i)
  {
    {
      _ptr__8087_r[safe_add( safe_mul( ((*subi)(_8088_i)),dimj ),((*subj)(_8088_i)) )] = ((*val)(_8088_i));
    }
  }
  return _8087_r;
}
// End mosek.fusion.SparseMatrix.getDataAsArray

// Begin mosek.fusion.SparseMatrix.getDataAsTriplets
// Method mosek.fusion.SparseMatrix.getDataAsTriplets @ src/fusion/Matrix.mbi:717:6-735:7
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8089_subi_,std::shared_ptr< monty::ndarray< int32_t,1 > > _8090_subj_,std::shared_ptr< monty::ndarray< double,1 > > _8091_cof_) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_8089_subi_,_8090_subj_,_8091_cof_); }
void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int32_t,1 > > _8089_subi_,std::shared_ptr< monty::ndarray< int32_t,1 > > _8090_subj_,std::shared_ptr< monty::ndarray< double,1 > > _8091_cof_)
{
  _checked_ptr_1<int32_t> _ptr__8089_subi_(_8089_subi_ ? _8089_subi_->raw() : nullptr, _8089_subi_ ? _8089_subi_->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8090_subj_(_8090_subj_ ? _8090_subj_->raw() : nullptr, _8090_subj_ ? _8090_subj_->size(0) : 0);
  _checked_ptr_1<double> _ptr__8091_cof_(_8091_cof_ ? _8091_cof_->raw() : nullptr, _8091_cof_ ? _8091_cof_->size(0) : 0);
  if ((((int64_t)((_8089_subi_)->size(0)) < nnz) || (((int64_t)((_8090_subj_)->size(0)) < nnz) || ((int64_t)((_8091_cof_)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(int64_t)0,_8089_subi_,(int64_t)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(int64_t)0,_8090_subj_,(int64_t)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(int64_t)0,_8091_cof_,(int64_t)0,nnz);
    }
  }
  {}
}
// End mosek.fusion.SparseMatrix.getDataAsTriplets

// Begin mosek.fusion.SparseMatrix.get
// Method mosek.fusion.SparseMatrix.get @ src/fusion/Matrix.mbi:588:6-606:7
double mosek::fusion::SparseMatrix :: get(int32_t _8092_i,int32_t _8093_j) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_8092_i,_8093_j); }
double mosek::fusion::p_SparseMatrix::get(int32_t _8092_i,int32_t _8093_j)
{
  if (((_8092_i < (int)0) || ((_8092_i >= dimi) || ((_8093_j < (int)0) || (_8093_j >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int32_t _8094_e = (int)((subi)->size(0));
  int32_t _8095_b = (int)0;
  while ( ((_8094_e - _8095_b) > (int)1) )
  {
    {
      int32_t _8096_p = (safe_add( _8095_b,_8094_e ) / (int)2);
      if (((((*subi)(_8096_p)) < _8092_i) || ((((*subi)(_8096_p)) == _8092_i) && (((*subj)(_8096_p)) < _8093_j))))
      {
        {
          _8095_b = _8096_p;
        }
      }
      else if(((((*subi)(_8096_p)) > _8092_i) || ((((*subi)(_8096_p)) == _8092_i) && (((*subj)(_8096_p)) > _8093_j))))
      {
        {
          _8094_e = _8096_p;
        }
      }
      else
      {
        {
          return ((*val)(_8096_p));
        }
      }
    }
  }
  if (((((*subi)(_8095_b)) == _8092_i) && (((*subj)(_8095_b)) == _8093_j)))
  {
    {
      return ((*val)(_8095_b));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
// End mosek.fusion.SparseMatrix.get

void mosek::fusion::p_SparseMatrix::destroy()
{
  val.reset();
  subj.reset();
  subi.reset();
}
void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }
// } class SparseMatrix
// class Matrix { // @ src/fusion/Matrix.mbi:58:4-569:5
mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Matrix::p_Matrix
  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.Matrix.ctor @ src/fusion/Matrix.mbi:65:6-71:7
void mosek::fusion::p_Matrix::_initialize  (int32_t _8097_di,
    int32_t _8098_dj)
{
  monty::rc_reserve __reserve_this(_pubthis); 
  {
    if (((_8097_di < (int)0) || (_8098_dj < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _8097_di;
    dimj = _8098_dj;
  }
}
// mosek.fusion.Matrix.ctor

// Begin mosek.fusion.Matrix.toString
// Method mosek.fusion.Matrix.toString @ src/fusion/Matrix.mbi:568:6-52
std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }
std::string mosek::fusion::p_Matrix::toString()
{
  return std::string ("");
}
// End mosek.fusion.Matrix.toString

// Begin mosek.fusion.Matrix.switchDims
// Method mosek.fusion.Matrix.switchDims @ src/fusion/Matrix.mbi:560:6-564:7
void mosek::fusion::p_Matrix::switchDims()
{
  int32_t _8099_tmp = dimi;
  dimi = dimj;
  dimj = _8099_tmp;
}
// End mosek.fusion.Matrix.switchDims

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:556:6-107
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8100_num,
    monty::rc_ptr< ::mosek::fusion::Matrix > _8101_mv) { return mosek::fusion::p_Matrix::diag(_8100_num,_8101_mv); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8100_num,monty::rc_ptr< ::mosek::fusion::Matrix > _8101_mv)
{
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _12780_;
  for (int32_t _8102_i = (int)0, _12781_ = _8100_num; _8102_i < _12781_ ; ++_8102_i)
  {
    _12780_.push_back(_8101_mv);
  }
  auto _12782_ = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_12780_.size()),_12780_.begin(),_12780_.end()));
  return ::mosek::fusion::p_Matrix::diag(_12782_);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:505:6-548:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8103_md) { return mosek::fusion::p_Matrix::diag(_8103_md); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8103_md)
{
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _8104_d = _8103_md;
  int64_t _8105_numelm = (int64_t)0;
  int32_t _8106_dimj = (int)0;
  int32_t _8107_dimi = (int)0;
  int32_t _12783_ = (int)0;
  int32_t _12784_ = (int)((_8103_md)->size(0));
  for (int32_t _8108_i = _12783_; _8108_i < _12784_; ++_8108_i)
  {
    {
      _8107_dimi = safe_add( _8107_dimi,mosek::fusion::p_Matrix::_get_impl(((*_8103_md)(_8108_i)))->dimi );
      _8106_dimj = safe_add( _8106_dimj,mosek::fusion::p_Matrix::_get_impl(((*_8103_md)(_8108_i)))->dimj );
      _8105_numelm = safe_add( _8105_numelm,((*_8103_md)(_8108_i))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8109_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8105_numelm)));
  _checked_ptr_1<int32_t> _ptr__8109_subi(_8109_subi ? _8109_subi->raw() : nullptr,_8109_subi ? _8109_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8110_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8105_numelm)));
  _checked_ptr_1<int32_t> _ptr__8110_subj(_8110_subj ? _8110_subj->raw() : nullptr,_8110_subj ? _8110_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8111_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8105_numelm)));
  _checked_ptr_1<double> _ptr__8111_val(_8111_val ? _8111_val->raw() : nullptr,_8111_val ? _8111_val->size(0) : 0);
  {
    int32_t _8112_offsetj = (int)0;
    int32_t _8113_offseti = (int)0;
    int64_t _8114_k = (int64_t)0;
    int32_t _12785_ = (int)0;
    int32_t _12786_ = (int)((_8103_md)->size(0));
    for (int32_t _8115_i = _12785_; _8115_i < _12786_; ++_8115_i)
    {
      {
        int64_t _8116_N = ((*_8103_md)(_8115_i))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _8117_mval = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8116_N)));
        _checked_ptr_1<double> _ptr__8117_mval(_8117_mval ? _8117_mval->raw() : nullptr,_8117_mval ? _8117_mval->size(0) : 0);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8118_msubj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8116_N)));
        _checked_ptr_1<int32_t> _ptr__8118_msubj(_8118_msubj ? _8118_msubj->raw() : nullptr,_8118_msubj ? _8118_msubj->size(0) : 0);
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8119_msubi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8116_N)));
        _checked_ptr_1<int32_t> _ptr__8119_msubi(_8119_msubi ? _8119_msubi->raw() : nullptr,_8119_msubi ? _8119_msubi->size(0) : 0);
        ((*_8103_md)(_8115_i))->getDataAsTriplets(_8119_msubi,_8118_msubj,_8117_mval);
        ::mosek::fusion::Utils::Tools::arraycopy(_8117_mval,(int64_t)0,_8111_val,_8114_k,_8116_N);
        int64_t _12787_ = (int64_t)0;
        int64_t _12788_ = _8116_N;
        for (int64_t _8120_j = _12787_; _8120_j < _12788_; ++_8120_j)
        {
          {
            _ptr__8109_subi[safe_add( _8114_k,_8120_j )] = safe_add( _ptr__8119_msubi[_8120_j],_8113_offseti );
            _ptr__8110_subj[safe_add( _8114_k,_8120_j )] = safe_add( _ptr__8119_msubi[_8120_j],_8112_offsetj );
          }
        }
        _8114_k = safe_add( _8114_k,_8116_N );
        _8113_offseti = safe_add( _8113_offseti,mosek::fusion::p_Matrix::_get_impl(((*_8103_md)(_8115_i)))->dimi );
        _8112_offsetj = safe_add( _8112_offsetj,mosek::fusion::p_Matrix::_get_impl(((*_8103_md)(_8115_i)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8107_dimi,_8106_dimj,_8109_subi,_8110_subj,_8111_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:485:6-494:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( int32_t _8121_n,
    double _8122_val,
    int32_t _8123_k) { return mosek::fusion::p_Matrix::antidiag(_8121_n,_8122_val,_8123_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int32_t _8121_n,double _8122_val,int32_t _8123_k)
{
  if (((_8123_k < _8121_n) && (_8123_k >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8122_val,(_8121_n - _8123_k)),_8123_k);
    }
  }
  else if(((_8123_k > (-_8121_n)) && (_8123_k < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8122_val,safe_add( _8121_n,_8123_k )),_8123_k);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:480:6-483:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( int32_t _8124_n,
    double _8125_val) { return mosek::fusion::p_Matrix::antidiag(_8124_n,_8125_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int32_t _8124_n,double _8125_val)
{
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_8125_val,_8124_n),(int)0);
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:469:6-478:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8126_n,
    double _8127_val,
    int32_t _8128_k) { return mosek::fusion::p_Matrix::diag(_8126_n,_8127_val,_8128_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8126_n,double _8127_val,int32_t _8128_k)
{
  if (((_8128_k < _8126_n) && (_8128_k >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8127_val,(_8126_n - _8128_k)),_8128_k);
    }
  }
  else if(((_8128_k > (-_8126_n)) && (_8128_k < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8127_val,safe_add( _8126_n,_8128_k )),_8128_k);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:464:6-467:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( int32_t _8129_n,
    double _8130_val) { return mosek::fusion::p_Matrix::diag(_8129_n,_8130_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int32_t _8129_n,double _8130_val)
{
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_8130_val,_8129_n),(int)0);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:442:6-461:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8131_d,
    int32_t _8132_k) { return mosek::fusion::p_Matrix::antidiag(_8131_d,_8132_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _8131_d,int32_t _8132_k)
{
  _checked_ptr_1<double> _ptr__8131_d(_8131_d ? _8131_d->raw() : nullptr, _8131_d ? _8131_d->size(0) : 0);
  int32_t _12789_;
  bool _12790_ = (_8132_k > (int)0);
  if (_12790_)
  {
    _12789_ = _8132_k;
  }
  else
  {
    _12789_ = (-_8132_k);
  }
  int32_t _8133_absk = _12789_;
  int32_t _8134_dimi = safe_add( (int)((_8131_d)->size(0)),_8133_absk );
  int32_t _8135_n = (int)((_8131_d)->size(0));
  if ((_8132_k >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8136_subi = ::mosek::fusion::Utils::Tools::range(_8132_k,safe_add( _8135_n,_8132_k ));
      _checked_ptr_1<int32_t> _ptr__8136_subi(_8136_subi ? _8136_subi->raw() : nullptr,_8136_subi ? _8136_subi->size(0) : 0);
      std::vector<int32_t> _12791_;
      for (int32_t _8138_i = (int)1, _12792_ = safe_add( _8135_n,(int)1 ); _8138_i < _12792_ ; ++_8138_i)
      {
        _12791_.push_back((safe_add( _8135_n,_8132_k ) - _8138_i));
      }
      auto _12793_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12791_.size()),_12791_.begin(),_12791_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8137_subj = _12793_;
      _checked_ptr_1<int32_t> _ptr__8137_subj(_8137_subj ? _8137_subj->raw() : nullptr,_8137_subj ? _8137_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8134_dimi,_8134_dimi,_8136_subi,_8137_subj,_8131_d)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8139_subi = ::mosek::fusion::Utils::Tools::range((int)0,_8135_n);
      _checked_ptr_1<int32_t> _ptr__8139_subi(_8139_subi ? _8139_subi->raw() : nullptr,_8139_subi ? _8139_subi->size(0) : 0);
      std::vector<int32_t> _12794_;
      for (int32_t _8141_i = (int)1, _12795_ = safe_add( _8135_n,(int)1 ); _8141_i < _12795_ ; ++_8141_i)
      {
        _12794_.push_back((_8135_n - _8141_i));
      }
      auto _12796_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_12794_.size()),_12794_.begin(),_12794_.end()));
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8140_subj = _12796_;
      _checked_ptr_1<int32_t> _ptr__8140_subj(_8140_subj ? _8140_subj->raw() : nullptr,_8140_subj ? _8140_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8134_dimi,_8134_dimi,_8139_subi,_8140_subj,_8131_d)).as<::mosek::fusion::Matrix>();
    }
  }
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.antidiag
// Method mosek.fusion.Matrix.antidiag @ src/fusion/Matrix.mbi:437:6-440:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8142_d) { return mosek::fusion::p_Matrix::antidiag(_8142_d); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _8142_d)
{
  _checked_ptr_1<double> _ptr__8142_d(_8142_d ? _8142_d->raw() : nullptr, _8142_d ? _8142_d->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_8142_d,(int)0);
}
// End mosek.fusion.Matrix.antidiag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:416:6-435:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8143_d,
    int32_t _8144_k) { return mosek::fusion::p_Matrix::diag(_8143_d,_8144_k); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _8143_d,int32_t _8144_k)
{
  _checked_ptr_1<double> _ptr__8143_d(_8143_d ? _8143_d->raw() : nullptr, _8143_d ? _8143_d->size(0) : 0);
  int32_t _12797_;
  bool _12798_ = (_8144_k > (int)0);
  if (_12798_)
  {
    _12797_ = _8144_k;
  }
  else
  {
    _12797_ = (-_8144_k);
  }
  int32_t _8145_absk = _12797_;
  int32_t _8146_dimi = safe_add( (int)((_8143_d)->size(0)),_8145_absk );
  int32_t _8147_n = (int)((_8143_d)->size(0));
  if ((_8144_k >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8148_subi = ::mosek::fusion::Utils::Tools::range((int)0,_8147_n);
      _checked_ptr_1<int32_t> _ptr__8148_subi(_8148_subi ? _8148_subi->raw() : nullptr,_8148_subi ? _8148_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8149_subj = ::mosek::fusion::Utils::Tools::range(_8145_absk,safe_add( _8147_n,_8145_absk ));
      _checked_ptr_1<int32_t> _ptr__8149_subj(_8149_subj ? _8149_subj->raw() : nullptr,_8149_subj ? _8149_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8146_dimi,_8146_dimi,_8148_subi,_8149_subj,_8143_d)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8150_subi = ::mosek::fusion::Utils::Tools::range(_8145_absk,safe_add( _8147_n,_8145_absk ));
      _checked_ptr_1<int32_t> _ptr__8150_subi(_8150_subi ? _8150_subi->raw() : nullptr,_8150_subi ? _8150_subi->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8151_subj = ::mosek::fusion::Utils::Tools::range((int)0,_8147_n);
      _checked_ptr_1<int32_t> _ptr__8151_subj(_8151_subj ? _8151_subj->raw() : nullptr,_8151_subj ? _8151_subj->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8146_dimi,_8146_dimi,_8150_subi,_8151_subj,_8143_d)).as<::mosek::fusion::Matrix>();
    }
  }
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.diag
// Method mosek.fusion.Matrix.diag @ src/fusion/Matrix.mbi:411:6-414:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag
  ( std::shared_ptr< monty::ndarray< double,1 > > _8152_d) { return mosek::fusion::p_Matrix::diag(_8152_d); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _8152_d)
{
  _checked_ptr_1<double> _ptr__8152_d(_8152_d ? _8152_d->raw() : nullptr, _8152_d ? _8152_d->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_8152_d,(int)0);
}
// End mosek.fusion.Matrix.diag

// Begin mosek.fusion.Matrix.ones
// Method mosek.fusion.Matrix.ones @ src/fusion/Matrix.mbi:408:6-83
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones
  ( int32_t _8153_n,
    int32_t _8154_m) { return mosek::fusion::p_Matrix::ones(_8153_n,_8154_m); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int32_t _8153_n,int32_t _8154_m)
{
  return ::mosek::fusion::p_Matrix::dense(_8153_n,_8154_m,1.0);
}
// End mosek.fusion.Matrix.ones

// Begin mosek.fusion.Matrix.eye
// Method mosek.fusion.Matrix.eye @ src/fusion/Matrix.mbi:398:6-90
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye
  ( int32_t _8155_n) { return mosek::fusion::p_Matrix::eye(_8155_n); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int32_t _8155_n)
{
  std::vector<double> _12799_;
  for (int32_t _8156_i = (int)0, _12800_ = _8155_n; _8156_i < _12800_ ; ++_8156_i)
  {
    _12799_.push_back(1.0);
  }
  auto _12801_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12799_.size()),_12799_.begin(),_12799_.end()));
  return ::mosek::fusion::p_Matrix::diag(_12801_);
}
// End mosek.fusion.Matrix.eye

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:388:6-114
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8157_other) { return mosek::fusion::p_Matrix::dense(_8157_other); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _8157_other)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8157_other)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:387:6-126
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( int32_t _8158_dimi,
    int32_t _8159_dimj,
    double _8160_value) { return mosek::fusion::p_Matrix::dense(_8158_dimi,_8159_dimj,_8160_value); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int32_t _8158_dimi,int32_t _8159_dimj,double _8160_value)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8158_dimi,_8159_dimj,_8160_value)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:386:6-125
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( int32_t _8161_dimi,
    int32_t _8162_dimj,
    std::shared_ptr< monty::ndarray< double,1 > > _8163_data) { return mosek::fusion::p_Matrix::dense(_8161_dimi,_8162_dimj,_8163_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int32_t _8161_dimi,int32_t _8162_dimj,std::shared_ptr< monty::ndarray< double,1 > > _8163_data)
{
  _checked_ptr_1<double> _ptr__8163_data(_8163_data ? _8163_data->raw() : nullptr, _8163_data ? _8163_data->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8161_dimi,_8162_dimj,_8163_data)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.dense
// Method mosek.fusion.Matrix.dense @ src/fusion/Matrix.mbi:385:6-113
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense
  ( std::shared_ptr< monty::ndarray< double,2 > > _8164_data) { return mosek::fusion::p_Matrix::dense(_8164_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _8164_data)
{
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_8164_data)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.dense

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:374:6-382:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( monty::rc_ptr< ::mosek::fusion::Matrix > _8165_mx) { return mosek::fusion::p_Matrix::sparse(_8165_mx); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _8165_mx)
{
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8166_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8165_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__8166_subi(_8166_subi ? _8166_subi->raw() : nullptr,_8166_subi ? _8166_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8167_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8165_mx->numNonzeros())));
  _checked_ptr_1<int32_t> _ptr__8167_subj(_8167_subj ? _8167_subj->raw() : nullptr,_8167_subj ? _8167_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8168_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8165_mx->numNonzeros())));
  _checked_ptr_1<double> _ptr__8168_val(_8168_val ? _8168_val->raw() : nullptr,_8168_val ? _8168_val->size(0) : 0);
  _8165_mx->getDataAsTriplets(_8166_subi,_8167_subj,_8168_val);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8165_mx->numRows(),_8165_mx->numColumns(),_8166_subi,_8167_subj,_8168_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:231:6-371:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _8169_blocks) { return mosek::fusion::p_Matrix::sparse(_8169_blocks); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _8169_blocks)
{
  int32_t _8170_maxi = (int)((_8169_blocks)->size(0));
  int32_t _8171_maxj = (int)((((*_8169_blocks)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8172_idims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8170_maxi)));
  _checked_ptr_1<int32_t> _ptr__8172_idims(_8172_idims ? _8172_idims->raw() : nullptr,_8172_idims ? _8172_idims->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8173_jdims = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8171_maxj)));
  _checked_ptr_1<int32_t> _ptr__8173_jdims(_8173_jdims ? _8173_jdims->raw() : nullptr,_8173_jdims ? _8173_jdims->size(0) : 0);
  int64_t _8174_nelm = (int64_t)0;
  int32_t _8175_k = (int)0;
  {
    int32_t _8176_i = (int)0;
    for(;(_8176_i < _8170_maxi);++ _8176_i)
    {
      {
        {
          int32_t _8177_j = (int)0;
          for(;(_8177_j < _8171_maxj);++ _8177_j)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _8178_m = ((*((*_8169_blocks)(_8176_i)))(_8177_j));
              if ((NULL != _8178_m.get()))
              {
                {
                  if ((_ptr__8173_jdims[_8177_j] == (int)0))
                  {
                    {
                      _ptr__8173_jdims[_8177_j] = mosek::fusion::p_Matrix::_get_impl(_8178_m)->dimj;
                    }
                  }
                  else if((_ptr__8173_jdims[_8177_j] != mosek::fusion::p_Matrix::_get_impl(_8178_m)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__8172_idims[_8176_i] == (int)0))
                  {
                    {
                      _ptr__8172_idims[_8176_i] = mosek::fusion::p_Matrix::_get_impl(_8178_m)->dimi;
                    }
                  }
                  else if((_ptr__8172_idims[_8176_i] != mosek::fusion::p_Matrix::_get_impl(_8178_m)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _8174_nelm = safe_add( _8174_nelm,_8178_m->numNonzeros() );
                }
              }
              {}
              ++ _8175_k;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _8179_cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8174_nelm)));
  _checked_ptr_1<double> _ptr__8179_cof(_8179_cof ? _8179_cof->raw() : nullptr,_8179_cof ? _8179_cof->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8180_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8174_nelm)));
  _checked_ptr_1<int32_t> _ptr__8180_subi(_8180_subi ? _8180_subi->raw() : nullptr,_8180_subi ? _8180_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8181_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8174_nelm)));
  _checked_ptr_1<int32_t> _ptr__8181_subj(_8181_subj ? _8181_subj->raw() : nullptr,_8181_subj ? _8181_subj->size(0) : 0);
  int32_t _8182_dstp = (int)0;
  int32_t _8183_offseti = (int)0;
  {
    int32_t _8184_i = (int)0;
    for(;(_8184_i < _8170_maxi);++ _8184_i)
    {
      {
        std::shared_ptr< monty::ndarray< int32_t,1 > > _8185_lidxs = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8171_maxj)));
        _checked_ptr_1<int32_t> _ptr__8185_lidxs(_8185_lidxs ? _8185_lidxs->raw() : nullptr,_8185_lidxs ? _8185_lidxs->size(0) : 0);
        {
          int32_t _8186_ii = (int)0;
          for(;(_8186_ii < _ptr__8172_idims[_8184_i]);++ _8186_ii)
          {
            {
              int32_t _8187_offsetj = (int)0;
              {
                int32_t _8188_j = (int)0;
                for(;(_8188_j < _8171_maxj);++ _8188_j)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _8189_m_ = ((*((*_8169_blocks)(_8184_i)))(_8188_j));
                    if ((NULL != _8189_m_.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _12802_ = _8189_m_;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12802_.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _8190_m (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12802_.get()));
                          {
                            int32_t _8193_kk = _ptr__8185_lidxs[_8188_j];
                            {
                              int32_t _8194_jj = (int)0;
                              for(;(_8194_jj < mosek::fusion::p_Matrix::_get_impl(_8190_m)->dimj);++ _8194_jj)
                              {
                                {
                                  _ptr__8179_cof[_8182_dstp] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_8190_m)->data)(_8193_kk));
                                  _ptr__8180_subi[_8182_dstp] = safe_add( _8183_offseti,_8186_ii );
                                  _ptr__8181_subj[_8182_dstp] = safe_add( _8187_offsetj,_8194_jj );
                                  ++ _8193_kk;
                                  ++ _8182_dstp;
                                }
                              }
                            }
                            _ptr__8185_lidxs[_8188_j] = _8193_kk;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12802_.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _8191_m (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12802_.get()));
                          {
                            int32_t _8195_kk;
                            {
                              _8195_kk = _ptr__8185_lidxs[_8188_j];
                              for(;((_8195_kk < mosek::fusion::p_SparseMatrix::_get_impl(_8191_m)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_8191_m)->subi)(_8195_kk)) == _8186_ii));++ _8195_kk)
                              {
                                {
                                  _ptr__8179_cof[_8182_dstp] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_8191_m)->val)(_8195_kk));
                                  _ptr__8181_subj[_8182_dstp] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_8191_m)->subj)(_8195_kk)),_8187_offsetj );
                                  _ptr__8180_subi[_8182_dstp] = safe_add( _8183_offseti,_8186_ii );
                                  ++ _8182_dstp;
                                }
                              }
                            }
                            _ptr__8185_lidxs[_8188_j] = _8195_kk;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _8192_m = _12802_;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _8187_offsetj = safe_add( _8187_offsetj,_ptr__8173_jdims[_8188_j] );
                  }
                }
              }
            }
          }
        }
        _8183_offseti = safe_add( _8183_offseti,_ptr__8172_idims[_8184_i] );
      }
    }
  }
  int32_t _8196_dimi = (int)0;
  int32_t _8197_dimj = (int)0;
  {
    int32_t _8198_i = (int)0;
    for(;(_8198_i < _8170_maxi);++ _8198_i)
    {
      {
        _8196_dimi = safe_add( _8196_dimi,_ptr__8172_idims[_8198_i] );
      }
    }
  }
  {
    int32_t _8199_j = (int)0;
    for(;(_8199_j < _8171_maxj);++ _8199_j)
    {
      {
        _8197_dimj = safe_add( _8197_dimj,_ptr__8173_jdims[_8199_j] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8196_dimi,_8197_dimj,_8180_subi,_8181_subj,_8179_cof)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:208:6-228:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< double,2 > > _8200_data) { return mosek::fusion::p_Matrix::sparse(_8200_data); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _8200_data)
{
  int32_t _8201_dimi = (int)((_8200_data)->size(0));
  int32_t _8202_dimj = (int)((_8200_data)->size(1));
  int64_t _8203_nelem = (int64_t)safe_mul( _8201_dimi,_8202_dimj );
  int32_t _8204_k = (int)0;
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8205_subi = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8203_nelem)));
  _checked_ptr_1<int32_t> _ptr__8205_subi(_8205_subi ? _8205_subi->raw() : nullptr,_8205_subi ? _8205_subi->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8206_subj = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8203_nelem)));
  _checked_ptr_1<int32_t> _ptr__8206_subj(_8206_subj ? _8206_subj->raw() : nullptr,_8206_subj ? _8206_subj->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8207_val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8203_nelem)));
  _checked_ptr_1<double> _ptr__8207_val(_8207_val ? _8207_val->raw() : nullptr,_8207_val ? _8207_val->size(0) : 0);
  {
    int32_t _8208_i = (int)0;
    for(;(_8208_i < _8201_dimi);++ _8208_i)
    {
      {
        {
          int32_t _8209_j = (int)0;
          for(;(_8209_j < _8202_dimj);++ _8209_j)
          {
            {
              _ptr__8205_subi[_8204_k] = _8208_i;
              _ptr__8206_subj[_8204_k] = _8209_j;
              _ptr__8207_val[_8204_k] = ((*_8200_data)(_8208_i,_8209_j));
              ++ _8204_k;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8201_dimi,_8202_dimj,_8205_subi,_8206_subj,_8207_val)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:202:6-205:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8210_nrow,
    int32_t _8211_ncol) { return mosek::fusion::p_Matrix::sparse(_8210_nrow,_8211_ncol); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8210_nrow,int32_t _8211_ncol)
{
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8210_nrow,_8211_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(int64_t)0)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:188:6-199:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8212_nrow,
    int32_t _8213_ncol,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8214_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8215_subj,
    double _8216_val) { return mosek::fusion::p_Matrix::sparse(_8212_nrow,_8213_ncol,_8214_subi,_8215_subj,_8216_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8212_nrow,int32_t _8213_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > > _8214_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8215_subj,double _8216_val)
{
  _checked_ptr_1<int32_t> _ptr__8214_subi(_8214_subi ? _8214_subi->raw() : nullptr, _8214_subi ? _8214_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8215_subj(_8215_subj ? _8215_subj->raw() : nullptr, _8215_subj ? _8215_subj->size(0) : 0);
  int32_t _8217_sz = (int)0;
  if ((NULL != _8214_subi.get()))
  {
    {
      _8217_sz = (int)((_8214_subi)->size(0));
    }
  }
  else if((NULL != _8215_subj.get()))
  {
    {
      _8217_sz = (int)((_8215_subj)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_8212_nrow,_8213_ncol,_8214_subi,_8215_subj,::mosek::fusion::Utils::Tools::makevector(_8216_val,_8217_sz));
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:170:6-185:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8218_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8219_subj,
    double _8220_val) { return mosek::fusion::p_Matrix::sparse(_8218_subi,_8219_subj,_8220_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _8218_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8219_subj,double _8220_val)
{
  _checked_ptr_1<int32_t> _ptr__8218_subi(_8218_subi ? _8218_subi->raw() : nullptr, _8218_subi ? _8218_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8219_subj(_8219_subj ? _8219_subj->raw() : nullptr, _8219_subj ? _8219_subj->size(0) : 0);
  int32_t _8221_maxj = (int)0;
  int32_t _8222_maxi = (int)0;
  int32_t _8223_num = (int)((_8218_subi)->size(0));
  if ((_8223_num > (int)((_8219_subj)->size(0))))
  {
    {
      _8223_num = (int)((_8219_subj)->size(0));
    }
  }
  {}
  int32_t _12803_ = (int)0;
  int32_t _12804_ = _8223_num;
  for (int32_t _8224_i = _12803_; _8224_i < _12804_; ++_8224_i)
  {
    {
      if ((_8222_maxi < _ptr__8218_subi[_8224_i]))
      {
        {
          _8222_maxi = _ptr__8218_subi[_8224_i];
        }
      }
      {}
      if ((_8221_maxj < _ptr__8219_subj[_8224_i]))
      {
        {
          _8221_maxj = _ptr__8219_subj[_8224_i];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _8222_maxi,(int)1 ),safe_add( _8221_maxj,(int)1 ),_8218_subi,_8219_subj,_8220_val);
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:151:6-167:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( std::shared_ptr< monty::ndarray< int32_t,1 > > _8225_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8226_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _8227_val) { return mosek::fusion::p_Matrix::sparse(_8225_subi,_8226_subj,_8227_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int32_t,1 > > _8225_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8226_subj,std::shared_ptr< monty::ndarray< double,1 > > _8227_val)
{
  _checked_ptr_1<int32_t> _ptr__8225_subi(_8225_subi ? _8225_subi->raw() : nullptr, _8225_subi ? _8225_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8226_subj(_8226_subj ? _8226_subj->raw() : nullptr, _8226_subj ? _8226_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8227_val(_8227_val ? _8227_val->raw() : nullptr, _8227_val ? _8227_val->size(0) : 0);
  int32_t _8228_maxj = (int)0;
  int32_t _8229_maxi = (int)0;
  int32_t _8230_num = (int)((_8225_subi)->size(0));
  if ((_8230_num > (int)((_8226_subj)->size(0))))
  {
    {
      _8230_num = (int)((_8226_subj)->size(0));
    }
  }
  {}
  if ((_8230_num > (int)((_8227_val)->size(0))))
  {
    {
      _8230_num = (int)((_8227_val)->size(0));
    }
  }
  {}
  int32_t _12805_ = (int)0;
  int32_t _12806_ = _8230_num;
  for (int32_t _8231_i = _12805_; _8231_i < _12806_; ++_8231_i)
  {
    {
      if ((_8229_maxi < _ptr__8225_subi[_8231_i]))
      {
        {
          _8229_maxi = _ptr__8225_subi[_8231_i];
        }
      }
      {}
      if ((_8228_maxj < _ptr__8226_subj[_8231_i]))
      {
        {
          _8228_maxj = _ptr__8226_subj[_8231_i];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _8229_maxi,(int)1 ),safe_add( _8228_maxj,(int)1 ),_8225_subi,_8226_subj,_8227_val);
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.sparse
// Method mosek.fusion.Matrix.sparse @ src/fusion/Matrix.mbi:128:6-148:7
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse
  ( int32_t _8232_nrow,
    int32_t _8233_ncol,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8234_subi,
    std::shared_ptr< monty::ndarray< int32_t,1 > > _8235_subj,
    std::shared_ptr< monty::ndarray< double,1 > > _8236_val) { return mosek::fusion::p_Matrix::sparse(_8232_nrow,_8233_ncol,_8234_subi,_8235_subj,_8236_val); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int32_t _8232_nrow,int32_t _8233_ncol,std::shared_ptr< monty::ndarray< int32_t,1 > > _8234_subi,std::shared_ptr< monty::ndarray< int32_t,1 > > _8235_subj,std::shared_ptr< monty::ndarray< double,1 > > _8236_val)
{
  _checked_ptr_1<int32_t> _ptr__8234_subi(_8234_subi ? _8234_subi->raw() : nullptr, _8234_subi ? _8234_subi->size(0) : 0);
  _checked_ptr_1<int32_t> _ptr__8235_subj(_8235_subj ? _8235_subj->raw() : nullptr, _8235_subj ? _8235_subj->size(0) : 0);
  _checked_ptr_1<double> _ptr__8236_val(_8236_val ? _8236_val->raw() : nullptr, _8236_val ? _8236_val->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12807_;
  bool _12808_ = (NULL != _8236_val.get());
  if (_12808_)
  {
    _12807_ = _8236_val;
  }
  else
  {
    _12807_ = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _8237_vl = _12807_;
  _checked_ptr_1<double> _ptr__8237_vl(_8237_vl ? _8237_vl->raw() : nullptr,_8237_vl ? _8237_vl->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12809_;
  bool _12810_ = (NULL != _8235_subj.get());
  if (_12810_)
  {
    _12809_ = _8235_subj;
  }
  else
  {
    _12809_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8238_sj = _12809_;
  _checked_ptr_1<int32_t> _ptr__8238_sj(_8238_sj ? _8238_sj->raw() : nullptr,_8238_sj ? _8238_sj->size(0) : 0);
  std::shared_ptr< monty::ndarray< int32_t,1 > > _12811_;
  bool _12812_ = (NULL != _8234_subi.get());
  if (_12812_)
  {
    _12811_ = _8234_subi;
  }
  else
  {
    _12811_ = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int32_t,1 > > _8239_si = _12811_;
  _checked_ptr_1<int32_t> _ptr__8239_si(_8239_si ? _8239_si->raw() : nullptr,_8239_si ? _8239_si->size(0) : 0);
  int64_t _8240_nnz = (int64_t)((_8239_si)->size(0));
  if ((((int64_t)((_8238_sj)->size(0)) != _8240_nnz) || ((int64_t)((_8237_vl)->size(0)) != _8240_nnz)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_8232_nrow,_8233_ncol,_8239_si,_8238_sj,_8237_vl,_8240_nnz)).as<::mosek::fusion::Matrix>();
}
// End mosek.fusion.Matrix.sparse

// Begin mosek.fusion.Matrix.get
// End mosek.fusion.Matrix.get

// Begin mosek.fusion.Matrix.isSparse
// End mosek.fusion.Matrix.isSparse

// Begin mosek.fusion.Matrix.getDataAsArray
// End mosek.fusion.Matrix.getDataAsArray

// Begin mosek.fusion.Matrix.getDataAsTriplets
// End mosek.fusion.Matrix.getDataAsTriplets

// Begin mosek.fusion.Matrix.transpose
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
// End mosek.fusion.Matrix.transpose

// Begin mosek.fusion.Matrix.numNonzeros
// End mosek.fusion.Matrix.numNonzeros

// Begin mosek.fusion.Matrix.numColumns
// Method mosek.fusion.Matrix.numColumns @ src/fusion/Matrix.mbi:79:6-54
int32_t mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }
int32_t mosek::fusion::p_Matrix::numColumns()
{
  return dimj;
}
// End mosek.fusion.Matrix.numColumns

// Begin mosek.fusion.Matrix.numRows
// Method mosek.fusion.Matrix.numRows @ src/fusion/Matrix.mbi:75:6-51
int32_t mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }
int32_t mosek::fusion::p_Matrix::numRows()
{
  return dimi;
}
// End mosek.fusion.Matrix.numRows

void mosek::fusion::p_Matrix::destroy()
{
}
void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }
// } class Matrix
// class UnimplementedError { // @ src/fusion/Errors.mbi:284:4-292:5
// mosek.fusion.UnimplementedError.ctor @ src/fusion/Errors.mbi:288:8-291:9
mosek::fusion::UnimplementedError::UnimplementedError
  ( const std::string &  _8246_msg)
 : RuntimeException(_8246_msg)
  {
  }
// mosek.fusion.UnimplementedError.ctor

// } class UnimplementedError
// class FatalError { // @ src/fusion/Errors.mbi:273:4-281:5
// mosek.fusion.FatalError.ctor @ src/fusion/Errors.mbi:277:8-280:9
mosek::fusion::FatalError::FatalError
  ( const std::string &  _8247_msg)
 : RuntimeException(_8247_msg)
  {
  }
// mosek.fusion.FatalError.ctor

// } class FatalError
// class UnexpectedError { // @ src/fusion/Errors.mbi:257:4-270:5
// mosek.fusion.UnexpectedError.ctor @ src/fusion/Errors.mbi:266:8-269:9
mosek::fusion::UnexpectedError::UnexpectedError
  ( ::mosek::fusion::FusionException _8248_e)
 : RuntimeException(_8248_e.toString())
  {
  }
// mosek.fusion.UnexpectedError.ctor

// mosek.fusion.UnexpectedError.ctor @ src/fusion/Errors.mbi:261:8-264:9
mosek::fusion::UnexpectedError::UnexpectedError
  ( const std::string &  _8249_msg)
 : RuntimeException(_8249_msg)
  {
  }
// mosek.fusion.UnexpectedError.ctor

// } class UnexpectedError
// class SparseFormatError { // @ src/fusion/Errors.mbi:245:4-253:5
// mosek.fusion.SparseFormatError.ctor @ src/fusion/Errors.mbi:249:8-252:9
mosek::fusion::SparseFormatError::SparseFormatError
  ( const std::string &  _8250_msg)
 : mosek::fusion::FusionRuntimeException(_8250_msg)
  {
  }
// mosek.fusion.SparseFormatError.ctor

// } class SparseFormatError
// class SolutionError { // @ src/fusion/Errors.mbi:229:4-242:5
// mosek.fusion.SolutionError.ctor @ src/fusion/Errors.mbi:238:8-241:9
mosek::fusion::SolutionError::SolutionError
  ( )
 : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))
  {
  }
// mosek.fusion.SolutionError.ctor

// mosek.fusion.SolutionError.ctor @ src/fusion/Errors.mbi:233:8-236:9
mosek::fusion::SolutionError::SolutionError
  ( const std::string &  _8251_msg)
 : mosek::fusion::FusionException(_8251_msg)
  {
  }
// mosek.fusion.SolutionError.ctor

// } class SolutionError
// class SliceError { // @ src/fusion/Errors.mbi:213:4-226:5
// mosek.fusion.SliceError.ctor @ src/fusion/Errors.mbi:222:8-225:9
mosek::fusion::SliceError::SliceError
  ( )
 : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))
  {
  }
// mosek.fusion.SliceError.ctor

// mosek.fusion.SliceError.ctor @ src/fusion/Errors.mbi:217:8-220:9
mosek::fusion::SliceError::SliceError
  ( const std::string &  _8252_msg)
 : mosek::fusion::FusionRuntimeException(_8252_msg)
  {
  }
// mosek.fusion.SliceError.ctor

// } class SliceError
// class UpdateError { // @ src/fusion/Errors.mbi:196:4-209:5
// mosek.fusion.UpdateError.ctor @ src/fusion/Errors.mbi:205:8-208:9
mosek::fusion::UpdateError::UpdateError
  ( )
 : mosek::fusion::FusionRuntimeException(std::string ("Cannot update parameterized item"))
  {
  }
// mosek.fusion.UpdateError.ctor

// mosek.fusion.UpdateError.ctor @ src/fusion/Errors.mbi:200:8-203:9
mosek::fusion::UpdateError::UpdateError
  ( const std::string &  _8253_msg)
 : mosek::fusion::FusionRuntimeException(_8253_msg)
  {
  }
// mosek.fusion.UpdateError.ctor

// } class UpdateError
// class SetDefinitionError { // @ src/fusion/Errors.mbi:185:4-193:5
// mosek.fusion.SetDefinitionError.ctor @ src/fusion/Errors.mbi:189:8-192:9
mosek::fusion::SetDefinitionError::SetDefinitionError
  ( const std::string &  _8254_msg)
 : mosek::fusion::FusionRuntimeException(_8254_msg)
  {
  }
// mosek.fusion.SetDefinitionError.ctor

// } class SetDefinitionError
// class OptimizeError { // @ src/fusion/Errors.mbi:173:4-181:5
// mosek.fusion.OptimizeError.ctor @ src/fusion/Errors.mbi:177:8-180:9
mosek::fusion::OptimizeError::OptimizeError
  ( const std::string &  _8255_msg)
 : mosek::fusion::FusionRuntimeException(_8255_msg)
  {
  }
// mosek.fusion.OptimizeError.ctor

// } class OptimizeError
// class NameError { // @ src/fusion/Errors.mbi:162:4-170:5
// mosek.fusion.NameError.ctor @ src/fusion/Errors.mbi:166:8-169:9
mosek::fusion::NameError::NameError
  ( const std::string &  _8256_msg)
 : mosek::fusion::FusionRuntimeException(_8256_msg)
  {
  }
// mosek.fusion.NameError.ctor

// } class NameError
// class DeletionError { // @ src/fusion/Errors.mbi:151:4-159:5
// mosek.fusion.DeletionError.ctor @ src/fusion/Errors.mbi:155:8-158:9
mosek::fusion::DeletionError::DeletionError
  ( const std::string &  _8257_msg)
 : mosek::fusion::FusionRuntimeException(_8257_msg)
  {
  }
// mosek.fusion.DeletionError.ctor

// } class DeletionError
// class ModelError { // @ src/fusion/Errors.mbi:138:4-147:5
// mosek.fusion.ModelError.ctor @ src/fusion/Errors.mbi:143:8-146:9
mosek::fusion::ModelError::ModelError
  ( const std::string &  _8258_msg)
 : mosek::fusion::FusionRuntimeException(_8258_msg)
  {
  }
// mosek.fusion.ModelError.ctor

// } class ModelError
// class MatrixError { // @ src/fusion/Errors.mbi:128:4-133:5
// mosek.fusion.MatrixError.ctor @ src/fusion/Errors.mbi:132:8-55
mosek::fusion::MatrixError::MatrixError
  ( const std::string &  _8259_msg)
 : mosek::fusion::FusionRuntimeException(_8259_msg)
  {
  }
// mosek.fusion.MatrixError.ctor

// } class MatrixError
// class DimensionError { // @ src/fusion/Errors.mbi:117:4-122:5
// mosek.fusion.DimensionError.ctor @ src/fusion/Errors.mbi:121:8-56
mosek::fusion::DimensionError::DimensionError
  ( const std::string &  _8260_msg)
 : mosek::fusion::FusionRuntimeException(_8260_msg)
  {
  }
// mosek.fusion.DimensionError.ctor

// } class DimensionError
// class LengthError { // @ src/fusion/Errors.mbi:105:4-110:5
// mosek.fusion.LengthError.ctor @ src/fusion/Errors.mbi:109:8-56
mosek::fusion::LengthError::LengthError
  ( const std::string &  _8261_msg)
 : mosek::fusion::FusionRuntimeException(_8261_msg)
  {
  }
// mosek.fusion.LengthError.ctor

// } class LengthError
// class RangeError { // @ src/fusion/Errors.mbi:96:4-100:5
// mosek.fusion.RangeError.ctor @ src/fusion/Errors.mbi:99:8-56
mosek::fusion::RangeError::RangeError
  ( const std::string &  _8262_msg)
 : mosek::fusion::FusionRuntimeException(_8262_msg)
  {
  }
// mosek.fusion.RangeError.ctor

// } class RangeError
// class IndexError { // @ src/fusion/Errors.mbi:88:4-93:5
// mosek.fusion.IndexError.ctor @ src/fusion/Errors.mbi:92:8-56
mosek::fusion::IndexError::IndexError
  ( const std::string &  _8263_msg)
 : mosek::fusion::FusionRuntimeException(_8263_msg)
  {
  }
// mosek.fusion.IndexError.ctor

// } class IndexError
// class DomainError { // @ src/fusion/Errors.mbi:80:4-85:5
// mosek.fusion.DomainError.ctor @ src/fusion/Errors.mbi:84:6-54
mosek::fusion::DomainError::DomainError
  ( const std::string &  _8264_msg)
 : mosek::fusion::FusionRuntimeException(_8264_msg)
  {
  }
// mosek.fusion.DomainError.ctor

// } class DomainError
// class ValueConversionError { // @ src/fusion/Errors.mbi:68:4-76:5
// mosek.fusion.ValueConversionError.ctor @ src/fusion/Errors.mbi:72:6-75:7
mosek::fusion::ValueConversionError::ValueConversionError
  ( const std::string &  _8265_msg)
 : mosek::fusion::FusionRuntimeException(_8265_msg)
  {
  }
// mosek.fusion.ValueConversionError.ctor

// } class ValueConversionError
// class ParameterError { // @ src/fusion/Errors.mbi:57:4-65:5
// mosek.fusion.ParameterError.ctor @ src/fusion/Errors.mbi:61:6-64:7
mosek::fusion::ParameterError::ParameterError
  ( const std::string &  _8266_msg)
 : mosek::fusion::FusionRuntimeException(_8266_msg)
  {
  }
// mosek.fusion.ParameterError.ctor

// } class ParameterError
// class ExpressionError { // @ src/fusion/Errors.mbi:46:4-54:5
// mosek.fusion.ExpressionError.ctor @ src/fusion/Errors.mbi:50:6-53:7
mosek::fusion::ExpressionError::ExpressionError
  ( const std::string &  _8267_msg)
 : mosek::fusion::FusionRuntimeException(_8267_msg)
  {
  }
// mosek.fusion.ExpressionError.ctor

// } class ExpressionError
// class IOError { // @ src/fusion/Errors.mbi:38:4-43:5
// mosek.fusion.IOError.ctor @ src/fusion/Errors.mbi:42:8-56
mosek::fusion::IOError::IOError
  ( const std::string &  _8268_msg)
 : mosek::fusion::FusionRuntimeException(_8268_msg)
  {
  }
// mosek.fusion.IOError.ctor

// } class IOError
// class FusionRuntimeException { // @ src/fusion/Errors.mbi:24:4-34:5
// mosek.fusion.FusionRuntimeException.ctor @ src/fusion/Errors.mbi:28:6-68
mosek::fusion::FusionRuntimeException::FusionRuntimeException
  ( const std::string &  _8269_msg_)
 : RuntimeException(_8269_msg_)
  {
    msg = _8269_msg_;
  }
// mosek.fusion.FusionRuntimeException.ctor

// Begin mosek.fusion.FusionRuntimeException.toString
// Method mosek.fusion.FusionRuntimeException.toString @ src/fusion/Errors.mbi:33:6-53
std::string mosek::fusion::FusionRuntimeException::toString()
{
  return msg;
}
// End mosek.fusion.FusionRuntimeException.toString

// } class FusionRuntimeException
// class FusionException { // @ src/fusion/Errors.mbi:9:4-18:5
// mosek.fusion.FusionException.ctor @ src/fusion/Errors.mbi:13:6-67
mosek::fusion::FusionException::FusionException
  ( const std::string &  _8270_msg_)
 : Exception(_8270_msg_)
  {
    msg = _8270_msg_;
  }
// mosek.fusion.FusionException.ctor

// Begin mosek.fusion.FusionException.toString
// Method mosek.fusion.FusionException.toString @ src/fusion/Errors.mbi:17:6-53
std::string mosek::fusion::FusionException::toString()
{
  return msg;
}
// End mosek.fusion.FusionException.toString

// } class FusionException
// class LinkedBlocks { // @ src/fusion/LinkedList.monty:203:4-269:5
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinkedBlocks::p_LinkedBlocks
  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinkedBlocks.ctor @ src/fusion/LinkedList.monty:223:6-32
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  ()
{ return new mosek::fusion::LinkedBlocks(); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  () : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }
void mosek::fusion::p_LinkedBlocks::_initialize  ()
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}
// mosek.fusion.LinkedBlocks.ctor

// mosek.fusion.LinkedBlocks.ctor @ src/fusion/LinkedList.monty:216:6-221:7
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  (int32_t _8271_n)
{ return new mosek::fusion::LinkedBlocks(_8271_n); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  (int32_t _8271_n) : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_8271_n); }
void mosek::fusion::p_LinkedBlocks::_initialize  (int32_t _8271_n)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_8271_n);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape((int)128)));
  }
}
// mosek.fusion.LinkedBlocks.ctor

// mosek.fusion.LinkedBlocks.ctor @ src/fusion/LinkedList.monty:209:6-214:7
mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks
  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8272_other)
{ return new mosek::fusion::LinkedBlocks(_8272_other); }
mosek::fusion::LinkedBlocks::LinkedBlocks
  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8272_other) : 
   LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this))
{ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_8272_other); }
void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _8272_other)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_8272_other)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_8272_other)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_8272_other)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_8272_other)->bfirst);
  }
}
// mosek.fusion.LinkedBlocks.ctor

// Begin mosek.fusion.LinkedBlocks.free
// Method mosek.fusion.LinkedBlocks.free @ src/fusion/LinkedList.monty:262:6-268:7
void mosek::fusion::LinkedBlocks :: free(int32_t _8273_bkey) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_8273_bkey); }
void mosek::fusion::p_LinkedBlocks::free(int32_t _8273_bkey)
{
  int32_t _8274_key = ((*bfirst)(_8273_bkey));
  ints->free(_8274_key,((*bsize)(_8273_bkey)));
  ((*bsize)(_8273_bkey)) = (-(int)1);
  ((*bfirst)(_8273_bkey)) = (-(int)1);
  blocks->free(_8273_bkey,(int)1);
}
// End mosek.fusion.LinkedBlocks.free

// Begin mosek.fusion.LinkedBlocks.alloc
// Method mosek.fusion.LinkedBlocks.alloc @ src/fusion/LinkedList.monty:244:6-260:7
int32_t mosek::fusion::LinkedBlocks :: alloc(int32_t _8275_size) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_8275_size); }
int32_t mosek::fusion::p_LinkedBlocks::alloc(int32_t _8275_size)
{
  int32_t _12813_;
  bool _12814_ = (_8275_size > (int)0);
  if (_12814_)
  {
    _12813_ = ints->alloc(_8275_size);
  }
  else
  {
    _12813_ = (-(int)1);
  }
  int32_t _8276_key = _12813_;
  int32_t _8277_bkey = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8278_nbsize = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__8278_nbsize(_8278_nbsize ? _8278_nbsize->raw() : nullptr,_8278_nbsize ? _8278_nbsize->size(0) : 0);
      std::shared_ptr< monty::ndarray< int32_t,1 > > _8279_nbfirst = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int32_t> _ptr__8279_nbfirst(_8279_nbfirst ? _8279_nbfirst->raw() : nullptr,_8279_nbfirst ? _8279_nbfirst->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_8278_nbsize,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_8279_nbfirst,(int)0,(int)((bfirst)->size(0)));
      bsize = _8278_nbsize;
      bfirst = _8279_nbfirst;
    }
  }
  {}
  ((*bfirst)(_8277_bkey)) = _8276_key;
  ((*bsize)(_8277_bkey)) = _8275_size;
  return _8277_bkey;
}
// End mosek.fusion.LinkedBlocks.alloc

// Begin mosek.fusion.LinkedBlocks.maxidx
// Method mosek.fusion.LinkedBlocks.maxidx @ src/fusion/LinkedList.monty:240:6-242:7
int32_t mosek::fusion::LinkedBlocks :: maxidx(int32_t _8280_bkey) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_8280_bkey); }
int32_t mosek::fusion::p_LinkedBlocks::maxidx(int32_t _8280_bkey)
{
  return ints->maxidx(((*bfirst)(_8280_bkey)),((*bsize)(_8280_bkey)));
}
// End mosek.fusion.LinkedBlocks.maxidx

// Begin mosek.fusion.LinkedBlocks.numallocated
// Method mosek.fusion.LinkedBlocks.numallocated @ src/fusion/LinkedList.monty:238:6-72
int32_t mosek::fusion::LinkedBlocks :: numallocated() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numallocated(); }
int32_t mosek::fusion::p_LinkedBlocks::numallocated()
{
  return ints->numallocated();
}
// End mosek.fusion.LinkedBlocks.numallocated

// Begin mosek.fusion.LinkedBlocks.get
// Method mosek.fusion.LinkedBlocks.get @ src/fusion/LinkedList.monty:232:6-236:7
void mosek::fusion::LinkedBlocks :: get(int32_t _8281_bkey,std::shared_ptr< monty::ndarray< int32_t,1 > > _8282_target,int32_t _8283_offset) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_8281_bkey,_8282_target,_8283_offset); }
void mosek::fusion::p_LinkedBlocks::get(int32_t _8281_bkey,std::shared_ptr< monty::ndarray< int32_t,1 > > _8282_target,int32_t _8283_offset)
{
  _checked_ptr_1<int32_t> _ptr__8282_target(_8282_target ? _8282_target->raw() : nullptr, _8282_target ? _8282_target->size(0) : 0);
  ints->get(((*bfirst)(_8281_bkey)),((*bsize)(_8281_bkey)),_8282_target,_8283_offset);
}
// End mosek.fusion.LinkedBlocks.get

// Begin mosek.fusion.LinkedBlocks.numblocks
// Method mosek.fusion.LinkedBlocks.numblocks @ src/fusion/LinkedList.monty:230:6-60
int32_t mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }
int32_t mosek::fusion::p_LinkedBlocks::numblocks()
{
  return (int)((bsize)->size(0));
}
// End mosek.fusion.LinkedBlocks.numblocks

// Begin mosek.fusion.LinkedBlocks.blocksize
// Method mosek.fusion.LinkedBlocks.blocksize @ src/fusion/LinkedList.monty:229:6-71
int32_t mosek::fusion::LinkedBlocks :: blocksize(int32_t _8284_bkey) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_8284_bkey); }
int32_t mosek::fusion::p_LinkedBlocks::blocksize(int32_t _8284_bkey)
{
  return ((*bsize)(_8284_bkey));
}
// End mosek.fusion.LinkedBlocks.blocksize

// Begin mosek.fusion.LinkedBlocks.block_capacity
// Method mosek.fusion.LinkedBlocks.block_capacity @ src/fusion/LinkedList.monty:228:6-73
int32_t mosek::fusion::LinkedBlocks :: block_capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->block_capacity(); }
int32_t mosek::fusion::p_LinkedBlocks::block_capacity()
{
  return blocks->capacity();
}
// End mosek.fusion.LinkedBlocks.block_capacity

// Begin mosek.fusion.LinkedBlocks.capacity
// Method mosek.fusion.LinkedBlocks.capacity @ src/fusion/LinkedList.monty:227:6-65
int32_t mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_LinkedBlocks::capacity()
{
  return ints->capacity();
}
// End mosek.fusion.LinkedBlocks.capacity

// Begin mosek.fusion.LinkedBlocks.validate
// Method mosek.fusion.LinkedBlocks.validate @ src/fusion/LinkedList.monty:225:6-86
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }
bool mosek::fusion::p_LinkedBlocks::validate()
{
  return (ints->validate() && blocks->validate());
}
// End mosek.fusion.LinkedBlocks.validate

void mosek::fusion::p_LinkedBlocks::destroy()
{
bfirst.reset();
bsize.reset();
blocks.reset();
ints.reset();
}
void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }
// } class LinkedBlocks
// class LinkedInts { // @ src/fusion/LinkedList.monty:4:4-200:5
mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }
mosek::fusion::p_LinkedInts::p_LinkedInts
  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis)
{}
// mosek.fusion.LinkedInts.ctor @ src/fusion/LinkedList.monty:72:6-84:7
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  (int32_t _8285_cap_)
{ return new mosek::fusion::LinkedInts(_8285_cap_); }
mosek::fusion::LinkedInts::LinkedInts
  (int32_t _8285_cap_) : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_8285_cap_); }
void mosek::fusion::p_LinkedInts::_initialize  (int32_t _8285_cap_)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    int32_t _12815_;
    bool _12816_ = (_8285_cap_ > (int)0);
    if (_12816_)
    {
      _12815_ = _8285_cap_;
    }
    else
    {
      _12815_ = (int)128;
    }
    int32_t _8286_cap = _12815_;
    next = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8286_cap)));
    prev = std::shared_ptr< monty::ndarray< int32_t,1 > >(new monty::ndarray< int32_t,1 >(monty::shape(_8286_cap)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_8286_cap - (int)1);
    int32_t _12817_ = (int)1;
    int32_t _12818_ = _8286_cap;
    for (int32_t _8287_i = _12817_; _8287_i < _12818_; ++_8287_i)
    {
      {
        ((*prev)(_8287_i)) = (_8287_i - (int)1);
        ((*next)((_8287_i - (int)1))) = _8287_i;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_8286_cap - (int)1))) = (-(int)1);
    nfree = _8286_cap;
  }
}
// mosek.fusion.LinkedInts.ctor

// mosek.fusion.LinkedInts.ctor @ src/fusion/LinkedList.monty:71:6-34
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  ()
{ return new mosek::fusion::LinkedInts(); }
mosek::fusion::LinkedInts::LinkedInts
  () : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }
void mosek::fusion::p_LinkedInts::_initialize  ()
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}
// mosek.fusion.LinkedInts.ctor

// mosek.fusion.LinkedInts.ctor @ src/fusion/LinkedList.monty:62:6-69:7
mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts
  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8288_other)
{ return new mosek::fusion::LinkedInts(_8288_other); }
mosek::fusion::LinkedInts::LinkedInts
  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8288_other) : 
   LinkedInts(new mosek::fusion::p_LinkedInts(this))
{ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_8288_other); }
void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _8288_other)
{
monty::rc_reserve __reserve_this(_pubthis); 
  {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_8288_other)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_8288_other)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_8288_other)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_8288_other)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_8288_other)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_8288_other)->nfree;
  }
}
// mosek.fusion.LinkedInts.ctor

// Begin mosek.fusion.LinkedInts.free
// Method mosek.fusion.LinkedInts.free @ src/fusion/LinkedList.monty:180:6-199:7
void mosek::fusion::LinkedInts :: free(int32_t _8289_i,int32_t _8290_num) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_8289_i,_8290_num); }
void mosek::fusion::p_LinkedInts::free(int32_t _8289_i,int32_t _8290_num)
{
  int32_t _8291_i0 = _8289_i;
  int32_t _8292_i1 = _8291_i0;
  int32_t _12819_ = (int)0;
  int32_t _12820_ = (_8290_num - (int)1);
  for (int32_t _8293_k = _12819_; _8293_k < _12820_; ++_8293_k)
  {
    {
      _8292_i1 = ((*next)(_8292_i1));
    }
  }
  int32_t _8294_p0 = ((*prev)(_8291_i0));
  int32_t _8295_n1 = ((*next)(_8292_i1));
  if ((_8294_p0 >= (int)0))
  {
    {
      ((*next)(_8294_p0)) = _8295_n1;
    }
  }
  else
  {
    {
      first_used = _8295_n1;
    }
  }
  if ((_8295_n1 >= (int)0))
  {
    {
      ((*prev)(_8295_n1)) = _8294_p0;
    }
  }
  {}
  ((*prev)(_8291_i0)) = (-(int)1);
  ((*next)(_8292_i1)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _8292_i1;
    }
  }
  {}
  first_free = _8291_i0;
  nfree += _8290_num;
}
// End mosek.fusion.LinkedInts.free

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ src/fusion/LinkedList.monty:176:6-178:7
int32_t mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }
int32_t mosek::fusion::p_LinkedInts::alloc()
{
  return allocblock((int)1);
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ src/fusion/LinkedList.monty:172:6-174:7
int32_t mosek::fusion::LinkedInts :: alloc(int32_t _8296_n) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_8296_n); }
int32_t mosek::fusion::p_LinkedInts::alloc(int32_t _8296_n)
{
  return allocblock(_8296_n);
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.alloc
// Method mosek.fusion.LinkedInts.alloc @ src/fusion/LinkedList.monty:164:6-170:7
void mosek::fusion::LinkedInts :: alloc(int32_t _8297_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8298_target,int32_t _8299_offset) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_8297_num,_8298_target,_8299_offset); }
void mosek::fusion::p_LinkedInts::alloc(int32_t _8297_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8298_target,int32_t _8299_offset)
{
  _checked_ptr_1<int32_t> _ptr__8298_target(_8298_target ? _8298_target->raw() : nullptr, _8298_target ? _8298_target->size(0) : 0);
  int32_t _8300_i = allocblock(_8297_num);
  int32_t _12821_ = (int)0;
  int32_t _12822_ = _8297_num;
  for (int32_t _8301_j = _12821_; _8301_j < _12822_; ++_8301_j)
  {
    {
      _ptr__8298_target[safe_add( _8301_j,_8299_offset )] = _8300_i;
      _8300_i = ((*next)(_8300_i));
    }
  }
}
// End mosek.fusion.LinkedInts.alloc

// Begin mosek.fusion.LinkedInts.get
// Method mosek.fusion.LinkedInts.get @ src/fusion/LinkedList.monty:156:6-162:7
void mosek::fusion::LinkedInts :: get(int32_t _8302_i,int32_t _8303_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8304_target,int32_t _8305_offset) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_8302_i,_8303_num,_8304_target,_8305_offset); }
void mosek::fusion::p_LinkedInts::get(int32_t _8302_i,int32_t _8303_num,std::shared_ptr< monty::ndarray< int32_t,1 > > _8304_target,int32_t _8305_offset)
{
  _checked_ptr_1<int32_t> _ptr__8304_target(_8304_target ? _8304_target->raw() : nullptr, _8304_target ? _8304_target->size(0) : 0);
  int32_t _8306_ii = _8302_i;
  int32_t _12823_ = (int)0;
  int32_t _12824_ = _8303_num;
  for (int32_t _8307_j = _12823_; _8307_j < _12824_; ++_8307_j)
  {
    {
      _ptr__8304_target[safe_add( _8307_j,_8305_offset )] = _8306_ii;
      _8306_ii = ((*next)(_8306_ii));
    }
  }
}
// End mosek.fusion.LinkedInts.get

// Begin mosek.fusion.LinkedInts.numallocated
// Method mosek.fusion.LinkedInts.numallocated @ src/fusion/LinkedList.monty:154:6-68
int32_t mosek::fusion::LinkedInts :: numallocated() { return mosek::fusion::p_LinkedInts::_get_impl(this)->numallocated(); }
int32_t mosek::fusion::p_LinkedInts::numallocated()
{
  return ((int)((next)->size(0)) - nfree);
}
// End mosek.fusion.LinkedInts.numallocated

// Begin mosek.fusion.LinkedInts.maxidx
// Method mosek.fusion.LinkedInts.maxidx @ src/fusion/LinkedList.monty:143:6-151:7
int32_t mosek::fusion::LinkedInts :: maxidx(int32_t _8308_i,int32_t _8309_num) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_8308_i,_8309_num); }
int32_t mosek::fusion::p_LinkedInts::maxidx(int32_t _8308_i,int32_t _8309_num)
{
  int32_t _8310_maxi = _8308_i;
  int32_t _8311_ii = _8308_i;
  int32_t _12825_ = (int)1;
  int32_t _12826_ = _8309_num;
  for (int32_t _8312_j = _12825_; _8312_j < _12826_; ++_8312_j)
  {
    {
      _8311_ii = ((*next)(_8311_ii));
      if ((_8310_maxi < _8311_ii))
      {
        {
          _8310_maxi = _8311_ii;
        }
      }
      {}
    }
  }
  return _8310_maxi;
}
// End mosek.fusion.LinkedInts.maxidx

// Begin mosek.fusion.LinkedInts.allocblock
// Method mosek.fusion.LinkedInts.allocblock @ src/fusion/LinkedList.monty:115:6-140:7
int32_t mosek::fusion::p_LinkedInts::allocblock(int32_t _8313_num)
{
  int32_t _8314_cap = (int)((next)->size(0));
  if ((nfree < _8313_num))
  {
    {
      int32_t _8315_nalloc = (_8313_num - nfree);
      if ((_8315_nalloc < _8314_cap))
      {
        {
          _8315_nalloc = _8314_cap;
        }
      }
      {}
      recap(safe_add( _8315_nalloc,_8314_cap ));
    }
  }
  {}
  int32_t _8316_i0 = first_free;
  int32_t _8317_i1 = _8316_i0;
  int32_t _12827_ = (int)0;
  int32_t _12828_ = (_8313_num - (int)1);
  for (int32_t _8318_i = _12827_; _8318_i < _12828_; ++_8318_i)
  {
    {
      _8317_i1 = ((*next)(_8317_i1));
    }
  }
  first_free = ((*next)(_8317_i1));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_8317_i1)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _8317_i1;
    }
  }
  {}
  first_used = _8316_i0;
  nfree -= _8313_num;
  return _8316_i0;
}
// End mosek.fusion.LinkedInts.allocblock

// Begin mosek.fusion.LinkedInts.recap
// Method mosek.fusion.LinkedInts.recap @ src/fusion/LinkedList.monty:88:6-112:7
void mosek::fusion::p_LinkedInts::recap(int32_t _8319_ncap)
{
  int32_t _8320_cap = (int)((next)->size(0));
  if ((_8319_ncap > _8320_cap))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_8319_ncap);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_8319_ncap);
      int32_t _12829_ = _8320_cap;
      int32_t _12830_ = (_8319_ncap - (int)1);
      for (int32_t _8321_i = _12829_; _8321_i < _12830_; ++_8321_i)
      {
        {
          ((*next)(_8321_i)) = safe_add( _8321_i,(int)1 );
          ((*prev)(safe_add( _8321_i,(int)1 ))) = _8321_i;
        }
      }
      ((*next)((_8319_ncap - (int)1))) = (-(int)1);
      ((*prev)(_8320_cap)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _8320_cap;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _8320_cap;
        }
      }
      last_free = (_8319_ncap - (int)1);
      nfree += (_8319_ncap - _8320_cap);
    }
  }
  {}
}
// End mosek.fusion.LinkedInts.recap

// Begin mosek.fusion.LinkedInts.capacity
// Method mosek.fusion.LinkedInts.capacity @ src/fusion/LinkedList.monty:86:6-58
int32_t mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }
int32_t mosek::fusion::p_LinkedInts::capacity()
{
  return (int)((next)->size(0));
}
// End mosek.fusion.LinkedInts.capacity

// Begin mosek.fusion.LinkedInts.validate
// Method mosek.fusion.LinkedInts.validate @ src/fusion/LinkedList.monty:16:6-60:7
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }
bool mosek::fusion::p_LinkedInts::validate()
{
  std::shared_ptr< monty::ndarray< bool,1 > > _8322_flags = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int32_t _8323_p = first_used;
  while ( (_8323_p >= (int)0) )
  {
    {
      ((*_8322_flags)(_8323_p)) = true;
      _8323_p = ((*next)(_8323_p));
      if (((_8323_p >= (int)0) && ((*_8322_flags)(_8323_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _8323_p = first_free;
  int32_t _8324_n = (int)0;
  while ( (_8323_p >= (int)0) )
  {
    {
      ++ _8324_n;
      ((*_8322_flags)(_8323_p)) = true;
      _8323_p = ((*next)(_8323_p));
      if (((_8323_p >= (int)0) && ((*_8322_flags)(_8323_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8324_n != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int32_t _12831_ = (int)0;
  int32_t _12832_ = (int)((_8322_flags)->size(0));
  for (int32_t _8325_i = _12831_; _8325_i < _12832_; ++_8325_i)
  {
    {
      if ((!((*_8322_flags)(_8323_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int32_t _12833_ = (int)0;
  int32_t _12834_ = (int)((_8322_flags)->size(0));
  for (int32_t _8326_i = _12833_; _8326_i < _12834_; ++_8326_i)
  {
    {
      ((*_8322_flags)(_8326_i)) = false;
    }
  }
  _8323_p = last_free;
  int32_t _8327_n = (int)0;
  while ( (_8323_p >= (int)0) )
  {
    {
      ++ _8327_n;
      ((*_8322_flags)(_8323_p)) = true;
      _8323_p = ((*prev)(_8323_p));
      if (((_8323_p >= (int)0) && ((*_8322_flags)(_8323_p))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8327_n != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
// End mosek.fusion.LinkedInts.validate

void mosek::fusion::p_LinkedInts::destroy()
{
prev.reset();
next.reset();
}
void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }
// } class LinkedInts
// class Parameters { // @ bld/broby/final/default/src/fusion/Parameters.mbi:4:4-6092:4
mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }
mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }
mosek::fusion::p_Parameters::p_Parameters
  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis)
{}
// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/broby/final/default/src/fusion/Parameters.mbi:4700:0-6089:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8328_M,
    const std::string & _8329_name,
    double _8330_value) { mosek::fusion::p_Parameters::setParameter(_8328_M,_8329_name,_8330_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8328_M,const std::string & _8329_name,double _8330_value)
{
  if (false)
  {
    {
    }
  }
  else if((_8329_name == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8329_name == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8329_name == std::string ("numThreads")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8331_v = _8330_value;
          if (((int)0 <= _8331_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8331_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mtSpincount")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8332_v = _8330_value;
          if ((((int)0 <= _8332_v) && (_8332_v <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8332_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8329_name == std::string ("biMaxIterations")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8333_v = _8330_value;
          if (((int)0 <= _8333_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8333_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8334_v = _8330_value;
          if (((int)0 <= _8334_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8334_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logCutSecondOpt")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8335_v = _8330_value;
          if (((int)0 <= _8335_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8335_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logResponse")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8336_v = _8330_value;
          if (((int)0 <= _8336_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8336_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8329_name == std::string ("logBi")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8337_v = _8330_value;
          if (((int)0 <= _8337_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8337_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logBiFreq")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8338_v = _8330_value;
          if (((int)0 <= _8338_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8338_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8329_name == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8329_name == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8329_name == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8329_name == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8329_name == std::string ("logIntpnt")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8339_v = _8330_value;
          if (((int)0 <= _8339_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8339_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntMaxIterations")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8340_v = _8330_value;
          if (((int)0 <= _8340_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8340_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntOffColTrh")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8341_v = _8330_value;
          if (((int)0 <= _8341_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8341_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8329_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8342_v = _8330_value;
          if (((int)0 <= _8342_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8342_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8329_name == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8329_name == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8329_name == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8343_v = _8330_value;
          if (((-(int)1) <= _8343_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8343_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8329_name == std::string ("presolveLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8344_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8344_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logPresolve")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8345_v = _8330_value;
          if (((int)0 <= _8345_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8345_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8329_name == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8346_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8346_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8347_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8347_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8348_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8348_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("simPrimalCrash")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8349_v = _8330_value;
          if (((int)0 <= _8349_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8349_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logSim")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8350_v = _8330_value;
          if (((int)0 <= _8350_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8350_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logSimMinor")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8351_v = _8330_value;
          if (((int)0 <= _8351_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8351_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logSimFreq")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8352_v = _8330_value;
          if (((int)0 <= _8352_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8352_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8353_v = _8330_value;
          if ((((int)0 <= _8353_v) && (_8353_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8353_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8329_name == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8354_v = _8330_value;
          if ((((int)0 <= _8354_v) && (_8354_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8354_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8329_name == std::string ("simMaxIterations")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8355_v = _8330_value;
          if (((int)0 <= _8355_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8355_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8329_name == std::string ("simRefactorFreq")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8356_v = _8330_value;
          if (((int)0 <= _8356_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8356_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("simSeed")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8357_v = _8330_value;
          if ((((int)0 <= _8357_v) && (_8357_v <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8357_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8329_name == std::string ("logMio")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8358_v = _8330_value;
          if (((int)0 <= _8358_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8358_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logMioFreq")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8359_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8359_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8360_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8360_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8361_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8361_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8362_v = _8330_value;
          if (((int)0 <= _8362_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8362_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8363_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8363_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8329_name == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8364_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8364_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioProbingLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8365_v = _8330_value;
          if ((((-(int)1) <= _8365_v) && (_8365_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8365_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioSymmetryLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8366_v = _8330_value;
          if ((((-(int)1) <= _8366_v) && (_8366_v <= (int)4)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8366_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
    }
  }
  {}
  if ((_8329_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8367_v = _8330_value;
          if ((((int)0 <= _8367_v) && (_8367_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8367_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8368_v = _8330_value;
          if ((((int)0 <= _8368_v) && (_8368_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8368_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8369_v = _8330_value;
          if ((((-(int)1) <= _8369_v) && (_8369_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8369_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8370_v = _8330_value;
          if ((((-(int)1) <= _8370_v) && (_8370_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8370_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8329_name == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8329_name == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8329_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8329_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8329_name == std::string ("mioSeed")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8371_v = _8330_value;
          if (((int)0 <= _8371_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8371_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8329_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
    }
  }
  else if((_8329_name == std::string ("mioDataPermutationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
    }
  }
  {}
  if ((_8329_name == std::string ("writeLpLineWidth")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8372_v = _8330_value;
          if (((int)40 <= _8372_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8372_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  else if((_8329_name == std::string ("writeJsonIndentation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
    }
  }
  else if((_8329_name == std::string ("infeasReportAuto")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
    }
  }
  {}
  if ((_8329_name == std::string ("logInfeasAna")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8373_v = _8330_value;
          if (((int)0 <= _8373_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8373_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8329_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8329_name == std::string ("licensePauseTime")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8374_v = _8330_value;
          if ((((int)0 <= _8374_v) && (_8374_v <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8374_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8329_name == std::string ("log")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8375_v = _8330_value;
          if (((int)0 <= _8375_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8375_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logExpand")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8376_v = _8330_value;
          if (((int)0 <= _8376_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8376_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logFile")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8377_v = _8330_value;
          if (((int)0 <= _8377_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8377_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("logOrder")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8378_v = _8330_value;
          if (((int)0 <= _8378_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8378_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8329_name == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8329_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8379_v = _8330_value;
          if ((((int)0 <= _8379_v) && (_8379_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8379_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8380_v = _8330_value;
          if ((((int)0 <= _8380_v) && (_8380_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8380_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8381_v = _8330_value;
          if (((int)0 <= _8381_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8381_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8329_name == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8329_name == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8329_name == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8329_name == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8329_name == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8329_name == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8329_name == std::string ("simDualCrash")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8382_v = _8330_value;
          if (((int)0 <= _8382_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8382_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8329_name == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8383_v = _8330_value;
          if ((((-(int)1) <= _8383_v) && (_8383_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8383_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8329_name == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8329_name == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8329_name == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8329_name == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  else if((_8329_name == std::string ("mioCutLipro")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
    }
  }
  else if((_8329_name == std::string ("mioConstructSol")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
    }
  }
  {}
  if ((_8329_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8384_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8384_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8385_v = _8330_value;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8385_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8329_name == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8329_name == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8329_name == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8329_name == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8386_v = _8330_value;
          if (((-(int)1) <= _8386_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8386_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_8330_value - (int32_t)_8330_value) == 0.0))
      {
        {
          double _8387_v = _8330_value;
          if ((((-(int)1) <= _8387_v) && (_8387_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8387_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("remoteUseCompression")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
    }
  }
  {}
  if ((_8329_name == std::string ("optimizerMaxTime")))
  {
    {
      double _8388_v = _8330_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8388_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("lowerObjCut")))
  {
    {
      double _8389_v = _8330_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8389_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("upperObjCut")))
  {
    {
      double _8390_v = _8330_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8390_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8391_v = _8330_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8391_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8392_v = _8330_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8392_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolRelGap")))
  {
    {
      double _8393_v = _8330_value;
      if ((1.000000e-14 <= _8393_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8393_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolStepSize")))
  {
    {
      double _8394_v = _8330_value;
      if (((0.000000e+00 <= _8394_v) && (_8394_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8394_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("simLuTolRelPiv")))
  {
    {
      double _8395_v = _8330_value;
      if (((1.000000e-06 <= _8395_v) && (_8395_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8395_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolRelStep")))
  {
    {
      double _8396_v = _8330_value;
      if (((1.000000e-04 <= _8396_v) && (_8396_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8396_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolPath")))
  {
    {
      double _8397_v = _8330_value;
      if (((0.000000e+00 <= _8397_v) && (_8397_v <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8397_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolPfeas")))
  {
    {
      double _8398_v = _8330_value;
      if (((0.000000e+00 <= _8398_v) && (_8398_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8398_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolDfeas")))
  {
    {
      double _8399_v = _8330_value;
      if (((0.000000e+00 <= _8399_v) && (_8399_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8399_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolMuRed")))
  {
    {
      double _8400_v = _8330_value;
      if (((0.000000e+00 <= _8400_v) && (_8400_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8400_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolInfeas")))
  {
    {
      double _8401_v = _8330_value;
      if (((0.000000e+00 <= _8401_v) && (_8401_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8401_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8402_v = _8330_value;
      if (((0.000000e+00 <= _8402_v) && (_8402_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8402_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8403_v = _8330_value;
      if (((0.000000e+00 <= _8403_v) && (_8403_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8403_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8404_v = _8330_value;
      if (((0.000000e+00 <= _8404_v) && (_8404_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8404_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8405_v = _8330_value;
      if (((0.000000e+00 <= _8405_v) && (_8405_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8405_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8406_v = _8330_value;
      if ((1.000000e+00 <= _8406_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8406_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8407_v = _8330_value;
      if (((0.000000e+00 <= _8407_v) && (_8407_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8407_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolPsafe")))
  {
    {
      double _8408_v = _8330_value;
      if ((1.000000e-04 <= _8408_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8408_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("intpntTolDsafe")))
  {
    {
      double _8409_v = _8330_value;
      if ((1.000000e-04 <= _8409_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8409_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioMaxTime")))
  {
    {
      double _8410_v = _8330_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8410_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioRelGapConst")))
  {
    {
      double _8411_v = _8330_value;
      if ((1.000000e-15 <= _8411_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8411_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioTolRelGap")))
  {
    {
      double _8412_v = _8330_value;
      if ((0.000000e+00 <= _8412_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8412_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioTolAbsGap")))
  {
    {
      double _8413_v = _8330_value;
      if ((0.000000e+00 <= _8413_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8413_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8414_v = _8330_value;
      if ((1.000000e-09 <= _8414_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8414_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioDjcMaxBigm")))
  {
    {
      double _8415_v = _8330_value;
      if ((0.000000e+00 <= _8415_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8415_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("basisTolX")))
  {
    {
      double _8416_v = _8330_value;
      if ((1.000000e-09 <= _8416_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8416_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("basisTolS")))
  {
    {
      double _8417_v = _8330_value;
      if ((1.000000e-09 <= _8417_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8417_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("basisRelTolS")))
  {
    {
      double _8418_v = _8330_value;
      if ((0.000000e+00 <= _8418_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8418_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveTolX")))
  {
    {
      double _8419_v = _8330_value;
      if ((0.000000e+00 <= _8419_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8419_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      double _8420_v = _8330_value;
      if ((0.000000e+00 <= _8420_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8420_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveTolS")))
  {
    {
      double _8421_v = _8330_value;
      if ((0.000000e+00 <= _8421_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8421_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveTolAij")))
  {
    {
      double _8422_v = _8330_value;
      if ((1.000000e-15 <= _8422_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8422_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8423_v = _8330_value;
      if ((0.000000e+00 <= _8423_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8423_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("presolveTolRelLindep")))
  {
    {
      double _8424_v = _8330_value;
      if ((0.000000e+00 <= _8424_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8424_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8425_v = _8330_value;
      if ((1.000000e-12 <= _8425_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8425_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioTolFeas")))
  {
    {
      double _8426_v = _8330_value;
      if (((1.000000e-09 <= _8426_v) && (_8426_v <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8426_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8329_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8427_v = _8330_value;
      if (((0.000000e+00 <= _8427_v) && (_8427_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8328_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8427_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8329_name == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8329_name == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8329_name == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8329_name == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8329_name == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8329_name == std::string ("remoteOptserverHost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteOptserverHost)"));
    }
  }
  else if((_8329_name == std::string ("remoteTlsCertPath")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCertPath)"));
    }
  }
  else if((_8329_name == std::string ("remoteTlsCert")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCert)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/broby/final/default/src/fusion/Parameters.mbi:3594:0-4698:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8428_M,
    const std::string & _8429_name,
    int32_t _8430_value) { mosek::fusion::p_Parameters::setParameter(_8428_M,_8429_name,_8430_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8428_M,const std::string & _8429_name,int32_t _8430_value)
{
  if (false)
  {
    {
    }
  }
  else if((_8429_name == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8429_name == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8429_name == std::string ("numThreads")))
  {
    {
      int32_t _8431_v = _8430_value;
      if (((int)0 <= _8431_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8431_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mtSpincount")))
  {
    {
      int32_t _8432_v = _8430_value;
      if ((((int)0 <= _8432_v) && (_8432_v <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8432_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8429_name == std::string ("biMaxIterations")))
  {
    {
      int32_t _8433_v = _8430_value;
      if (((int)0 <= _8433_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8433_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int32_t _8434_v = _8430_value;
      if (((int)0 <= _8434_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8434_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logCutSecondOpt")))
  {
    {
      int32_t _8435_v = _8430_value;
      if (((int)0 <= _8435_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8435_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logResponse")))
  {
    {
      int32_t _8436_v = _8430_value;
      if (((int)0 <= _8436_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8436_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8429_name == std::string ("logBi")))
  {
    {
      int32_t _8437_v = _8430_value;
      if (((int)0 <= _8437_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8437_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logBiFreq")))
  {
    {
      int32_t _8438_v = _8430_value;
      if (((int)0 <= _8438_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8438_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8429_name == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8429_name == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8429_name == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8429_name == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8429_name == std::string ("logIntpnt")))
  {
    {
      int32_t _8439_v = _8430_value;
      if (((int)0 <= _8439_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8439_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntMaxIterations")))
  {
    {
      int32_t _8440_v = _8430_value;
      if (((int)0 <= _8440_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8440_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntOffColTrh")))
  {
    {
      int32_t _8441_v = _8430_value;
      if (((int)0 <= _8441_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8441_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8429_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int32_t _8442_v = _8430_value;
      if (((int)0 <= _8442_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8442_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8429_name == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8429_name == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8429_name == std::string ("intpntMaxNumCor")))
  {
    {
      int32_t _8443_v = _8430_value;
      if (((-(int)1) <= _8443_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8443_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8429_name == std::string ("presolveLevel")))
  {
    {
      int32_t _8444_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8444_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logPresolve")))
  {
    {
      int32_t _8445_v = _8430_value;
      if (((int)0 <= _8445_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8445_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8429_name == std::string ("presolveMaxNumPass")))
  {
    {
      int32_t _8446_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8446_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int32_t _8447_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8447_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int32_t _8448_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8448_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("simPrimalCrash")))
  {
    {
      int32_t _8449_v = _8430_value;
      if (((int)0 <= _8449_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8449_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logSim")))
  {
    {
      int32_t _8450_v = _8430_value;
      if (((int)0 <= _8450_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8450_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logSimMinor")))
  {
    {
      int32_t _8451_v = _8430_value;
      if (((int)0 <= _8451_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8451_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logSimFreq")))
  {
    {
      int32_t _8452_v = _8430_value;
      if (((int)0 <= _8452_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8452_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      int32_t _8453_v = _8430_value;
      if ((((int)0 <= _8453_v) && (_8453_v <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8453_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8429_name == std::string ("simDualRestrictSelection")))
  {
    {
      int32_t _8454_v = _8430_value;
      if ((((int)0 <= _8454_v) && (_8454_v <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8454_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8429_name == std::string ("simMaxIterations")))
  {
    {
      int32_t _8455_v = _8430_value;
      if (((int)0 <= _8455_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8455_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8429_name == std::string ("simRefactorFreq")))
  {
    {
      int32_t _8456_v = _8430_value;
      if (((int)0 <= _8456_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8456_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("simSeed")))
  {
    {
      int32_t _8457_v = _8430_value;
      if ((((int)0 <= _8457_v) && (_8457_v <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8457_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8429_name == std::string ("logMio")))
  {
    {
      int32_t _8458_v = _8430_value;
      if (((int)0 <= _8458_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8458_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logMioFreq")))
  {
    {
      int32_t _8459_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8459_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      int32_t _8460_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8460_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioMaxNumBranches")))
  {
    {
      int32_t _8461_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8461_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int32_t _8462_v = _8430_value;
      if (((int)0 <= _8462_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8462_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioMaxNumSolutions")))
  {
    {
      int32_t _8463_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8463_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8429_name == std::string ("mioHeuristicLevel")))
  {
    {
      int32_t _8464_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8464_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioProbingLevel")))
  {
    {
      int32_t _8465_v = _8430_value;
      if ((((-(int)1) <= _8465_v) && (_8465_v <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8465_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioSymmetryLevel")))
  {
    {
      int32_t _8466_v = _8430_value;
      if ((((-(int)1) <= _8466_v) && (_8466_v <= (int)4)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8466_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
    }
  }
  {}
  if ((_8429_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      int32_t _8467_v = _8430_value;
      if ((((int)0 <= _8467_v) && (_8467_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8467_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      int32_t _8468_v = _8430_value;
      if ((((int)0 <= _8468_v) && (_8468_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8468_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioCutSelectionLevel")))
  {
    {
      int32_t _8469_v = _8430_value;
      if ((((-(int)1) <= _8469_v) && (_8469_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8469_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioVbDetectionLevel")))
  {
    {
      int32_t _8470_v = _8430_value;
      if ((((-(int)1) <= _8470_v) && (_8470_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8470_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8429_name == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8429_name == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8429_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8429_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8429_name == std::string ("mioSeed")))
  {
    {
      int32_t _8471_v = _8430_value;
      if (((int)0 <= _8471_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8471_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8429_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
    }
  }
  else if((_8429_name == std::string ("mioDataPermutationMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
    }
  }
  {}
  if ((_8429_name == std::string ("writeLpLineWidth")))
  {
    {
      int32_t _8472_v = _8430_value;
      if (((int)40 <= _8472_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8472_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  else if((_8429_name == std::string ("writeJsonIndentation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
    }
  }
  else if((_8429_name == std::string ("infeasReportAuto")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
    }
  }
  {}
  if ((_8429_name == std::string ("logInfeasAna")))
  {
    {
      int32_t _8473_v = _8430_value;
      if (((int)0 <= _8473_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8473_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8429_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8429_name == std::string ("licensePauseTime")))
  {
    {
      int32_t _8474_v = _8430_value;
      if ((((int)0 <= _8474_v) && (_8474_v <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8474_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8429_name == std::string ("log")))
  {
    {
      int32_t _8475_v = _8430_value;
      if (((int)0 <= _8475_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8475_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logExpand")))
  {
    {
      int32_t _8476_v = _8430_value;
      if (((int)0 <= _8476_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8476_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logFile")))
  {
    {
      int32_t _8477_v = _8430_value;
      if (((int)0 <= _8477_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8477_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("logOrder")))
  {
    {
      int32_t _8478_v = _8430_value;
      if (((int)0 <= _8478_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8478_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8429_name == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8429_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int32_t _8479_v = _8430_value;
      if ((((int)0 <= _8479_v) && (_8479_v <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8479_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      int32_t _8480_v = _8430_value;
      if ((((int)0 <= _8480_v) && (_8480_v <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8480_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("simMaxNumSetbacks")))
  {
    {
      int32_t _8481_v = _8430_value;
      if (((int)0 <= _8481_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8481_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8429_name == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8429_name == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8429_name == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8429_name == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8429_name == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8429_name == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8429_name == std::string ("simDualCrash")))
  {
    {
      int32_t _8482_v = _8430_value;
      if (((int)0 <= _8482_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8482_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8429_name == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int32_t _8483_v = _8430_value;
      if ((((-(int)1) <= _8483_v) && (_8483_v <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8483_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8429_name == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8429_name == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8429_name == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8429_name == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  else if((_8429_name == std::string ("mioCutLipro")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
    }
  }
  else if((_8429_name == std::string ("mioConstructSol")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
    }
  }
  {}
  if ((_8429_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int32_t _8484_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8484_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int32_t _8485_v = _8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8485_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8429_name == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8429_name == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8429_name == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8429_name == std::string ("mioRinsMaxNodes")))
  {
    {
      int32_t _8486_v = _8430_value;
      if (((-(int)1) <= _8486_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8486_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioFeaspumpLevel")))
  {
    {
      int32_t _8487_v = _8430_value;
      if ((((-(int)1) <= _8487_v) && (_8487_v <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8487_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("remoteUseCompression")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
    }
  }
  {}
  if ((_8429_name == std::string ("optimizerMaxTime")))
  {
    {
      double _8488_v = (double)_8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8488_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("lowerObjCut")))
  {
    {
      double _8489_v = (double)_8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8489_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("upperObjCut")))
  {
    {
      double _8490_v = (double)_8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8490_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8491_v = (double)_8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8491_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8492_v = (double)_8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8492_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolRelGap")))
  {
    {
      double _8493_v = (double)_8430_value;
      if ((1.000000e-14 <= _8493_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8493_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolStepSize")))
  {
    {
      double _8494_v = (double)_8430_value;
      if (((0.000000e+00 <= _8494_v) && (_8494_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8494_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("simLuTolRelPiv")))
  {
    {
      double _8495_v = (double)_8430_value;
      if (((1.000000e-06 <= _8495_v) && (_8495_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8495_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolRelStep")))
  {
    {
      double _8496_v = (double)_8430_value;
      if (((1.000000e-04 <= _8496_v) && (_8496_v <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8496_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolPath")))
  {
    {
      double _8497_v = (double)_8430_value;
      if (((0.000000e+00 <= _8497_v) && (_8497_v <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8497_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolPfeas")))
  {
    {
      double _8498_v = (double)_8430_value;
      if (((0.000000e+00 <= _8498_v) && (_8498_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8498_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolDfeas")))
  {
    {
      double _8499_v = (double)_8430_value;
      if (((0.000000e+00 <= _8499_v) && (_8499_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8499_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolMuRed")))
  {
    {
      double _8500_v = (double)_8430_value;
      if (((0.000000e+00 <= _8500_v) && (_8500_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8500_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolInfeas")))
  {
    {
      double _8501_v = (double)_8430_value;
      if (((0.000000e+00 <= _8501_v) && (_8501_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8501_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8502_v = (double)_8430_value;
      if (((0.000000e+00 <= _8502_v) && (_8502_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8502_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8503_v = (double)_8430_value;
      if (((0.000000e+00 <= _8503_v) && (_8503_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8503_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8504_v = (double)_8430_value;
      if (((0.000000e+00 <= _8504_v) && (_8504_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8504_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8505_v = (double)_8430_value;
      if (((0.000000e+00 <= _8505_v) && (_8505_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8505_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8506_v = (double)_8430_value;
      if ((1.000000e+00 <= _8506_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8506_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8507_v = (double)_8430_value;
      if (((0.000000e+00 <= _8507_v) && (_8507_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8507_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolPsafe")))
  {
    {
      double _8508_v = (double)_8430_value;
      if ((1.000000e-04 <= _8508_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8508_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("intpntTolDsafe")))
  {
    {
      double _8509_v = (double)_8430_value;
      if ((1.000000e-04 <= _8509_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8509_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioMaxTime")))
  {
    {
      double _8510_v = (double)_8430_value;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8510_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioRelGapConst")))
  {
    {
      double _8511_v = (double)_8430_value;
      if ((1.000000e-15 <= _8511_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8511_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioTolRelGap")))
  {
    {
      double _8512_v = (double)_8430_value;
      if ((0.000000e+00 <= _8512_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8512_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioTolAbsGap")))
  {
    {
      double _8513_v = (double)_8430_value;
      if ((0.000000e+00 <= _8513_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8513_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8514_v = (double)_8430_value;
      if ((1.000000e-09 <= _8514_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8514_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioDjcMaxBigm")))
  {
    {
      double _8515_v = (double)_8430_value;
      if ((0.000000e+00 <= _8515_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8515_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("basisTolX")))
  {
    {
      double _8516_v = (double)_8430_value;
      if ((1.000000e-09 <= _8516_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8516_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("basisTolS")))
  {
    {
      double _8517_v = (double)_8430_value;
      if ((1.000000e-09 <= _8517_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8517_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("basisRelTolS")))
  {
    {
      double _8518_v = (double)_8430_value;
      if ((0.000000e+00 <= _8518_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8518_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveTolX")))
  {
    {
      double _8519_v = (double)_8430_value;
      if ((0.000000e+00 <= _8519_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8519_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      double _8520_v = (double)_8430_value;
      if ((0.000000e+00 <= _8520_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8520_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveTolS")))
  {
    {
      double _8521_v = (double)_8430_value;
      if ((0.000000e+00 <= _8521_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8521_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveTolAij")))
  {
    {
      double _8522_v = (double)_8430_value;
      if ((1.000000e-15 <= _8522_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8522_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8523_v = (double)_8430_value;
      if ((0.000000e+00 <= _8523_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8523_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("presolveTolRelLindep")))
  {
    {
      double _8524_v = (double)_8430_value;
      if ((0.000000e+00 <= _8524_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8524_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8525_v = (double)_8430_value;
      if ((1.000000e-12 <= _8525_v))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8525_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioTolFeas")))
  {
    {
      double _8526_v = (double)_8430_value;
      if (((1.000000e-09 <= _8526_v) && (_8526_v <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8526_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8429_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8527_v = (double)_8430_value;
      if (((0.000000e+00 <= _8527_v) && (_8527_v <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8428_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8527_v);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8429_name == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8429_name == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8429_name == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8429_name == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8429_name == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8429_name == std::string ("remoteOptserverHost")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteOptserverHost)"));
    }
  }
  else if((_8429_name == std::string ("remoteTlsCertPath")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCertPath)"));
    }
  }
  else if((_8429_name == std::string ("remoteTlsCert")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteTlsCert)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.setParameter
// Method mosek.fusion.Parameters.setParameter @ bld/broby/final/default/src/fusion/Parameters.mbi:1848:0-3592:1
void mosek::fusion::Parameters::setParameter
  ( monty::rc_ptr< ::mosek::fusion::Model > _8528_M,
    const std::string & _8529_name,
    const std::string & _8530_value) { mosek::fusion::p_Parameters::setParameter(_8528_M,_8529_name,_8530_value); }
void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8528_M,const std::string & _8529_name,const std::string & _8530_value)
{
  if (false)
  {
    {
    }
  }
  {}
  if ((_8529_name == std::string ("autoUpdateSolInfo")))
  {
    {
      int32_t _8531_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8531_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_8531_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("removeUnusedSolutions")))
  {
    {
      int32_t _8532_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8532_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_8532_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("numThreads")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1869:4-1877:108 */
      try
      {
        {
          int32_t _8534_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8534_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8534_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8533_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mtSpincount")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1881:4-1889:109 */
      try
      {
        {
          int32_t _8536_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8536_v) && (_8536_v <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8536_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8535_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("optimizer")))
  {
    {
      int32_t _8537_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8530_value);
      if ((_8537_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_8537_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("biMaxIterations")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1901:4-1909:113 */
      try
      {
        {
          int32_t _8539_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8539_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8539_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8538_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("licenseTrhExpiryWrn")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1913:4-1921:117 */
      try
      {
        {
          int32_t _8541_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8541_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8541_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8540_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logCutSecondOpt")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1925:4-1933:113 */
      try
      {
        {
          int32_t _8543_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8543_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8543_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8542_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logResponse")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1937:4-1945:109 */
      try
      {
        {
          int32_t _8545_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8545_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8545_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8544_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logLocalInfo")))
  {
    {
      int32_t _8546_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8546_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_8546_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("logBi")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1957:4-1965:103 */
      try
      {
        {
          int32_t _8548_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8548_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8548_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8547_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logBiFreq")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:1969:4-1977:107 */
      try
      {
        {
          int32_t _8550_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8550_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8550_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8549_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("biCleanOptimizer")))
  {
    {
      int32_t _8551_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8530_value);
      if ((_8551_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_8551_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intpntStartingPoint")))
  {
    {
      int32_t _8552_v = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_8530_value);
      if ((_8552_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_8552_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intpntDiffStep")))
  {
    {
      int32_t _8553_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8553_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_8553_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intpntScaling")))
  {
    {
      int32_t _8554_v = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8530_value);
      if ((_8554_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_8554_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intpntSolveForm")))
  {
    {
      int32_t _8555_v = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8530_value);
      if ((_8555_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_8555_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("logIntpnt")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2021:4-2029:107 */
      try
      {
        {
          int32_t _8557_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8557_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8557_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8556_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntMaxIterations")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2033:4-2041:117 */
      try
      {
        {
          int32_t _8559_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8559_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8559_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8558_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntOffColTrh")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2045:4-2053:113 */
      try
      {
        {
          int32_t _8561_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8561_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8561_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8560_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntOrderMethod")))
  {
    {
      int32_t _8562_v = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_8530_value);
      if ((_8562_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_8562_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2065:4-2073:119 */
      try
      {
        {
          int32_t _8564_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8564_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8564_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8563_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntBasis")))
  {
    {
      int32_t _8565_v = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_8530_value);
      if ((_8565_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_8565_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("biIgnoreMaxIter")))
  {
    {
      int32_t _8566_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8566_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_8566_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("biIgnoreNumError")))
  {
    {
      int32_t _8567_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8567_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_8567_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intpntMaxNumCor")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2101:4-2109:113 */
      try
      {
        {
          int32_t _8569_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((-(int)1) <= _8569_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8569_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8568_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveUse")))
  {
    {
      int32_t _8570_v = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_8530_value);
      if ((_8570_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_8570_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("presolveLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2121:4-2129:111 */
      try
      {
        {
          int32_t _8572_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8572_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8571_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logPresolve")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2133:4-2141:109 */
      try
      {
        {
          int32_t _8574_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8574_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8574_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8573_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveLindepUse")))
  {
    {
      int32_t _8575_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8575_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_8575_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("presolveMaxNumPass")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2153:4-2161:116 */
      try
      {
        {
          int32_t _8577_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8577_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8576_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2165:4-2173:127 */
      try
      {
        {
          int32_t _8579_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8579_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8578_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveEliminatorMaxFill")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2177:4-2185:123 */
      try
      {
        {
          int32_t _8581_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8581_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8580_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simPrimalCrash")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2189:4-2197:112 */
      try
      {
        {
          int32_t _8583_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8583_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8583_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8582_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logSim")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2201:4-2209:104 */
      try
      {
        {
          int32_t _8585_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8585_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8585_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8584_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logSimMinor")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2213:4-2221:109 */
      try
      {
        {
          int32_t _8587_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8587_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8587_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8586_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logSimFreq")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2225:4-2233:108 */
      try
      {
        {
          int32_t _8589_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8589_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8589_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8588_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simPrimalRestrictSelection")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2237:4-2245:124 */
      try
      {
        {
          int32_t _8591_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8591_v) && (_8591_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8591_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8590_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simPrimalSelection")))
  {
    {
      int32_t _8592_v = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8530_value);
      if ((_8592_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_8592_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simDualRestrictSelection")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2257:4-2265:122 */
      try
      {
        {
          int32_t _8594_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8594_v) && (_8594_v <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8594_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8593_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simDualSelection")))
  {
    {
      int32_t _8595_v = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8530_value);
      if ((_8595_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_8595_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simMaxIterations")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2277:4-2285:114 */
      try
      {
        {
          int32_t _8597_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8597_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8597_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8596_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simHotstartLu")))
  {
    {
      int32_t _8598_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8598_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_8598_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simRefactorFreq")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2297:4-2305:113 */
      try
      {
        {
          int32_t _8600_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8600_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8600_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8599_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simSeed")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2309:4-2317:105 */
      try
      {
        {
          int32_t _8602_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8602_v) && (_8602_v <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8602_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8601_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioMode")))
  {
    {
      int32_t _8603_v = ::mosek::fusion::p_Parameters::string_to_miomode_value(_8530_value);
      if ((_8603_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_8603_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("logMio")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2329:4-2337:104 */
      try
      {
        {
          int32_t _8605_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8605_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8605_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8604_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logMioFreq")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2341:4-2349:108 */
      try
      {
        {
          int32_t _8607_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8607_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8606_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioMaxNumRelaxs")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2353:4-2361:113 */
      try
      {
        {
          int32_t _8609_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8609_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8608_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioMaxNumBranches")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2365:4-2373:115 */
      try
      {
        {
          int32_t _8611_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8611_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8610_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2377:4-2385:120 */
      try
      {
        {
          int32_t _8613_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8613_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8613_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8612_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioMaxNumSolutions")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2389:4-2397:116 */
      try
      {
        {
          int32_t _8615_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8615_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8614_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioNodeSelection")))
  {
    {
      int32_t _8616_v = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_8530_value);
      if ((_8616_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_8616_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioHeuristicLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2409:4-2417:115 */
      try
      {
        {
          int32_t _8618_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8618_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8617_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioProbingLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2421:4-2429:113 */
      try
      {
        {
          int32_t _8620_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((-(int)1) <= _8620_v) && (_8620_v <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8620_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8619_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioSymmetryLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2433:4-2441:114 */
      try
      {
        {
          int32_t _8622_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((-(int)1) <= _8622_v) && (_8622_v <= (int)4)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SYMMETRY_LEVEL"),_8622_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8621_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSymmetryLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioPresolveAggregatorUse")))
  {
    {
      int32_t _8623_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8623_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPresolveAggregatorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PRESOLVE_AGGREGATOR_USE"),_8623_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2453:4-2461:123 */
      try
      {
        {
          int32_t _8625_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8625_v) && (_8625_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NUMERICAL_EMPHASIS_LEVEL"),_8625_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8624_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNumericalEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2465:4-2473:120 */
      try
      {
        {
          int32_t _8627_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8627_v) && (_8627_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_MEMORY_EMPHASIS_LEVEL"),_8627_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8626_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMemoryEmphasisLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioCutSelectionLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2477:4-2485:118 */
      try
      {
        {
          int32_t _8629_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((-(int)1) <= _8629_v) && (_8629_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8629_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8628_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioVbDetectionLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2489:4-2497:117 */
      try
      {
        {
          int32_t _8631_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((-(int)1) <= _8631_v) && (_8631_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8631_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8630_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioBranchDir")))
  {
    {
      int32_t _8632_v = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_8530_value);
      if ((_8632_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_8632_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioRootOptimizer")))
  {
    {
      int32_t _8633_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8530_value);
      if ((_8633_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_8633_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioNodeOptimizer")))
  {
    {
      int32_t _8634_v = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8530_value);
      if ((_8634_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_8634_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioPerspectiveReformulate")))
  {
    {
      int32_t _8635_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8635_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_8635_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int32_t _8636_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8636_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_8636_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioSeed")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2541:4-2549:105 */
      try
      {
        {
          int32_t _8638_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8638_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8638_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8637_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioConicOuterApproximation")))
  {
    {
      int32_t _8639_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8639_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_8639_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioQcqoReformulationMethod")))
  {
    {
      int32_t _8640_v = ::mosek::fusion::p_Parameters::string_to_miqcqoreformmethod_value(_8530_value);
      if ((_8640_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioQcqoReformulationMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_QCQO_REFORMULATION_METHOD"),_8640_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioDataPermutationMethod")))
  {
    {
      int32_t _8641_v = ::mosek::fusion::p_Parameters::string_to_miodatapermmethod_value(_8530_value);
      if ((_8641_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDataPermutationMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_DATA_PERMUTATION_METHOD"),_8641_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("writeLpLineWidth")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2577:4-2585:114 */
      try
      {
        {
          int32_t _8643_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)40 <= _8643_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8643_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8642_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("writeLpFullObj")))
  {
    {
      int32_t _8644_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8644_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_8644_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("writeJsonIndentation")))
  {
    {
      int32_t _8645_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8645_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeJsonIndentation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_WRITE_JSON_INDENTATION"),_8645_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("infeasReportAuto")))
  {
    {
      int32_t _8646_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8646_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasReportAuto)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_REPORT_AUTO"),_8646_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("logInfeasAna")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2613:4-2621:110 */
      try
      {
        {
          int32_t _8648_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8648_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8648_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8647_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("licenseWait")))
  {
    {
      int32_t _8649_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8649_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_8649_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int32_t _8650_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8650_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_8650_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("licensePauseTime")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2641:4-2649:114 */
      try
      {
        {
          int32_t _8652_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8652_v) && (_8652_v <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8652_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8651_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("licenseDebug")))
  {
    {
      int32_t _8653_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8653_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_8653_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("log")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2661:4-2669:101 */
      try
      {
        {
          int32_t _8655_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8655_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8655_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8654_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logExpand")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2673:4-2681:107 */
      try
      {
        {
          int32_t _8657_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8657_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8657_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8656_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logFile")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2685:4-2693:105 */
      try
      {
        {
          int32_t _8659_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8659_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8659_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8658_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("logOrder")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2697:4-2705:106 */
      try
      {
        {
          int32_t _8661_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8661_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8661_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8660_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simScaling")))
  {
    {
      int32_t _8662_v = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8530_value);
      if ((_8662_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_8662_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simScalingMethod")))
  {
    {
      int32_t _8663_v = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_8530_value);
      if ((_8663_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_8663_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2725:4-2733:121 */
      try
      {
        {
          int32_t _8665_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8665_v) && (_8665_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8665_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8664_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simDualPhaseoneMethod")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2737:4-2745:119 */
      try
      {
        {
          int32_t _8667_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((int)0 <= _8667_v) && (_8667_v <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8667_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8666_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simMaxNumSetbacks")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2749:4-2757:115 */
      try
      {
        {
          int32_t _8669_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8669_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8669_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8668_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simHotstart")))
  {
    {
      int32_t _8670_v = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_8530_value);
      if ((_8670_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_8670_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simBasisFactorUse")))
  {
    {
      int32_t _8671_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8671_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_8671_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simDegen")))
  {
    {
      int32_t _8672_v = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_8530_value);
      if ((_8672_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_8672_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simReformulation")))
  {
    {
      int32_t _8673_v = ::mosek::fusion::p_Parameters::string_to_simreform_value(_8530_value);
      if ((_8673_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_8673_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simExploitDupvec")))
  {
    {
      int32_t _8674_v = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_8530_value);
      if ((_8674_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_8674_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simSaveLu")))
  {
    {
      int32_t _8675_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8675_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_8675_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simNonSingular")))
  {
    {
      int32_t _8676_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8676_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_8676_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simDualCrash")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2817:4-2825:110 */
      try
      {
        {
          int32_t _8678_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((int)0 <= _8678_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8678_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8677_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("infeasPreferPrimal")))
  {
    {
      int32_t _8679_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8679_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_8679_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2837:4-2845:124 */
      try
      {
        {
          int32_t _8681_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((-(int)1) <= _8681_v) && (_8681_v <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8681_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8680_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioCutCmir")))
  {
    {
      int32_t _8682_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8682_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_8682_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioCutClique")))
  {
    {
      int32_t _8683_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8683_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_8683_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioCutImpliedBound")))
  {
    {
      int32_t _8684_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8684_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_8684_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioCutKnapsackCover")))
  {
    {
      int32_t _8685_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8685_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_8685_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioCutGmi")))
  {
    {
      int32_t _8686_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8686_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_8686_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioCutLipro")))
  {
    {
      int32_t _8687_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8687_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutLipro)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_LIPRO"),_8687_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioConstructSol")))
  {
    {
      int32_t _8688_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8688_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONSTRUCT_SOL"),_8688_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2905:4-2913:122 */
      try
      {
        {
          int32_t _8690_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8690_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8689_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2917:4-2925:122 */
      try
      {
        {
          int32_t _8692_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8692_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8691_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("cacheLicense")))
  {
    {
      int32_t _8693_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8693_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_8693_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intpntRegularizationUse")))
  {
    {
      int32_t _8694_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8694_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_8694_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simSolveForm")))
  {
    {
      int32_t _8695_v = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8530_value);
      if ((_8695_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_8695_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("simSwitchOptimizer")))
  {
    {
      int32_t _8696_v = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8530_value);
      if ((_8696_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_8696_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("mioRinsMaxNodes")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2961:4-2969:113 */
      try
      {
        {
          int32_t _8698_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if (((-(int)1) <= _8698_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8698_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8697_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioFeaspumpLevel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2973:4-2981:114 */
      try
      {
        {
          int32_t _8700_v = ::mosek::fusion::Utils::Tools::toInt(_8530_value);
          if ((((-(int)1) <= _8700_v) && (_8700_v <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8700_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8699_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("remoteUseCompression")))
  {
    {
      int32_t _8701_v = ::mosek::fusion::p_Parameters::string_to_compresstype_value(_8530_value);
      if ((_8701_v < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteUseCompression)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_IPAR_REMOTE_USE_COMPRESSION"),_8701_v);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("optimizerMaxTime")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:2993:4-3003:114 */
      try
      {
        {
          double _8703_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8703_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8702_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("lowerObjCut")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3007:4-3017:109 */
      try
      {
        {
          double _8705_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8705_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8704_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("upperObjCut")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3021:4-3031:109 */
      try
      {
        {
          double _8707_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8707_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8706_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("upperObjCutFiniteTrh")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3035:4-3045:118 */
      try
      {
        {
          double _8709_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8709_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8708_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3049:4-3059:118 */
      try
      {
        {
          double _8711_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8711_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8710_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolRelGap")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3063:4-3073:113 */
      try
      {
        {
          double _8713_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-14 <= _8713_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8713_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8712_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolStepSize")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3077:4-3087:115 */
      try
      {
        {
          double _8715_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8715_v) && (_8715_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8715_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8714_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simLuTolRelPiv")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3091:4-3101:112 */
      try
      {
        {
          double _8717_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((1.000000e-06 <= _8717_v) && (_8717_v <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8717_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8716_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolRelStep")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3105:4-3115:114 */
      try
      {
        {
          double _8719_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((1.000000e-04 <= _8719_v) && (_8719_v <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8719_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8718_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolPath")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3119:4-3129:111 */
      try
      {
        {
          double _8721_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8721_v) && (_8721_v <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8721_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8720_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolPfeas")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3133:4-3143:112 */
      try
      {
        {
          double _8723_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8723_v) && (_8723_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8723_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8722_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolDfeas")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3147:4-3157:112 */
      try
      {
        {
          double _8725_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8725_v) && (_8725_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8725_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8724_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolMuRed")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3161:4-3171:112 */
      try
      {
        {
          double _8727_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8727_v) && (_8727_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8727_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8726_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolInfeas")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3175:4-3185:113 */
      try
      {
        {
          double _8729_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8729_v) && (_8729_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8729_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8728_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntCoTolRelGap")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3189:4-3199:115 */
      try
      {
        {
          double _8731_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8731_v) && (_8731_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8731_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8730_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntCoTolPfeas")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3203:4-3213:114 */
      try
      {
        {
          double _8733_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8733_v) && (_8733_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8733_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8732_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntCoTolDfeas")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3217:4-3227:114 */
      try
      {
        {
          double _8735_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8735_v) && (_8735_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8735_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8734_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntCoTolMuRed")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3231:4-3241:114 */
      try
      {
        {
          double _8737_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8737_v) && (_8737_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8737_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8736_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntCoTolNearRel")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3245:4-3255:116 */
      try
      {
        {
          double _8739_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e+00 <= _8739_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8739_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8738_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntCoTolInfeas")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3259:4-3269:115 */
      try
      {
        {
          double _8741_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8741_v) && (_8741_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8741_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8740_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolPsafe")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3273:4-3283:112 */
      try
      {
        {
          double _8743_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-04 <= _8743_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8743_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8742_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("intpntTolDsafe")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3287:4-3297:112 */
      try
      {
        {
          double _8745_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-04 <= _8745_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8745_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8744_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioMaxTime")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3301:4-3311:108 */
      try
      {
        {
          double _8747_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8747_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8746_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioRelGapConst")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3315:4-3325:112 */
      try
      {
        {
          double _8749_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-15 <= _8749_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8749_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8748_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioTolRelGap")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3329:4-3339:110 */
      try
      {
        {
          double _8751_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8751_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8751_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8750_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioTolAbsGap")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3343:4-3353:110 */
      try
      {
        {
          double _8753_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8753_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8753_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8752_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioTolAbsRelaxInt")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3357:4-3367:115 */
      try
      {
        {
          double _8755_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-09 <= _8755_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8755_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8754_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioDjcMaxBigm")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3371:4-3381:111 */
      try
      {
        {
          double _8757_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8757_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_DJC_MAX_BIGM"),_8757_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8756_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDjcMaxBigm)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("basisTolX")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3385:4-3395:107 */
      try
      {
        {
          double _8759_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-09 <= _8759_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8759_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8758_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("basisTolS")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3399:4-3409:107 */
      try
      {
        {
          double _8761_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-09 <= _8761_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8761_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8760_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("basisRelTolS")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3413:4-3423:110 */
      try
      {
        {
          double _8763_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8763_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8763_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8762_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveTolX")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3427:4-3437:110 */
      try
      {
        {
          double _8765_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8765_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8765_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8764_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3441:4-3451:133 */
      try
      {
        {
          double _8767_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8767_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_PRIMAL_INFEAS_PERTURBATION"),_8767_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8766_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolPrimalInfeasPerturbation)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveTolS")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3455:4-3465:110 */
      try
      {
        {
          double _8769_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8769_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8769_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8768_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveTolAij")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3469:4-3479:112 */
      try
      {
        {
          double _8771_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-15 <= _8771_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8771_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8770_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveTolAbsLindep")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3483:4-3493:118 */
      try
      {
        {
          double _8773_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8773_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8773_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8772_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("presolveTolRelLindep")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3497:4-3507:118 */
      try
      {
        {
          double _8775_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((0.000000e+00 <= _8775_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8775_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8774_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("simplexAbsTolPiv")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3511:4-3521:114 */
      try
      {
        {
          double _8777_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if ((1.000000e-12 <= _8777_v))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8777_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8776_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioTolFeas")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3525:4-3535:108 */
      try
      {
        {
          double _8779_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((1.000000e-09 <= _8779_v) && (_8779_v <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8779_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8778_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      /* Try @ bld/broby/final/default/src/fusion/Parameters.mbi:3539:4-3549:127 */
      try
      {
        {
          double _8781_v = ::mosek::fusion::Utils::Tools::toDouble(_8530_value);
          if (((0.000000e+00 <= _8781_v) && (_8781_v <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8781_v);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8780_e)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_8529_name == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_8530_value);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_8530_value);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_8530_value);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_8530_value);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_8530_value);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("remoteOptserverHost")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_OPTSERVER_HOST"),_8530_value);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("remoteTlsCertPath")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_TLS_CERT_PATH"),_8530_value);
      return;
    }
  }
  {}
  if ((_8529_name == std::string ("remoteTlsCert")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8528_M.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_TLS_CERT"),_8530_value);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
// End mosek.fusion.Parameters.setParameter

// Begin mosek.fusion.Parameters.string_to_variabletype_value
// Method mosek.fusion.Parameters.string_to_variabletype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1841:0-1846:1
int32_t mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _8782_v)
{
  if ((_8782_v == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8782_v == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_variabletype_value

// Begin mosek.fusion.Parameters.string_to_value_value
// Method mosek.fusion.Parameters.string_to_value_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1835:0-1840:1
int32_t mosek::fusion::p_Parameters::string_to_value_value(const std::string & _8783_v)
{
  if ((_8783_v == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_8783_v == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_value_value

// Begin mosek.fusion.Parameters.string_to_streamtype_value
// Method mosek.fusion.Parameters.string_to_streamtype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1827:0-1834:1
int32_t mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _8784_v)
{
  if ((_8784_v == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8784_v == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8784_v == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8784_v == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_streamtype_value

// Begin mosek.fusion.Parameters.string_to_startpointtype_value
// Method mosek.fusion.Parameters.string_to_startpointtype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1819:0-1826:1
int32_t mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _8785_v)
{
  if ((_8785_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8785_v == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8785_v == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8785_v == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_startpointtype_value

// Begin mosek.fusion.Parameters.string_to_stakey_value
// Method mosek.fusion.Parameters.string_to_stakey_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1808:0-1818:1
int32_t mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _8786_v)
{
  if ((_8786_v == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8786_v == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8786_v == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8786_v == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8786_v == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8786_v == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8786_v == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_stakey_value

// Begin mosek.fusion.Parameters.string_to_sparam_value
// Method mosek.fusion.Parameters.string_to_sparam_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1779:0-1807:1
int32_t mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _8787_v)
{
  if ((_8787_v == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8787_v == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8787_v == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8787_v == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8787_v == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8787_v == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8787_v == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8787_v == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8787_v == std::string ("solFilterXcLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8787_v == std::string ("solFilterXcUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8787_v == std::string ("solFilterXxLow")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8787_v == std::string ("solFilterXxUpr")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8787_v == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8787_v == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8787_v == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8787_v == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8787_v == std::string ("statName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8787_v == std::string ("statKey")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8787_v == std::string ("writeLpGenVarName")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8787_v == std::string ("sensitivityResFileName")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8787_v == std::string ("sensitivityFileName")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8787_v == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8787_v == std::string ("remoteOptserverHost")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8787_v == std::string ("remoteTlsCertPath")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8787_v == std::string ("remoteTlsCert")))
  {
    {
      return (int)14;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_sparam_value

// Begin mosek.fusion.Parameters.string_to_solveform_value
// Method mosek.fusion.Parameters.string_to_solveform_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1772:0-1778:1
int32_t mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _8788_v)
{
  if ((_8788_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8788_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8788_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solveform_value

// Begin mosek.fusion.Parameters.string_to_soltype_value
// Method mosek.fusion.Parameters.string_to_soltype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1765:0-1771:1
int32_t mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _8789_v)
{
  if ((_8789_v == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8789_v == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8789_v == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_soltype_value

// Begin mosek.fusion.Parameters.string_to_solsta_value
// Method mosek.fusion.Parameters.string_to_solsta_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1751:0-1764:1
int32_t mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _8790_v)
{
  if ((_8790_v == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8790_v == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8790_v == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8790_v == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8790_v == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8790_v == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8790_v == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8790_v == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8790_v == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8790_v == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solsta_value

// Begin mosek.fusion.Parameters.string_to_solitem_value
// Method mosek.fusion.Parameters.string_to_solitem_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1739:0-1750:1
int32_t mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _8791_v)
{
  if ((_8791_v == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8791_v == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8791_v == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8791_v == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8791_v == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8791_v == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8791_v == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8791_v == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solitem_value

// Begin mosek.fusion.Parameters.string_to_simseltype_value
// Method mosek.fusion.Parameters.string_to_simseltype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1729:0-1738:1
int32_t mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _8792_v)
{
  if ((_8792_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8792_v == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8792_v == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8792_v == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8792_v == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8792_v == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simseltype_value

// Begin mosek.fusion.Parameters.string_to_sensitivitytype_value
// Method mosek.fusion.Parameters.string_to_sensitivitytype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1724:0-1728:1
int32_t mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _8793_v)
{
  if ((_8793_v == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_sensitivitytype_value

// Begin mosek.fusion.Parameters.string_to_scalingmethod_value
// Method mosek.fusion.Parameters.string_to_scalingmethod_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1718:0-1723:1
int32_t mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _8794_v)
{
  if ((_8794_v == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8794_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_scalingmethod_value

// Begin mosek.fusion.Parameters.string_to_scalingtype_value
// Method mosek.fusion.Parameters.string_to_scalingtype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1712:0-1717:1
int32_t mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _8795_v)
{
  if ((_8795_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8795_v == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_scalingtype_value

// Begin mosek.fusion.Parameters.string_to_rescodetype_value
// Method mosek.fusion.Parameters.string_to_rescodetype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1703:0-1711:1
int32_t mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _8796_v)
{
  if ((_8796_v == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8796_v == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8796_v == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8796_v == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8796_v == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_rescodetype_value

// Begin mosek.fusion.Parameters.string_to_rescode_value
// Method mosek.fusion.Parameters.string_to_rescode_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1167:0-1702:1
int32_t mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _8797_v)
{
  if ((_8797_v == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnInvalidMpsName")))
  {
    {
      return (int)504;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnInvalidMpsObjName")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)509;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnPresolvePrimalPertubations")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)830;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)831;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnWriteLpInvalidVarNames")))
  {
    {
      return (int)854;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnWriteLpDuplicateVarNames")))
  {
    {
      return (int)855;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnWriteLpInvalidConNames")))
  {
    {
      return (int)856;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnWriteLpDuplicateConNames")))
  {
    {
      return (int)857;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnNoInfeasibilityReportWhenMatrixVariables")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnModifiedDoubleParameter")))
  {
    {
      return (int)970;
    }
  }
  {}
  if ((_8797_v == std::string ("wrnLargeFij")))
  {
    {
      return (int)980;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseOldServerVersion")))
  {
    {
      return (int)1003;
    }
  }
  {}
  if ((_8797_v == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_8797_v == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_8797_v == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_8797_v == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_8797_v == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_8797_v == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_8797_v == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_8797_v == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_8797_v == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_8797_v == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_8797_v == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_8797_v == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_8797_v == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_8797_v == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_8797_v == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_8797_v == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_8797_v == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_8797_v == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_8797_v == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_8797_v == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_8797_v == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_8797_v == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_8797_v == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_8797_v == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_8797_v == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_8797_v == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_8797_v == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_8797_v == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_8797_v == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_8797_v == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_8797_v == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_8797_v == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_8797_v == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_8797_v == std::string ("errSparsitySpecification")))
  {
    {
      return (int)1073;
    }
  }
  {}
  if ((_8797_v == std::string ("errMismatchingDimension")))
  {
    {
      return (int)1074;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_8797_v == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_8797_v == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_8797_v == std::string ("errDimensionSpecification")))
  {
    {
      return (int)1082;
    }
  }
  {}
  if ((_8797_v == std::string ("errAxisNameSpecification")))
  {
    {
      return (int)1083;
    }
  }
  {}
  if ((_8797_v == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidKey")))
  {
    {
      return (int)1129;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidIndicatorConstraint")))
  {
    {
      return (int)1130;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidIndicatorVariable")))
  {
    {
      return (int)1131;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidIndicatorValue")))
  {
    {
      return (int)1132;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsInvalidIndicatorQuadraticConstraint")))
  {
    {
      return (int)1133;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfSyntax")))
  {
    {
      return (int)1134;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1136;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfMismatchedTag")))
  {
    {
      return (int)1137;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfDuplicateBound")))
  {
    {
      return (int)1138;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfDuplicateConstraintName")))
  {
    {
      return (int)1139;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfInvalidConeType")))
  {
    {
      return (int)1140;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfIncorrectTagParam")))
  {
    {
      return (int)1141;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfInvalidTag")))
  {
    {
      return (int)1142;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfDuplicateConeEntry")))
  {
    {
      return (int)1143;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfTooLarge")))
  {
    {
      return (int)1144;
    }
  }
  {}
  if ((_8797_v == std::string ("errOpfDualIntegerSolution")))
  {
    {
      return (int)1146;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_8797_v == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_8797_v == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_8797_v == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_8797_v == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpIndicatorVar")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_8797_v == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_8797_v == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_8797_v == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_8797_v == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_8797_v == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_8797_v == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_8797_v == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_8797_v == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_8797_v == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_8797_v == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_8797_v == std::string ("errPtfIncompatibility")))
  {
    {
      return (int)1181;
    }
  }
  {}
  if ((_8797_v == std::string ("errPtfUndefinedItem")))
  {
    {
      return (int)1182;
    }
  }
  {}
  if ((_8797_v == std::string ("errPtfInconsistency")))
  {
    {
      return (int)1183;
    }
  }
  {}
  if ((_8797_v == std::string ("errPtfFormat")))
  {
    {
      return (int)1184;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_8797_v == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_8797_v == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_8797_v == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_8797_v == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_8797_v == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_8797_v == std::string ("errIndexIsNotUnique")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamName")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamNameDou")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamNameInt")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamNameStr")))
  {
    {
      return (int)1209;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_8797_v == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_8797_v == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_8797_v == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_8797_v == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_8797_v == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_8797_v == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_8797_v == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_8797_v == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_8797_v == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_8797_v == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_8797_v == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_8797_v == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_8797_v == std::string ("errUnallowedWhichsol")))
  {
    {
      return (int)1248;
    }
  }
  {}
  if ((_8797_v == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_8797_v == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_8797_v == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_8797_v == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_8797_v == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_8797_v == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_8797_v == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_8797_v == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_8797_v == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_8797_v == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_8797_v == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_8797_v == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_8797_v == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_8797_v == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_8797_v == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_8797_v == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_8797_v == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_8797_v == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_8797_v == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_8797_v == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_8797_v == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_8797_v == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_8797_v == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_8797_v == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_8797_v == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_8797_v == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_8797_v == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_8797_v == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_8797_v == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_8797_v == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_8797_v == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_8797_v == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_8797_v == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_8797_v == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_8797_v == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_8797_v == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_8797_v == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_8797_v == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfInDoubleData")))
  {
    {
      return (int)1451;
    }
  }
  {}
  if ((_8797_v == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_8797_v == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidCfix")))
  {
    {
      return (int)1469;
    }
  }
  {}
  if ((_8797_v == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_8797_v == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_8797_v == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidCj")))
  {
    {
      return (int)1474;
    }
  }
  {}
  if ((_8797_v == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_8797_v == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_8797_v == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_8797_v == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_8797_v == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_8797_v == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_8797_v == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_8797_v == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_8797_v == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_8797_v == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_8797_v == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_8797_v == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_8797_v == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_8797_v == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_8797_v == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_8797_v == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_8797_v == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_8797_v == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_8797_v == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_8797_v == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_8797_v == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_8797_v == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_8797_v == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_8797_v == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_8797_v == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_8797_v == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_8797_v == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_8797_v == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_8797_v == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_8797_v == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_8797_v == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_8797_v == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_8797_v == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_8797_v == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_8797_v == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_8797_v == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_8797_v == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_8797_v == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_8797_v == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_8797_v == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_8797_v == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_8797_v == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_8797_v == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_8797_v == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_8797_v == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_8797_v == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_8797_v == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForQuadraticTerms")))
  {
    {
      return (int)4006;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForDisjunctiveConstraints")))
  {
    {
      return (int)4011;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFileFormatForAffineConicConstraints")))
  {
    {
      return (int)4012;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateDomainNames")))
  {
    {
      return (int)4504;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateDjcNames")))
  {
    {
      return (int)4505;
    }
  }
  {}
  if ((_8797_v == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgumentIsTooSmall")))
  {
    {
      return (int)5004;
    }
  }
  {}
  if ((_8797_v == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_8797_v == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_8797_v == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_8797_v == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_8797_v == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7127;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7140;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7141;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidNumPsdcon")))
  {
    {
      return (int)7200;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfDuplicatePsdcon")))
  {
    {
      return (int)7201;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidDimensionOfPsdcon")))
  {
    {
      return (int)7202;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidPsdconIndex")))
  {
    {
      return (int)7203;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidPsdconVariableIndex")))
  {
    {
      return (int)7204;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfInvalidPsdconBlockIndex")))
  {
    {
      return (int)7205;
    }
  }
  {}
  if ((_8797_v == std::string ("errCbfUnsupportedChange")))
  {
    {
      return (int)7210;
    }
  }
  {}
  if ((_8797_v == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_8797_v == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_8797_v == std::string ("errMpsWriteCplexInvalidConeType")))
  {
    {
      return (int)7750;
    }
  }
  {}
  if ((_8797_v == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_8797_v == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_8797_v == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_8797_v == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_8797_v == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerAddress")))
  {
    {
      return (int)8004;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerCertificate")))
  {
    {
      return (int)8005;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerTlsClient")))
  {
    {
      return (int)8006;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerAccessToken")))
  {
    {
      return (int)8007;
    }
  }
  {}
  if ((_8797_v == std::string ("errServerProblemSize")))
  {
    {
      return (int)8008;
    }
  }
  {}
  if ((_8797_v == std::string ("errDuplicateFij")))
  {
    {
      return (int)20100;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidFij")))
  {
    {
      return (int)20101;
    }
  }
  {}
  if ((_8797_v == std::string ("errHugeFij")))
  {
    {
      return (int)20102;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidG")))
  {
    {
      return (int)20103;
    }
  }
  {}
  if ((_8797_v == std::string ("errInvalidB")))
  {
    {
      return (int)20150;
    }
  }
  {}
  if ((_8797_v == std::string ("errDomainInvalidIndex")))
  {
    {
      return (int)20400;
    }
  }
  {}
  if ((_8797_v == std::string ("errDomainDimension")))
  {
    {
      return (int)20401;
    }
  }
  {}
  if ((_8797_v == std::string ("errDomainDimensionPsd")))
  {
    {
      return (int)20402;
    }
  }
  {}
  if ((_8797_v == std::string ("errNotPowerDomain")))
  {
    {
      return (int)20403;
    }
  }
  {}
  if ((_8797_v == std::string ("errDomainPowerInvalidAlpha")))
  {
    {
      return (int)20404;
    }
  }
  {}
  if ((_8797_v == std::string ("errDomainPowerNegativeAlpha")))
  {
    {
      return (int)20405;
    }
  }
  {}
  if ((_8797_v == std::string ("errDomainPowerNleft")))
  {
    {
      return (int)20406;
    }
  }
  {}
  if ((_8797_v == std::string ("errAfeInvalidIndex")))
  {
    {
      return (int)20500;
    }
  }
  {}
  if ((_8797_v == std::string ("errAccInvalidIndex")))
  {
    {
      return (int)20600;
    }
  }
  {}
  if ((_8797_v == std::string ("errAccInvalidEntryIndex")))
  {
    {
      return (int)20601;
    }
  }
  {}
  if ((_8797_v == std::string ("errAccAfeDomainMismatch")))
  {
    {
      return (int)20602;
    }
  }
  {}
  if ((_8797_v == std::string ("errDjcInvalidIndex")))
  {
    {
      return (int)20700;
    }
  }
  {}
  if ((_8797_v == std::string ("errDjcUnsupportedDomainType")))
  {
    {
      return (int)20701;
    }
  }
  {}
  if ((_8797_v == std::string ("errDjcAfeDomainMismatch")))
  {
    {
      return (int)20702;
    }
  }
  {}
  if ((_8797_v == std::string ("errDjcInvalidTermSize")))
  {
    {
      return (int)20703;
    }
  }
  {}
  if ((_8797_v == std::string ("errDjcDomainTermsizeMismatch")))
  {
    {
      return (int)20704;
    }
  }
  {}
  if ((_8797_v == std::string ("errDjcTotalNumTermsMismatch")))
  {
    {
      return (int)20705;
    }
  }
  {}
  if ((_8797_v == std::string ("errUndefSolution")))
  {
    {
      return (int)22000;
    }
  }
  {}
  if ((_8797_v == std::string ("errNoDoty")))
  {
    {
      return (int)22010;
    }
  }
  {}
  if ((_8797_v == std::string ("trmMaxIterations")))
  {
    {
      return (int)100000;
    }
  }
  {}
  if ((_8797_v == std::string ("trmMaxTime")))
  {
    {
      return (int)100001;
    }
  }
  {}
  if ((_8797_v == std::string ("trmObjectiveRange")))
  {
    {
      return (int)100002;
    }
  }
  {}
  if ((_8797_v == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)100008;
    }
  }
  {}
  if ((_8797_v == std::string ("trmMioNumBranches")))
  {
    {
      return (int)100009;
    }
  }
  {}
  if ((_8797_v == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)100015;
    }
  }
  {}
  if ((_8797_v == std::string ("trmStall")))
  {
    {
      return (int)100006;
    }
  }
  {}
  if ((_8797_v == std::string ("trmUserCallback")))
  {
    {
      return (int)100007;
    }
  }
  {}
  if ((_8797_v == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)100020;
    }
  }
  {}
  if ((_8797_v == std::string ("trmNumericalProblem")))
  {
    {
      return (int)100025;
    }
  }
  {}
  if ((_8797_v == std::string ("trmLostRace")))
  {
    {
      return (int)100027;
    }
  }
  {}
  if ((_8797_v == std::string ("trmInternal")))
  {
    {
      return (int)100030;
    }
  }
  {}
  if ((_8797_v == std::string ("trmInternalStop")))
  {
    {
      return (int)100031;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_rescode_value

// Begin mosek.fusion.Parameters.string_to_xmlwriteroutputtype_value
// Method mosek.fusion.Parameters.string_to_xmlwriteroutputtype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1161:0-1166:1
int32_t mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _8798_v)
{
  if ((_8798_v == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8798_v == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_xmlwriteroutputtype_value

// Begin mosek.fusion.Parameters.string_to_prosta_value
// Method mosek.fusion.Parameters.string_to_prosta_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1148:0-1160:1
int32_t mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _8799_v)
{
  if ((_8799_v == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8799_v == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8799_v == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8799_v == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8799_v == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8799_v == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8799_v == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8799_v == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8799_v == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_prosta_value

// Begin mosek.fusion.Parameters.string_to_problemtype_value
// Method mosek.fusion.Parameters.string_to_problemtype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1139:0-1147:1
int32_t mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _8800_v)
{
  if ((_8800_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8800_v == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8800_v == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8800_v == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8800_v == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_problemtype_value

// Begin mosek.fusion.Parameters.string_to_problemitem_value
// Method mosek.fusion.Parameters.string_to_problemitem_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1132:0-1138:1
int32_t mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _8801_v)
{
  if ((_8801_v == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8801_v == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8801_v == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_problemitem_value

// Begin mosek.fusion.Parameters.string_to_parametertype_value
// Method mosek.fusion.Parameters.string_to_parametertype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1124:0-1131:1
int32_t mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _8802_v)
{
  if ((_8802_v == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8802_v == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8802_v == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8802_v == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_parametertype_value

// Begin mosek.fusion.Parameters.string_to_presolvemode_value
// Method mosek.fusion.Parameters.string_to_presolvemode_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1117:0-1123:1
int32_t mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _8803_v)
{
  if ((_8803_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8803_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8803_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_presolvemode_value

// Begin mosek.fusion.Parameters.string_to_orderingtype_value
// Method mosek.fusion.Parameters.string_to_orderingtype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1107:0-1116:1
int32_t mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _8804_v)
{
  if ((_8804_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8804_v == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8804_v == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8804_v == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8804_v == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8804_v == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_orderingtype_value

// Begin mosek.fusion.Parameters.string_to_optimizertype_value
// Method mosek.fusion.Parameters.string_to_optimizertype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1096:0-1106:1
int32_t mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _8805_v)
{
  if ((_8805_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8805_v == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8805_v == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8805_v == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8805_v == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8805_v == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8805_v == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_optimizertype_value

// Begin mosek.fusion.Parameters.string_to_onoffkey_value
// Method mosek.fusion.Parameters.string_to_onoffkey_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1090:0-1095:1
int32_t mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _8806_v)
{
  if ((_8806_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8806_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_onoffkey_value

// Begin mosek.fusion.Parameters.string_to_objsense_value
// Method mosek.fusion.Parameters.string_to_objsense_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1084:0-1089:1
int32_t mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _8807_v)
{
  if ((_8807_v == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8807_v == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_objsense_value

// Begin mosek.fusion.Parameters.string_to_mpsformat_value
// Method mosek.fusion.Parameters.string_to_mpsformat_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1076:0-1083:1
int32_t mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _8808_v)
{
  if ((_8808_v == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8808_v == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8808_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8808_v == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mpsformat_value

// Begin mosek.fusion.Parameters.string_to_mionodeseltype_value
// Method mosek.fusion.Parameters.string_to_mionodeseltype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1068:0-1075:1
int32_t mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _8809_v)
{
  if ((_8809_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8809_v == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8809_v == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8809_v == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mionodeseltype_value

// Begin mosek.fusion.Parameters.string_to_miomode_value
// Method mosek.fusion.Parameters.string_to_miomode_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1062:0-1067:1
int32_t mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _8810_v)
{
  if ((_8810_v == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8810_v == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miomode_value

// Begin mosek.fusion.Parameters.string_to_miocontsoltype_value
// Method mosek.fusion.Parameters.string_to_miocontsoltype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1054:0-1061:1
int32_t mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _8811_v)
{
  if ((_8811_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8811_v == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8811_v == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8811_v == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miocontsoltype_value

// Begin mosek.fusion.Parameters.string_to_miodatapermmethod_value
// Method mosek.fusion.Parameters.string_to_miodatapermmethod_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1047:0-1053:1
int32_t mosek::fusion::p_Parameters::string_to_miodatapermmethod_value(const std::string & _8812_v)
{
  if ((_8812_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8812_v == std::string ("cyclicShift")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8812_v == std::string ("random")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miodatapermmethod_value

// Begin mosek.fusion.Parameters.string_to_miqcqoreformmethod_value
// Method mosek.fusion.Parameters.string_to_miqcqoreformmethod_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1037:0-1046:1
int32_t mosek::fusion::p_Parameters::string_to_miqcqoreformmethod_value(const std::string & _8813_v)
{
  if ((_8813_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8813_v == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8813_v == std::string ("linearization")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8813_v == std::string ("eigenValMethod")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8813_v == std::string ("diagSdp")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8813_v == std::string ("relaxSdp")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_miqcqoreformmethod_value

// Begin mosek.fusion.Parameters.string_to_branchdir_value
// Method mosek.fusion.Parameters.string_to_branchdir_value @ bld/broby/final/default/src/fusion/Parameters.mbi:1025:0-1036:1
int32_t mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _8814_v)
{
  if ((_8814_v == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8814_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8814_v == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8814_v == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8814_v == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8814_v == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8814_v == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8814_v == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_branchdir_value

// Begin mosek.fusion.Parameters.string_to_iparam_value
// Method mosek.fusion.Parameters.string_to_iparam_value @ bld/broby/final/default/src/fusion/Parameters.mbi:834:0-1024:1
int32_t mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _8815_v)
{
  if ((_8815_v == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8815_v == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntPurify")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8815_v == std::string ("numThreads")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8815_v == std::string ("timingLevel")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_8815_v == std::string ("mtSpincount")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8815_v == std::string ("maxNumWarnings")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8815_v == std::string ("optimizer")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8815_v == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8815_v == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8815_v == std::string ("logIncludeSummary")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8815_v == std::string ("logCutSecondOpt")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8815_v == std::string ("logAnaPro")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8815_v == std::string ("logResponse")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8815_v == std::string ("logLocalInfo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8815_v == std::string ("logBi")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8815_v == std::string ("logBiFreq")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8815_v == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntStartingPoint")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntScaling")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntSolveForm")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8815_v == std::string ("logIntpnt")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntOffColTrh")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntOrderMethod")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8815_v == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8815_v == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveUse")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveLevel")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8815_v == std::string ("logPresolve")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveLindepUse")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8815_v == std::string ("simDetectPwl")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_8815_v == std::string ("simStabilityPriority")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_8815_v == std::string ("simPrimalCrash")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_8815_v == std::string ("logSim")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8815_v == std::string ("logSimMinor")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8815_v == std::string ("logSimFreq")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8815_v == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_8815_v == std::string ("simPrimalSelection")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_8815_v == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_8815_v == std::string ("simDualSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_8815_v == std::string ("simMaxIterations")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_8815_v == std::string ("simHotstartLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_8815_v == std::string ("simRefactorFreq")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_8815_v == std::string ("simSeed")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_8815_v == std::string ("mioMode")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8815_v == std::string ("logMio")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8815_v == std::string ("logMioFreq")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8815_v == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8815_v == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8815_v == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8815_v == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8815_v == std::string ("mioNodeSelection")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8815_v == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8815_v == std::string ("mioProbingLevel")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8815_v == std::string ("mioSymmetryLevel")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8815_v == std::string ("mioPresolveAggregatorUse")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8815_v == std::string ("mioNumericalEmphasisLevel")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8815_v == std::string ("mioMemoryEmphasisLevel")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8815_v == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8815_v == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8815_v == std::string ("mioBranchDir")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8815_v == std::string ("mioRootOptimizer")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8815_v == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8815_v == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8815_v == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8815_v == std::string ("mioSeed")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8815_v == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8815_v == std::string ("mioQcqoReformulationMethod")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8815_v == std::string ("mioDataPermutationMethod")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8815_v == std::string ("readKeepFreeCon")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_8815_v == std::string ("readMpsFormat")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_8815_v == std::string ("writeMpsFormat")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_8815_v == std::string ("readMpsWidth")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_8815_v == std::string ("readDebug")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8815_v == std::string ("writeDataParam")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_8815_v == std::string ("writeFreeCon")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_8815_v == std::string ("writeGenericNames")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_8815_v == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_8815_v == std::string ("writeCompression")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_8815_v == std::string ("writeMpsInt")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_8815_v == std::string ("writeLpLineWidth")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_8815_v == std::string ("writeLpFullObj")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_8815_v == std::string ("writeJsonIndentation")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_8815_v == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)183;
    }
  }
  {}
  if ((_8815_v == std::string ("writeSolHead")))
  {
    {
      return (int)182;
    }
  }
  {}
  if ((_8815_v == std::string ("writeSolConstraints")))
  {
    {
      return (int)181;
    }
  }
  {}
  if ((_8815_v == std::string ("writeSolVariables")))
  {
    {
      return (int)184;
    }
  }
  {}
  if ((_8815_v == std::string ("writeSolBarvariables")))
  {
    {
      return (int)180;
    }
  }
  {}
  if ((_8815_v == std::string ("writeBasHead")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_8815_v == std::string ("writeBasConstraints")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_8815_v == std::string ("writeBasVariables")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_8815_v == std::string ("writeIntHead")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_8815_v == std::string ("writeIntConstraints")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_8815_v == std::string ("writeIntVariables")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_8815_v == std::string ("solReadNameWidth")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_8815_v == std::string ("solReadWidth")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_8815_v == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8815_v == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8815_v == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8815_v == std::string ("logInfeasAna")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8815_v == std::string ("licenseWait")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8815_v == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8815_v == std::string ("licensePauseTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8815_v == std::string ("licenseDebug")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8815_v == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_8815_v == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_8815_v == std::string ("log")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8815_v == std::string ("logExpand")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8815_v == std::string ("logFile")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8815_v == std::string ("logOrder")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8815_v == std::string ("logSensitivity")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8815_v == std::string ("logSensitivityOpt")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8815_v == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_8815_v == std::string ("writeTaskIncSol")))
  {
    {
      return (int)185;
    }
  }
  {}
  if ((_8815_v == std::string ("paramReadCaseName")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8815_v == std::string ("paramReadIgnError")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8815_v == std::string ("solutionCallback")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_8815_v == std::string ("simScaling")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_8815_v == std::string ("simScalingMethod")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_8815_v == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_8815_v == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_8815_v == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_8815_v == std::string ("simHotstart")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_8815_v == std::string ("simBasisFactorUse")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_8815_v == std::string ("simDegen")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_8815_v == std::string ("simReformulation")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_8815_v == std::string ("simExploitDupvec")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_8815_v == std::string ("simSaveLu")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_8815_v == std::string ("simNonSingular")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_8815_v == std::string ("simDualCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_8815_v == std::string ("logStorage")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8815_v == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteLineLength")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteHints")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteParameters")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteProblem")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteHeader")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteSolutions")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteSolBas")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteSolItg")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8815_v == std::string ("opfWriteSolItr")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8815_v == std::string ("ptfWriteTransform")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8815_v == std::string ("ptfWriteSolutions")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8815_v == std::string ("ptfWriteParameters")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8815_v == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8815_v == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8815_v == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8815_v == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8815_v == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8815_v == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8815_v == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8815_v == std::string ("mioCutLipro")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8815_v == std::string ("sensitivityType")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_8815_v == std::string ("mioConstructSol")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8815_v == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8815_v == std::string ("sensitivityAll")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_8815_v == std::string ("logFeasRepair")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8815_v == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8815_v == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8815_v == std::string ("simSolveForm")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_8815_v == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_8815_v == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_8815_v == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8815_v == std::string ("logCheckConvexity")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8815_v == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8815_v == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_8815_v == std::string ("writeXmlMode")))
  {
    {
      return (int)186;
    }
  }
  {}
  if ((_8815_v == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8815_v == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8815_v == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8815_v == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8815_v == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8815_v == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8815_v == std::string ("ng")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8815_v == std::string ("remoteUseCompression")))
  {
    {
      return (int)126;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iparam_value

// Begin mosek.fusion.Parameters.string_to_iomode_value
// Method mosek.fusion.Parameters.string_to_iomode_value @ bld/broby/final/default/src/fusion/Parameters.mbi:827:0-833:1
int32_t mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _8816_v)
{
  if ((_8816_v == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8816_v == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8816_v == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iomode_value

// Begin mosek.fusion.Parameters.string_to_internal_iinf_value
// Method mosek.fusion.Parameters.string_to_internal_iinf_value @ bld/broby/final/default/src/fusion/Parameters.mbi:701:0-826:1
int32_t mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _8817_v)
{
  if ((_8817_v == std::string ("versionMajor")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8817_v == std::string ("versionMinor")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8817_v == std::string ("versionRevision")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveLindepWork")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveLindepPivots")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveOutofspace")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8817_v == std::string ("optObjectiveSense")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8817_v == std::string ("optimizer")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFirRefIter")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorSchurNumDup")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorSchurNumBlk")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorSchurMinBlkDim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorSchurMaxBlkDim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorLDim")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorOrderMlLNumDense")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorOrderMlLMaxHeight")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorOrderGpLMaxHeight")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumcon")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumvar")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumbarvar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumblo")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumbup")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumbfr")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumbfx")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumcone")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumconevar")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumbndcone")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumrqcones")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumqcones")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntNumppowcones")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntMinconedim")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntMaxconedim")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumcon")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumcfr")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumcfx")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumclo")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumcup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumcra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumcnl")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumvar")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumvfr")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumvfx")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumvlo")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumvup")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumvra")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumvnl")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumnza")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumcon")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumcfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumcfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumclo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumcup")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumcra")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumcnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumvar")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumvfr")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumvfx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumvlo")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumvup")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumvra")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumvnl")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveFnumnza")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumElimns")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveEliNumTries")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveLindepNum")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveForceConNum")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveForceVarNum")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8817_v == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveAccNumDupVarInNrmtwo")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveAccNumDoubletonChainInNrmtwo")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorNum")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPrimalHotstartNumBasics")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPrimalHotstartBasisRank")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexDualHotstartNumBasics")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexDualHotstartBasisRank")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8817_v == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8817_v == std::string ("numLuFactorizations")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPwlNumPotential")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPwlNumUsed")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPwlNumVariables")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPwlMinNumBreakpoints")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPwlMaxNumBreakpoints")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPwlMaxNz")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPwlNzReduction")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPrimalNumSetbacks")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexDualNumSetbacks")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPrimalFeasNa")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexDualFeasNa")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexPrimalObjNa")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8817_v == std::string ("simplexDualObjNa")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8817_v == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8817_v == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8817_v == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyNumRow")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyPNumNullRow")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyPNumSingletonCol")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyCrashL11NumRow")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyCrashL22NumRow")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyCrashL33NumRow")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyCrashL33NumCol")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8817_v == std::string ("purifyCrashSingularity")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8817_v == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8817_v == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8817_v == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)66;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_iinf_value

// Begin mosek.fusion.Parameters.string_to_internal_dinf_value
// Method mosek.fusion.Parameters.string_to_internal_dinf_value @ bld/broby/final/default/src/fusion/Parameters.mbi:602:0-700:1
int32_t mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _8818_v)
{
  if ((_8818_v == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8818_v == std::string ("sensitivityDualTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntGfeas")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntMu")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntInitIterTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntCorrectorTime")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntUpdateTime")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateCompressedETime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateSparseTime")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateSparseSyr2kTime")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateSparseDotTime")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateDenseTime")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateDenseSyr2kTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurUpdateDenseDotTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurPushTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntSolveTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntIterRefTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveAcoltTime")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveSetupTime")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveCheckproTime")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveDupconTime")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveDupvarTime")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveFinalTime")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8818_v == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8818_v == std::string ("primalSimplexInftime")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8818_v == std::string ("dualSimplexInftime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntFactorSetupGpOrderPostTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8818_v == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8818_v == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8818_v == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8818_v == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8818_v == std::string ("biPrimalDone")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8818_v == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8818_v == std::string ("simplexPrimalObj")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8818_v == std::string ("simplexPrimalFeas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8818_v == std::string ("simplexDualObj")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8818_v == std::string ("simplexDualFeas")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8818_v == std::string ("biInitialBasisCond")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8818_v == std::string ("biPrimalObj")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8818_v == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8818_v == std::string ("biPrimalFeas")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8818_v == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8818_v == std::string ("intpntPurifyTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_dinf_value

// Begin mosek.fusion.Parameters.string_to_inftype_value
// Method mosek.fusion.Parameters.string_to_inftype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:595:0-601:1
int32_t mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _8819_v)
{
  if ((_8819_v == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8819_v == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8819_v == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_inftype_value

// Begin mosek.fusion.Parameters.string_to_iinfitem_value
// Method mosek.fusion.Parameters.string_to_iinfitem_value @ bld/broby/final/default/src/fusion/Parameters.mbi:485:0-594:1
int32_t mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _8820_v)
{
  if ((_8820_v == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8820_v == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8820_v == std::string ("optimizeResponse")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8820_v == std::string ("presolveNumPrimalPerturbations")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8820_v == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8820_v == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8820_v == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNodeDepth")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumvar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumbin")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumint")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumcont")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumcon")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumcone")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumqcones")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumrqcones")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumpexpcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumdexpcones")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumppowcones")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumdpowcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumbinconevar")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumintconevar")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumcontconevar")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumdjc")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8820_v == std::string ("mioPresolvedNumdjc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8820_v == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8820_v == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8820_v == std::string ("mioInitialFeasibleSolution")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8820_v == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumRelax")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumBranch")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8820_v == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumLiproCuts")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8820_v == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8820_v == std::string ("mioUserObjCut")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8820_v == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8820_v == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8820_v == std::string ("rdProtype")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8820_v == std::string ("rdNumcon")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8820_v == std::string ("rdNumvar")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8820_v == std::string ("rdNumbarvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8820_v == std::string ("rdNumintvar")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8820_v == std::string ("rdNumq")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8820_v == std::string ("simDualDegIter")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8820_v == std::string ("simDualInfIter")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8820_v == std::string ("simDualHotstartLu")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8820_v == std::string ("simPrimalIter")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8820_v == std::string ("simDualIter")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8820_v == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8820_v == std::string ("simPrimalInfIter")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8820_v == std::string ("simPrimalDegIter")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8820_v == std::string ("simPrimalHotstart")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8820_v == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8820_v == std::string ("simDualHotstart")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8820_v == std::string ("solItrProsta")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8820_v == std::string ("solItrSolsta")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8820_v == std::string ("solBasProsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8820_v == std::string ("solBasSolsta")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8820_v == std::string ("solItgProsta")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8820_v == std::string ("solItgSolsta")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8820_v == std::string ("simNumcon")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8820_v == std::string ("simNumvar")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8820_v == std::string ("optNumcon")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8820_v == std::string ("optNumvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8820_v == std::string ("stoNumARealloc")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8820_v == std::string ("rdNumcone")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8820_v == std::string ("simSolveDual")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8820_v == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8820_v == std::string ("purifyDualSuccess")))
  {
    {
      return (int)77;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_iinfitem_value

// Begin mosek.fusion.Parameters.string_to_internal_liinf_value
// Method mosek.fusion.Parameters.string_to_internal_liinf_value @ bld/broby/final/default/src/fusion/Parameters.mbi:471:0-484:1
int32_t mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _8821_v)
{
  if ((_8821_v == std::string ("intpntLenbarvar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8821_v == std::string ("presolveStackSize")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8821_v == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8821_v == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8821_v == std::string ("intpntFactorGpOrderSavedNzs")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8821_v == std::string ("simplexPrimalIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8821_v == std::string ("simplexDualIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8821_v == std::string ("simplexPrimalNumTicks")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8821_v == std::string ("simplexDualNumTicks")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8821_v == std::string ("simplexDualNumIllposedCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_internal_liinf_value

// Begin mosek.fusion.Parameters.string_to_liinfitem_value
// Method mosek.fusion.Parameters.string_to_liinfitem_value @ bld/broby/final/default/src/fusion/Parameters.mbi:446:0-470:1
int32_t mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _8822_v)
{
  if ((_8822_v == std::string ("anaProScalarizedConstraintMatrixNumRows")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8822_v == std::string ("anaProScalarizedConstraintMatrixNumColumns")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8822_v == std::string ("anaProScalarizedConstraintMatrixNumNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8822_v == std::string ("mioAnz")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8822_v == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8822_v == std::string ("mioSimplexIter")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8822_v == std::string ("mioIntpntIter")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8822_v == std::string ("mioNumPrimIllposedCer")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8822_v == std::string ("mioNumDualIllposedCer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8822_v == std::string ("biPrimalIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8822_v == std::string ("biDualIter")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8822_v == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8822_v == std::string ("biCleanDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8822_v == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8822_v == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8822_v == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8822_v == std::string ("rdNumacc")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8822_v == std::string ("rdNumdjc")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8822_v == std::string ("rdNumanz")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8822_v == std::string ("rdNumqnz")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8822_v == std::string ("simplexIter")))
  {
    {
      return (int)20;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_liinfitem_value

// Begin mosek.fusion.Parameters.string_to_dparam_value
// Method mosek.fusion.Parameters.string_to_dparam_value @ bld/broby/final/default/src/fusion/Parameters.mbi:381:0-445:1
int32_t mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _8823_v)
{
  if ((_8823_v == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8823_v == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8823_v == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8823_v == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8823_v == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8823_v == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8823_v == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8823_v == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8823_v == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8823_v == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8823_v == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8823_v == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8823_v == std::string ("optimizerMaxTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8823_v == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8823_v == std::string ("upperObjCut")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8823_v == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8823_v == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8823_v == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8823_v == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8823_v == std::string ("mioMaxTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8823_v == std::string ("mioRelGapConst")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8823_v == std::string ("mioTolRelGap")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8823_v == std::string ("mioTolAbsGap")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8823_v == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8823_v == std::string ("mioDjcMaxBigm")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8823_v == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8823_v == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8823_v == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8823_v == std::string ("presolveTolX")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8823_v == std::string ("presolveTolPrimalInfeasPerturbation")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8823_v == std::string ("presolveTolS")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8823_v == std::string ("presolveTolAij")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8823_v == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8823_v == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8823_v == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8823_v == std::string ("mioTolFeas")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8823_v == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8823_v == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8823_v == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8823_v == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)46;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dparam_value

// Begin mosek.fusion.Parameters.string_to_feature_value
// Method mosek.fusion.Parameters.string_to_feature_value @ bld/broby/final/default/src/fusion/Parameters.mbi:375:0-380:1
int32_t mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _8824_v)
{
  if ((_8824_v == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8824_v == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_feature_value

// Begin mosek.fusion.Parameters.string_to_dinfitem_value
// Method mosek.fusion.Parameters.string_to_dinfitem_value @ bld/broby/final/default/src/fusion/Parameters.mbi:270:0-374:1
int32_t mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _8825_v)
{
  if ((_8825_v == std::string ("anaProScalarizedConstraintMatrixDensity")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8825_v == std::string ("biTime")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8825_v == std::string ("biPrimalTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8825_v == std::string ("biDualTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8825_v == std::string ("biCleanTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8825_v == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8825_v == std::string ("biCleanDualTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntOrderTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntPrimalObj")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntDualObj")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntDualFeas")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntOptStatus")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8825_v == std::string ("simTime")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8825_v == std::string ("simPrimalTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8825_v == std::string ("simDualTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8825_v == std::string ("simObj")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8825_v == std::string ("simFeas")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8825_v == std::string ("mioTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8825_v == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8825_v == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8825_v == std::string ("mioRootTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8825_v == std::string ("toConicTime")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8825_v == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8825_v == std::string ("mioInitialFeasibleSolutionObj")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8825_v == std::string ("mioObjInt")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8825_v == std::string ("mioObjBound")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8825_v == std::string ("mioObjRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8825_v == std::string ("mioObjAbsGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8825_v == std::string ("mioUserObjCut")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8825_v == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8825_v == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8825_v == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8825_v == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8825_v == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8825_v == std::string ("mioLiproSeparationTime")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8825_v == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8825_v == std::string ("mioProbingTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8825_v == std::string ("optimizerTime")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8825_v == std::string ("presolveTime")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8825_v == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8825_v == std::string ("presolveEliTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8825_v == std::string ("presolveLindepTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8825_v == std::string ("readDataTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8825_v == std::string ("writeDataTime")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrPrimalObj")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrPviolcon")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrPviolvar")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrPviolcones")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrPviolacc")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrDualObj")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrDviolcon")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrDviolvar")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrDviolcones")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrDviolacc")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmXc")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmXx")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmBarx")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmY")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmSlc")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmSuc")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmSlx")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmSux")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmSnx")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8825_v == std::string ("solItrNrmBars")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasPviolcon")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasPviolvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasDualObj")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasDviolcon")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasDviolvar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmXc")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmXx")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmBarx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmY")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmSlc")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmSuc")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmSlx")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8825_v == std::string ("solBasNrmSux")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPrimalObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPviolcon")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPviolvar")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPviolcones")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPviolacc")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPviolitg")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgPvioldjc")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgNrmXc")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgNrmXx")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8825_v == std::string ("solItgNrmBarx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8825_v == std::string ("presolveTotalPrimalPerturbation")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8825_v == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8825_v == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8825_v == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8825_v == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8825_v == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8825_v == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8825_v == std::string ("remoteTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dinfitem_value

// Begin mosek.fusion.Parameters.string_to_solformat_value
// Method mosek.fusion.Parameters.string_to_solformat_value @ bld/broby/final/default/src/fusion/Parameters.mbi:262:0-269:1
int32_t mosek::fusion::p_Parameters::string_to_solformat_value(const std::string & _8826_v)
{
  if ((_8826_v == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8826_v == std::string ("b")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8826_v == std::string ("task")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8826_v == std::string ("jsonTask")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_solformat_value

// Begin mosek.fusion.Parameters.string_to_dataformat_value
// Method mosek.fusion.Parameters.string_to_dataformat_value @ bld/broby/final/default/src/fusion/Parameters.mbi:249:0-261:1
int32_t mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _8827_v)
{
  if ((_8827_v == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8827_v == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8827_v == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8827_v == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8827_v == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8827_v == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8827_v == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8827_v == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8827_v == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_dataformat_value

// Begin mosek.fusion.Parameters.string_to_symmattype_value
// Method mosek.fusion.Parameters.string_to_symmattype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:244:0-248:1
int32_t mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _8828_v)
{
  if ((_8828_v == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_symmattype_value

// Begin mosek.fusion.Parameters.string_to_nametype_value
// Method mosek.fusion.Parameters.string_to_nametype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:237:0-243:1
int32_t mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _8829_v)
{
  if ((_8829_v == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8829_v == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8829_v == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_nametype_value

// Begin mosek.fusion.Parameters.string_to_domaintype_value
// Method mosek.fusion.Parameters.string_to_domaintype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:220:0-236:1
int32_t mosek::fusion::p_Parameters::string_to_domaintype_value(const std::string & _8830_v)
{
  if ((_8830_v == std::string ("r")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8830_v == std::string ("rzero")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8830_v == std::string ("rplus")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8830_v == std::string ("rminus")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8830_v == std::string ("quadraticCone")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8830_v == std::string ("rquadraticCone")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8830_v == std::string ("primalExpCone")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8830_v == std::string ("dualExpCone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8830_v == std::string ("primalPowerCone")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8830_v == std::string ("dualPowerCone")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8830_v == std::string ("primalGeoMeanCone")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8830_v == std::string ("dualGeoMeanCone")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8830_v == std::string ("svecPsdCone")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_domaintype_value

// Begin mosek.fusion.Parameters.string_to_conetype_value
// Method mosek.fusion.Parameters.string_to_conetype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:209:0-219:1
int32_t mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _8831_v)
{
  if ((_8831_v == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8831_v == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8831_v == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8831_v == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8831_v == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8831_v == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8831_v == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_conetype_value

// Begin mosek.fusion.Parameters.string_to_compresstype_value
// Method mosek.fusion.Parameters.string_to_compresstype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:201:0-208:1
int32_t mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _8832_v)
{
  if ((_8832_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8832_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8832_v == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8832_v == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_compresstype_value

// Begin mosek.fusion.Parameters.string_to_checkconvexitytype_value
// Method mosek.fusion.Parameters.string_to_checkconvexitytype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:194:0-200:1
int32_t mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _8833_v)
{
  if ((_8833_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8833_v == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8833_v == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_checkconvexitytype_value

// Begin mosek.fusion.Parameters.string_to_callbackcode_value
// Method mosek.fusion.Parameters.string_to_callbackcode_value @ bld/broby/final/default/src/fusion/Parameters.mbi:97:0-193:1
int32_t mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _8834_v)
{
  if ((_8834_v == std::string ("beginRootCutgen")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8834_v == std::string ("imRootCutgen")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8834_v == std::string ("endRootCutgen")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8834_v == std::string ("beginSolveRootRelax")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8834_v == std::string ("endSolveRootRelax")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8834_v == std::string ("beginOptimizer")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8834_v == std::string ("endOptimizer")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8834_v == std::string ("beginPresolve")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8834_v == std::string ("updatePresolve")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8834_v == std::string ("imPresolve")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8834_v == std::string ("endPresolve")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8834_v == std::string ("beginIntpnt")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8834_v == std::string ("intpnt")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8834_v == std::string ("imIntpnt")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8834_v == std::string ("endIntpnt")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8834_v == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8834_v == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8834_v == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8834_v == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8834_v == std::string ("primalSimplex")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8834_v == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8834_v == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8834_v == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8834_v == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8834_v == std::string ("beginPrimalBi")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8834_v == std::string ("imPrimalBi")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8834_v == std::string ("updatePrimalBi")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8834_v == std::string ("endPrimalBi")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8834_v == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8834_v == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8834_v == std::string ("updateDualBi")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8834_v == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8834_v == std::string ("beginSimplexBi")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8834_v == std::string ("imSimplexBi")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8834_v == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8834_v == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8834_v == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8834_v == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8834_v == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8834_v == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8834_v == std::string ("endSimplexBi")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8834_v == std::string ("beginMio")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8834_v == std::string ("imMio")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8834_v == std::string ("newIntMio")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8834_v == std::string ("endMio")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8834_v == std::string ("beginSimplex")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8834_v == std::string ("imSimplex")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8834_v == std::string ("updateSimplex")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8834_v == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8834_v == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8834_v == std::string ("updateDualSimplex")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8834_v == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8834_v == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8834_v == std::string ("imPrimalSimplex")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8834_v == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8834_v == std::string ("endPrimalSimplex")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8834_v == std::string ("endSimplex")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8834_v == std::string ("beginInfeasAna")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8834_v == std::string ("endInfeasAna")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8834_v == std::string ("imPrimalSensivity")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8834_v == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8834_v == std::string ("imMioIntpnt")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8834_v == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8834_v == std::string ("imMioDualSimplex")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8834_v == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8834_v == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8834_v == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8834_v == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8834_v == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8834_v == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8834_v == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8834_v == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8834_v == std::string ("beginLicenseWait")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8834_v == std::string ("endLicenseWait")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8834_v == std::string ("imLicenseWait")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8834_v == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8834_v == std::string ("endQcqoReformulate")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8834_v == std::string ("imQoReformulate")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8834_v == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8834_v == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8834_v == std::string ("beginPrimalRepair")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8834_v == std::string ("endPrimalRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8834_v == std::string ("beginRead")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8834_v == std::string ("imRead")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8834_v == std::string ("endRead")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8834_v == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8834_v == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8834_v == std::string ("readOpfSection")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8834_v == std::string ("imLu")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8834_v == std::string ("imOrder")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8834_v == std::string ("readOpf")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8834_v == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8834_v == std::string ("solvingRemote")))
  {
    {
      return (int)83;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_callbackcode_value

// Begin mosek.fusion.Parameters.string_to_purify_value
// Method mosek.fusion.Parameters.string_to_purify_value @ bld/broby/final/default/src/fusion/Parameters.mbi:88:0-96:1
int32_t mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _8835_v)
{
  if ((_8835_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8835_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8835_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8835_v == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8835_v == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_purify_value

// Begin mosek.fusion.Parameters.string_to_intpnthotstart_value
// Method mosek.fusion.Parameters.string_to_intpnthotstart_value @ bld/broby/final/default/src/fusion/Parameters.mbi:80:0-87:1
int32_t mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _8836_v)
{
  if ((_8836_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8836_v == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8836_v == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8836_v == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_intpnthotstart_value

// Begin mosek.fusion.Parameters.string_to_simhotstart_value
// Method mosek.fusion.Parameters.string_to_simhotstart_value @ bld/broby/final/default/src/fusion/Parameters.mbi:73:0-79:1
int32_t mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _8837_v)
{
  if ((_8837_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8837_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8837_v == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simhotstart_value

// Begin mosek.fusion.Parameters.string_to_simdupvec_value
// Method mosek.fusion.Parameters.string_to_simdupvec_value @ bld/broby/final/default/src/fusion/Parameters.mbi:66:0-72:1
int32_t mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _8838_v)
{
  if ((_8838_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8838_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8838_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simdupvec_value

// Begin mosek.fusion.Parameters.string_to_simreform_value
// Method mosek.fusion.Parameters.string_to_simreform_value @ bld/broby/final/default/src/fusion/Parameters.mbi:58:0-65:1
int32_t mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _8839_v)
{
  if ((_8839_v == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8839_v == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8839_v == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8839_v == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simreform_value

// Begin mosek.fusion.Parameters.string_to_uplo_value
// Method mosek.fusion.Parameters.string_to_uplo_value @ bld/broby/final/default/src/fusion/Parameters.mbi:52:0-57:1
int32_t mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _8840_v)
{
  if ((_8840_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8840_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_uplo_value

// Begin mosek.fusion.Parameters.string_to_transpose_value
// Method mosek.fusion.Parameters.string_to_transpose_value @ bld/broby/final/default/src/fusion/Parameters.mbi:46:0-51:1
int32_t mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _8841_v)
{
  if ((_8841_v == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8841_v == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_transpose_value

// Begin mosek.fusion.Parameters.string_to_simdegen_value
// Method mosek.fusion.Parameters.string_to_simdegen_value @ bld/broby/final/default/src/fusion/Parameters.mbi:37:0-45:1
int32_t mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _8842_v)
{
  if ((_8842_v == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8842_v == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8842_v == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8842_v == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8842_v == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_simdegen_value

// Begin mosek.fusion.Parameters.string_to_mark_value
// Method mosek.fusion.Parameters.string_to_mark_value @ bld/broby/final/default/src/fusion/Parameters.mbi:31:0-36:1
int32_t mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _8843_v)
{
  if ((_8843_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8843_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_mark_value

// Begin mosek.fusion.Parameters.string_to_boundkey_value
// Method mosek.fusion.Parameters.string_to_boundkey_value @ bld/broby/final/default/src/fusion/Parameters.mbi:22:0-30:1
int32_t mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _8844_v)
{
  if ((_8844_v == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8844_v == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8844_v == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8844_v == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8844_v == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_boundkey_value

// Begin mosek.fusion.Parameters.string_to_basindtype_value
// Method mosek.fusion.Parameters.string_to_basindtype_value @ bld/broby/final/default/src/fusion/Parameters.mbi:13:0-21:1
int32_t mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _8845_v)
{
  if ((_8845_v == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8845_v == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8845_v == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8845_v == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8845_v == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_basindtype_value

// Begin mosek.fusion.Parameters.string_to_language_value
// Method mosek.fusion.Parameters.string_to_language_value @ bld/broby/final/default/src/fusion/Parameters.mbi:7:0-12:1
int32_t mosek::fusion::p_Parameters::string_to_language_value(const std::string & _8846_v)
{
  if ((_8846_v == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8846_v == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
// End mosek.fusion.Parameters.string_to_language_value

void mosek::fusion::p_Parameters::destroy()
{
}
void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }
// } class Parameters
